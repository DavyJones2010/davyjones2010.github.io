<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Coders@Work</title>
  
  
  <link href="https://davyjones2010.github.io/atom.xml" rel="self"/>
  
  <link href="https://davyjones2010.github.io/"/>
  <updated>2023-03-05T16:39:20.009Z</updated>
  <id>https://davyjones2010.github.io/</id>
  
  <author>
    <name>Davy Walker</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>revealjs制作PPT笔记</title>
    <link href="https://davyjones2010.github.io/2023-03-05-head-first-revealjs/"/>
    <id>https://davyjones2010.github.io/2023-03-05-head-first-revealjs/</id>
    <published>2023-03-05T09:28:22.000Z</published>
    <updated>2023-03-05T16:39:20.009Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近在B站学习蒋炎岩老师的OS: </p><ul><li>内容自是不必多说, 干货满满.</li><li>对课件PPT更是十分欣赏. </li><li><a href="https://jyywiki.cn/OS/2022/slides/3.slides#/">实际样例</a></li></ul><h2 id="特点1-导航清晰"><a href="#特点1-导航清晰" class="headerlink" title="特点1: 导航清晰"></a>特点1: 导航清晰</h2><p>风格简约专业:</p><ul><li>横向导航区分大类</li><li>纵向导航来区分小类</li></ul><p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202303052225650.png"></p><h2 id="特点2-管理轻量"><a href="#特点2-管理轻量" class="headerlink" title="特点2: 管理轻量"></a>特点2: 管理轻量</h2><ul><li>基于代码生成与管理(支持Markdown), 不使用笨重的Microsoft PPT. </li><li>可以使用git进行版本管理(例如showcase中本文就会转成ppt).</li></ul><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><blockquote><p>revealjs + pandoc 组合神器</p></blockquote><ul><li><a href="https://revealjs.com/markdown/">revealjs</a></li><li><a href="https://pandoc.org/installing.html">pandoc</a></li></ul><p>刚好自己平时要做PPT, 但作为程序员, 又十分抵触内容与样式不分离的方式, 制作起来也耗时.<br>借鉴这种方案, 轻松写出专业且简约的PPT.</p><h1 id="安装-amp-配置"><a href="#安装-amp-配置" class="headerlink" title="安装&amp;配置"></a>安装&amp;配置</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>revealjs: <a href="https://revealjs.com/installation/#full-setup">安装手册</a></li><li>pandoc: 把markdown转成revealjs的html, <a href="https://pandoc.org/installing.html">安装手册</a></li><li><a href="https://tailwindcss.com/">tailwind css</a>: JYY老师的, 个人还在研究中</li></ul><h2 id="revealjs个人配置"><a href="#revealjs个人配置" class="headerlink" title="revealjs个人配置"></a>revealjs个人配置</h2><ul><li>Enable <a href="https://revealjs.com/slide-numbers/">Slide Numbers</a></li><li>Disable <a href="https://revealjs.com/config/">Vertical centering of slides</a></li><li>Disable <a href="https://revealjs.com/config/">controlsTutorial</a></li></ul><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><ul><li><p>revealjs</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 默认8000端口</span><span class="token function">npm</span> start<span class="token comment"># 指定8001端口</span><span class="token function">npm</span> start -- --port<span class="token operator">=</span><span class="token number">8001</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>pandoc</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># md to html. 注意需要设置 --slide-level=2 参数. 一级标题设置horizontal大类, 二级标题内容为vertical子类. </span>pandoc id-token-in-wf.md -o id-token-in-wf.html -t revealjs -s -V <span class="token assign-left variable">theme</span><span class="token operator">=</span>white --slide-level<span class="token operator">=</span><span class="token number">2</span><span class="token comment"># 所有revealjs的参数, 都可以通过 -V xxx=xxx 来设置</span>pandoc id-token-in-wf.md -o id-token-in-wf.html -t revealjs -s -V <span class="token assign-left variable">theme</span><span class="token operator">=</span>white -V <span class="token assign-left variable">center</span><span class="token operator">=</span>false -V <span class="token assign-left variable">controlsTutorial</span><span class="token operator">=</span>false -V <span class="token assign-left variable">slideNumber</span><span class="token operator">=</span>true --slide-level<span class="token operator">=</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul><li><code>o</code> 进入缩略图模式.</li><li><code>b</code> 屏蔽当前PPT</li><li><code>f</code> 进入全屏模式</li><li><code>ctrl+shift+f</code>: 全局搜索</li></ul><h1 id="showcase"><a href="#showcase" class="headerlink" title="showcase"></a>showcase</h1><h2 id="self-explained"><a href="#self-explained" class="headerlink" title="self-explained"></a>self-explained</h2><p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202303052309110.png"></p><h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><h2 id="样式优化"><a href="#样式优化" class="headerlink" title="样式优化"></a>样式优化</h2><p>与JYY老师相比, 页面还是过于简陋</p><ul><li>Header: 类似markdown的分隔符</li><li>Image: 图片有些显示不全❗</li><li>Align: 字默认居中, 需要<font color='red'><strong>居左</strong></font></li><li>Syntax Highlighting: 现在<strong>太丑</strong></li><li>Citation&#x2F;Quote: 也<strong>太丑</strong></li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;最近在B站学习蒋炎岩老师的OS: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内容自是不必多说, 干货满满.&lt;/li&gt;
&lt;li&gt;对课件PPT更是十分欣赏. &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://jyywiki.cn/OS/2022/slides/3.slides#/&quot;&gt;实际样例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;特点1-导航清晰&quot;&gt;&lt;a href=&quot;#特点1-导航清晰&quot; class=&quot;headerlink&quot; title=&quot;特点1: 导航清晰&quot;&gt;&lt;/a&gt;特点1: 导航清晰&lt;/h2&gt;&lt;p&gt;风格简约专业:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;横向导航区分大类&lt;/li&gt;
&lt;li&gt;纵向导航来区分小类&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&quot;https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202303052225650.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;特点2-管理轻量&quot;&gt;&lt;a href=&quot;#特点2-管理轻量&quot; class=&quot;headerlink&quot; title=&quot;特点2: 管理轻量&quot;&gt;&lt;/a&gt;特点2: 管理轻量&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;基于代码生成与管理(支持Markdown), 不使用笨重的Microsoft PPT. &lt;/li&gt;
&lt;li&gt;可以使用git进行版本管理(例如showcase中本文就会转成ppt).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;实现方式&quot;&gt;&lt;a href=&quot;#实现方式&quot; class=&quot;headerlink&quot; title=&quot;实现方式&quot;&gt;&lt;/a&gt;实现方式&lt;/h2&gt;</summary>
    
    
    
    <category term="工程提效工具" scheme="https://davyjones2010.github.io/categories/%E5%B7%A5%E7%A8%8B%E6%8F%90%E6%95%88%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="tools" scheme="https://davyjones2010.github.io/tags/tools/"/>
    
    <category term="ppt" scheme="https://davyjones2010.github.io/tags/ppt/"/>
    
    <category term="markdown" scheme="https://davyjones2010.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>关于JVM DNS Cache问题的研究</title>
    <link href="https://davyjones2010.github.io/2023-03-04-java-jvm-dns-caching/"/>
    <id>https://davyjones2010.github.io/2023-03-04-java-jvm-dns-caching/</id>
    <published>2023-03-04T02:59:10.000Z</published>
    <updated>2023-03-05T16:39:20.009Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>某次jstack发现应用卡在DNS解析上, 发现应用为了做负载均衡, 故意将JVM DNS Cache失效时间设置为了0, 即永不缓存.<br>这才知道原来还有这个参数. 因此借此机会就查阅资料, 详细研究下.</p><h1 id="Java-DNS流程"><a href="#Java-DNS流程" class="headerlink" title="Java DNS流程"></a>Java DNS流程</h1><h2 id="流程详解"><a href="#流程详解" class="headerlink" title="流程详解"></a>流程详解</h2><p>当我们调用如下方式解析域名时, 经过了如下流程: </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> hostname <span class="token operator">=</span> <span class="token string">"www.baidu.com"</span><span class="token punctuation">;</span><span class="token class-name">InetAddress</span> addr <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span>hostname<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202303041111414.png"></p><p>看了上图, 估计会有几个疑问: </p><ol><li>通常域名会对应多个IP, 为啥Java中<code>InetAddress.getByName</code>解析只返回一个IP? 具体是怎么实现的?</li><li>DNS具体实现是怎么做的呢?<br>带着疑问往下看吧.</li></ol><h2 id="具体解析实现"><a href="#具体解析实现" class="headerlink" title="具体解析实现"></a>具体解析实现</h2><p>具体解析实现, 参见上图的<code>getaddrinfo</code>. 该方法是POSIX协议的标准, 由各个操作系统来实现.<br><a href="https://jvns.ca/blog/2022/02/23/getaddrinfo-is-kind-of-weird/">详细点此</a></p><p>getaddrinfo is part of a library called libc which is the standard C library.<br>There are at least 3 versions of libc:</p><ul><li>glibc (GNU libc)</li><li>musl libc</li><li>the Mac OS version of libc (I don’t know if this has a name)</li></ul><p>真正的实现就更多啦. 有些在 <code>getaddrinfo</code> 里有缓存, 有些没有, 这点要依据自己的平台注意研究.<br>之所以我们设置, 是因为线上使用了自研的dnsClient, 相当于重写了<code>getaddrinfo</code>, 是没有缓存的. 因此JVM设置缓存未0也就能生效.  </p><h2 id="重要参数"><a href="#重要参数" class="headerlink" title="重要参数"></a>重要参数</h2><p>注意上图中, “in cache?” 代表的是域名对应的IP是否已经在JVM的缓存中了.<br>既然涉及到缓存, 就必然涉及到失效时间的问题. 因此JVM提供了如下2个参数:</p><ul><li>networkaddress.cache.ttl (default: -1): 代表DNS解析成功时, hostName-&gt;ip 的缓存失效时间. 默认-1代表永不失效. </li><li>networkaddress.cache.negative.ttl (default: 10): 代表DNS解析失败时, hostName-&gt;空缓存 的失效时间. 默认为10s. 就是为了做空查询保护.</li></ul><h2 id="如何设置上述参数"><a href="#如何设置上述参数" class="headerlink" title="如何设置上述参数"></a>如何设置上述参数</h2><h3 id="方案1-JVM启动参数"><a href="#方案1-JVM启动参数" class="headerlink" title="方案1: JVM启动参数"></a>方案1: JVM启动参数</h3><p>在应用启动时, 设置启动参数:<br><code>-Dsun.net.inetaddr.ttl=0 -Dsun.net.inetaddr.negative.ttl=0</code></p><h3 id="方案2-应用启动后设置变量"><a href="#方案2-应用启动后设置变量" class="headerlink" title="方案2: 应用启动后设置变量"></a>方案2: 应用启动后设置变量</h3><p>在应用启动后, 设置参数: (注意参数名与启动参数名称不同)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span>Security</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"networkaddress.cache.ttl"</span> <span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span>Security</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"networkaddress.cache.negative.ttl"</span> <span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="方案3-设置JVM配置"><a href="#方案3-设置JVM配置" class="headerlink" title="方案3: 设置JVM配置"></a>方案3: 设置JVM配置</h3><p>编辑<code>$JRE_HOME/lib/security/java.security</code> 文件, 增加如下配置: </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">networkaddress<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>ttl <span class="token operator">=</span> <span class="token number">0</span>networkaddress<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>negative<span class="token punctuation">.</span>ttl <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="问题重现"><a href="#问题重现" class="headerlink" title="问题重现"></a>问题重现</h1><p>为了模拟重现当时网络不稳定的情况, 设置某个不存在的域名, 这样解析需要花时间. </p><ul><li><a href="https://github.com/DavyJones2010/test-core/blob/master/src/test/java/edu/xmu/test/dns/DnsCachingTest.java">测试代码</a></li></ul><h2 id="不禁用negative"><a href="#不禁用negative" class="headerlink" title="不禁用negative"></a>不禁用negative</h2><p>发现大部分线程卡在访问DNS缓存上, 达不到重现的效果:<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202303041108536.png"></p><h2 id="禁用negative"><a href="#禁用negative" class="headerlink" title="禁用negative"></a>禁用negative</h2><p>这下就重现的当时的情况, 大部分线程都卡在真正解析域名上(或者叫<code>getaddrinfo</code>系统调用上):<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202303041147157.png"></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="关于Java-DNS解析实现的吐槽"><a href="#关于Java-DNS解析实现的吐槽" class="headerlink" title="关于Java DNS解析实现的吐槽"></a>关于Java DNS解析实现的吐槽</h2><p>关于Java域名解析问题, 即<code>InetAddress.getByName()</code>实现, 发现了很有趣的一篇小文:<br><a href="https://blog.bmarwell.de/2020/09/23/javas-dns-resolution-is-so-90ies.html">Java’s DNS resolution is so 90ies! Java的DNS解析实现仍然停留在90年代!</a></p><h3 id="存在3个问题"><a href="#存在3个问题" class="headerlink" title="存在3个问题"></a>存在3个问题</h3><ol><li>首先, 虽然DNS会返回多个IP, 但<code>InetAddress.getByName()</code>只会返回第一个IP. </li><li>其次, 返回的IP并且不会保证这个IP能不能连通.</li><li>最后, <code>InetAddress</code> 所有实现方法都是<code>non-public</code>的, 导致扩展&#x2F;修复极为困难!<blockquote><p>Wow, that is remarkably simple! How do we know that this IP will be reachable? Well, we do not! If there are more IPs in the answer section, they are just being ignored.</p></blockquote></li></ol><h3 id="作者的解决方案"><a href="#作者的解决方案" class="headerlink" title="作者的解决方案"></a>作者的解决方案</h3><ol><li>通过JavaAgent解决了<code>InetAddress</code>难以扩展的问题</li><li>通过类似python中的方案, DNS获取到IpList之后, 会尝试连接ip 3次(timeout 100ms), 直到获取可以连通的ip, 再返回.</li><li>详细代码参见: [bmarwell&#x2F;nameserviceagent]<a href="https://github.com/bmarwell/nameserviceagent">https://github.com/bmarwell/nameserviceagent</a><br>我就喜欢这种能喷能干的实干家:)</li></ol><h2 id="关于配置JVM-DNS缓存生效情况问题"><a href="#关于配置JVM-DNS缓存生效情况问题" class="headerlink" title="关于配置JVM DNS缓存生效情况问题"></a>关于配置JVM DNS缓存生效情况问题</h2><ol><li><p>实际在Mac上设置JVM DNS缓存都为0, 发现并不生效. 例如<code>www.baidu.com</code>其实返回了2个IP, 但测试代码一直返回1个.<br>这是由于 Mac OS has DNS caching, 即把上述 <code>getaddrinfo</code> 的系统调用也进行了缓存. </p></li><li><p>而Linux上 <code>getaddrinfo</code> 不一定会有缓存, 除非使用<code>systemd-resolved</code>等工具</p><blockquote><p>Linux doesn’t necessarily unless you use systemd-resolved or something</p></blockquote></li></ol><p>所以在配置JVM DNS参数前, 也请务必确认好自己的OS环境以及各自实现.</p><h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h1><ul><li><a href="https://maheshsenniappan.medium.com/host-name-resolution-in-java-80301fea465a">Host name resolution in Java</a></li><li><a href="https://stackoverflow.com/questions/1256556/how-to-make-java-honor-the-dns-caching-timeout">How to make Java honor the DNS Caching Timeout?</a></li><li><a href="https://jvns.ca/blog/2022/02/23/getaddrinfo-is-kind-of-weird/">Some things about getaddrinfo that surprised me</a></li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;某次jstack发现应用卡在DNS解析上, 发现应用为了做负载均衡, 故意将JVM DNS Cache失效时间设置为了0, 即永不缓存.&lt;br&gt;这才知道原来还有这个参数. 因此借此机会就查阅资料, 详细研究下.&lt;/p&gt;
&lt;h1 id=&quot;Java-DNS流程&quot;&gt;&lt;a href=&quot;#Java-DNS流程&quot; class=&quot;headerlink&quot; title=&quot;Java DNS流程&quot;&gt;&lt;/a&gt;Java DNS流程&lt;/h1&gt;&lt;h2 id=&quot;流程详解&quot;&gt;&lt;a href=&quot;#流程详解&quot; class=&quot;headerlink&quot; title=&quot;流程详解&quot;&gt;&lt;/a&gt;流程详解&lt;/h2&gt;&lt;p&gt;当我们调用如下方式解析域名时, 经过了如下流程: &lt;/p&gt;
&lt;pre class=&quot;line-numbers language-java&quot; data-language=&quot;java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; hostname &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;www.baidu.com&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;InetAddress&lt;/span&gt; addr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;InetAddress&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getByName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;hostname&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&quot;https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202303041111414.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;看了上图, 估计会有几个疑问: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通常域名会对应多个IP, 为啥Java中&lt;code&gt;InetAddress.getByName&lt;/code&gt;解析只返回一个IP? 具体是怎么实现的?&lt;/li&gt;
&lt;li&gt;DNS具体实现是怎么做的呢?&lt;br&gt;带着疑问往下看吧.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;具体解析实现&quot;&gt;&lt;a href=&quot;#具体解析实现&quot; class=&quot;headerlink&quot; title=&quot;具体解析实现&quot;&gt;&lt;/a&gt;具体解析实现&lt;/h2&gt;</summary>
    
    
    
    
    <category term="java" scheme="https://davyjones2010.github.io/tags/java/"/>
    
    <category term="dns" scheme="https://davyjones2010.github.io/tags/dns/"/>
    
    <category term="jvm" scheme="https://davyjones2010.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>Java线程BLOCKED与WAITING状态深入研究</title>
    <link href="https://davyjones2010.github.io/2023-02-25-java-thread-sync-deep-dive/"/>
    <id>https://davyjones2010.github.io/2023-02-25-java-thread-sync-deep-dive/</id>
    <published>2023-02-25T09:01:22.000Z</published>
    <updated>2023-03-05T16:39:20.009Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>上次机房断网的jstack分析之后, 发现其实个人并没有深入理解Java中线程的如下两个状态的区别: </p><ul><li>“BLOCKED”</li><li>“WAITING”<br>或者, 都是线程被阻塞无法运行(让出了CPU的时间片)的状态:</li><li>问题1: 这两个状态具体有啥区别? </li><li>问题2: JVM为什么要进行上边两个状态的区分? 为什么不只用一个状态标识?</li></ul><p>先不急着回答这个问题, 我们从一个例子出发:  </p><h1 id="生产者-amp-消费者例子"><a href="#生产者-amp-消费者例子" class="headerlink" title="生产者&amp;消费者例子"></a>生产者&amp;消费者例子</h1><p>先来一道面试里时常问到的题目:<br><code>两个线程, 分别扮演消费者&amp;生产者的角色, 假设队列为1, 无限循环. 如何写?</code></p><h2 id="代码样例"><a href="#代码样例" class="headerlink" title="代码样例"></a>代码样例</h2><ul><li>完整代码参见: <a href="https://github.com/DavyJones2010/test-core/blob/master/src/test/java/edu/xmu/test/concurrent/ProducerConsumerTest.java">ProducerConsumerTest.java</a></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// consumer</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>isEmpty<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"consumer is waiting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"start consuming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10000L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finished consuming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        isEmpty <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// producer</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>isEmpty<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"producer is waiting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"start producing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10000L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        isEmpty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finished producing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="变体写法-1"><a href="#变体写法-1" class="headerlink" title="变体写法-1"></a>变体写法-1</h2><p>如果在调用<code>lock.notify()</code>之后再生产或者再消费, 会怎么样?<br>即代码变体如下: </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// consumer</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>isEmpty<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"consumer is waiting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        lock<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"start consuming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10000L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finished consuming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        isEmpty <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// producer</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>isEmpty<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"producer is waiting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        lock<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"start producing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10000L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        isEmpty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finished producing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可以自己尝试下, 代码结果仍然是正常的, 即与正常写法完全没有区别. </p></blockquote><p>这是怎么回事儿? </p><ul><li>producer调用<code>lock.notify()</code>的时候是直接把consumer唤醒开始执行了么? 但producer生产的代码在<code>lock.notify()</code>之后, 那么<code>isEmpty=false</code>是否会执行到?</li><li>如果<code>isEmpty=false</code>执行不到, 而是在consumer侧执行, 那么consumer也还是无法开始消费(因为无法走出<code>while(isEmpty)</code>这个判断循环), 结果应该是consumer仍然卡在<code>wait()</code>上. </li><li>如果<code>isEmpty=true</code>执行到, 那么是在什么时候唤醒了consumer呢?<br>好复杂, <strong>代码的执行链路到底是怎样的??</strong></li></ul><h2 id="wait-x2F-notify详解"><a href="#wait-x2F-notify详解" class="headerlink" title="wait&#x2F;notify详解"></a>wait&#x2F;notify详解</h2><p>要搞清楚代码链路是怎样的, 首先我们需要清楚调用wait&#x2F;notify时到底发生了什么?</p><blockquote><p>由于wait&#x2F;notify都是native的代码, 阅读不易. 因此下文主要内容&#x2F;概念都是参照<a href="https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html">Java SE Specification</a>, 进行个人理解与研究.</p></blockquote><p>先给出三个重要的概念: </p><ul><li>object monitor: 每个java对象都有一个object monitor</li><li>blocked set: 每个java对象都有一个blocked set</li><li>wait set: 每个java对象都有一个wait set</li></ul><p>再来说明下三个概念实际是怎么使用的:</p><ol><li>如下简单代码, 实际线程执行时发生了如下事情: <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">synchronized</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// do smt</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li><p>线程执行<code>synchronized(o)</code>会导致: </p><ul><li>线程尝试去抢占<code>object monitor</code>; </li><li>如果抢占到, 则该线程拥有了该<code>object monitor</code>, 进行临界区代码执行. </li><li>如果抢占不到, 则该线程被放入该对象的<code>blocked set</code>中. 具体 <ol><li>什么时候唤醒: 可以简化认为为JVM会在底层时刻轮询<code>object monitor</code>占用情况, 一旦<code>object monitor</code>被释放, 立刻从<code>blocked set</code>中找个线程开始执行.</li><li>如果多个线程都在<code>block set</code>中, 该唤醒哪个, 由JVM来决定(TODO: 这个具体待探究, 不影响本文).</li></ol></li></ul></li><li><p>线程退出<code>synchronized(o)</code>临界区会导致: </p><ul><li>当前线程释放掉<code>object monitor</code></li><li>JVM轮询到<code>object monitor</code>处于空闲, 立刻从<code>blocked set</code>中取出一个线程, 让该线程开始临界区代码执行.</li></ul></li></ul><ol start="2"><li>再加上简单的wait&#x2F;notify:<br>如下, 一个最简单的producer&#x2F;consumer程序: <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// consumer</span><span class="token class-name">Object</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">synchronized</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    o<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// consume</span><span class="token punctuation">&#125;</span><span class="token comment">// produce</span><span class="token keyword">synchronized</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// produce</span>    o<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><blockquote><p>先假设consumer先执行</p></blockquote><ul><li><p>consumer执行链路: </p><ol><li><code>synchronized(o)</code>: 获取到<code>object monitor</code>, 开始临界区代码执行.</li><li><code>o.wait()</code>: 虽然可以拆解为如下几步, 但wait本身是原子操作 <ol><li>把consumer线程放入到该对象的 <code>wait set</code> 中</li><li>释放掉<code>object monitor</code></li><li>JVM将producer从<code>block set</code>中取出, (触发JVM&#x2F;OS的轮询, 引发producer获取到<code>object monitor</code>从而进入临界区)</li></ol></li></ol></li><li><p>producer执行链路:</p><ol><li><code>synchronized(o)</code>: 获取不到<code>object monitor</code>, 被放入<code>block set</code>中 </li><li>consumer退出临界区, producer被自动从<code>block set</code>中取出, 获取到<code>object monitor</code>从而进入临界区 (与consumer执行链路的2.3步骤重叠)</li><li><code>o.notify()</code>:</li></ol><ul><li>producer并不会因为<code>notify()</code>而释放掉<code>object monitor</code>: <mark><strong><code>notify</code>并不会导致当前线程释放掉<code>object monitor</code>!</strong></mark>, 而是继续往下执行代码.</li><li>JVM将consumer从<code>wait set</code>中取出, 尝试获得<code>object monitor</code></li><li>由于producer此时并没有释放掉<code>object monitor</code>, 因此JVM就把consumer放入到了<code>block set</code>中(即从<code>wait set</code>移到了<code>block set</code>中)</li></ul><ol start="4"><li>退出临界区:</li></ol><ul><li>producer释放掉<code>object monitor</code></li><li>JVM将consumer从<code>block set</code>中取出</li><li>触发JVM内部的轮询, 引发consumer获取到<code>object monitor</code>, 从而继续<code>o.wait()</code>之后的代码片段执行</li></ul></li><li><p>consumer继续执行, 注意:</p><ol><li>此时consumer是<mark>继续从<code>object.wait()</code>之后的代码开始执行. (即之前中断的地方继续).</mark> </li><li>而<mark>不是重新通过<code>synchronized(o)</code>抢<code>object monitor</code>, 然后从头开始执行临界区代码.</mark> 因为内部JVM已经把<code>object monitor</code>给了consumer了.</li><li>退出临界区:<ul><li>consumer释放掉<code>object monitor</code></li><li>JVM尝试从<code>block set</code>中取出线程, 由于<code>block set</code>为空, nothing happens</li></ul></li></ol></li><li><p>终态: <strong>producer执行完成, consumer也执行完成.</strong></p></li></ul><blockquote><p>再假设producer先执行</p></blockquote><ul><li><p>producer执行链路:</p><ol><li><code>synchronized(o)</code>: producer获取到<code>object monitor</code>, 开始临界区代码执行.</li></ol></li><li><p>consumer执行链路:</p><ol><li><code>synchronized(o)</code>: consumer获取不到<code>object monitor</code>, 被放入<code>block set</code>中</li></ol></li><li><p>producer执行链路:</p><ol><li><code>o.notify()</code>: <ol><li>producer不会因为<code>notify()</code>而释放掉<code>object monitor</code></li><li>JVM从<code>wait set</code>中寻找一个线程, 移出<code>wait set</code>, 并放入到<code>blocked set</code>中. 由于此时<code>wait set</code>为空(consumer在<code>block set</code>中). 因此nothing happens</li></ol></li><li>退出临界区:<ol><li>producer释放掉<code>object monitor</code></li><li>JVM将consumer从<code>block set</code>中取出, 由于<code>object monitor</code>已经被producer释放, 因此consumer直接获取到<code>object monitor</code>, 开始执行临界区代码  (consumer状态 <code>block set</code> -&gt; <code>RUNNABLE</code>)</li></ol></li></ol></li><li><p>consumer执行链路:</p><ol><li><code>o.wait()</code>: <ol><li>把consumer线程放入到该对象的 <code>wait set</code> 中</li><li>释放掉<code>object monitor</code></li><li>JVM尝试从<code>block set</code>中取出一个线程, 由于此时<code>block set</code>为空, 因此nothing happens</li></ol></li></ol></li><li><p>终态: <strong>producer执行完成, consumer一直卡在<code>WAITING</code>状态.</strong></p></li></ul><h2 id="wait-x2F-notify-x2F-synchronized总结"><a href="#wait-x2F-notify-x2F-synchronized总结" class="headerlink" title="wait&#x2F;notify&#x2F;synchronized总结"></a>wait&#x2F;notify&#x2F;synchronized总结</h2><h3 id="调用-synchronized-object-时会发生"><a href="#调用-synchronized-object-时会发生" class="headerlink" title="调用 synchronized(object) 时会发生:"></a>调用 synchronized(object) 时会发生:</h3><ol><li>当前线程尝试抢占 <code>object monitor</code></li><li>如果抢占到, 则进入临界区.</li><li>如果抢占不到, 把当前线程放入到<code>blocked set</code>中. JVM会监控<code>object monitor</code>, 当<code>object monitor</code>归还时, 从<code>blocked set</code>中挑选一个线程继续代码执行(可能是进入临界区, 也可能是继续之前中断的代码)</li></ol><h3 id="出-synchronized-object-时会发生"><a href="#出-synchronized-object-时会发生" class="headerlink" title="出 synchronized(object) 时会发生:"></a>出 synchronized(object) 时会发生:</h3><ol><li>释放掉<code>object monitor</code>;</li><li>JVM会监控<code>object monitor</code>, 当它归还时, 从<code>blocked set</code>中挑选一个线程继续代码执行(可能是进入临界区, 也可能是继续之前中断的代码)</li></ol><h3 id="调用-object-wait-时会发生"><a href="#调用-object-wait-时会发生" class="headerlink" title="调用 object.wait() 时会发生:"></a>调用 object.wait() 时会发生:</h3><ol><li>把当前线程放入到 <code>wait set</code> 中</li><li>释放掉<code>object monitor</code></li><li>JVM会监控<code>object monitor</code>, 当它归还时, 从<code>blocked set</code>中挑选一个线程继续代码执行(可能是进入临界区, 也可能是继续之前中断的代码)</li></ol><h3 id="调用-object-notify-时会发生"><a href="#调用-object-notify-时会发生" class="headerlink" title="调用 object.notify() 时会发生:"></a>调用 object.notify() 时会发生:</h3><ol><li>不会因为<code>notify()</code>而释放掉<code>object monitor</code>, 而是继续往下执行代码.</li><li>JVM从<code>wait set</code>中寻找一个线程, 移出<code>wait set</code>, 并放入到<code>blocked set</code>中.(JVM会持续监控<code>object monitor</code>状态)</li></ol><h3 id="线程在不同位置的不同状态"><a href="#线程在不同位置的不同状态" class="headerlink" title="线程在不同位置的不同状态"></a>线程在不同位置的不同状态</h3><p>因此可以根据线程所处的位置不同, 来区分不同状态: </p><ul><li>在<code>wait set</code>里: <code>WAITING</code>状态</li><li>在<code>blocked set</code>里: <code>BLOCKED</code>状态</li></ul><p>因此也就从根本上解释了本文开头的第一个问题 <code>问题1: 这两个状态具体有啥区别?</code></p><h3 id="总结线程可能的状态变化"><a href="#总结线程可能的状态变化" class="headerlink" title="总结线程可能的状态变化"></a>总结线程可能的状态变化</h3><ul><li><code>RUNNABLE</code> -&gt; <code>block set</code>: 卡在synchronized</li><li><code>RUNNABLE</code> -&gt; <code>wait set</code>: 卡在synchronized里wait</li><li><code>wait set</code>  -&gt; <code>block set</code>: wait之后被其他线程调用的notify唤醒</li><li><code>block set</code> -&gt; <code>wait set</code>: 不存在该链路, 可能当前线程在block set, 但被赋予object monitor之后, 肯定进入了RUNNABLE状态. 可能RUNNABLE之后主动调用了wait, 但也不是直接从<code>blocked set</code>到<code>wait set</code></li><li><code>block set</code> -&gt; <code>RUNNABLE</code>: 其他线程wait之后, 自动释放掉object monitor, 当前线程可以继续执行</li></ul><pre class="mermaid">stateDiagram    [*] --> CREATED: new Thread    CREATED --> RUNNABLE: Thread.start()    RUNNABLE --> BLOCKED: synchronized()    RUNNABLE --> WAITING: wait()    BLOCKED --> RUNNABLE: 其他线程wait()    WAITING --> BLOCKED: 其他线程调用notify()    RUNNABLE --> DESTROYED: run执行结束, 或者抛出异常退出    DESTROYED --> [*]: 结束</pre><h2 id="wait-x2F-notify-x2F-synchronized实战"><a href="#wait-x2F-notify-x2F-synchronized实战" class="headerlink" title="wait&#x2F;notify&#x2F;synchronized实战"></a>wait&#x2F;notify&#x2F;synchronized实战</h2><p>此时就很容易根据三个概念的流转, 来分析下上文的 <code>变体写法-1</code> 的执行流程, 也就明白为啥也可以work了.<br>本文就不再赘述了.</p><h2 id="变体写法-2"><a href="#变体写法-2" class="headerlink" title="变体写法-2"></a>变体写法-2</h2><p>如下例子中, 基于<code>变体写法-1</code>把<code>synchronized(lock)</code>放在<code>while(true)</code>外层, 会正常执行么? 可以先试着自己分析下(详细分析如下). </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// consumer</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 1. 获取object monitor</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>isEmpty<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"consumer is waiting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 3. 把自己放到wait set里, 释放object monitor; 5. JVM把consumer从wait set里移出, 移入到block set里; 8. JVM把consumer从block set里移出, consumer获取object monitor</span>        <span class="token punctuation">&#125;</span>        lock<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9. 通知JVM把producer从wait set里移出, 移入到block set里; consumer继续往下执行(仍然保有object monitor)</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"start consuming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10000L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finished consuming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        isEmpty <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 10. consumer消费完成, 继续执行到第3步, 依次循环.</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// producer</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 2. 把自己放到block set里, 等待获取object monitor; 4. 从block set移出, 获取 object monitor</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>isEmpty<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"producer is waiting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             lock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7. 把自己放到wait set里, 释放object monitor; 9. JVM把producer从wait set里移出, 移入到block set里; 4.2 producer从block set移出, 获取 object monitor</span>        <span class="token punctuation">&#125;</span>        lock<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5. 通知JVM把consumer从wait set里移出, 移入到block set里; producer继续往下执行(仍然保有object monitor)</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"start producing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10000L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        isEmpty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">// 6. producer开始生产</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finished producing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>答案揭晓: 没啥区别, 正常执行.</p></blockquote><h1 id="实际生产应用"><a href="#实际生产应用" class="headerlink" title="实际生产应用"></a>实际生产应用</h1><p>&#x2F;&#x2F; TODO: </p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="WAITING与TIMED-WAITING区别"><a href="#WAITING与TIMED-WAITING区别" class="headerlink" title="WAITING与TIMED_WAITING区别"></a>WAITING与TIMED_WAITING区别</h2><h2 id="Object-wait-与-Thread-sleep-的区别"><a href="#Object-wait-与-Thread-sleep-的区别" class="headerlink" title="Object.wait() 与 Thread.sleep() 的区别"></a>Object.wait() 与 Thread.sleep() 的区别</h2><p>又是面试常问的一道题.<br>通过上边分析可知</p><p>行为上区别: </p><ul><li>Object.wait()之后:<ol><li>把当前线程移到wait set里 </li><li>释放掉object monitor</li><li>线程暂停执行, 让出CPU时间片</li></ol></li><li>Thread.sleep()之后:<ol><li>线程暂停执行, 让出CPU时间片; 不会有1, 2的操作.</li></ol></li></ul><p>结果上区别: </p><ul><li>Object.wait()之后: 线程进入 WAITING (on object monitor) 或者 TIMED_WAITING (on object monitor) 状态 </li><li>Thread.sleep()之后: 线程进入 TIMED_WAITING (sleeping) 状态</li></ul><h2 id="其他几种情况"><a href="#其他几种情况" class="headerlink" title="其他几种情况"></a>其他几种情况</h2><p>除了本文, 其实还会有多种情况会导致线程进入<code>BLOCKED</code>, <code>WAITING</code>状态, 如下:<br><img data-src="https://www.baeldung.com/wp-content/uploads/2018/02/Life_cycle_of_a_Thread_in_Java.jpg"></p><p>但本质已经讲清楚了, 大家其实可以看下<code>Thread.join()</code>的源代码, 分析下当主线程调用<code>t.join()</code>与<code>t.join(30000L)</code>时, 主线程的状态应该是什么?</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">MyThread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// run()里边就是</span>    t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//    t.join();</span><span class="token comment">//    t.join(30000L);</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>答案: t.join()时, 主线程是WAITING (on object monitor); t.join(30000L)时, 主线程状态是TIMED_WAITING(on object monitor) </p></blockquote><p>原因: 源代码分析即可<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202302252202526.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>几点感想: </p><ol><li>借此机会, 解释了自己内心以来的长久的疑惑, 感觉很通透. <ol><li>根本原因: JVM&#x2F;OS封装了太多东西, 例如本文内容, 如果不知道有上边三种东西, 根本无法under the hood彻底解释清楚问题.</li><li>最好方式: 还是自己去翻源代码; </li><li>其次: 就是看官方手册. 这次官方doc其实讲得也非常清晰.</li><li>最后: 工科一定要去实践, 自己写一些小demo打打jstack很多问题一下子就清晰了.</li></ol></li><li>针对Java中线程状态切换, 很多资料其实讲得并不好, 认识都很浅显, 甚至有极大的误导性. 大家引以为戒.<br>例如: <a href="https://www.javatpoint.com/thread-states-in-java">Thread States in Java</a> 的状态机图, 存在如下几个问题: <ol><li>在实际生产中, 我们的jstack里, 永远不会看到<code>RUNNING</code>状态的线程, 都是处于<code>RUNNABLE</code>的. 参见 <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/troubleshoot/tooldescr034.html">JavaSE Spec</a></li><li>没有详细区分<code>BLOCKED</code>与<code>WAITING</code>这两种状态, 而这两个状态也是我们在jstack里常见的, 也是大家都会有疑惑的, 也是希望本文给大家阐述清晰的.</li></ol></li></ol><p>例如: <a href="https://dzone.com/articles/difference-between-blocked-waiting-timed-waiting-e">Difference Between BLOCKED, WAITING, And TIMED_WAITING? Explained Through Real-Life Examples</a><br>    1. 虽然是基于生活的情况进行类比, 但还是没有根本性第解释清楚这三种状态的根本区别. 看完仍是一头雾水.<br>    2. <strong>一定要对于这种使用类比来解释技术问题的文章抱有高度警惕</strong>. 例如把docker类比集装箱, 把HTTP协议类比俩人谈话等. 都是know what的, 但know why与know how的知识才是我们真正应该掌握的.</p><h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h1><ul><li><a href="https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html">Java Language Specification - Chapter 17. Threads and Locks</a></li><li><a href="https://stackoverflow.com/questions/39927299/in-java-if-a-thread-calls-notify-before-wait-how-does-this-not-cause-the-se">SoF上一个有意思的wait-notify问题</a></li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;上次机房断网的jstack分析之后, 发现其实个人并没有深入理解Java中线程的如下两个状态的区别: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“BLOCKED”&lt;/li&gt;
&lt;li&gt;“WAITING”&lt;br&gt;或者, 都是线程被阻塞无法运行(让出了CPU的时间片)的状态:&lt;/li&gt;
&lt;li&gt;问题1: 这两个状态具体有啥区别? &lt;/li&gt;
&lt;li&gt;问题2: JVM为什么要进行上边两个状态的区分? 为什么不只用一个状态标识?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;先不急着回答这个问题, 我们从一个例子出发:  &lt;/p&gt;
&lt;h1 id=&quot;生产者-amp-消费者例子&quot;&gt;&lt;a href=&quot;#生产者-amp-消费者例子&quot; class=&quot;headerlink&quot; title=&quot;生产者&amp;amp;消费者例子&quot;&gt;&lt;/a&gt;生产者&amp;amp;消费者例子&lt;/h1&gt;&lt;p&gt;先来一道面试里时常问到的题目:&lt;br&gt;&lt;code&gt;两个线程, 分别扮演消费者&amp;amp;生产者的角色, 假设队列为1, 无限循环. 如何写?&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;代码样例&quot;&gt;&lt;a href=&quot;#代码样例&quot; class=&quot;headerlink&quot; title=&quot;代码样例&quot;&gt;&lt;/a&gt;代码样例&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;完整代码参见: &lt;a href=&quot;https://github.com/DavyJones2010/test-core/blob/master/src/test/java/edu/xmu/test/concurrent/ProducerConsumerTest.java&quot;&gt;ProducerConsumerTest.java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-java&quot; data-language=&quot;java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// consumer&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lock&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;isEmpty&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;consumer is waiting&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            lock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;start consuming&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10000L&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;finished consuming&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        isEmpty &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        lock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;notify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// producer&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lock&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;isEmpty&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;producer is waiting&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            lock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;start producing&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10000L&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        isEmpty &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;finished producing&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        lock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;notify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;变体写法-1&quot;&gt;&lt;a href=&quot;#变体写法-1&quot; class=&quot;headerlink&quot; title=&quot;变体写法-1&quot;&gt;&lt;/a&gt;变体写法-1&lt;/h2&gt;</summary>
    
    
    
    
    <category term="concurrent" scheme="https://davyjones2010.github.io/tags/concurrent/"/>
    
    <category term="java" scheme="https://davyjones2010.github.io/tags/java/"/>
    
    <category term="javase" scheme="https://davyjones2010.github.io/tags/javase/"/>
    
    <category term="thread" scheme="https://davyjones2010.github.io/tags/thread/"/>
    
    <category term="sync" scheme="https://davyjones2010.github.io/tags/sync/"/>
    
    <category term="know-why" scheme="https://davyjones2010.github.io/tags/know-why/"/>
    
  </entry>
  
  <entry>
    <title>一本书读懂财报笔记</title>
    <link href="https://davyjones2010.github.io/2023-02-24-finance-report-reading-notes/"/>
    <id>https://davyjones2010.github.io/2023-02-24-finance-report-reading-notes/</id>
    <published>2023-02-24T16:00:16.000Z</published>
    <updated>2023-03-05T16:39:20.009Z</updated>
    
    <content type="html"><![CDATA[<div class="markmap-container" style="height:500px">  <svg data="{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;一本书读懂财报&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;企业活动&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;经营活动&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;生产产品&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;销售产品&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;回收货款&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[13,14]},&quot;v&quot;:&quot;投资活动&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[15,16]},&quot;v&quot;:&quot;融资活动&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[17,18]},&quot;v&quot;:&quot;企业目的&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[19,20]},&quot;v&quot;:&quot;盈利&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[21,22]},&quot;v&quot;:&quot;第一张表: 资产负债表&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[23,24]},&quot;v&quot;:&quot;资产(Assets)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[25,26]},&quot;v&quot;:&quot;流动资产(Current Assets, 流动性从高到低)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[27,28]},&quot;v&quot;:&quot;货币资金(Cash)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[29,30]},&quot;v&quot;:&quot;钱, 放在银行里, 放在公司里&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[31,32]},&quot;v&quot;:&quot;应收账款(Accounts Receivable)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[33,34]},&quot;v&quot;:&quot;在销售产品的时候，时常有卖掉产品却收不到钱的情况发生，这到底是怎么回事呢？可能是因为买方说不能马上付钱给卖方，而卖方又不想失去这个客户，所以愿意承担风险，让买方延迟付款。也有可能是因为，同类产品的售卖者很多，为了和别人竞争，卖方必须向买方承诺一些优惠条件&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[35,36]},&quot;v&quot;:&quot;其他应收款(Other Receivables)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[37,38]},&quot;v&quot;:&quot;“小张的好朋友小红的公司临时周转不开，小红就向小张借了100万元，并承诺两周之后把钱还给小张。这笔钱显然不是一项投资，或者说不是一项对外的贷款，因为小张没有向小红收取任何利息；但小张又必须在两周之后收回向小红的借款，所以说这笔钱也是一笔应收款。这种类型的应收款跟一般的应收账款是不一样的，它不是销售产品所得，所以是“其他应收款”。”&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[39,40]},&quot;v&quot;:&quot;“在现实中，确实有一些公司的其他应收款高达几十个亿。”&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[43,44]},&quot;v&quot;:&quot;预付账款(Prepaid Accounts)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[45,46]},&quot;v&quot;:&quot;“比如说货品相当紧缺，卖方可能会要求买方预付一笔定金，甚至要求买方预付所有的货款；而买方也想要切切实实地把东西握在手里，因而也愿意提前把钱付给卖方。这样就产生了预付账款。”&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[47,48]},&quot;v&quot;:&quot;存货(Inventory)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[49,50]},&quot;v&quot;:&quot;在产品(Work in Process)&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[51,52]},&quot;v&quot;:&quot;产成品(Finished Goods)&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[53,54]},&quot;v&quot;:&quot;存货(Inventory)&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[55,56]},&quot;v&quot;:&quot;待摊费用&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[57,58]},&quot;v&quot;:&quot;其他流动资产&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[59,60]},&quot;v&quot;:&quot;非流动资产(Non-current Assets)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[61,62]},&quot;v&quot;:&quot;长期投资(Long-term Investments)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[63,64]},&quot;v&quot;:&quot;参股别的公司&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[65,66]},&quot;v&quot;:&quot;长期持有的股权和债券&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[67,68]},&quot;v&quot;:&quot;固定资产(Fixed Assets)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[69,70]},&quot;v&quot;:&quot;例如设备, 厂房, 汽车, 电脑&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[71,72]},&quot;v&quot;:&quot;使用时间长, 具有较高的价值&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[73,74]},&quot;v&quot;:&quot;在使用过程中, 固定资产会逐渐损耗, 价值也会随着损耗逐渐降低. 即”折旧”(Depreciation)&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[77,78]},&quot;v&quot;:&quot;无形资产(Intangible Assets)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[79,80]},&quot;v&quot;:&quot;专利权, 专有技术, 版权, 商标权, 商标权, 商誉&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[81,82]},&quot;v&quot;:&quot;土地使用权(Land Usage Rights)&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[87,88]},&quot;v&quot;:&quot;其他非流动资产&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[89,90]},&quot;v&quot;:&quot;生物资产(Biological Assets)&quot;}]}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[93,94]},&quot;v&quot;:&quot;负债(Liability)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[95,96]},&quot;v&quot;:&quot;流动负债&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[97,98]},&quot;v&quot;:&quot;短期借款(Short-term Borrowing)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[99,100]},&quot;v&quot;:&quot;还款期限在一年以下的借款&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[101,102]},&quot;v&quot;:&quot;应付账款&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[103,104]},&quot;v&quot;:&quot;其他应付款&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[105,106]},&quot;v&quot;:&quot;预收账款&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[107,108]},&quot;v&quot;:&quot;其他应付款&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[109,110]},&quot;v&quot;:&quot;非流动负债&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[111,112]},&quot;v&quot;:&quot;长期借款(Long-term Borrowing)&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[113,114]},&quot;v&quot;:&quot;应付债券&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[115,116]},&quot;v&quot;:&quot;长期应付款&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[117,118]},&quot;v&quot;:&quot;其他非流动负债&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[119,120]},&quot;v&quot;:&quot;所有者权益&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[121,122]},&quot;v&quot;:&quot;实收资本&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[123,124]},&quot;v&quot;:&quot;资本公积&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[125,126]},&quot;v&quot;:&quot;盈余公积&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[127,128]},&quot;v&quot;:&quot;留存收益&quot;}]}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[129,130]},&quot;v&quot;:&quot;第二张表: 利润表&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[131,132]},&quot;v&quot;:&quot;像一个漏斗, 但利润不等同于现金流&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[133,134]},&quot;v&quot;:&quot;营业收入&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[135,136]},&quot;v&quot;:&quot;营业收入: 卖出产品所获得的的收益&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[137,138]},&quot;v&quot;:&quot;-营业成本&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[139,140]},&quot;v&quot;:&quot;营业成本: 卖出的产品成本&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[141,142]},&quot;v&quot;:&quot;-营业税金及附加&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[143,144]},&quot;v&quot;:&quot;营业税&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[145,146]},&quot;v&quot;:&quot;消费税&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[147,148]},&quot;v&quot;:&quot;城市维护建设税&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[149,150]},&quot;v&quot;:&quot;资源税&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[151,152]},&quot;v&quot;:&quot;教育附加费&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[153,154]},&quot;v&quot;:&quot;…&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[155,156]},&quot;v&quot;:&quot;-营业费用(Operating Expenses)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[157,158]},&quot;v&quot;:&quot;“在生产和销售过程中产生的费用就是营业费用。比如说把货物从仓库运到销售场所的运费、仓储费、广告费和其他为了促销而支出的一些费用、销售人员的工资、门店的店租抑或是折旧——视乎门店店面的所有权是否在企业自己手上，等等。”&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[159,160]},&quot;v&quot;:&quot;-管理费用(General and Administrative Expense)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[161,162]},&quot;v&quot;:&quot;“管理费用就是与企业的管理环节有关的一切费用。比如说管理部门各种人员的工资，比如说行政开支、办公楼的折旧等，都是管理费用。因此，不同类型工作人员的工资往往属于不同的项目——销售人员的工资属于营业费用，而管理人员的工资属于管理费用。不同类型的固定资产的折旧也属于不同的项目，门店的折旧属于营业费用，办公楼的折旧属于管理费用，而厂房的折旧属于生产成本。”&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[163,164]},&quot;v&quot;:&quot;-财务费用&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[165,166]},&quot;v&quot;:&quot;例如公司筹集了大量资金, 这些资金是通过股权融资获得, 因此借款利息为0; 这些资金存在银行, 产生存款利息=100w; 因此财务费用=-100w; 因此营业收入-财务费用=营业收入+100w; 是增加利润的.&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[167,168]},&quot;v&quot;:&quot;=借款利息-存款利息&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[169,170]},&quot;v&quot;:&quot;-资产减值损失(Inpairment Loss of Assets Impairment)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[171,172]},&quot;v&quot;:&quot;大部分资产按照”历史成本”来机架, 如果资产发生了减值, 需要扣除该部分减值, 利润也会相应受到影响.这就是”资产减值损失”&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[173,174]},&quot;v&quot;:&quot;+投资收益(Investment Income)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[175,176]},&quot;v&quot;:&quot;“比如小张公司的子公司给小张的公司分红了，那这笔钱就是小张公司的投资收益。实际上，投资收益可以说是小张以成立子公司这种特殊方式进行的营业活动，所以仍旧是营业利润当中的一部分。”&quot;}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[177,178]},&quot;v&quot;:&quot;营业利润(Operating Profit)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[179,180]},&quot;v&quot;:&quot;=营业收入-营业成本-营业税金及附加-三项费用-资产减值损失+投资收益&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[181,182]},&quot;v&quot;:&quot;营业外&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[183,184]},&quot;v&quot;:&quot;营业外收入(Non-operating Revenues)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[185,186]},&quot;v&quot;:&quot;卖掉了公司一台闲置设备, 由此获得的收益为”营业外收入”, 因为公司经营的目的是通过”出售产品赚钱”, 而不是通过出售自己的固定资产(设备)赚钱 获得的赔偿和奖励&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[187,188]},&quot;v&quot;:&quot;营业外支出(Non-operating Expenses)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[189,190]},&quot;v&quot;:&quot;因违规遭受处罚, 或者火灾, 水灾, 地震所导致的损失&quot;}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[191,192]},&quot;v&quot;:&quot;利润总额&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[193,194]},&quot;v&quot;:&quot;=营业利润+营业外收入-营业外之处+补贴收入+汇兑损益&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[195,196]},&quot;v&quot;:&quot;净利润(Net Profit)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[197,198]},&quot;v&quot;:&quot;净利润是一个企业经营的最终成果. 净利润多, 经营效益就好; 净利润少, 经营效益就差&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[199,200]},&quot;v&quot;:&quot;=利润总额-所得税&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[201,202]},&quot;v&quot;:&quot;所得税&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[203,204]},&quot;v&quot;:&quot;中国企业所得税税率一般在25%; 但这里的25%是”应税所得”的25%; 而非”利润总额”的25%; 利润总额: 以会计准则为基础计算出来 应税所得: 以税法为基础计算出来&quot;}]}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[205,206]},&quot;v&quot;:&quot;其他知识&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[207,208]},&quot;v&quot;:&quot;资产与费用的区别&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[209,210]},&quot;v&quot;:&quot;如果这笔钱可以换来一个对将来有用的东西, 那就是资产. 例如6万元买来的能够使用6个月的办公用品. 6个月之后, 这笔钱就变成了费用.&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[211,212]},&quot;v&quot;:&quot;如果这笔钱花完就完了, 那它就是费用. 例如预付的房租, 预付的广告费用.&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[213,214]},&quot;v&quot;:&quot;很多情况下, 资产和费用只存在时间概念上的不同.&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[215,216]},&quot;v&quot;:&quot;资产计价方式&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[217,218]},&quot;v&quot;:&quot;历史成本/原始成本/实际成本(Historical Cost)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[219,220]},&quot;v&quot;:&quot;例如1台使用了5年的生产设备, 如何计价?&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[221,222]},&quot;v&quot;:&quot;如果资产升值, 则忽略, 如果资产减值,就把这个减值记录下来.&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[223,224]},&quot;v&quot;:&quot;只要没有新的交易发生, 资产的价值只能减少, 不能增加&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[225,226]},&quot;v&quot;:&quot;“在历史成本的计价体系下，增加资产价值的唯一途径是发生一个新的交易”&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[227,228]},&quot;v&quot;:&quot;公允价值/公允市价/公允价格(Fair Value)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[229,230]},&quot;v&quot;:&quot;金融资产(Financial Assets)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[231,232]},&quot;v&quot;:&quot;例如股票&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[233,234]},&quot;v&quot;:&quot;房地产&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[235,236]},&quot;v&quot;:&quot;必须是投资性房地产&quot;}]}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[237,238]},&quot;v&quot;:&quot;利润分类&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[239,240]},&quot;v&quot;:&quot;毛利润&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[241,242]},&quot;v&quot;:&quot;=营业收入-营业成本&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[243,244]},&quot;v&quot;:&quot;净利润&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[245,246]},&quot;v&quot;:&quot;=毛利润-营业税金及附加-三项费用&quot;}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[247,248]},&quot;v&quot;:&quot;税种分类&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[249,250]},&quot;v&quot;:&quot;价内税(Tax Included in Price)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[251,252]},&quot;v&quot;:&quot;如营业税(Business Tax)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[253,254]},&quot;v&quot;:&quot;“国家对工商营利事业按营业额征收的税, 属于流转课税的一类”&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[255,256]},&quot;v&quot;:&quot;例如去饭店吃饭, 支付了100元, 但实际饭店需要按照100元给税务部分支付一定比例税费.&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[257,258]},&quot;v&quot;:&quot;由经营者承担&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[259,260]},&quot;v&quot;:&quot;因此在经营者的利润表中, 只能出现”营业税税收成本”, 而不会出现”增值税税收成本”&quot;}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[261,262]},&quot;v&quot;:&quot;价外税(Tax Excluded in Price)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[263,264]},&quot;v&quot;:&quot;如增值税(Value-added Tax)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[265,266]},&quot;v&quot;:&quot;“一种销售税，是消费者承担的税费”&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[267,268]},&quot;v&quot;:&quot;由消费者承担&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[269,270]},&quot;v&quot;:&quot;消费者在购买东西时, 已经把税金交给了卖方, 卖方也已经替税务局从消费者这里收了税, 是注定要付给税务局的. 因此对于经营者来说, 这笔钱算是”负债”&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[271,272]},&quot;v&quot;:&quot;因此增值税体现在资产负债表中”应交税金”这一项目中&quot;}]}]}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[273,274]},&quot;v&quot;:&quot;财务分析方法&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[275,276]},&quot;v&quot;:&quot;同型分析&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[277,278]},&quot;v&quot;:&quot;趋势分析(Trend Analysis)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[279,280]},&quot;v&quot;:&quot;使用同型分析与自己过去相比, 就叫趋势分析&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[281,282]},&quot;v&quot;:&quot;比较分析(Comparing Analysis)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[283,284]},&quot;v&quot;:&quot;与别的企业相比, 无论是竞争对手还是行业的标杆企业或者行业内的平均水平, 就叫”比较分析”&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[285,286]},&quot;v&quot;:&quot;毛利率(Gross Margin)&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[287,288]},&quot;v&quot;:&quot;净利率(Net Profit Margin)&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[289,290]},&quot;v&quot;:&quot;总资产报酬率(Return on Assets)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[291,292]},&quot;v&quot;:&quot;=收入/总资产*净利润/收入=净利润/总资产&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[293,294]},&quot;v&quot;:&quot;投资回报率(Return on Investment, ROI)&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[295,296]},&quot;v&quot;:&quot;净资产收益率(Return on Equity, ROE)&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[297,298]},&quot;v&quot;:&quot;周转率&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[299,300]},&quot;v&quot;:&quot;在一年之内, 企业的资产一共转了多少圈&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[301,302]},&quot;v&quot;:&quot;周转率越过, 赚的钱也就越多&quot;}]}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[303,304]},&quot;v&quot;:&quot;偿债能力(Solvency)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[305,306]},&quot;v&quot;:&quot;短期偿债能力&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[307,308]},&quot;v&quot;:&quot;流动比率(Current Ratio)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[309,310]},&quot;v&quot;:&quot;健康公司大多在3~4之间&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[311,312]},&quot;v&quot;:&quot;大多数中国企业流动比率在1到2之间&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[317,318]},&quot;v&quot;:&quot;速动比率(Quick Ratio/Acid-test Ratio)&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[319,320]},&quot;v&quot;:&quot;长期偿债能力&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[321,322]},&quot;v&quot;:&quot;偿还利息能力&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[323,324]},&quot;v&quot;:&quot;息税前收益(Earnings before Interest and Tax, EBIT)&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[325,326]},&quot;v&quot;:&quot;利息收入倍数(Times Interest Earned/Interest Production Multiples)&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[329,330]},&quot;v&quot;:&quot;偿还本金能力&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[331,332]},&quot;v&quot;:&quot;资产负债率(Liability/Asset Ratio), 又称财务杠杆(Financial Leverage)&quot;}]}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[335,336]},&quot;v&quot;:&quot;五力图(Five Forces Model)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[337,338]},&quot;v&quot;:&quot;即五力分析模型&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[339,340]},&quot;v&quot;:&quot;现有企业之间的竞争&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[341,342]},&quot;v&quot;:&quot;行业增长&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[343,344]},&quot;v&quot;:&quot;集中&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[345,346]},&quot;v&quot;:&quot;多样化竞争&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[347,348]},&quot;v&quot;:&quot;转换成本&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[349,350]},&quot;v&quot;:&quot;规模经济型&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[351,352]},&quot;v&quot;:&quot;学习成本&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[353,354]},&quot;v&quot;:&quot;固定/可变成本&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[355,356]},&quot;v&quot;:&quot;产能过剩&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[357,358]},&quot;v&quot;:&quot;退出成本&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[359,360]},&quot;v&quot;:&quot;新进入者的威胁&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[361,362]},&quot;v&quot;:&quot;替代产品的威胁&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[363,364]},&quot;v&quot;:&quot;购买者的议价能力&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[365,366]},&quot;v&quot;:&quot;供货方的议价能力&quot;}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[367,368]},&quot;v&quot;:&quot;企业战略定位&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[369,370]},&quot;v&quot;:&quot;成本领先战略(Overall Cost Leadership)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[371,372]},&quot;v&quot;:&quot;主动牺牲效益, 来换取效率的战略, 是”效率制胜”的战略.&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[373,374]},&quot;v&quot;:&quot;毛利率低&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[375,376]},&quot;v&quot;:&quot;高周转&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[377,378]},&quot;v&quot;:&quot;差异化战略(Differentiation Strategy)&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[379,380]},&quot;v&quot;:&quot;样例&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[381,382]},&quot;v&quot;:&quot;竞争性制造业企业&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[383,384]},&quot;v&quot;:&quot;固定资产值最高&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[385,386]},&quot;v&quot;:&quot;资金密集型的制造企业&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[387,388]},&quot;v&quot;:&quot;其次是营收款项&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[389,390]},&quot;v&quot;:&quot;为了销售自己的产品, 允许客户暂缓支付货款, 因此应该面临压力.&quot;}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[391,392]},&quot;v&quot;:&quot;服务型企业&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[393,394]},&quot;v&quot;:&quot;无形资产占比大&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[395,396]},&quot;v&quot;:&quot;人也可以作为无形资产, 例如俱乐部花2000w与球星签了3年买断协议&quot;}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[397,398]},&quot;v&quot;:&quot;营业利润与营业外收入&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[399,400]},&quot;v&quot;:&quot;A公司赚了1000w, 900w来自营业利润, 100w来自营业外收入&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[401,402]},&quot;v&quot;:&quot;B公司赚了1000w, 100w来自营业利润, 900w来自营业外收入&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[403,404]},&quot;v&quot;:&quot;三张表关注点&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[405,406]},&quot;v&quot;:&quot;现金流量表&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[407,408]},&quot;v&quot;:&quot;银行贷款关注&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[409,410]},&quot;v&quot;:&quot;去银行贷款, 银行关注该表. 银行从来都不希望企业还不起钱, 也不希望企业通过变卖自己的资产来还债. 它希望企业手头永远有大量的现金.&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[411,412]},&quot;v&quot;:&quot;利润表&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[413,414]},&quot;v&quot;:&quot;投资者关注&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[415,416]},&quot;v&quot;:&quot;利润表将可持续的利润(经营利润) 和不可持续的利润(营业外收支, 补贴收入, 汇兑损益) 分别列示 不仅展示企业现在赚了多少钱, 还能使读报表的人形成对企业未来盈利的预期.&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[417,418]},&quot;v&quot;:&quot;资产负债表&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[419,420]},&quot;v&quot;:&quot;企业并购关注&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[421,422]},&quot;v&quot;:&quot;因为 “股东权益=资产-负债” 恒等式&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[423,424]},&quot;v&quot;:&quot;资产有高估的风险&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[425,426]},&quot;v&quot;:&quot;负债有低估的风险&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[427,428]},&quot;v&quot;:&quot;或有负债: C公司为B公司做了担保, B公司跑路&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[429,430]},&quot;v&quot;:&quot;表外负债:&quot;}]}]}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[431,432]},&quot;v&quot;:&quot;第三张表: 现金流量表&quot;}]}"></svg></div><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">
&lt;div class=&quot;markmap-container&quot; style=&quot;height:500px&quot;&gt;
  &lt;svg data=&quot;{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:1,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[1,2]},&amp;quot;v&amp;quot;:&amp;quot;一本书读懂财报&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:2,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[3,4]},&amp;quot;v&amp;quot;:&amp;quot;企业活动&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:3,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[5,6]},&amp;quot;v&amp;quot;:&amp;quot;经营活动&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[7,8]},&amp;quot;v&amp;quot;:&amp;quot;生产产品&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[9,10]},&amp;quot;v&amp;quot;:&amp;quot;销售产品&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[11,12]},&amp;quot;v&amp;quot;:&amp;quot;回收货款&amp;quot;}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:3,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[13,14]},&amp;quot;v&amp;quot;:&amp;quot;投资活动&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:3,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[15,16]},&amp;quot;v&amp;quot;:&amp;quot;融资活动&amp;quot;}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:2,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[17,18]},&amp;quot;v&amp;quot;:&amp;quot;企业目的&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:3,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[19,20]},&amp;quot;v&amp;quot;:&amp;quot;盈利&amp;quot;}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:2,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[21,22]},&amp;quot;v&amp;quot;:&amp;quot;第一张表: 资产负债表&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:3,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[23,24]},&amp;quot;v&amp;quot;:&amp;quot;资产(Assets)&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[25,26]},&amp;quot;v&amp;quot;:&amp;quot;流动资产(Current Assets, 流动性从高到低)&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[27,28]},&amp;quot;v&amp;quot;:&amp;quot;货币资金(Cash)&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:6,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[29,30]},&amp;quot;v&amp;quot;:&amp;quot;钱, 放在银行里, 放在公司里&amp;quot;}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[31,32]},&amp;quot;v&amp;quot;:&amp;quot;应收账款(Accounts Receivable)&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:6,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[33,34]},&amp;quot;v&amp;quot;:&amp;quot;在销售产品的时候，时常有卖掉产品却收不到钱的情况发生，这到底是怎么回事呢？可能是因为买方说不能马上付钱给卖方，而卖方又不想失去这个客户，所以愿意承担风险，让买方延迟付款。也有可能是因为，同类产品的售卖者很多，为了和别人竞争，卖方必须向买方承诺一些优惠条件&amp;quot;}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[35,36]},&amp;quot;v&amp;quot;:&amp;quot;其他应收款(Other Receivables)&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:6,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[37,38]},&amp;quot;v&amp;quot;:&amp;quot;“小张的好朋友小红的公司临时周转不开，小红就向小张借了100万元，并承诺两周之后把钱还给小张。这笔钱显然不是一项投资，或者说不是一项对外的贷款，因为小张没有向小红收取任何利息；但小张又必须在两周之后收回向小红的借款，所以说这笔钱也是一笔应收款。这种类型的应收款跟一般的应收账款是不一样的，它不是销售产品所得，所以是“其他应收款”。”&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:6,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[39,40]},&amp;quot;v&amp;quot;:&amp;quot;“在现实中，确实有一些公司的其他应收款高达几十个亿。”&amp;quot;}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[43,44]},&amp;quot;v&amp;quot;:&amp;quot;预付账款(Prepaid Accounts)&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:6,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[45,46]},&amp;quot;v&amp;quot;:&amp;quot;“比如说货品相当紧缺，卖方可能会要求买方预付一笔定金，甚至要求买方预付所有的货款；而买方也想要切切实实地把东西握在手里，因而也愿意提前把钱付给卖方。这样就产生了预付账款。”&amp;quot;}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[47,48]},&amp;quot;v&amp;quot;:&amp;quot;存货(Inventory)&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:6,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[49,50]},&amp;quot;v&amp;quot;:&amp;quot;在产品(Work in Process)&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:6,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[51,52]},&amp;quot;v&amp;quot;:&amp;quot;产成品(Finished Goods)&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:6,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[53,54]},&amp;quot;v&amp;quot;:&amp;quot;存货(Inventory)&amp;quot;}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[55,56]},&amp;quot;v&amp;quot;:&amp;quot;待摊费用&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[57,58]},&amp;quot;v&amp;quot;:&amp;quot;其他流动资产&amp;quot;}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[59,60]},&amp;quot;v&amp;quot;:&amp;quot;非流动资产(Non-current Assets)&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[61,62]},&amp;quot;v&amp;quot;:&amp;quot;长期投资(Long-term Investments)&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:6,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[63,64]},&amp;quot;v&amp;quot;:&amp;quot;参股别的公司&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:6,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[65,66]},&amp;quot;v&amp;quot;:&amp;quot;长期持有的股权和债券&amp;quot;}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[67,68]},&amp;quot;v&amp;quot;:&amp;quot;固定资产(Fixed Assets)&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:6,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[69,70]},&amp;quot;v&amp;quot;:&amp;quot;例如设备, 厂房, 汽车, 电脑&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:6,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[71,72]},&amp;quot;v&amp;quot;:&amp;quot;使用时间长, 具有较高的价值&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:6,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[73,74]},&amp;quot;v&amp;quot;:&amp;quot;在使用过程中, 固定资产会逐渐损耗, 价值也会随着损耗逐渐降低. 即”折旧”(Depreciation)&amp;quot;}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[77,78]},&amp;quot;v&amp;quot;:&amp;quot;无形资产(Intangible Assets)&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:6,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[79,80]},&amp;quot;v&amp;quot;:&amp;quot;专利权, 专有技术, 版权, 商标权, 商标权, 商誉&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:6,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[81,82]},&amp;quot;v&amp;quot;:&amp;quot;土地使用权(Land Usage Rights)&amp;quot;}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[87,88]},&amp;quot;v&amp;quot;:&amp;quot;其他非流动资产&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:6,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[89,90]},&amp;quot;v&amp;quot;:&amp;quot;生物资产(Biological Assets)&amp;quot;}]}]}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:3,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[93,94]},&amp;quot;v&amp;quot;:&amp;quot;负债(Liability)&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[95,96]},&amp;quot;v&amp;quot;:&amp;quot;流动负债&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[97,98]},&amp;quot;v&amp;quot;:&amp;quot;短期借款(Short-term Borrowing)&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:6,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[99,100]},&amp;quot;v&amp;quot;:&amp;quot;还款期限在一年以下的借款&amp;quot;}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[101,102]},&amp;quot;v&amp;quot;:&amp;quot;应付账款&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[103,104]},&amp;quot;v&amp;quot;:&amp;quot;其他应付款&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[105,106]},&amp;quot;v&amp;quot;:&amp;quot;预收账款&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[107,108]},&amp;quot;v&amp;quot;:&amp;quot;其他应付款&amp;quot;}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[109,110]},&amp;quot;v&amp;quot;:&amp;quot;非流动负债&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[111,112]},&amp;quot;v&amp;quot;:&amp;quot;长期借款(Long-term Borrowing)&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[113,114]},&amp;quot;v&amp;quot;:&amp;quot;应付债券&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[115,116]},&amp;quot;v&amp;quot;:&amp;quot;长期应付款&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[117,118]},&amp;quot;v&amp;quot;:&amp;quot;其他非流动负债&amp;quot;}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[119,120]},&amp;quot;v&amp;quot;:&amp;quot;所有者权益&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[121,122]},&amp;quot;v&amp;quot;:&amp;quot;实收资本&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[123,124]},&amp;quot;v&amp;quot;:&amp;quot;资本公积&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[125,126]},&amp;quot;v&amp;quot;:&amp;quot;盈余公积&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[127,128]},&amp;quot;v&amp;quot;:&amp;quot;留存收益&amp;quot;}]}]}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:2,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[129,130]},&amp;quot;v&amp;quot;:&amp;quot;第二张表: 利润表&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:3,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[131,132]},&amp;quot;v&amp;quot;:&amp;quot;像一个漏斗, 但利润不等同于现金流&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:3,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[133,134]},&amp;quot;v&amp;quot;:&amp;quot;营业收入&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[135,136]},&amp;quot;v&amp;quot;:&amp;quot;营业收入: 卖出产品所获得的的收益&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[137,138]},&amp;quot;v&amp;quot;:&amp;quot;-营业成本&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[139,140]},&amp;quot;v&amp;quot;:&amp;quot;营业成本: 卖出的产品成本&amp;quot;}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[141,142]},&amp;quot;v&amp;quot;:&amp;quot;-营业税金及附加&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[143,144]},&amp;quot;v&amp;quot;:&amp;quot;营业税&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[145,146]},&amp;quot;v&amp;quot;:&amp;quot;消费税&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[147,148]},&amp;quot;v&amp;quot;:&amp;quot;城市维护建设税&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[149,150]},&amp;quot;v&amp;quot;:&amp;quot;资源税&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[151,152]},&amp;quot;v&amp;quot;:&amp;quot;教育附加费&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[153,154]},&amp;quot;v&amp;quot;:&amp;quot;…&amp;quot;}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[155,156]},&amp;quot;v&amp;quot;:&amp;quot;-营业费用(Operating Expenses)&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[157,158]},&amp;quot;v&amp;quot;:&amp;quot;“在生产和销售过程中产生的费用就是营业费用。比如说把货物从仓库运到销售场所的运费、仓储费、广告费和其他为了促销而支出的一些费用、销售人员的工资、门店的店租抑或是折旧——视乎门店店面的所有权是否在企业自己手上，等等。”&amp;quot;}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[159,160]},&amp;quot;v&amp;quot;:&amp;quot;-管理费用(General and Administrative Expense)&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[161,162]},&amp;quot;v&amp;quot;:&amp;quot;“管理费用就是与企业的管理环节有关的一切费用。比如说管理部门各种人员的工资，比如说行政开支、办公楼的折旧等，都是管理费用。因此，不同类型工作人员的工资往往属于不同的项目——销售人员的工资属于营业费用，而管理人员的工资属于管理费用。不同类型的固定资产的折旧也属于不同的项目，门店的折旧属于营业费用，办公楼的折旧属于管理费用，而厂房的折旧属于生产成本。”&amp;quot;}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[163,164]},&amp;quot;v&amp;quot;:&amp;quot;-财务费用&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[165,166]},&amp;quot;v&amp;quot;:&amp;quot;例如公司筹集了大量资金, 这些资金是通过股权融资获得, 因此借款利息为0; 这些资金存在银行, 产生存款利息=100w; 因此财务费用=-100w; 因此营业收入-财务费用=营业收入+100w; 是增加利润的.&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[167,168]},&amp;quot;v&amp;quot;:&amp;quot;=借款利息-存款利息&amp;quot;}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[169,170]},&amp;quot;v&amp;quot;:&amp;quot;-资产减值损失(Inpairment Loss of Assets Impairment)&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[171,172]},&amp;quot;v&amp;quot;:&amp;quot;大部分资产按照”历史成本”来机架, 如果资产发生了减值, 需要扣除该部分减值, 利润也会相应受到影响.这就是”资产减值损失”&amp;quot;}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[173,174]},&amp;quot;v&amp;quot;:&amp;quot;+投资收益(Investment Income)&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[175,176]},&amp;quot;v&amp;quot;:&amp;quot;“比如小张公司的子公司给小张的公司分红了，那这笔钱就是小张公司的投资收益。实际上，投资收益可以说是小张以成立子公司这种特殊方式进行的营业活动，所以仍旧是营业利润当中的一部分。”&amp;quot;}]}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:3,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[177,178]},&amp;quot;v&amp;quot;:&amp;quot;营业利润(Operating Profit)&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[179,180]},&amp;quot;v&amp;quot;:&amp;quot;=营业收入-营业成本-营业税金及附加-三项费用-资产减值损失+投资收益&amp;quot;}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:3,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[181,182]},&amp;quot;v&amp;quot;:&amp;quot;营业外&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[183,184]},&amp;quot;v&amp;quot;:&amp;quot;营业外收入(Non-operating Revenues)&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[185,186]},&amp;quot;v&amp;quot;:&amp;quot;卖掉了公司一台闲置设备, 由此获得的收益为”营业外收入”, 因为公司经营的目的是通过”出售产品赚钱”, 而不是通过出售自己的固定资产(设备)赚钱 获得的赔偿和奖励&amp;quot;}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[187,188]},&amp;quot;v&amp;quot;:&amp;quot;营业外支出(Non-operating Expenses)&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[189,190]},&amp;quot;v&amp;quot;:&amp;quot;因违规遭受处罚, 或者火灾, 水灾, 地震所导致的损失&amp;quot;}]}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:3,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[191,192]},&amp;quot;v&amp;quot;:&amp;quot;利润总额&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[193,194]},&amp;quot;v&amp;quot;:&amp;quot;=营业利润+营业外收入-营业外之处+补贴收入+汇兑损益&amp;quot;}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:3,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[195,196]},&amp;quot;v&amp;quot;:&amp;quot;净利润(Net Profit)&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[197,198]},&amp;quot;v&amp;quot;:&amp;quot;净利润是一个企业经营的最终成果. 净利润多, 经营效益就好; 净利润少, 经营效益就差&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[199,200]},&amp;quot;v&amp;quot;:&amp;quot;=利润总额-所得税&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[201,202]},&amp;quot;v&amp;quot;:&amp;quot;所得税&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[203,204]},&amp;quot;v&amp;quot;:&amp;quot;中国企业所得税税率一般在25%; 但这里的25%是”应税所得”的25%; 而非”利润总额”的25%; 利润总额: 以会计准则为基础计算出来 应税所得: 以税法为基础计算出来&amp;quot;}]}]}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:2,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[205,206]},&amp;quot;v&amp;quot;:&amp;quot;其他知识&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:3,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[207,208]},&amp;quot;v&amp;quot;:&amp;quot;资产与费用的区别&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[209,210]},&amp;quot;v&amp;quot;:&amp;quot;如果这笔钱可以换来一个对将来有用的东西, 那就是资产. 例如6万元买来的能够使用6个月的办公用品. 6个月之后, 这笔钱就变成了费用.&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[211,212]},&amp;quot;v&amp;quot;:&amp;quot;如果这笔钱花完就完了, 那它就是费用. 例如预付的房租, 预付的广告费用.&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[213,214]},&amp;quot;v&amp;quot;:&amp;quot;很多情况下, 资产和费用只存在时间概念上的不同.&amp;quot;}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:3,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[215,216]},&amp;quot;v&amp;quot;:&amp;quot;资产计价方式&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[217,218]},&amp;quot;v&amp;quot;:&amp;quot;历史成本/原始成本/实际成本(Historical Cost)&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[219,220]},&amp;quot;v&amp;quot;:&amp;quot;例如1台使用了5年的生产设备, 如何计价?&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[221,222]},&amp;quot;v&amp;quot;:&amp;quot;如果资产升值, 则忽略, 如果资产减值,就把这个减值记录下来.&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[223,224]},&amp;quot;v&amp;quot;:&amp;quot;只要没有新的交易发生, 资产的价值只能减少, 不能增加&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[225,226]},&amp;quot;v&amp;quot;:&amp;quot;“在历史成本的计价体系下，增加资产价值的唯一途径是发生一个新的交易”&amp;quot;}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[227,228]},&amp;quot;v&amp;quot;:&amp;quot;公允价值/公允市价/公允价格(Fair Value)&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[229,230]},&amp;quot;v&amp;quot;:&amp;quot;金融资产(Financial Assets)&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:6,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[231,232]},&amp;quot;v&amp;quot;:&amp;quot;例如股票&amp;quot;}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[233,234]},&amp;quot;v&amp;quot;:&amp;quot;房地产&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:6,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[235,236]},&amp;quot;v&amp;quot;:&amp;quot;必须是投资性房地产&amp;quot;}]}]}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:3,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[237,238]},&amp;quot;v&amp;quot;:&amp;quot;利润分类&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[239,240]},&amp;quot;v&amp;quot;:&amp;quot;毛利润&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[241,242]},&amp;quot;v&amp;quot;:&amp;quot;=营业收入-营业成本&amp;quot;}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[243,244]},&amp;quot;v&amp;quot;:&amp;quot;净利润&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[245,246]},&amp;quot;v&amp;quot;:&amp;quot;=毛利润-营业税金及附加-三项费用&amp;quot;}]}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:3,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[247,248]},&amp;quot;v&amp;quot;:&amp;quot;税种分类&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[249,250]},&amp;quot;v&amp;quot;:&amp;quot;价内税(Tax Included in Price)&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[251,252]},&amp;quot;v&amp;quot;:&amp;quot;如营业税(Business Tax)&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:6,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[253,254]},&amp;quot;v&amp;quot;:&amp;quot;“国家对工商营利事业按营业额征收的税, 属于流转课税的一类”&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:6,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[255,256]},&amp;quot;v&amp;quot;:&amp;quot;例如去饭店吃饭, 支付了100元, 但实际饭店需要按照100元给税务部分支付一定比例税费.&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:6,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[257,258]},&amp;quot;v&amp;quot;:&amp;quot;由经营者承担&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:6,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[259,260]},&amp;quot;v&amp;quot;:&amp;quot;因此在经营者的利润表中, 只能出现”营业税税收成本”, 而不会出现”增值税税收成本”&amp;quot;}]}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[261,262]},&amp;quot;v&amp;quot;:&amp;quot;价外税(Tax Excluded in Price)&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[263,264]},&amp;quot;v&amp;quot;:&amp;quot;如增值税(Value-added Tax)&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:6,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[265,266]},&amp;quot;v&amp;quot;:&amp;quot;“一种销售税，是消费者承担的税费”&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:6,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[267,268]},&amp;quot;v&amp;quot;:&amp;quot;由消费者承担&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:6,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[269,270]},&amp;quot;v&amp;quot;:&amp;quot;消费者在购买东西时, 已经把税金交给了卖方, 卖方也已经替税务局从消费者这里收了税, 是注定要付给税务局的. 因此对于经营者来说, 这笔钱算是”负债”&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:6,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[271,272]},&amp;quot;v&amp;quot;:&amp;quot;因此增值税体现在资产负债表中”应交税金”这一项目中&amp;quot;}]}]}]}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:2,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[273,274]},&amp;quot;v&amp;quot;:&amp;quot;财务分析方法&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:3,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[275,276]},&amp;quot;v&amp;quot;:&amp;quot;同型分析&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[277,278]},&amp;quot;v&amp;quot;:&amp;quot;趋势分析(Trend Analysis)&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[279,280]},&amp;quot;v&amp;quot;:&amp;quot;使用同型分析与自己过去相比, 就叫趋势分析&amp;quot;}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[281,282]},&amp;quot;v&amp;quot;:&amp;quot;比较分析(Comparing Analysis)&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[283,284]},&amp;quot;v&amp;quot;:&amp;quot;与别的企业相比, 无论是竞争对手还是行业的标杆企业或者行业内的平均水平, 就叫”比较分析”&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[285,286]},&amp;quot;v&amp;quot;:&amp;quot;毛利率(Gross Margin)&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[287,288]},&amp;quot;v&amp;quot;:&amp;quot;净利率(Net Profit Margin)&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[289,290]},&amp;quot;v&amp;quot;:&amp;quot;总资产报酬率(Return on Assets)&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:6,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[291,292]},&amp;quot;v&amp;quot;:&amp;quot;=收入/总资产*净利润/收入=净利润/总资产&amp;quot;}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[293,294]},&amp;quot;v&amp;quot;:&amp;quot;投资回报率(Return on Investment, ROI)&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[295,296]},&amp;quot;v&amp;quot;:&amp;quot;净资产收益率(Return on Equity, ROE)&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[297,298]},&amp;quot;v&amp;quot;:&amp;quot;周转率&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:6,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[299,300]},&amp;quot;v&amp;quot;:&amp;quot;在一年之内, 企业的资产一共转了多少圈&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:6,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[301,302]},&amp;quot;v&amp;quot;:&amp;quot;周转率越过, 赚的钱也就越多&amp;quot;}]}]}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:3,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[303,304]},&amp;quot;v&amp;quot;:&amp;quot;偿债能力(Solvency)&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[305,306]},&amp;quot;v&amp;quot;:&amp;quot;短期偿债能力&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[307,308]},&amp;quot;v&amp;quot;:&amp;quot;流动比率(Current Ratio)&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:6,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[309,310]},&amp;quot;v&amp;quot;:&amp;quot;健康公司大多在3~4之间&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:6,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[311,312]},&amp;quot;v&amp;quot;:&amp;quot;大多数中国企业流动比率在1到2之间&amp;quot;}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[317,318]},&amp;quot;v&amp;quot;:&amp;quot;速动比率(Quick Ratio/Acid-test Ratio)&amp;quot;}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[319,320]},&amp;quot;v&amp;quot;:&amp;quot;长期偿债能力&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[321,322]},&amp;quot;v&amp;quot;:&amp;quot;偿还利息能力&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:6,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[323,324]},&amp;quot;v&amp;quot;:&amp;quot;息税前收益(Earnings before Interest and Tax, EBIT)&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:6,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[325,326]},&amp;quot;v&amp;quot;:&amp;quot;利息收入倍数(Times Interest Earned/Interest Production Multiples)&amp;quot;}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[329,330]},&amp;quot;v&amp;quot;:&amp;quot;偿还本金能力&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:6,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[331,332]},&amp;quot;v&amp;quot;:&amp;quot;资产负债率(Liability/Asset Ratio), 又称财务杠杆(Financial Leverage)&amp;quot;}]}]}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:3,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[335,336]},&amp;quot;v&amp;quot;:&amp;quot;五力图(Five Forces Model)&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[337,338]},&amp;quot;v&amp;quot;:&amp;quot;即五力分析模型&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[339,340]},&amp;quot;v&amp;quot;:&amp;quot;现有企业之间的竞争&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[341,342]},&amp;quot;v&amp;quot;:&amp;quot;行业增长&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[343,344]},&amp;quot;v&amp;quot;:&amp;quot;集中&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[345,346]},&amp;quot;v&amp;quot;:&amp;quot;多样化竞争&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[347,348]},&amp;quot;v&amp;quot;:&amp;quot;转换成本&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[349,350]},&amp;quot;v&amp;quot;:&amp;quot;规模经济型&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[351,352]},&amp;quot;v&amp;quot;:&amp;quot;学习成本&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[353,354]},&amp;quot;v&amp;quot;:&amp;quot;固定/可变成本&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[355,356]},&amp;quot;v&amp;quot;:&amp;quot;产能过剩&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[357,358]},&amp;quot;v&amp;quot;:&amp;quot;退出成本&amp;quot;}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[359,360]},&amp;quot;v&amp;quot;:&amp;quot;新进入者的威胁&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[361,362]},&amp;quot;v&amp;quot;:&amp;quot;替代产品的威胁&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[363,364]},&amp;quot;v&amp;quot;:&amp;quot;购买者的议价能力&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[365,366]},&amp;quot;v&amp;quot;:&amp;quot;供货方的议价能力&amp;quot;}]}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:2,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[367,368]},&amp;quot;v&amp;quot;:&amp;quot;企业战略定位&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:3,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[369,370]},&amp;quot;v&amp;quot;:&amp;quot;成本领先战略(Overall Cost Leadership)&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[371,372]},&amp;quot;v&amp;quot;:&amp;quot;主动牺牲效益, 来换取效率的战略, 是”效率制胜”的战略.&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[373,374]},&amp;quot;v&amp;quot;:&amp;quot;毛利率低&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[375,376]},&amp;quot;v&amp;quot;:&amp;quot;高周转&amp;quot;}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:3,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[377,378]},&amp;quot;v&amp;quot;:&amp;quot;差异化战略(Differentiation Strategy)&amp;quot;}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:2,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[379,380]},&amp;quot;v&amp;quot;:&amp;quot;样例&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:3,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[381,382]},&amp;quot;v&amp;quot;:&amp;quot;竞争性制造业企业&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[383,384]},&amp;quot;v&amp;quot;:&amp;quot;固定资产值最高&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[385,386]},&amp;quot;v&amp;quot;:&amp;quot;资金密集型的制造企业&amp;quot;}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[387,388]},&amp;quot;v&amp;quot;:&amp;quot;其次是营收款项&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[389,390]},&amp;quot;v&amp;quot;:&amp;quot;为了销售自己的产品, 允许客户暂缓支付货款, 因此应该面临压力.&amp;quot;}]}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:3,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[391,392]},&amp;quot;v&amp;quot;:&amp;quot;服务型企业&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[393,394]},&amp;quot;v&amp;quot;:&amp;quot;无形资产占比大&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[395,396]},&amp;quot;v&amp;quot;:&amp;quot;人也可以作为无形资产, 例如俱乐部花2000w与球星签了3年买断协议&amp;quot;}]}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:3,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[397,398]},&amp;quot;v&amp;quot;:&amp;quot;营业利润与营业外收入&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[399,400]},&amp;quot;v&amp;quot;:&amp;quot;A公司赚了1000w, 900w来自营业利润, 100w来自营业外收入&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[401,402]},&amp;quot;v&amp;quot;:&amp;quot;B公司赚了1000w, 100w来自营业利润, 900w来自营业外收入&amp;quot;}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:3,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[403,404]},&amp;quot;v&amp;quot;:&amp;quot;三张表关注点&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[405,406]},&amp;quot;v&amp;quot;:&amp;quot;现金流量表&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[407,408]},&amp;quot;v&amp;quot;:&amp;quot;银行贷款关注&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[409,410]},&amp;quot;v&amp;quot;:&amp;quot;去银行贷款, 银行关注该表. 银行从来都不希望企业还不起钱, 也不希望企业通过变卖自己的资产来还债. 它希望企业手头永远有大量的现金.&amp;quot;}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[411,412]},&amp;quot;v&amp;quot;:&amp;quot;利润表&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[413,414]},&amp;quot;v&amp;quot;:&amp;quot;投资者关注&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[415,416]},&amp;quot;v&amp;quot;:&amp;quot;利润表将可持续的利润(经营利润) 和不可持续的利润(营业外收支, 补贴收入, 汇兑损益) 分别列示 不仅展示企业现在赚了多少钱, 还能使读报表的人形成对企业未来盈利的预期.&amp;quot;}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:4,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[417,418]},&amp;quot;v&amp;quot;:&amp;quot;资产负债表&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[419,420]},&amp;quot;v&amp;quot;:&amp;quot;企业并购关注&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[421,422]},&amp;quot;v&amp;quot;:&amp;quot;因为 “股东权益=资产-负债” 恒等式&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[423,424]},&amp;quot;v&amp;quot;:&amp;quot;资产有高估的风险&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:5,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[425,426]},&amp;quot;v&amp;quot;:&amp;quot;负债有低估的风险&amp;quot;,&amp;quot;c&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:6,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[427,428]},&amp;quot;v&amp;quot;:&amp;quot;或有负债: C公司为B公司做了担保, B公司跑路&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:6,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[429,430]},&amp;quot;v&amp;quot;:&amp;quot;表外负债:&amp;quot;}]}]}]}]},{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:2,&amp;quot;p&amp;quot;:{&amp;quot;lines&amp;quot;:[431,432]},&amp;quot;v&amp;quot;:&amp;quot;第三张表: 现金流量表&amp;quot;}]}&quot;/&gt;
&lt;/div&gt;
&lt;script type=&quot;text&amp;#x2F;javascript&quot; src=&quot;https://unpkg.com/kity@2.0.4/dist/kity.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text&amp;#x2F;javascript&quot; src=&quot;https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;true&quot; type=&quot;text&amp;#x2F;javascript&quot; src=&quot;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js&quot;&gt;&lt;/script&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text&amp;#x2F;css&quot; href=&quot;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css&quot;&gt;</summary>
    
    
    
    
    <category term="note" scheme="https://davyjones2010.github.io/tags/note/"/>
    
    <category term="book-list" scheme="https://davyjones2010.github.io/tags/book-list/"/>
    
    <category term="finance" scheme="https://davyjones2010.github.io/tags/finance/"/>
    
  </entry>
  
  <entry>
    <title>Java线程状态与jstack线程栈分析实战</title>
    <link href="https://davyjones2010.github.io/2023-02-22-java-jstack-thread-status/"/>
    <id>https://davyjones2010.github.io/2023-02-22-java-jstack-thread-status/</id>
    <published>2023-02-22T15:41:37.000Z</published>
    <updated>2023-03-05T16:39:20.009Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>某次机房间光纤被挖断, 导致跨机房通信网络丢包率高. </p><h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>TODO: 补充</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;某次机房间光纤被挖断, 导致跨机房通信网络丢包率高. &lt;/p&gt;
&lt;h1 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;TODO: 补充&lt;/p&gt;
&lt;script type=&quot;text&amp;#x2F;javascript&quot; src=&quot;https://unpkg.com/kity@2.0.4/dist/kity.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text&amp;#x2F;javascript&quot; src=&quot;https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;true&quot; type=&quot;text&amp;#x2F;javascript&quot; src=&quot;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js&quot;&gt;&lt;/script&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text&amp;#x2F;css&quot; href=&quot;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css&quot;&gt;</summary>
    
    
    
    
    <category term="learn-from-failure" scheme="https://davyjones2010.github.io/tags/learn-from-failure/"/>
    
    <category term="java" scheme="https://davyjones2010.github.io/tags/java/"/>
    
    <category term="jstack" scheme="https://davyjones2010.github.io/tags/jstack/"/>
    
  </entry>
  
  <entry>
    <title>jmockit测试框架常用技巧</title>
    <link href="https://davyjones2010.github.io/2023-02-19-jmockit-usage-faq/"/>
    <id>https://davyjones2010.github.io/2023-02-19-jmockit-usage-faq/</id>
    <published>2023-02-19T15:38:39.000Z</published>
    <updated>2023-03-05T16:39:20.009Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Injectable-与-Mocked-有啥区别"><a href="#Injectable-与-Mocked-有啥区别" class="headerlink" title="@Injectable  与 @Mocked 有啥区别?"></a>@Injectable  与 @Mocked 有啥区别?</h1><p><a href="https://www.cnblogs.com/shoren/p/jmokit-summary.html">https://www.cnblogs.com/shoren/p/jmokit-summary.html</a></p><ol><li>Injectable只会mock当前实例</li><li>Mocked会mock该类下所有实例</li></ol><p>针对 @Tested 的类, 所有field必须使用 Injectable 来注入, 使用 Mocked 来标识的properties, 不会被注入.</p><h1 id="如何测试private方法"><a href="#如何测试private方法" class="headerlink" title="如何测试private方法?"></a>如何测试private方法?</h1><p><code>mockit.Deencapsulation#invoke(java.lang.Object, java.lang.String, java.lang.Object...)</code></p><hr><h2 id="如何测试private方法-并且传入null作为参数"><a href="#如何测试private方法-并且传入null作为参数" class="headerlink" title="如何测试private方法, 并且传入null作为参数?"></a>如何测试private方法, 并且传入null作为参数?</h2><p>使用<code>Deencapsulation.invoke</code> 测试private方法时, 如果需要传入null作为参数, 如果直接传入null,  会报错, 样例如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 第1, 第3个参数为null</span><span class="token class-name">Deencapsulation</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>testResourceService<span class="token punctuation">,</span> <span class="token string">"testMethod"</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token keyword">null</span><span class="token punctuation">,</span> param1<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> param2<span class="token punctuation">,</span> param3<span class="token punctuation">,</span> param4<span class="token punctuation">,</span> param5<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>IllegalArgumentException</span><span class="token operator">:</span> <span class="token class-name">Invalid</span> <span class="token keyword">null</span> value passed as argument <span class="token number">0</span>at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span></span>ServiceImplTest</span><span class="token punctuation">.</span><span class="token function">testMethod</span><span class="token punctuation">(</span>xxxTest<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1141</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span>NativeMethodAccessorImpl</span><span class="token punctuation">.</span><span class="token function">invoke0</span><span class="token punctuation">(</span><span class="token class-name">Native</span> <span class="token class-name">Method</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span>Method</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Method</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">498</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>intellij<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span>JUnit4IdeaTestRunner</span><span class="token punctuation">.</span><span class="token function">startRunnerWithArgs</span><span class="token punctuation">(</span><span class="token class-name">JUnit4IdeaTestRunner</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">69</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>intellij<span class="token punctuation">.</span>rt<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span>IdeaTestRunner</span>$<span class="token class-name">Repeater</span><span class="token punctuation">.</span><span class="token function">startRunnerWithArgs</span><span class="token punctuation">(</span><span class="token class-name">IdeaTestRunner</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">33</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>intellij<span class="token punctuation">.</span>rt<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span>JUnitStarter</span><span class="token punctuation">.</span><span class="token function">prepareStreamsAndStart</span><span class="token punctuation">(</span><span class="token class-name">JUnitStarter</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">235</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>intellij<span class="token punctuation">.</span>rt<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span>JUnitStarter</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">JUnitStarter</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">54</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决方案:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 第1, 第3个参数, 使用 类名.class 来传入</span><span class="token class-name">Deencapsulation</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>testResourceService<span class="token punctuation">,</span> <span class="token string">"testMethod"</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> param1<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> param2<span class="token punctuation">,</span> param3<span class="token punctuation">,</span> param4<span class="token punctuation">,</span> param5<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>参见:  <a href="https://stackoverflow.com/questions/23096026/how-to-pass-null-string-to-a-private-method-using-jmockit-while-unit-testing-it">https://stackoverflow.com/questions/23096026/how-to-pass-null-string-to-a-private-method-using-jmockit-while-unit-testing-it</a></p><h1 id="如何mock-static方法"><a href="#如何mock-static方法" class="headerlink" title="如何mock static方法"></a>如何mock static方法</h1><p>例如需要mock EnvUtil.get() 这个static方法, 如下即可:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">MockUp</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EnvUtil</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Mock</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 注意, 这里不要加 static 标识</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"inventoryResourceProviderUseLocal"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token string">"true"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token string">"false"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参见: <a href="https://www.baeldung.com/jmockit-static-method">https://www.baeldung.com/jmockit-static-method</a></p><h1 id="如何mock-Tested对象的方法"><a href="#如何mock-Tested对象的方法" class="headerlink" title="如何mock Tested对象的方法"></a>如何mock Tested对象的方法</h1><p>由于 Tested 的对象, 通常都是当前UT需要测试的对象本身. 在测试的目标方法(如下例子中的calcUserScore), 需要本身依赖到当前类的其他方法, 且逻辑非常复杂(例如下例中的getUserById), 则可以将测试对象本身的部分方法也进行mock. 如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">JMockit</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceMockTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Tested</span>    <span class="token class-name">UserServiceImpl</span> userService<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">calcUserScoreTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">MockUp</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserServiceImpl</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Mock</span>            <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> uid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">calcUserScore</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="如何mock-Injectable对象的方法"><a href="#如何mock-Injectable对象的方法" class="headerlink" title="如何mock Injectable对象的方法"></a>如何mock Injectable对象的方法</h1><p>Injectable对象通常是当前要测试对象依赖的其他对象. 方法如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">JMockit</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceMockTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Tested</span>    <span class="token class-name">UserServiceImpl</span> userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Injectable</span>    <span class="token class-name">AddrService</span> addrSvc<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUsrAddrTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Addr</span> testAddr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Addr</span><span class="token punctuation">(</span><span class="token string">"cn"</span><span class="token punctuation">,</span> <span class="token string">"hangzhou"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Expectations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>            addrSvc<span class="token punctuation">.</span><span class="token function">getAddrByAddrId</span><span class="token punctuation">(</span>anyLong<span class="token punctuation">)</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> testAddr<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>                userService<span class="token punctuation">.</span><span class="token function">getUsrAddr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="如何进行DAO层测试"><a href="#如何进行DAO层测试" class="headerlink" title="如何进行DAO层测试"></a>如何进行DAO层测试</h1><p>数据库测试: <a href="https://www.freesion.com/article/88601080583/">UNITILS库的使用经历</a></p><h2 id="如何防止自动回滚"><a href="#如何防止自动回滚" class="headerlink" title="如何防止自动回滚?"></a>如何防止自动回滚?</h2><p>使用 <code>@Transactional(TransactionMode.COMMIT)</code>其中 <code>org.unitils.database.annotations.Transactional</code></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Injectable-与-Mocked-有啥区别&quot;&gt;&lt;a href=&quot;#Injectable-与-Mocked-有啥区别&quot; class=&quot;headerlink&quot; title=&quot;@Injectable  与 @Mocked 有啥区别?&quot;&gt;&lt;/a&gt;@Injectable  与 @Mocked 有啥区别?&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/shoren/p/jmokit-summary.html&quot;&gt;https://www.cnblogs.com/shoren/p/jmokit-summary.html&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Injectable只会mock当前实例&lt;/li&gt;
&lt;li&gt;Mocked会mock该类下所有实例&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;针对 @Tested 的类, 所有field必须使用 Injectable 来注入, 使用 Mocked 来标识的properties, 不会被注入.&lt;/p&gt;
&lt;h1 id=&quot;如何测试private方法&quot;&gt;&lt;a href=&quot;#如何测试private方法&quot; class=&quot;headerlink&quot; title=&quot;如何测试private方法?&quot;&gt;&lt;/a&gt;如何测试private方法?&lt;/h1&gt;&lt;p&gt;&lt;code&gt;mockit.Deencapsulation#invoke(java.lang.Object, java.lang.String, java.lang.Object...)&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;如何测试private方法-并且传入null作为参数&quot;&gt;&lt;a href=&quot;#如何测试private方法-并且传入null作为参数&quot; class=&quot;headerlink&quot; title=&quot;如何测试private方法, 并且传入null作为参数?&quot;&gt;&lt;/a&gt;如何测试private方法, 并且传入null作为参数?&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;Deencapsulation.invoke&lt;/code&gt; 测试private方法时, 如果需要传入null作为参数, 如果直接传入null,  会报错, 样例如下:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-java&quot; data-language=&quot;java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 第1, 第3个参数为null&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;Deencapsulation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;testResourceService&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;testMethod&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; param1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; param2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; param3&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; param4&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; param5&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    
    <category term="java" scheme="https://davyjones2010.github.io/tags/java/"/>
    
    <category term="jmockit" scheme="https://davyjones2010.github.io/tags/jmockit/"/>
    
    <category term="unit-test" scheme="https://davyjones2010.github.io/tags/unit-test/"/>
    
    <category term="ut" scheme="https://davyjones2010.github.io/tags/ut/"/>
    
    <category term="test-framework" scheme="https://davyjones2010.github.io/tags/test-framework/"/>
    
  </entry>
  
  <entry>
    <title>SQL/MySQL使用过程中的踩坑合集</title>
    <link href="https://davyjones2010.github.io/2023-02-19-mysql-learn-from-failure/"/>
    <id>https://davyjones2010.github.io/2023-02-19-mysql-learn-from-failure/</id>
    <published>2023-02-19T02:24:18.000Z</published>
    <updated>2023-03-05T16:39:20.009Z</updated>
    
    <content type="html"><![CDATA[<h1 id="left-join的key在右表中重复导致结果集重复"><a href="#left-join的key在右表中重复导致结果集重复" class="headerlink" title="left join的key在右表中重复导致结果集重复"></a>left join的key在右表中重复导致结果集重复</h1><p>样例参见: <a href="http://sqlfiddle.com/#!9/4f158d1/7">SQL Fiddle</a><br>所以left join之前, <font color='red'>一定要确认右表的key是否会重复</font>.<br>尤其是在写HIVE这种比较重量级的SQL之前, 一定要注意, 否则会导致报表制作出来数据重复, 影响数据质量.</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;left-join的key在右表中重复导致结果集重复&quot;&gt;&lt;a href=&quot;#left-join的key在右表中重复导致结果集重复&quot; class=&quot;headerlink&quot; title=&quot;left join的key在右表中重复导致结果集重复&quot;&gt;&lt;/a&gt;left join的key在右表中重复导致结果集重复&lt;/h1&gt;&lt;p&gt;样例参见: &lt;a href=&quot;http://sqlfiddle.com/#!9/4f158d1/7&quot;&gt;SQL Fiddle&lt;/a&gt;&lt;br&gt;所以left join之前, &lt;font color=&quot;red&quot;&gt;一定要确认右表的key是否会重复&lt;/font&gt;.&lt;br&gt;尤其是在写HIVE这种比较重量级的SQL之前, 一定要注意, 否则会导致报表制作出来数据重复, 影响数据质量.&lt;/p&gt;
&lt;script type=&quot;text&amp;#x2F;javascript&quot; src=&quot;https://unpkg.com/kity@2.0.4/dist/kity.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text&amp;#x2F;javascript&quot; src=&quot;https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;true&quot; type=&quot;text&amp;#x2F;javascript&quot; src=&quot;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js&quot;&gt;&lt;/script&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text&amp;#x2F;css&quot; href=&quot;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css&quot;&gt;</summary>
    
    
    
    
    <category term="learn-from-failure" scheme="https://davyjones2010.github.io/tags/learn-from-failure/"/>
    
    <category term="mysql" scheme="https://davyjones2010.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>常用的Linux命令之tcpdump</title>
    <link href="https://davyjones2010.github.io/2023-02-10-linux-network-tcpdump-sample/"/>
    <id>https://davyjones2010.github.io/2023-02-10-linux-network-tcpdump-sample/</id>
    <published>2023-02-10T13:04:17.000Z</published>
    <updated>2023-03-05T16:39:20.009Z</updated>
    
    <content type="html"><![CDATA[<h1 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h1><p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202302102123138.png"></p><h1 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h1><h2 id="应用拓扑"><a href="#应用拓扑" class="headerlink" title="应用拓扑"></a>应用拓扑</h2><pre class="mermaid">graph BT    B[HostB:anyPort] -..-> |dubbo| A[HostA:12200];</pre><h2 id="拓扑说明"><a href="#拓扑说明" class="headerlink" title="拓扑说明"></a>拓扑说明</h2><ul><li>HostA是服务端, 开启了12200服务端口</li><li>HostB是客户端, 开启了任意端口与HostA:12200连接</li><li>在HostA上执行tcpdump 查看 HostA:12200 &lt;-&gt; HostB 的通信</li></ul><h2 id="命令实践"><a href="#命令实践" class="headerlink" title="命令实践"></a>命令实践</h2><p>⁃ in 链路(即从B —&gt;A:12200)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> tcpdump -i eth0 -P <span class="token keyword">in</span> -vv dst port <span class="token number">12200</span> and src <span class="token function">host</span> <span class="token variable">$&#123;hostB&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>⁃ out 链路(即从A:12200—&gt;B)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> tcpdump -i eth0 -P out -vv src port <span class="token number">12200</span> and dst <span class="token function">host</span> <span class="token variable">$&#123;hostB&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>⁃ inout (即从A:12200&lt;—&gt;B)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tcpdump -i eth0  <span class="token function">host</span> <span class="token variable">$&#123;hostB&#125;</span> and port <span class="token number">12200</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>⁃ dump 抓取具体包内容, 导出为文件, 便于wireshark分析 (注意, 这里导出的文件为二进制, 推荐使用.pcap作为后缀名)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> tcpdump -i eth0 -P <span class="token keyword">in</span> -vv dst port <span class="token number">12200</span> and src <span class="token function">host</span> <span class="token variable">$&#123;hostB&#125;</span> -w ~/tcpdump.pcap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>⁃ 读取tcpdump文件 (注意, 这里读取的文件也为二进制)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> tcpdump -r tcpdump.pcap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h1><ul><li><a href="https://blog.csdn.net/weixin_36338224/article/details/107035214">linux下如何使用 tcpdump 进行抓包详细教程</a></li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;格式&quot;&gt;&lt;a href=&quot;#格式&quot; class=&quot;headerlink&quot; title=&quot;格式&quot;&gt;&lt;/a&gt;格式&lt;/h1&gt;&lt;p&gt;&lt;img data-src=&quot;https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202302102123138.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;样例&quot;&gt;&lt;a href=&quot;#样例&quot; class=&quot;headerlink&quot; title=&quot;样例&quot;&gt;&lt;/a&gt;样例&lt;/h1&gt;&lt;h2 id=&quot;应用拓扑&quot;&gt;&lt;a href=&quot;#应用拓扑&quot; class=&quot;headerlink&quot; title=&quot;应用拓扑&quot;&gt;&lt;/a&gt;应用拓扑&lt;/h2&gt;&lt;pre class=&quot;mermaid&quot;&gt;graph BT
    B[HostB:anyPort] -..-&gt; |dubbo| A[HostA:12200];&lt;/pre&gt;

&lt;h2 id=&quot;拓扑说明&quot;&gt;&lt;a href=&quot;#拓扑说明&quot; class=&quot;headerlink&quot; title=&quot;拓扑说明&quot;&gt;&lt;/a&gt;拓扑说明&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;HostA是服务端, 开启了12200服务端口&lt;/li&gt;
&lt;li&gt;HostB是客户端, 开启了任意端口与HostA:12200连接&lt;/li&gt;
&lt;li&gt;在HostA上执行tcpdump 查看 HostA:12200 &amp;lt;-&amp;gt; HostB 的通信&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;命令实践&quot;&gt;&lt;a href=&quot;#命令实践&quot; class=&quot;headerlink&quot; title=&quot;命令实践&quot;&gt;&lt;/a&gt;命令实践&lt;/h2&gt;&lt;p&gt;⁃ in 链路(即从B —&amp;gt;A:12200)&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; tcpdump -i eth0 -P &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; -vv dst port &lt;span class=&quot;token number&quot;&gt;12200&lt;/span&gt; and src &lt;span class=&quot;token function&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$&amp;#123;hostB&amp;#125;&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    
    <category term="code-snippets" scheme="https://davyjones2010.github.io/tags/code-snippets/"/>
    
    <category term="linux" scheme="https://davyjones2010.github.io/tags/linux/"/>
    
    <category term="network" scheme="https://davyjones2010.github.io/tags/network/"/>
    
    <category term="tcpdump" scheme="https://davyjones2010.github.io/tags/tcpdump/"/>
    
  </entry>
  
  <entry>
    <title>工作流框架中ID与Token使用引发的思考</title>
    <link href="https://davyjones2010.github.io/2023-02-09-inner-id-outer-id-design/"/>
    <id>https://davyjones2010.github.io/2023-02-09-inner-id-outer-id-design/</id>
    <published>2023-02-09T14:11:42.000Z</published>
    <updated>2023-03-05T16:39:20.009Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在使用工作流框架时, 发现token&#x2F;id字段非常多, 尤其是</p><ul><li>workflow_id</li><li>biz_id</li></ul><p>这两个的格式都是UUID, 都是唯一的.<br><img data-src="https://intranetproxy.alipay.com/skylark/lark/0/2021/png/18490/1629896347576-a7614293-1ddc-4d13-9f9a-e48248cfac62.png#clientId=u1f1ec6f0-275f-4&from=paste&height=683&id=u52913c82&name=image.png&originHeight=938&originWidth=762&originalType=binary&ratio=1&rotation=0&showTitle=false&size=547248&status=done&style=none&taskId=u9488ccd6-246c-4b06-8e39-5b5ea32309a&title=&width=555" alt="image.png"><br>这两个分别代表啥?</p><ul><li>biz_id是外部传入的业务唯一ID, 客户端排查问题时可以使用. 作为外部主键<ul><li>一个biz_id代表一次业务请求, 可能会对应多个workflow_id;</li><li>例如 创建ECS实例的一次请求, 对应一个biz_id(request_id), 但会对应多个workflow的编排, 因此不能把biz_id作为唯一键(会导致workflow_instance唯一键冲突), 也不能直接使用workflow_id(会导致无法trace到整个请求)</li></ul></li><li>workflow_id是系统内部生成的系统唯一ID, 可以认为是唯一主键. 作为内部主键</li></ul><h1 id="几种方案"><a href="#几种方案" class="headerlink" title="几种方案"></a>几种方案</h1><p>为什么不把biz_id与workflow_id合并成一个? 可以假设下述几种方案:</p><h2 id="方案1-外部不传入biz-id-只使用workflow-id"><a href="#方案1-外部不传入biz-id-只使用workflow-id" class="headerlink" title="方案1: 外部不传入biz_id, 只使用workflow_id"></a>方案1: 外部不传入biz_id, 只使用workflow_id</h2><ul><li>存在一个先后依赖的问题: 如果在workflow_id生成前出现了问题, 根据哪个来定位这次请求, 该怎么排查?</li><li>无法实现biz_id对应多个workflow_id的一对多关系</li></ul><h2 id="方案2-外部传入biz-id-内部不生成新的workflow-id"><a href="#方案2-外部传入biz-id-内部不生成新的workflow-id" class="headerlink" title="方案2: 外部传入biz_id, 内部不生成新的workflow_id:"></a>方案2: 外部传入biz_id, 内部不生成新的workflow_id:</h2><ul><li>外部biz_id如果生成的不可靠, 有重复, 会导致workflow工作机制产生问题.</li><li>不能信任任何外部传入的ID作为内部的主键ID</li></ul><p>所以设计两个ID也是合理的, 一个内部ID, 一个外部ID, 甚至可以认为是最佳实践.</p><h2 id="方案3-外部传入biz-id-内部同时也生成workflow-id"><a href="#方案3-外部传入biz-id-内部同时也生成workflow-id" class="headerlink" title="方案3: 外部传入biz_id, 内部同时也生成workflow_id"></a>方案3: 外部传入biz_id, 内部同时也生成workflow_id</h2><ul><li>即实现上最终选用的方案</li><li>当biz_id与workflow_id是一对一场景下, biz_id除了方便进行客户端定位问题, 也可以作为client_token实现幂等</li></ul><h1 id="实际应用场景"><a href="#实际应用场景" class="headerlink" title="实际应用场景"></a>实际应用场景</h1><p>大部分都是使用clientToken用来实现幂等</p><ul><li><a href="https://next.api.aliyun.com/document/Ecs/2014-05-26/RunInstances">ECS SDK调用</a>:<ul><li>支持方案1, 即客户端不传入任何requestID信息, 请求完成后会返回内部生成的requestID.</li><li>也支持方案3, 即客户端传入clientToken, 请求完成后会返回内部生成的requestID.</li></ul></li><li><a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">AWS SDK调用</a>:<ul><li>同样支持方案1与方案3;</li></ul></li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;在使用工作流框架时, 发现token&amp;#x2F;id字段非常多, 尤其是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;workflow_id&lt;/li&gt;
&lt;li&gt;biz_id&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这两个的格式都是UUID, 都是唯一的.&lt;br&gt;&lt;img data-src=&quot;https://intranetproxy.alipay.com/skylark/lark/0/2021/png/18490/1629896347576-a7614293-1ddc-4d13-9f9a-e48248cfac62.png#clientId=u1f1ec6f0-275f-4&amp;from=paste&amp;height=683&amp;id=u52913c82&amp;name=image.png&amp;originHeight=938&amp;originWidth=762&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=547248&amp;status=done&amp;style=none&amp;taskId=u9488ccd6-246c-4b06-8e39-5b5ea32309a&amp;title=&amp;width=555&quot; alt=&quot;image.png&quot;&gt;&lt;br&gt;这两个分别代表啥?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;biz_id是外部传入的业务唯一ID, 客户端排查问题时可以使用. 作为外部主键&lt;ul&gt;
&lt;li&gt;一个biz_id代表一次业务请求, 可能会对应多个workflow_id;&lt;/li&gt;
&lt;li&gt;例如 创建ECS实例的一次请求, 对应一个biz_id(request_id), 但会对应多个workflow的编排, 因此不能把biz_id作为唯一键(会导致workflow_instance唯一键冲突), 也不能直接使用workflow_id(会导致无法trace到整个请求)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;workflow_id是系统内部生成的系统唯一ID, 可以认为是唯一主键. 作为内部主键&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;几种方案&quot;&gt;&lt;a href=&quot;#几种方案&quot; class=&quot;headerlink&quot; title=&quot;几种方案&quot;&gt;&lt;/a&gt;几种方案&lt;/h1&gt;&lt;p&gt;为什么不把biz_id与workflow_id合并成一个? 可以假设下述几种方案:&lt;/p&gt;
&lt;h2 id=&quot;方案1-外部不传入biz-id-只使用workflow-id&quot;&gt;&lt;a href=&quot;#方案1-外部不传入biz-id-只使用workflow-id&quot; class=&quot;headerlink&quot; title=&quot;方案1: 外部不传入biz_id, 只使用workflow_id&quot;&gt;&lt;/a&gt;方案1: 外部不传入biz_id, 只使用workflow_id&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;存在一个先后依赖的问题: 如果在workflow_id生成前出现了问题, 根据哪个来定位这次请求, 该怎么排查?&lt;/li&gt;
&lt;li&gt;无法实现biz_id对应多个workflow_id的一对多关系&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;方案2-外部传入biz-id-内部不生成新的workflow-id&quot;&gt;&lt;a href=&quot;#方案2-外部传入biz-id-内部不生成新的workflow-id&quot; class=&quot;headerlink&quot; title=&quot;方案2: 外部传入biz_id, 内部不生成新的workflow_id:&quot;&gt;&lt;/a&gt;方案2: 外部传入biz_id, 内部不生成新的workflow_id:&lt;/h2&gt;</summary>
    
    
    
    
    <category term="learn-from-failure" scheme="https://davyjones2010.github.io/tags/learn-from-failure/"/>
    
    <category term="java" scheme="https://davyjones2010.github.io/tags/java/"/>
    
    <category term="good-design" scheme="https://davyjones2010.github.io/tags/good-design/"/>
    
  </entry>
  
  <entry>
    <title>一次心跳导致dubbo调用偶现失败问题排查</title>
    <link href="https://davyjones2010.github.io/2023-02-09-dubbo-heartbeat-fail/"/>
    <id>https://davyjones2010.github.io/2023-02-09-dubbo-heartbeat-fail/</id>
    <published>2023-02-09T13:18:02.000Z</published>
    <updated>2023-03-05T16:39:20.009Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><h2 id="应用拓扑"><a href="#应用拓扑" class="headerlink" title="应用拓扑"></a>应用拓扑</h2><ul><li>SystemA作为client, 通过dubbo接口调用SystemB提供的某个服务</li><li>SystemB由2台机器组成一个集群, 即 SystemB.45 SystemB.46</li></ul><pre class="mermaid">graph TD    A[SystemA] --> |dubbo| B[SystemB.45];        A[SystemA] --> |dubbo| C[SystemB.46];</pre><h2 id="详细问题"><a href="#详细问题" class="headerlink" title="详细问题"></a>详细问题</h2><p>SystemA调用SystemB的服务时:</p><ol><li><p>SystemA日志中持续性出现调用SystemB失败, 详细错误信息如下:</p></li><li><p>且<strong>SystemA报错日志都固定出现在SystemB.46这台机器上</strong></p></li></ol><p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202302092122356.png"></p><h1 id="问题1-为啥出现”channel-is-closed”错误-从而导致调用失败"><a href="#问题1-为啥出现”channel-is-closed”错误-从而导致调用失败" class="headerlink" title="问题1: 为啥出现”channel is closed”错误, 从而导致调用失败?"></a>问题1: 为啥出现”channel is closed”错误, 从而导致调用失败?</h1><h2 id="现象"><a href="#现象" class="headerlink" title="现象:"></a>现象:</h2><p>根据源代码分析只有底层TCP连接关闭, 才会有该错误报出. 但为啥TCP连接会关闭?</p><ol><li>是因为网络闪断么? 理论上内网环境下, 链路可靠, 不应该频繁发生.</li><li>是客户端主动关闭? or 服务端主动关闭?</li></ol><p>按照100ms一次打印某个dubbo服务的TCP连接状态. 发现每隔2~5min, dubbo的TCP连接就会重建. 而且观察到重建时是Provider处于TIME_WAIT状态, 也就知道是Provider主动关闭连接的.<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202302092124462.png"><br>基本可以确认, TCP连接是服务端主动关闭的.</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因:"></a>原因:</h2><ol><li><strong>因为provider主动把连接空闲关闭掉了</strong></li></ol><p>查看服务端hsf-remoting.log, 发现如下频繁的关闭TCP日志.<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202302092126521.png"></p><ol start="2"><li>Provider的HSF版本2.2.10.1, 查看对应代码, 发现使用的是Netty io.netty.handler.timeout.IdleStateHandler 方式进行链路空闲检测, 默认超过 90s 没有数据传输, Provider就会主动关闭TCP连接.</li><li>Consumer侧, 抛错的地点是: com.alibaba.dubbo.remoting.transport.AbstractClient#send , 即在发送数据包时发现TCP连接已关闭, 抛出异常.</li></ol><h2 id="解决"><a href="#解决" class="headerlink" title="解决:"></a>解决:</h2><h3 id="方案1-增大空闲阈值"><a href="#方案1-增大空闲阈值" class="headerlink" title="方案1: 增大空闲阈值"></a>方案1: 增大空闲阈值</h3><p>增加如下启动参数, 扩大服务端空闲时长, 15min; 一般SystemA调用不太会15min都没有请求, 每次业务请求进来, 也都会重置时间, 基本能保证TCP长连不断.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">-</span><span class="token class-name">Dhsf</span><span class="token punctuation">.</span>server<span class="token punctuation">.</span>idle<span class="token punctuation">.</span>time<span class="token operator">=</span><span class="token number">900</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>增加参数之后, 查看 hsf-remoting.log, 就没有频繁的CloseIdle日志了, 查看TCP连接, 发现连接端口长期保持稳定, 没有再发生重建, 查看线上错误日志, 发现该错误消失, 问题解决.<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202302092127153.png"></p><h3 id="方案2-缩短心跳间隔"><a href="#方案2-缩短心跳间隔" class="headerlink" title="方案2: 缩短心跳间隔"></a>方案2: 缩短心跳间隔</h3><p>减小客户端心跳发送间隔. (dubbo 默认心跳包间隔为 60s)<br>在<code>dubbo-config.xml</code>主配置文件里, 增加如下配置:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>protocol</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dubbo<span class="token punctuation">"</span></span> <span class="token attr-name">heartbeat</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="最终方案-缩短心跳间隔"><a href="#最终方案-缩短心跳间隔" class="headerlink" title="最终方案: 缩短心跳间隔"></a>最终方案: 缩短心跳间隔</h3><ul><li>方案1主要问题是改造量大, 需要修改应用的部署脚本, 而本身应用是未docker化的, 部署脚本在aone中需要单独的环境包发布. 一旦其他环境初始化没有增添该配置, 就会导致问题重现. 而修改代码配置文件则更好维护.</li><li>方案1也有优势, 即心跳包发送频率低, 60s一次, 而非新修改的20s一次, 对consumer侧压力会小一些.<br>但综合考虑, 心跳包频率增加对应用压力代价其实很小, 最终决定选择方案2.</li></ul><h1 id="问题2-为啥channel-is-closed异常信息中-总是集中在某个特定provider-channel-closed"><a href="#问题2-为啥channel-is-closed异常信息中-总是集中在某个特定provider-channel-closed" class="headerlink" title="问题2: 为啥channel is closed异常信息中, 总是集中在某个特定provider channel closed?"></a>问题2: 为啥channel is closed异常信息中, 总是集中在某个特定provider channel closed?</h1><h2 id="现象-1"><a href="#现象-1" class="headerlink" title="现象:"></a>现象:</h2><p>如 cn-chengdu, SystemA调用SystemB日志, 总是说 SystemB.46:12200 的channel closed, 而另外一个provider SystemB.45:12200 从来没有抛出异常.<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202302092128763.png"></p><ol><li><p>难道说只有SystemB.46的TCP连接会Idle重建, SystemB.45 就不会重建么?</p><ol><li>并不是, 查看 SystemB.45 的 hsf-remoting.log 日志, 发现与 46 基本相同, TCP连接会频繁重建.<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202302092129160.png"></li></ol></li><li><p>为啥没有报出: SystemB.45 channel is closed 呢?</p></li></ol><h2 id="原因-1"><a href="#原因-1" class="headerlink" title="原因:"></a>原因:</h2><ul><li>根本原因是dubbo client发起RPC调用前 连接状态检测 + failover策略 导致的:</li></ul><ol><li><p>dubbo client发起调用时, com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker#doInvoke</p></li><li><p>会使用 com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker#select 来选择一个合适的provider(代码里叫invokers), 核心逻辑如下:<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202302092130342.png"></p></li><li><p>loadbalance.select(invokers, getUrl(), invocation); 随机选择一个provider(例如 SystemB.45 ), selected为null, 如果 SystemB.45对应的TCP连接关闭, 则 invoker.isAvailable() 为false, 从而进入 reselect流程, 如果 46对应的TCP连接也关闭, 则 reselect 返回的rinvoker为null, 从而进入</p></li><li><p>所有可能case如下, 可以知道抛出异常时, 肯定错误信息是46失败, 因此就解释了上边的问题.</p></li></ol><table><thead><tr><th>45机器状态</th><th>46机器状态</th><th>loadbalance结果</th><th>最终AbstractClusterInvoker#select结果</th></tr></thead><tbody><tr><td>45 TCP正常</td><td>46 TCP正常</td><td>选中45</td><td>直接使用45作为provider, 不会抛出异常.</td></tr><tr><td>45 TCP正常</td><td>46 TCP正常</td><td>选中46</td><td>直接使用46作为provider, 不会抛出异常.</td></tr><tr><td>45 TCP正常</td><td>46 TCP异常</td><td>选中45</td><td>直接使用45作为provider, 不会抛出异常.</td></tr><tr><td>45 TCP正常</td><td>46 TCP异常</td><td>选中46</td><td>调用前reselect到45, 从而调用成功, 不会抛出异常.</td></tr><tr><td>45 TCP异常</td><td>46 TCP正常</td><td>选中45</td><td>调用前reselect到46, 从而调用成功, 不会抛出异常.</td></tr><tr><td>45 TCP异常</td><td>46 TCP正常</td><td>选中46</td><td>直接使用46作为provider, 不会抛出异常.</td></tr><tr><td>45 TCP异常</td><td>46 TCP异常</td><td>选中45</td><td>由于45的index为0, index+1, 从而就尝试failover到46, 返回46. 后续在invoke时, 由于46也是关闭, 因此抛出46失败.</td></tr><tr><td>45 TCP异常</td><td>46 TCP异常</td><td>选中46</td><td>由于46的index为1, 不再index+1(否则就IndexOutOfBoundsException啦), 从而返回46. 后续在invoke时, 由于46也是关闭的, 因此抛出46失败.</td></tr></tbody></table><ol start="3"><li>由此可以下结论, 当providers数量&gt;&#x3D;2时, 在发生该异常时, 报错信息里必然不会有第一个provider, 因为第一个provider失败, 会index+1, 返回第2个. 以同样抛错的”SystemC”为例进行观察, 验证了该猜想:<ol><li>抛出的channel is closed信息中, provider只有, “SystemC.40”  “SystemC.173” “SystemC.240” “SystemC.17” “SystemC.174” , 而没有排在第一个   SystemC.183 这个provider.</li></ol></li></ol><h1 id="问题3-为啥channel会空闲被关闭-心跳保活机制失效了么"><a href="#问题3-为啥channel会空闲被关闭-心跳保活机制失效了么" class="headerlink" title="问题3: 为啥channel会空闲被关闭? 心跳保活机制失效了么?"></a>问题3: 为啥channel会空闲被关闭? 心跳保活机制失效了么?</h1><p>dubboclient, 默认会60s发送一次心跳包, 所以服务端空闲timeout是90s&gt;60s, 理论上链路应该一直保活, 但为啥?</p><h2 id="现象-2"><a href="#现象-2" class="headerlink" title="现象"></a>现象</h2><p>实际用tcpdump查看了下, 发现稳定是2min一次的心跳, 为啥不是1min一次?<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202302092131119.png"></p><ul><li>上边tcpdump出来的确定是心跳包么?</li><li>是心跳包! 如下TCP包数据段内容为: dabbe200000000000005d772000000014e 查看代码:<br><em>com.alibaba.dubbo.remoting.exchange.codec.ExchangeCodec#encodeRequest</em>, 可知内容符合dubbo心跳包协议:</li></ul><ol><li>以 0xdabb 为开头</li><li>isTwoWay, isEvent都为true; 因此按照如下运算可知, 第三个字节是 0xe2</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">header<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>FLAG_REQUEST <span class="token operator">|</span> serialization<span class="token punctuation">.</span><span class="token function">getContentTypeId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">isTwoWay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> header<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">|=</span> FLAG_TWOWAY<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">isEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> header<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">|=</span> FLAG_EVENT<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>心跳包的mData为null, 通过hessian2序列化之后, <em>com.alibaba.com.caucho.hessian.io.Hessian2Output#writeNull</em>, null占用一个字节, 会被默认写作 N</li><li>整个TCP Payload为17个字节, 包括 16个字节的dubbo协议头 +  1个字节的0x4e(即为N的ASCII码), 符合实际抓包情况.</li></ol><p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202302092131065.png"><br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202302092132229.png"><br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202302092133191.png"></p><h2 id="原因-2"><a href="#原因-2" class="headerlink" title="原因"></a>原因</h2><ul><li>根本原因是 com.alibaba.dubbo.remoting.exchange.support.header.HeartBeatTask 设计缺陷导致.</li></ul><ol><li>HeartBeatTask 是在com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeServer#startHeatbeatTimer进行启动, 使用ScheduledExecutorService, 定时执行间隔时间为heartbeat值, 即为60s(60000ms)一次.</li><li>HeartBeatTask 执行具体实现(删除了与本问题不相关的代码):</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> now <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token class-name">Channel</span> channel <span class="token operator">:</span> channelProvider<span class="token punctuation">.</span><span class="token function">getChannels</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Long</span> lastRead <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token class-name">Long</span> <span class="token punctuation">)</span> channel<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>                <span class="token class-name">HeaderExchangeHandler</span><span class="token punctuation">.</span>KEY_READ_TIMESTAMP <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Long</span> lastWrite <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token class-name">Long</span> <span class="token punctuation">)</span> channel<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>                <span class="token class-name">HeaderExchangeHandler</span><span class="token punctuation">.</span>KEY_WRITE_TIMESTAMP <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span> lastRead <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> now <span class="token operator">-</span> lastRead <span class="token operator">></span> heartbeat <span class="token punctuation">)</span> <span class="token comment">// 注意: 这里的heartbeat是60000ms</span>                <span class="token operator">||</span> <span class="token punctuation">(</span> lastWrite <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> now <span class="token operator">-</span> lastWrite <span class="token operator">></span> heartbeat <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Request</span> req <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            req<span class="token punctuation">.</span><span class="token function">setVersion</span><span class="token punctuation">(</span> <span class="token string">"2.0.0"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            req<span class="token punctuation">.</span><span class="token function">setTwoWay</span><span class="token punctuation">(</span> <span class="token boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            req<span class="token punctuation">.</span><span class="token function">setEvent</span><span class="token punctuation">(</span> <span class="token class-name">Request</span><span class="token punctuation">.</span>HEARTBEAT_EVENT <span class="token punctuation">)</span><span class="token punctuation">;</span>            channel<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span> req <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span> logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span> <span class="token string">"Send heartbeat to remote channel "</span> <span class="token operator">+</span> channel<span class="token punctuation">.</span><span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                      <span class="token operator">+</span> <span class="token string">", cause: The channel has no data-transmission exceeds a heartbeat period: "</span> <span class="token operator">+</span> heartbeat <span class="token operator">+</span> <span class="token string">"ms"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>问题复现:<ol><li>2022年09月27日18:53:00,000 触发一次HeartBeatTask, 假设本次执行到 channel.send(req), 即发送了心跳包.</li><li>由于发送了心跳包, 因此channel的 lastWrite 会被更新 假设被更新为 2022年09月27日18:53:00,001 (注意这个时间与执行HeartBeatTask会有几毫秒差异, 因为netty处理会耗时)</li><li>2022年09月27日18:54:00,000 再次触发一次HeartBeatTask, 当前时间(即为2022年09月27日18:54:00,000) - lastWrite(2022年09月27日18:53:00,001) 为 59999ms &lt; 60000ms, 因此本次不再发送心跳包.</li><li>2022年09月27日18:55:00,000 再次触发一次HeartBeatTask, 当前时间(即为2022年09月27日18:55:00,000) - lastWrite(2022年09月27日18:53:00,001) 为 119999ms &gt; 60000ms, 因此本次发送心跳包.  从上次心跳包到这次, 刚好间隔为2min.</li></ol></li><li>因此在链路空闲时, <strong>两次心跳的间隔稳定为120s &gt; HSF服务端的90s</strong>, 因此服务端会频繁地关闭连接!</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>dubboclient在进行failover之后, 报错信息不直观, 一直在报46调用失败, 从而导致以为只有46这台provider有问题, 从而以为是单台机器的问题, 从而误导了排查方向(例如46这台机器load, 网络等有啥特殊问题). 如果failover逻辑中, 不是简单地按照index+1, 而是使用环形数组, 这样报错信息会报出45, 46有问题, 从而不会误导排查方向.</li><li>该问题只有在dubboclient与所有的provider的TCP连接都关闭, 从而failover失败, 从而抛出异常. 因此较为偶现, 导致无法稳定复现以及保存现场. (当然现在知道了原因, 就可以通过iptables来模拟重现该问题).</li><li>根本原因还是HSF服务端对与dubboclient的适配不好:<ol><li>默认参数90s+dubboclient默认的60s, 在小流量情况下完全是坑爹, 在大流量情况下, 由于业务请求一直会有, 相当于通过业务请求来进行保活了, 因此不会有本文的问题.</li><li>HSF作为dubbo服务端阉割掉了dubbo原生服务端的反向保活能力(provider-&gt;client), 从而变成了单向心跳(client-&gt;provider), 可靠性差很多.</li><li>心跳保活作为RPC框架的基础, 出现问题通常是最后怀疑的点. 而如果用dubbo作为服务端, 要可靠得多, 有双向保活机制, 具体可以参照: <a href="https://dubbo.apache.org/zh/blog/2018/08/19/dubbo-%E7%8E%B0%E6%9C%89%E5%BF%83%E8%B7%B3%E6%96%B9%E6%A1%88%E6%80%BB%E7%BB%93%E4%BB%A5%E5%8F%8A%E6%94%B9%E8%BF%9B%E5%BB%BA%E8%AE%AE/?spm=ata.21736010.0.0.318e4799tOQZt9">dubbo-现有心跳方案总结以及改进建议</a></li></ol></li></ol><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;h2 id=&quot;应用拓扑&quot;&gt;&lt;a href=&quot;#应用拓扑&quot; class=&quot;headerlink&quot; title=&quot;应用拓扑&quot;&gt;&lt;/a&gt;应用拓扑&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;SystemA作为client, 通过dubbo接口调用SystemB提供的某个服务&lt;/li&gt;
&lt;li&gt;SystemB由2台机器组成一个集群, 即 SystemB.45 SystemB.46&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;mermaid&quot;&gt;graph TD
    A[SystemA] --&gt; |dubbo| B[SystemB.45];
        A[SystemA] --&gt; |dubbo| C[SystemB.46];&lt;/pre&gt;


&lt;h2 id=&quot;详细问题&quot;&gt;&lt;a href=&quot;#详细问题&quot; class=&quot;headerlink&quot; title=&quot;详细问题&quot;&gt;&lt;/a&gt;详细问题&lt;/h2&gt;&lt;p&gt;SystemA调用SystemB的服务时:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;SystemA日志中持续性出现调用SystemB失败, 详细错误信息如下:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;且&lt;strong&gt;SystemA报错日志都固定出现在SystemB.46这台机器上&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&quot;https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202302092122356.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;问题1-为啥出现”channel-is-closed”错误-从而导致调用失败&quot;&gt;&lt;a href=&quot;#问题1-为啥出现”channel-is-closed”错误-从而导致调用失败&quot; class=&quot;headerlink&quot; title=&quot;问题1: 为啥出现”channel is closed”错误, 从而导致调用失败?&quot;&gt;&lt;/a&gt;问题1: 为啥出现”channel is closed”错误, 从而导致调用失败?&lt;/h1&gt;&lt;h2 id=&quot;现象&quot;&gt;&lt;a href=&quot;#现象&quot; class=&quot;headerlink&quot; title=&quot;现象:&quot;&gt;&lt;/a&gt;现象:&lt;/h2&gt;</summary>
    
    
    
    
    <category term="java" scheme="https://davyjones2010.github.io/tags/java/"/>
    
    <category term="dubbo" scheme="https://davyjones2010.github.io/tags/dubbo/"/>
    
    <category term="heartbeat" scheme="https://davyjones2010.github.io/tags/heartbeat/"/>
    
  </entry>
  
  <entry>
    <title>主席诗词集锦&amp;赏析</title>
    <link href="https://davyjones2010.github.io/2023-02-08-zhuxishici/"/>
    <id>https://davyjones2010.github.io/2023-02-08-zhuxishici/</id>
    <published>2023-02-08T14:04:28.000Z</published>
    <updated>2023-03-05T16:39:20.009Z</updated>
    
    <content type="html"><![CDATA[<h1 id="水调歌头·重上井冈山"><a href="#水调歌头·重上井冈山" class="headerlink" title="水调歌头·重上井冈山"></a>水调歌头·重上井冈山</h1><p>久有凌云志，重上井冈山。<br>千里来寻故地，旧貌变新颜。<br>到处莺歌燕舞，更有潺潺流水，高路入云端。<br>过了黄洋界，险处不须看。<br>风雷动，旌旗奋，是人寰。<br>三十八年过去，弹指一挥间。<br>可上九天揽月，可下五洋捉鳖，谈笑凯歌还。<br>世上无难事，只要肯登攀！</p><hr><h1 id="忆秦娥·娄山关"><a href="#忆秦娥·娄山关" class="headerlink" title="忆秦娥·娄山关"></a>忆秦娥·娄山关</h1><p>西风烈，长空雁叫霜晨月。霜晨月，马蹄声碎，喇叭声咽。</p><p>雄关漫道真如铁，而今迈步从头越。从头越，苍山如海，残阳如血。</p><hr><h1 id="清平乐·六盘山"><a href="#清平乐·六盘山" class="headerlink" title="清平乐·六盘山"></a>清平乐·六盘山</h1><p>天高云淡，望断南飞雁。不到长城非好汉，屈指行程二万。</p><p>六盘山上高峰，红旗漫卷西风。今日长缨在手，何时缚住苍龙？</p><hr><h1 id="七律·和柳亚子先生"><a href="#七律·和柳亚子先生" class="headerlink" title="七律·和柳亚子先生"></a>七律·和柳亚子先生</h1><p>饮茶粤海未能忘，索句渝州叶正黄。</p><p>三十一年还旧国，落花时节读华章。</p><p>牢骚太盛防肠断，风物长宜放眼量。</p><p>莫道昆明池水浅，观鱼胜过富春江。</p><hr><h1 id="七律·人民解放军占领南京"><a href="#七律·人民解放军占领南京" class="headerlink" title="七律·人民解放军占领南京"></a>七律·人民解放军占领南京</h1><p>钟山风雨起苍黄，百万雄师过大江。<br>虎踞龙盘今胜昔，天翻地覆慨而慷。<br>宜将剩勇追穷寇，不可沽名学霸王。<br>天若有情天亦老，人间正道是沧桑。</p><h2 id="译文"><a href="#译文" class="headerlink" title="译文"></a>译文</h2><p>自然界如果有知，它会体察到兴盛与衰败这条不可改变的法则。事物不断的向前发展更新和变化，这是必然的规律。</p><h2 id="创作背景"><a href="#创作背景" class="headerlink" title="创作背景"></a>创作背景</h2><p>1949年4月21日，毛泽东主席和朱德总司令发出《向全国进军的命令》，号令全军坚决、彻底、干净、全部地歼灭中国境内一切敢于抵抗的国民党反动派，解放全中国。中国人民解放军百万大军于4月23日占领国民党反动政府的“首都”南京。毛泽东同志在北平香山双清别墅得到占领南京的捷报，心情振奋，写下了这首诗。</p><hr><h1 id="七律二首·送瘟神"><a href="#七律二首·送瘟神" class="headerlink" title="七律二首·送瘟神"></a>七律二首·送瘟神</h1><p>读六月三十日《人民日报》，余江县消灭了血吸虫。浮想联翩，夜不能寐。微风拂煦，旭日临窗，遥望南天，欣然命笔。</p><p>绿水青山枉自多，华佗无奈小虫何！<br>千村薜荔人遗矢，万户萧疏鬼唱歌。<br>坐地日行八万里，巡天遥看一千河。<br>牛郎欲问瘟神事，一样悲欢逐逝波。</p><p>春风杨柳万千条，六亿神州尽舜尧。<br>红雨随心翻作浪，青山着意化为桥。<br>天连五岭银锄落，地动三河铁臂摇。<br>借问瘟君欲何往，纸船明烛照天烧。</p><h2 id="译文-1"><a href="#译文-1" class="headerlink" title="译文"></a>译文</h2><p>祖国大地上白白有这么多的绿水青山，连神医华佗拿小小的血吸虫也没有根治的办法。<br>许多村庄荒草丛生，杳无人迹，瘟疫无情蔓延，千门万户家破人亡，听到的只是鬼在唱歌。<br>坐在地球上每天行走八万里的路程，沿着天路遥遥地看过浩渺的银河。<br>牛郎如问起血吸虫病的事，一切悲欢离合都已随着时光的流逝而成为过去。</p><p>春风吹拂杨柳新绿，新中国一片春意盎然，六亿人民意气风发，个个都像古代的尧舜一样。<br>落花随着自己的心意翻波逐浪，青山有意化崎岖险阻为康庄大道。<br>人民群众挥动银光闪闪的铁锄，挥舞着坚实的臂膀，兴修水利，整治山河，使大地都为之颤动。<br>试问瘟神啊，你要往哪里去？人们焚化纸钱，点起明烛，火光明亮，照耀天空，以此来送走瘟神。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;水调歌头·重上井冈山&quot;&gt;&lt;a href=&quot;#水调歌头·重上井冈山&quot; class=&quot;headerlink&quot; title=&quot;水调歌头·重上井冈山&quot;&gt;&lt;/a&gt;水调歌头·重上井冈山&lt;/h1&gt;&lt;p&gt;久有凌云志，重上井冈山。&lt;br&gt;千里来寻故地，旧貌变新颜。&lt;br&gt;到处莺歌燕舞，更有潺潺流水，高路入云端。&lt;br&gt;过了黄洋界，险处不须看。&lt;br&gt;风雷动，旌旗奋，是人寰。&lt;br&gt;三十八年过去，弹指一挥间。&lt;br&gt;可上九天揽月，可下五洋捉鳖，谈笑凯歌还。&lt;br&gt;世上无难事，只要肯登攀！&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;忆秦娥·娄山关&quot;&gt;&lt;a href=&quot;#忆秦娥·娄山关&quot; class=&quot;headerlink&quot; title=&quot;忆秦娥·娄山关&quot;&gt;&lt;/a&gt;忆秦娥·娄山关&lt;/h1&gt;&lt;p&gt;西风烈，长空雁叫霜晨月。霜晨月，马蹄声碎，喇叭声咽。&lt;/p&gt;
&lt;p&gt;雄关漫道真如铁，而今迈步从头越。从头越，苍山如海，残阳如血。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;清平乐·六盘山&quot;&gt;&lt;a href=&quot;#清平乐·六盘山&quot; class=&quot;headerlink&quot; title=&quot;清平乐·六盘山&quot;&gt;&lt;/a&gt;清平乐·六盘山&lt;/h1&gt;&lt;p&gt;天高云淡，望断南飞雁。不到长城非好汉，屈指行程二万。&lt;/p&gt;
&lt;p&gt;六盘山上高峰，红旗漫卷西风。今日长缨在手，何时缚住苍龙？&lt;/p&gt;</summary>
    
    
    
    <category term="诗词" scheme="https://davyjones2010.github.io/categories/%E8%AF%97%E8%AF%8D/"/>
    
    
    <category term="诗词" scheme="https://davyjones2010.github.io/tags/%E8%AF%97%E8%AF%8D/"/>
    
    <category term="主席诗词" scheme="https://davyjones2010.github.io/tags/%E4%B8%BB%E5%B8%AD%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>宋词集锦&amp;赏析</title>
    <link href="https://davyjones2010.github.io/2023-02-08-songci/"/>
    <id>https://davyjones2010.github.io/2023-02-08-songci/</id>
    <published>2023-02-08T14:03:33.000Z</published>
    <updated>2023-03-05T16:39:20.009Z</updated>
    
    <content type="html"><![CDATA[<h1 id="行香子·过七里濑"><a href="#行香子·过七里濑" class="headerlink" title="行香子·过七里濑"></a>行香子·过七里濑</h1><p>宋 · 苏轼<br>一叶舟轻，双桨鸿惊。水天清、影湛波平。鱼翻藻鉴，鹭点烟汀。过沙溪急，霜溪冷，月溪明。<br>重重似画，曲曲如屏。算当年、虚老严陵。君臣一梦，今古空名。但远山长，云山乱，晓山青。</p><p>这首词作于公元1073年（宋神宗熙宁六年）春二月。苏轼时任杭州通判，巡查富阳，由新城至桐庐，乘舟富春江，经过七里濑时作此词。</p><p>七里濑：又名七里滩、七里泷，在今浙江省桐庐县城南三十里。钱塘江两岸山峦夹峙，水流湍急，连绵七里，故名七里濑。濑，沙石上流过的急水。</p><p>严陵：即严光，字子陵，东汉人，曾与<a href="https://so.gushiwen.cn/authorv_0ef2b626111d.aspx">刘秀</a>同学，并帮助刘秀打天下。刘秀称帝后，他改名隐居。刘秀三次派人才把他召到京师。授谏议大夫，他不肯接受，归隐富春江，终日钓鱼。</p><p>接下来“过沙溪急，霜溪冷，月溪明”三句，节奏轻快。沙溪，是白天之溪，清澈而见沙底；霜溪，是清晓之溪，清冷而有霜意；月溪，乃是月下之溪，是明亮的水晶世界。词人用蒙太奇手法，剪接了三个不同时辰的舟行之景。既写出了船之行程，也创造出清寒凄美的意境，由此引出一股人生的况味，为下片抒写人生感慨作了铺垫。</p><p>“算当年，虚老严陵。”东汉初年的严子陵，隐居不仕，垂钓富春江上。昔人多说严光垂钓实是“钓名”，东坡在此，也笑严光当年白白在此终老，不曾真正领略到山水佳处。“君臣一梦，今古空名”，表达出浮生若梦的感慨：皇帝和隐士，而今也已如梦一般消失，只留下空名而已。那么真正能永恒留传的实体是什么呢？“但远山长，云山乱，晓山青。”只有远山连绵，重峦叠嶂；山间白云，缭绕变形；晓山晨曦，青翠欲滴。意思是说，只有大自然才是永恒的，只有大自然之美才是永恒的。这是<a href="https://so.gushiwen.cn/authorv_3b99a16ff2dd.aspx">苏轼</a>的一贯思想，正如他在《前赤壁赋》中所感叹的：“惟江上之清风，与山间之明月，耳得之而为声，目遇之而成色，取之无禁，用之不竭……”</p><hr><h1 id="临安春雨初霁"><a href="#临安春雨初霁" class="headerlink" title="临安春雨初霁"></a>临安春雨初霁</h1><p>宋 · 陆游</p><p>世味年来薄似纱，谁令骑马客京华。<br>小楼一夜听春雨，深巷明朝卖杏花。<br>矮纸斜行闲作草，晴窗细乳戏分茶。<br>素衣莫起风尘叹，犹及清明可到家。</p><p>孩儿巷里的南宋慢生活</p><p>我们的故事从杭城闹市区的一幢小楼说起。</p><p>南宋偏安一隅，临安城的人们有了短暂的慢生活时光。陆游在起起伏伏的仕途中间，也得以钱塘江边观潮、西子湖上泛舟、冷泉亭中饮酒、深巷小楼戏分茶。最让如今杭州人乐道的莫过于他和一条小巷一座小楼的传说。</p><p>孩儿巷98号，陆游回到杭州做军器少监，就寓居于这幢小楼里，而他办公的地方位于现在的百井坊巷一带，每天他或走路或乘轿或骑马去上班。</p><p>小楼现在是陆游纪念馆，白墙黛瓦，岁月斑驳的痕迹很显眼，这里虽然是清末建筑，没有留下他的任何痕迹，但一首《临安春雨初霁》足矣。</p><p>处于闹市中的孩儿巷当时甚是热闹。七夕，孩子们会买泥土做的玩具，手持新鲜的荷叶嬉戏；除夕，家庭主妇们会在供桌上摆放泥娃娃，用红色的绒线给泥娃娃系一个钱币，以求早生贵子；平日里，这条巷子就成了擅长捏塑泥孩儿的民间艺人的天堂，泥偶铺子甚多，且生意兴隆。所以哪怕是陆游夜班后回到小楼，巷子也是“近坊灯火如昼明，十里东风吹市声。”</p><p>初春，淅淅沥沥的雨声浸满了二楼的书房， “小楼一夜听春雨，深巷明朝卖杏花。矮纸斜行闲作草，晴窗细乳戏分茶。”虽然诗、酒、花、茶一应俱全，但陆游难以入眠，因为他花甲之年还没实现自己的英雄梦——“上马击狂胡,下马草军书”，收复中原。</p><p>据史料记载，陆游一生多次来杭，并居住在保和坊，宋时的保和坊就是现在的孩儿巷，俗称砖街巷。在陆游的眼中，孩儿巷是极富诗意的：夜色灿烂、静寂如野。“近坊灯火如昼明，十里杀风吹市声”、“谁家小楼歌恼侬，余响缥缈萦帘栊。”等诗句就是陆游笔下的孩儿巷。这位深切关注国家命运的豪迈诗人，竟将孩儿巷的市井风貌观察、描写得如此生动，实为不易，陆游为孩儿巷的传神写照，一直流传至今。</p><p>孩儿巷的重要历史文化价值，还在于南宋爱国诗人陆游曾写下了名闻遐迩的不朽诗篇：“世味年来薄似纱，谁令骑马客京华。小楼一夜听春雨，深巷明朝卖杏花。矮纸斜行闲作草，晴窗细乳戏分茶。素衣莫起风尘叹，犹及清明可到家。” 现在的孩儿巷98号，设有<a href="https://baike.baidu.com/item/%E9%99%86%E6%B8%B8%E7%BA%AA%E5%BF%B5%E9%A6%86/6426661?fromModule=lemma_inlink">陆游纪念馆</a>。</p><p>陆游62岁时任除军器少监（唐宋时期的官职名，监督兵器、旗帜、戎帐等物品的造作），就住在孩儿巷内的南楼，在不眠之夜听了春雨之后，写下了著名的《<a href="https://baike.baidu.com/item/%E4%B8%B4%E5%AE%89%E6%98%A5%E9%9B%A8%E5%88%9D%E9%9C%81/7331905?fromModule=lemma_inlink">临安春雨初霁</a>》：世味年来薄似纱，谁令骑马客京华？小楼一夜听春雨，深巷明朝卖杏花。矮纸斜行闲作草，晴窗细乳戏分茶。素衣莫起风尘叹，犹及清明可到家。</p><hr><h1 id="看梅绝句"><a href="#看梅绝句" class="headerlink" title="看梅绝句"></a>看梅绝句</h1><p>陆游 〔宋代〕</p><p>老子舞时不须拍，梅花乱插乌巾香。<br>樽前作剧莫相笑，我死诸君思此狂。</p><hr><h1 id="六月二十七日望湖楼醉书-之一"><a href="#六月二十七日望湖楼醉书-之一" class="headerlink" title="六月二十七日望湖楼醉书 之一"></a>六月二十七日望湖楼醉书 之一</h1><p>宋 · 苏轼<br>黑云翻墨未遮山，白雨跳珠乱入船。<br>卷地风来忽吹散，望湖楼下水如天。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>六月二十七日：指宋神宗熙宁五年（1072）六月二十七日。<br>望湖楼：古建筑名，又叫看经楼。位于杭州西湖畔，五代时吴越王钱弘俶所建。</p><h2 id="赏析"><a href="#赏析" class="headerlink" title="赏析"></a>赏析</h2><p>公元1072年（宋神宗熙宁五年），作者在杭州任通判。这年六月二十七日，他游览西湖，在船上看到奇妙的湖光山色，再到望湖楼上喝酒，写下这五首七言绝句。本诗是其第一首。</p><p>此诗描绘了望湖楼的美丽雨景。才思敏捷的诗人用诗句捕捉到西子湖这一番别具风味的“即兴表演”，绘成一幅“西湖骤雨图”。乌云骤聚，大雨突降，倾刻又雨过天晴，水天一色。又是山，又是水，又是船，这就突出了泛舟西湖的特点。其次，作者用“黑云翻墨”，“白雨跳珠”形成强烈的色彩对比，给人以很强的质感。再次，用“翻墨”写云的来势，用“跳珠”描绘雨点飞溅的情态，以动词前移的句式使比喻运用得灵活生动却不露痕迹。而“卷地风来忽吹散，望湖楼下水如天”两句又把天气由骤雨到晴朗前转变之快描绘得令人心清气爽，眼前陡然一亮，境界大开。</p><p>诗人将一场变幻的风雨写得十分生动。他那时是坐在船上。船正好划到望湖楼下，忽见远处天上涌起来一片黑云，就像泼翻了一盆墨汁，半边天空霎时昏暗。这片黑云不偏不倚，直向湖上奔来，一眨眼间，便泼下一场倾盆大雨。只见湖面上溅起无数水花，那雨点足有黄豆大小，纷纷打到船上来，就像天老爷把千万颗珍珠一齐撒下，船篷船板，全是一片乒乒乓乓的声响。船上有人吓慌了，嚷着要靠岸。可是诗人朝远处一看，却知道这不过是一场过眼云雨，转眼就收场了。远处的群山依然映着阳光，全无半点雨意。事实上也确实是如此。这片黑云，顺着风势吹来，也顺着风势移去。还不到半盏茶工夫，雨过天晴，依旧是一片平静。水映着天，天照着水，碧波如镜，又是一派温柔明媚的风光。</p><p>诗人先在船中，后在楼头，迅速捕捉住湖上急剧变化的自然景物：云翻、雨泻、风卷、天晴，写得有远有近，有动有静，有声有色，有景有情。抓住几个要点，把一场忽然而来又忽然而去的骤雨，写得非常鲜明，富于情趣，颇见功夫。诗用“翻墨”写出云的来势，用“跳珠”描绘雨的特点，说明是骤雨而不是久雨。“未遮山”是骤雨才有的景象。“卷地风”说明雨过得快的原因，都是如实描写，却分插在第一、第三句中，彼此呼应，烘托得好。</p><p>最后用“水如天”写一场骤雨的结束，又有悠然不尽的情致。句中又用“白雨”和“黑云”映衬，用“水如天”和“卷地风”对照，用“乱入船“与“未遮山”比较，都显出作者构思时的用心。这二十八个字，随笔挥洒，信手拈来，显示出作者功力的深厚，只是在表面上不着痕迹罢了。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>奥运会解说那个，我记得东京奥运会皮划艇有个比赛因为下雨推迟了，然后开始时雨还没有完全停，屏幕上能看到雨点撞击的样子，然后解说来了句黑云翻墨未遮山白雨跳珠乱入船</p><hr><h1 id="六月二十七日望湖楼醉书-之五"><a href="#六月二十七日望湖楼醉书-之五" class="headerlink" title="六月二十七日望湖楼醉书 之五"></a>六月二十七日望湖楼醉书 之五</h1><p>宋 · 苏轼</p><p>未成小隐聊中隐，可得长闲胜暂闲。<br>我本无家更安往，故乡无此好湖山。</p><p>做不到隐居山林，暂时先做个闲官吧，这样尚可得到长期的悠闲胜过暂时的休闲。<br>我本来就没有家，不安身在这里又能到哪里去呢?何况就算是故乡，也没有像这里这样优美的湖光山色。</p><hr><h1 id="湖州"><a href="#湖州" class="headerlink" title="湖州"></a>湖州</h1><p>【作者】戴表元【朝代】宋</p><p>山从天目成群出，水傍太湖分港流。<br>行遍江南清丽地，人生只合住湖州。</p><hr><h1 id="寒食雨二首"><a href="#寒食雨二首" class="headerlink" title="寒食雨二首"></a>寒食雨二首</h1><p>苏轼 〔宋代〕</p><p>自我来黄州，已过三寒食。<br>年年欲惜春，春去不容惜。<br>今年又苦雨，两月秋萧瑟。<br>卧闻海棠花，泥污燕脂雪。<br><strong>暗中偷负去，夜半真有力。</strong><br><strong>何殊病少年，病起头已白。</strong></p><p>春江欲入户，雨势来不已。<br>小屋如渔舟，濛濛水云里。<br>空庖煮寒菜，破灶烧湿苇。<br>那知是寒食，但见乌衔纸。<br>君门深九重，坟墓在万里。<br>也拟哭途穷，死灰吹不起。</p><h2 id="译文"><a href="#译文" class="headerlink" title="译文"></a>译文</h2><p>自从我来到黄州，已度过三个寒食时际。<br>年年爱惜春光想将它挽留，春天自管自归去不容人惋惜。<br>今年又苦于连连阴雨，绵延两个月气候萧瑟一如秋季。<br>独卧在床听得雨打海棠，胭脂样花瓣像雪片凋落污泥。<br>造物主把艳丽的海棠偷偷背去，夜半的雨真有神力。<br>雨中海棠仿佛一位患病的少年，病愈时双鬓斑白已然老去。</p><p>春江暴涨仿佛要冲进门户，雨势凶猛袭来似乎没有穷已。<br>我的小屋宛如一叶渔舟，笼罩在濛濛水云里。<br>空空的厨房煮着些寒菜，潮湿的芦苇燃在破灶底。<br>哪还知道这一天竟然是寒食，却看见乌鸦衔来烧剩的纸币。<br>天子的宫门有九重，深远难以归去，祖上的坟茔遥隔万里不能吊祭。<br>我只想学阮籍作穷途痛哭，心头却似死灰并不想重新燃起。</p><h2 id="注释-1"><a href="#注释-1" class="headerlink" title="注释"></a>注释</h2><p>寒食：旧历清明节的前一天，是寒食节。<br>胭脂雪：指海棠花瓣。</p><h2 id="创作背景"><a href="#创作背景" class="headerlink" title="创作背景"></a>创作背景</h2><p>这首诗作于元丰五年（1082年）三月寒食节。东坡依然处境艰难，生活凄凉。心情孤郁。经过险恶的政治斗争和牢狱的折磨，东坡的个性收敛了许多。这两首诗充分表现了这种心境平和之后的无奈和绝望。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;行香子·过七里濑&quot;&gt;&lt;a href=&quot;#行香子·过七里濑&quot; class=&quot;headerlink&quot; title=&quot;行香子·过七里濑&quot;&gt;&lt;/a&gt;行香子·过七里濑&lt;/h1&gt;&lt;p&gt;宋 · 苏轼&lt;br&gt;一叶舟轻，双桨鸿惊。水天清、影湛波平。鱼翻藻鉴，鹭点烟汀。过沙溪急，霜溪冷，月溪明。&lt;br&gt;重重似画，曲曲如屏。算当年、虚老严陵。君臣一梦，今古空名。但远山长，云山乱，晓山青。&lt;/p&gt;
&lt;p&gt;这首词作于公元1073年（宋神宗熙宁六年）春二月。苏轼时任杭州通判，巡查富阳，由新城至桐庐，乘舟富春江，经过七里濑时作此词。&lt;/p&gt;
&lt;p&gt;七里濑：又名七里滩、七里泷，在今浙江省桐庐县城南三十里。钱塘江两岸山峦夹峙，水流湍急，连绵七里，故名七里濑。濑，沙石上流过的急水。&lt;/p&gt;
&lt;p&gt;严陵：即严光，字子陵，东汉人，曾与&lt;a href=&quot;https://so.gushiwen.cn/authorv_0ef2b626111d.aspx&quot;&gt;刘秀&lt;/a&gt;同学，并帮助刘秀打天下。刘秀称帝后，他改名隐居。刘秀三次派人才把他召到京师。授谏议大夫，他不肯接受，归隐富春江，终日钓鱼。&lt;/p&gt;
&lt;p&gt;接下来“过沙溪急，霜溪冷，月溪明”三句，节奏轻快。沙溪，是白天之溪，清澈而见沙底；霜溪，是清晓之溪，清冷而有霜意；月溪，乃是月下之溪，是明亮的水晶世界。词人用蒙太奇手法，剪接了三个不同时辰的舟行之景。既写出了船之行程，也创造出清寒凄美的意境，由此引出一股人生的况味，为下片抒写人生感慨作了铺垫。&lt;/p&gt;
&lt;p&gt;“算当年，虚老严陵。”东汉初年的严子陵，隐居不仕，垂钓富春江上。昔人多说严光垂钓实是“钓名”，东坡在此，也笑严光当年白白在此终老，不曾真正领略到山水佳处。“君臣一梦，今古空名”，表达出浮生若梦的感慨：皇帝和隐士，而今也已如梦一般消失，只留下空名而已。那么真正能永恒留传的实体是什么呢？“但远山长，云山乱，晓山青。”只有远山连绵，重峦叠嶂；山间白云，缭绕变形；晓山晨曦，青翠欲滴。意思是说，只有大自然才是永恒的，只有大自然之美才是永恒的。这是&lt;a href=&quot;https://so.gushiwen.cn/authorv_3b99a16ff2dd.aspx&quot;&gt;苏轼&lt;/a&gt;的一贯思想，正如他在《前赤壁赋》中所感叹的：“惟江上之清风，与山间之明月，耳得之而为声，目遇之而成色，取之无禁，用之不竭……”&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;临安春雨初霁&quot;&gt;&lt;a href=&quot;#临安春雨初霁&quot; class=&quot;headerlink&quot; title=&quot;临安春雨初霁&quot;&gt;&lt;/a&gt;临安春雨初霁&lt;/h1&gt;&lt;p&gt;宋 · 陆游&lt;/p&gt;</summary>
    
    
    
    <category term="诗词" scheme="https://davyjones2010.github.io/categories/%E8%AF%97%E8%AF%8D/"/>
    
    
    <category term="诗词" scheme="https://davyjones2010.github.io/tags/%E8%AF%97%E8%AF%8D/"/>
    
    <category term="宋词" scheme="https://davyjones2010.github.io/tags/%E5%AE%8B%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>唐诗集锦&amp;赏析</title>
    <link href="https://davyjones2010.github.io/2023-02-08-tangshi/"/>
    <id>https://davyjones2010.github.io/2023-02-08-tangshi/</id>
    <published>2023-02-08T14:01:34.000Z</published>
    <updated>2023-03-05T16:39:20.009Z</updated>
    
    <content type="html"><![CDATA[<h1 id="忆秦娥"><a href="#忆秦娥" class="headerlink" title="忆秦娥"></a>忆秦娥</h1><p>李白</p><p>箫声咽，秦娥梦断秦楼月。秦楼月，年年柳色，灞陵伤别。</p><p>乐游原上清秋节，咸阳古道音尘绝。音尘绝，西风残照，汉家陵阙。</p><hr><h1 id="杂咏三首"><a href="#杂咏三首" class="headerlink" title="杂咏三首"></a>杂咏三首</h1><p>王维</p><p>家住孟津河，门对孟津口。<br>常有江南船，寄书家中否。</p><p>君自故乡来，应知故乡事。<br>来日绮窗前，寒梅著花未。</p><p>已见寒梅发，复闻啼鸟声。<br>心心视春草，畏向阶前生。</p><p>孟津河：指河南洛阳北部的黄河南岸一带，是“武王伐纣，与八百诸侯会盟”之地，为古代交通要道。</p><hr><h1 id="游洞庭湖五首·其二"><a href="#游洞庭湖五首·其二" class="headerlink" title="游洞庭湖五首·其二"></a>游洞庭湖五首·其二</h1><p>（唐）李白</p><p>南湖秋水夜无烟，耐可乘流直上天。<br>且就洞庭赊月色，将船买酒白云边。</p><h2 id="赏析"><a href="#赏析" class="headerlink" title="赏析"></a>赏析</h2><p>诗人为我们描绘了月夜泛舟的情形：明月皎皎，湖水悠悠。洞庭秋水澄澈无烟，水月相映，清辉怡人。</p><p>诗人与友人（此处，我们不妨把其族叔也当作友人）泛舟湖上，与清风朗月为伴，不由生出遗世独立、羽化登仙的“上天”之念。但乘流上天终不可得，诗人也只好收起这份不羁的想象，姑且向洞庭湖赊几分月色，痛快地赏月喝酒。</p><p>首句写景，同时点出秋游洞庭事。“南湖秋水夜无烟”，初读平淡无奇，似是全不费力，脱口而出，实则极具表现力：月夜泛舟，洞庭湖水全不似白日烟波浩渺、水汽蒸腾之气象。波澜不惊，澄澈如画。无烟水愈清，水清月更明。溶溶月色溶于水，悠悠湖光悠月明。这种景象，这种意味，非置身其中不可得，非写意简笔不可得。诗人虽然没有精工细绘，但读者心中自会涌现出一幅水天一色的美好图景。</p><hr><h1 id="送柴侍御"><a href="#送柴侍御" class="headerlink" title="送柴侍御"></a>送柴侍御</h1><p>（唐）王昌龄</p><p>沅水通波接武冈，送君不觉有离伤。<br>青山一道同云雨，明月何曾是两乡。</p><p>典型王昌龄风格的送别诗。<br>王昌龄一生官场沉浮(以沉为主)，交友广阔，诗文题材涉猎颇多，尤擅边塞、宫怨、离别。</p><p>可能是因为大部分时间不是被贬，就是谪居，一生高开低走，所以老王非常珍惜朋友之间的温暖情意。王昌龄的送别诗，首先是构思新颖，不落窠臼，看似轻描淡写，其实情意浓厚。其次是不重离别场景，多描绘别后情景。重点是，不伤离别而多慰别，但却回味颇深。</p><p>回到这首诗，前两句先说沅水通波，淡化距离感(目测龙标到武冈，好像也不近)，顺理成章的找了理由，随口说没觉得有啥离愁。稍微有点心眼都能看出来，那么大的诗人，说得越无所谓，其实越当回事儿。</p><p>下一句就看出功夫了，青山一道同云雨，就七个字，信息量超级大。青山一道，没有特指哪座山，说明同游过不止一座山，爱好相同，有点携手踏遍青山的意思。同云雨就不说了，至少共同经历了各种天气变化，说明相处时间不短(想污了的自己面壁去)。</p><p>最后一句，明月何曾是两乡，戏肉来了。第一层意思，借明月同天，再次拉近彼此距离，是为慰别——千里共婵娟。第二层意思，毕竟38万公里乘以2，说不远。。。真不远吗？是为忍别——道是无晴却有晴。第三层意思，从此以后，日踏青山，夜望明月，没有了你，却全都是你，是为难别——醒也无聊，醉也无聊。。。</p><p>老王同学，浪漫豪情不及李白，才华横溢不及王维，侠之大者不及杜甫，但是其情景妙合，意与境浑，委婉含蓄，意境深远，堪称大家。</p><hr><h1 id="酬中都小吏携斗酒双鱼于逆旅见赠"><a href="#酬中都小吏携斗酒双鱼于逆旅见赠" class="headerlink" title="酬中都小吏携斗酒双鱼于逆旅见赠"></a>酬中都小吏携斗酒双鱼于逆旅见赠</h1><p><a href="https://so.gushiwen.cn/authorv_b90660e3e492.aspx">李白</a> <a href="https://so.gushiwen.cn/shiwens/default.aspx?cstr=%E5%94%90%E4%BB%A3">〔唐代〕</a></p><p>鲁酒若琥珀，汶鱼紫锦鳞。<br>山东豪吏有俊气，手携此物赠远人。<br>意气相倾两相顾，斗酒双鱼表情素。<br>双鳃呀呷鳍鬣张，拨剌银盘欲飞去。<br>呼儿拂几霜刃挥，红肌花落白雪霏。<br>为君下箸一餐饱，醉著金鞍上马归。</p><h2 id="译文"><a href="#译文" class="headerlink" title="译文"></a>译文</h2><p>鲁地的酒色如琥珀，汶水鱼紫鳞似锦。<br>山东小吏豪爽俊逸．提来这两样东西送给客人。<br>二人意气相投，两相顾惜，两条鱼一杯酒以表情意。<br>鱼儿吞吐双鳃，振起鳍鬣，跋刺一声，要从银盘中跳去。<br>唤儿擦净几案挥刀割肉，红的如同花落，白的好似雪飞。<br>为你下箸吃足了酒，著鞍上马，醉蒙蒙地归去。</p><p>鳍（qí）鬣（liè）：鱼的背鳍为鳍，胸鳍为鬣。</p><h2 id="创作背景"><a href="#创作背景" class="headerlink" title="创作背景"></a>创作背景</h2><p>公元746年（天宝五年），<a href="https://so.gushiwen.cn/authorv_b90660e3e492.aspx">李白</a>卧病任城很久，秋天，病稍好，又去游览鲁郡，到达中都。中都一位久仰李白盛名的小官携斗酒双鱼到旅馆拜访李白。席中，李白诗兴大发，作此诗以酬谢。</p><h2 id="赏析-1"><a href="#赏析-1" class="headerlink" title="赏析"></a>赏析</h2><p>这首诗记述诗人在浪迹江湖的旅途中，收到中都一小吏赠送的酒、鱼，便豪兴大发，烹鱼煮酒，二人对酌，直到酒酣饭饱，才“醉著金鞍上马归”。<br>“鲁酒若琥珀，汶鱼紫锦鳞，”是盛赞中都小吏礼物的珍贵。以“斗酒诗百篇”而著称的“谪仙人”<a href="https://so.gushiwen.cn/authorv_b90660e3e492.aspx">李白</a>，对山东名酒素有特殊的感情，曾经为此写下热情洋溢的诗句：“兰陵美酒郁金香，玉碗盛来琥珀光，但使主人能醉客，不知何处是他乡。”中都小吏带来的美酒也是光“若琥珀”，这就使李白愈感谢小吏的情意。<br>中都小吏能以名贵的贡品金赤鳞赠送李白，可见其情深意长。李白在诗的头两句首先从光彩色泽上对鲁酒，汶鱼进行点染，说明礼物的名贵，为下文抒写小吏对诗人的挚情做好铺垫。“山东豪吏有俊气，手携此物赠远人”直抒胸臆，热情赞美中都小吏高尚的心灵，赞美小吏对李白这异乡“远人”的深情厚谊。第三句中诗人不用“小吏”而用“豪吏”，既是对小吏的尊重，又暗示出李白对中都小吏位虽卑，德却高的赞赏，换句话说，“小吏”德本高位却卑，说明封建社会的黑暗。<br>“意气相倾两相顾，斗酒双鱼表情素。”在这两句诗中，直接吟咏彼此之间的真挚的友谊。中都小吏和诗人的“两相顾”，因为二人的意气之“相倾”。而二人“意气相倾”的力量支点又都在于有不肯摧眉折腰事权贵的崇高心灵。正由于有了这共通的价值观，因此中都小吏对“赐金放还”的李白不但不鄙弃，相反，还“意气相倾”地“携斗酒双鱼于逆旅”来拜访。也正由于有了相通的心灵，因此李白对小吏那不附炎趋势的高尚品格才愈加钦佩，“斗酒双鱼表情素”一句是对“意气相倾两相顾”的补充，“斗酒双鱼”原本是中都小吏为“表情素”赠予诗人的礼物，但在“恨相逢之晚”的氛围中，诗人却将“斗酒双鱼”“借花献佛”般地反赠小吏，表达了诗人对小吏由衷敬慕的“情素”。<br>“双鳃呀呷鳍鬣张，跋刺银盘欲飞去”两句。是写赤鳞鱼出水后的神态：赤鳞鱼发着呀呷的声音，鳍鬣都大张开来，在盘中激烈地翻滚着几欲飞走。“呼儿拂几霜刃挥，红肥花落白雪霏”两句，重在描写宰鱼，做鱼的过程，意思是招呼孩子擦净桌案挥刀宰鱼，雪白肥嫩的鱼肉呈现在眼前。这里“呼”、“拂”、“挥”三个动词给人以欢快之感，使诗句的内在节奏感迅速加快；而“红”、“花”、“白”三种鲜亮的色彩，也给人以赏心悦目的感觉。这些充满动感和色彩感的字词的巧妙间用，显示出李白及其家人酬谢中都小吏时轻松快捷的心情。<br>结句“为君下筯一餐饱，醉著金鞍上马归”，意思是希望小吏开怀畅饮，之后再上马酣然归去。这首诗歌虽然不象《赠汪伦》、《黄鹤楼送<a href="https://so.gushiwen.cn/authorv_3811e4e1f460.aspx">孟浩然</a>之广陵》等诗作一样著名，但在李白描写友情的诗歌中仍不失为一首佳作。它体现了诗人对下层百姓的深挚友情。<br>李白自离长安后，饱览世态之炎凉，倍尝势力小人的鄙视。困窘之时，素昧平生的中都小吏能毅然冲破世俗樊篱，“携斗酒双鱼于逆旅”拜访李白，更显其心灵之美。同时通过揭露小吏的位卑与心灵的高洁之间所存在的矛盾，控诉摧残人才的封建社会。另外，此诗写鱼酒活灵活现，跃然纸上，而李白豪爽坦诚、热情待人的音容笑貌，也宛然可接。<br>“意气相倾两相顾”，也显示了一代大诗人与下层社会一小吏意气相投的真挚友谊及心心相印的心灵之美</p><hr><h1 id="剑客-x2F-述剑"><a href="#剑客-x2F-述剑" class="headerlink" title="剑客 &#x2F; 述剑"></a>剑客 &#x2F; 述剑</h1><p>（唐）贾岛</p><p>十年磨一剑，霜刃未曾试。<br>今日把示君，谁有不平事？</p><hr><h1 id="短歌行"><a href="#短歌行" class="headerlink" title="短歌行"></a>短歌行</h1><p>（唐）李白</p><p>白日何短短，百年苦易满。<br>苍穹浩茫茫，万劫太极长。<br>麻姑垂两鬓，一半已成霜。<br>天公见玉女，大笑亿千场。<br>吾欲揽六龙，回车挂扶桑。<br>北斗酌美酒，劝龙各一觞。<br>富贵非所愿，与人驻颜光。</p><hr><h1 id="侠客行"><a href="#侠客行" class="headerlink" title="侠客行"></a>侠客行</h1><p>李白〔唐代〕</p><p>赵客缦胡缨，吴钩霜雪明。<br>银鞍照白马，飒沓如流星。<br>十步杀一人，千里不留行。<br>事了拂衣去，深藏身与名。<br>闲过信陵饮，脱剑膝前横。<br>将炙啖朱亥，持觞劝侯嬴。<br>三杯吐然诺，五岳倒为轻。<br>眼花耳热后，意气素霓生。<br>救赵挥金槌，邯郸先震惊。<br>千秋二壮士，烜赫大梁城。<br>纵死侠骨香，不惭世上英。<br>谁能书阁下，白首太玄经。</p><h2 id="译文-1"><a href="#译文-1" class="headerlink" title="译文"></a>译文</h2><p>燕赵的侠士，头上系着侠士的武缨，腰佩吴越闪亮的弯刀。<br>骑着银鞍白马，在大街上驰骋就像天上的流星一样迅疾。<br>他们武艺盖世，十步可斩杀一人，千里之行，无人可挡。<br>他们大事做成后，拂袖而去将功劳和美名隐藏起来。<br>想当年，侯嬴、朱亥与信陵君结交，与之脱剑横膝，交相欢饮。<br>与朱亥、侯赢一同大口吃肉，大碗饮酒。<br>几杯热酒下肚，便慷慨许诺，愿为知己两肋插刀，一诺重于泰山。<br>酒后眼花耳热，意气勃勃劲生，感动苍天，可贯长虹。<br>朱亥为信陵君救赵，挥起了金椎，使赵都邯郸上下，都为之震惊。<br>二位壮士的豪举，千秋之后仍然在大梁城传为美谈。<br>他们纵然死去而侠骨犹香，不愧为一世英豪。<br>谁能像扬雄一样，在书阁里研究《太玄经》到老，而一辈子无所作为呢？</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>信陵：信陵君，战国四公子之一，为人礼贤下士，门下食客三千余人。<br>朱亥、侯嬴：都是信陵君的门客。朱本是一屠夫，侯原是魏国都城大梁东门的门官，两人都受到信陵君的礼遇，都为信陵君所用。炙，烤肉。啖，吃。<br>啖朱亥：让朱亥来吃。<br>“三杯”两句：说几杯酒下肚就作出了承诺，并且把承诺看得比五岳还重。<br>素霓：白虹。古人认为，凡要出现不寻常的大事，就会有不寻常的天象出现，如“白虹贯日”。<br>烜赫：形容声名盛大。大梁城：魏国都城，今河南开封。<br>太玄经：西汉扬雄的一部哲学著作。扬雄曾在皇帝藏书的天禄阁任校刊工作。</p><hr><h1 id="咏老赠梦得"><a href="#咏老赠梦得" class="headerlink" title="咏老赠梦得"></a>咏老赠梦得</h1><p>[ 唐 ]  白居易<br>与君俱老也，自问老何如。<br>眼涩夜先卧，头慵朝未梳。<br>有时扶杖出，尽日闭门居。<br>懒照新磨镜，休看小字书。<br>情于故人重，迹共少年疏。<br>唯是闲谈兴，相逢尚有馀。</p><hr><h1 id="酬乐天咏老见示"><a href="#酬乐天咏老见示" class="headerlink" title="酬乐天咏老见示"></a>酬乐天咏老见示</h1><p>刘禹锡 〔唐代〕</p><p>人谁不顾老，老去有谁怜。<br>身瘦带频减，发稀冠自偏。<br>废书缘惜眼，多灸为随年。<br>经事还谙事，阅人如阅川。<br>细思皆幸矣，下此便翛然。<br>莫道桑榆晚，为霞尚满天。</p><p>阅人如阅川：意谓阅历人生如同积水成川一样。语出陆机《叹逝赋》：“阅水以成川，水滔滔而日度；世阅人而为世，人冉冉而行暮。”阅，经历。</p><h1 id="偶作寄朗之"><a href="#偶作寄朗之" class="headerlink" title="偶作寄朗之"></a>偶作寄朗之</h1><p>白居易 〔唐代〕</p><p>历想为官日，无如刺史时。<br>欢娱接宾客，饱暖及妻儿。<br>自到东都后，安闲更得宜。<br>分司胜刺史，致仕胜分司。<br>何况园林下，欣然得朗之。<br>仰名同旧识，为乐即新知。<br>有雪先相访，无花不作期。<br>斗醲干酿酒，夸妙细吟诗。<br>里巷千来往，都门五别离。<br>岐分两回首，书到一开眉。<br>叶落槐亭院，冰生竹阁池。<br>雀罗谁问讯，鹤氅罢追随。<br>身与心俱病，容将力共衰。<br>老来多健忘，唯不忘相思。</p><h2 id="译文-2"><a href="#译文-2" class="headerlink" title="译文"></a>译文</h2><p>回想为官时的日子，没有比做刺史时更快意舒畅了。<br>欢乐的接待来访的宾客，妻儿的生活能够得到保障。<br>自从来到东都以后，生活清闲更胜从前。<br>做分司时清闲的生活胜过刺史，辞去官职后生活清闲胜过分司。<br>更不说是在这偏远的家乡，能收到你的书信非常欣喜。<br>仰慕你的大名就像与你相识已久，一起做乐曲就像是新得的知己。<br>下雪时就先到朗之家里拜访，不是花开时节不相约。<br>边畅饮着自己酿造的美酒，边细细品味所作的诗句。<br>作为邻里已来往无数遍，在那京都城门也已分别五次。<br>翘首以盼你的来信，书信到时方能舒展眉头。<br>槐亭院中已满是落叶，竹阁池中的水也结满冰霜。<br>门庭冷落无处询问讯息，只得放弃追问。<br>身体病痛增多，容貌与体力也在逐渐衰退。<br>虽已年老记忆减退，但你我间那些相处场景仍历历在目从未忘却。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;忆秦娥&quot;&gt;&lt;a href=&quot;#忆秦娥&quot; class=&quot;headerlink&quot; title=&quot;忆秦娥&quot;&gt;&lt;/a&gt;忆秦娥&lt;/h1&gt;&lt;p&gt;李白&lt;/p&gt;
&lt;p&gt;箫声咽，秦娥梦断秦楼月。秦楼月，年年柳色，灞陵伤别。&lt;/p&gt;
&lt;p&gt;乐游原上清秋节，咸阳古道音尘绝。音尘绝，西风残照，汉家陵阙。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;杂咏三首&quot;&gt;&lt;a href=&quot;#杂咏三首&quot; class=&quot;headerlink&quot; title=&quot;杂咏三首&quot;&gt;&lt;/a&gt;杂咏三首&lt;/h1&gt;&lt;p&gt;王维&lt;/p&gt;
&lt;p&gt;家住孟津河，门对孟津口。&lt;br&gt;常有江南船，寄书家中否。&lt;/p&gt;
&lt;p&gt;君自故乡来，应知故乡事。&lt;br&gt;来日绮窗前，寒梅著花未。&lt;/p&gt;
&lt;p&gt;已见寒梅发，复闻啼鸟声。&lt;br&gt;心心视春草，畏向阶前生。&lt;/p&gt;</summary>
    
    
    
    <category term="诗词" scheme="https://davyjones2010.github.io/categories/%E8%AF%97%E8%AF%8D/"/>
    
    
    <category term="诗词" scheme="https://davyjones2010.github.io/tags/%E8%AF%97%E8%AF%8D/"/>
    
    <category term="唐诗" scheme="https://davyjones2010.github.io/tags/%E5%94%90%E8%AF%97/"/>
    
  </entry>
  
  <entry>
    <title>2023 年度书单</title>
    <link href="https://davyjones2010.github.io/2022-12-31-booklist-for-2023/"/>
    <id>https://davyjones2010.github.io/2022-12-31-booklist-for-2023/</id>
    <published>2022-12-31T16:00:00.000Z</published>
    <updated>2023-03-05T16:39:20.009Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BookList"><a href="#BookList" class="headerlink" title="BookList"></a>BookList</h1><hr><h2 id="必读"><a href="#必读" class="headerlink" title="必读"></a>必读</h2><h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ul><li><input disabled="" type="checkbox"> Google 4篇论文复习 GFS MapReduce BigTable Dapper</li><li><input disabled="" type="checkbox"> <a href="https://github.com/yanfeizhang/coder-kung-fu">深入理解Linux网络</a></li><li><input disabled="" type="checkbox"> <a href="https://book.douban.com/subject/3998926/">系统分析师考试全程指导</a></li><li><input disabled="" type="checkbox"> <a href="https://baike.baidu.com/item/%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E5%B8%88%E6%95%99%E7%A8%8B/8182174">系统分析师教程</a></li><li><input disabled="" type="checkbox"> <a href="https://book.douban.com/subject/26643785/">深度探索嵌入式操作系统：从零开始设计、架构和开发</a></li><li><input disabled="" type="checkbox"> <a href="https://book.douban.com/subject/11530329/">30天自制操作系统</a></li><li><input disabled="" type="checkbox"> <a href="https://book.douban.com/subject/27091064/">云原生应用架构实践——从单体到服务化架构演进</a></li><li><input disabled="" type="checkbox"> <a href="https://book.douban.com/subject/35731316/">文件系统技术内幕</a> <a href="https://www.bilibili.com/video/av889477532/">B站视频</a></li></ul><h3 id="经济"><a href="#经济" class="headerlink" title="经济"></a>经济</h3><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://book.douban.com/subject/25926542/">一本书读懂财报</a> -20230125</li></ul><h3 id="健康"><a href="#健康" class="headerlink" title="健康"></a>健康</h3><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://book.douban.com/subject/27104999/">癌症新知: 科学终结恐慌</a> -20230119</li></ul><h3 id="历史社科"><a href="#历史社科" class="headerlink" title="历史社科"></a>历史社科</h3><ul><li><input disabled="" type="checkbox"> <a href="https://book.douban.com/subject/26943161/">未来简史</a></li></ul><h3 id="通识"><a href="#通识" class="headerlink" title="通识"></a>通识</h3><ul><li><input disabled="" type="checkbox"> <a href="https://book.douban.com/subject/35794819/">程序员的底层思维</a></li><li><input disabled="" type="checkbox"> <a href="https://book.douban.com/subject/26593822/">程序员的数学2 概率统计</a></li><li><input disabled="" type="checkbox"> <a href="https://book.douban.com/subject/35426737/">吴军数学通识讲义</a></li><li><input disabled="" type="checkbox"> <a href="https://zhuanlan.zhihu.com/p/543113943">谷歌方法论</a></li><li><input checked="" disabled="" type="checkbox"> <a href="">硅谷来信</a></li><li><input disabled="" type="checkbox"> <a href="https://book.douban.com/subject/26115203/">权衡：批判性思维之探究途径</a></li><li><input disabled="" type="checkbox"> <a href="http://hongchaozhang.github.io/blog/2019/08/26/infomation-theory/">信息论40讲</a></li></ul><h3 id="小说"><a href="#小说" class="headerlink" title="小说"></a>小说</h3><ul><li><input disabled="" type="checkbox"> <a href="https://book.douban.com/subject/26957420/">临高启明</a></li><li><input disabled="" type="checkbox"> <a href="https://book.douban.com/subject/36069426/">大医-破晓篇</a></li><li><input disabled="" type="checkbox"> <a href="https://book.douban.com/subject/36104107/">长安的荔枝</a></li></ul><h2 id="选读"><a href="#选读" class="headerlink" title="选读"></a>选读</h2><ul><li><input disabled="" type="checkbox"> <a href="https://book.douban.com/subject/4163938/">软件随想录</a></li><li><input disabled="" type="checkbox"> <a href="https://book.douban.com/subject/36082349/">Chip War</a></li></ul><h1 id="ReadList"><a href="#ReadList" class="headerlink" title="ReadList"></a>ReadList</h1><hr><h1 id="MovieList"><a href="#MovieList" class="headerlink" title="MovieList"></a>MovieList</h1><hr><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><ul><li><input disabled="" type="checkbox"> <a href="https://www.bilibili.com/video/BV1qa4y1j7xk/">2020 南京大学计算机系统基础习题课 (蒋炎岩)</a></li><li><input disabled="" type="checkbox"> <a href="https://www.bilibili.com/video/BV1sR4y1V7T4/">2022 南京大学拔尖计划《操作系统：设计与实现》</a></li><li><input disabled="" type="checkbox"> <a href="https://www.bilibili.com/video/av889477532/">文件系统技术内幕 B站视频</a></li></ul><h2 id="娱乐"><a href="#娱乐" class="headerlink" title="娱乐"></a>娱乐</h2><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://movie.douban.com/subject/35465232/">狂飙</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://movie.douban.com/subject/35465011/">显微镜下的大明之丝绢案</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://movie.douban.com/subject/35208467/">想见你 想見你 (2022)</a></li></ul><h1 id="Games"><a href="#Games" class="headerlink" title="Games"></a>Games</h1><hr><ul><li><a href="https://www.douban.com/game/27185974/">DriveClub VR</a></li></ul><h1 id="Certificates"><a href="#Certificates" class="headerlink" title="Certificates"></a>Certificates</h1><hr><ul><li><strong>软考高级系统架构设计师</strong></li><li>CKA</li><li>IELTS</li></ul><h1 id="Blogs"><a href="#Blogs" class="headerlink" title="Blogs"></a>Blogs</h1><ul><li>Jenkins Core&amp;Cloud系列博客</li></ul><h1 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h1><ul><li>[zlib替代](<a href="https://search.zhelper.net/?%5B">https://search.zhelper.net/?[</a></li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;BookList&quot;&gt;&lt;a href=&quot;#BookList&quot; class=&quot;headerlink&quot; title=&quot;BookList&quot;&gt;&lt;/a&gt;BookList&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;必读&quot;&gt;&lt;a href=&quot;#必读&quot; class=&quot;headerlink&quot; title=&quot;必读&quot;&gt;&lt;/a&gt;必读&lt;/h2&gt;&lt;h3 id=&quot;计算机&quot;&gt;&lt;a href=&quot;#计算机&quot; class=&quot;headerlink&quot; title=&quot;计算机&quot;&gt;&lt;/a&gt;计算机&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;input disabled type=&quot;checkbox&quot;&gt; Google 4篇论文复习 GFS MapReduce BigTable Dapper&lt;/li&gt;
&lt;li&gt;&lt;input disabled type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://github.com/yanfeizhang/coder-kung-fu&quot;&gt;深入理解Linux网络&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://book.douban.com/subject/3998926/&quot;&gt;系统分析师考试全程指导&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://baike.baidu.com/item/%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E5%B8%88%E6%95%99%E7%A8%8B/8182174&quot;&gt;系统分析师教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://book.douban.com/subject/26643785/&quot;&gt;深度探索嵌入式操作系统：从零开始设计、架构和开发&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://book.douban.com/subject/11530329/&quot;&gt;30天自制操作系统&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://book.douban.com/subject/27091064/&quot;&gt;云原生应用架构实践——从单体到服务化架构演进&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://book.douban.com/subject/35731316/&quot;&gt;文件系统技术内幕&lt;/a&gt; &lt;a href=&quot;https://www.bilibili.com/video/av889477532/&quot;&gt;B站视频&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;经济&quot;&gt;&lt;a href=&quot;#经济&quot; class=&quot;headerlink&quot; title=&quot;经济&quot;&gt;&lt;/a&gt;经济&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;input checked disabled type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://book.douban.com/subject/25926542/&quot;&gt;一本书读懂财报&lt;/a&gt; -20230125&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;健康&quot;&gt;&lt;a href=&quot;#健康&quot; class=&quot;headerlink&quot; title=&quot;健康&quot;&gt;&lt;/a&gt;健康&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;input checked disabled type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://book.douban.com/subject/27104999/&quot;&gt;癌症新知: 科学终结恐慌&lt;/a&gt; -20230119&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;历史社科&quot;&gt;&lt;a href=&quot;#历史社科&quot; class=&quot;headerlink&quot; title=&quot;历史社科&quot;&gt;&lt;/a&gt;历史社科&lt;/h3&gt;</summary>
    
    
    
    <category term="书单" scheme="https://davyjones2010.github.io/categories/%E4%B9%A6%E5%8D%95/"/>
    
    
    <category term="books" scheme="https://davyjones2010.github.io/tags/books/"/>
    
    <category term="2023" scheme="https://davyjones2010.github.io/tags/2023/"/>
    
  </entry>
  
  <entry>
    <title>Linux磁盘与分区的常用命令</title>
    <link href="https://davyjones2010.github.io/2022-11-16-disk-partition-2/"/>
    <id>https://davyjones2010.github.io/2022-11-16-disk-partition-2/</id>
    <published>2022-11-16T16:00:00.000Z</published>
    <updated>2023-03-05T16:39:20.009Z</updated>
    
    <content type="html"><![CDATA[<h1 id="磁盘"><a href="#磁盘" class="headerlink" title="磁盘"></a>磁盘</h1><h2 id="查看当前系统块设备列表"><a href="#查看当前系统块设备列表" class="headerlink" title="查看当前系统块设备列表"></a>查看当前系统块设备列表</h2><h3 id="fdisk-l"><a href="#fdisk-l" class="headerlink" title="fdisk -l"></a>fdisk -l</h3><p>如下, <code>fdisk -l</code> 命令, 可以显示出:</p><ol><li>当前系统存在2块块设备, 分别是 <code>/dev/sda</code> 与 <code>/dev/sdb</code>, 大小分别为 21.5GB 与 31.5GB</li><li><code>/dev/sda</code> 磁盘, 划为两个分区, 分别是 <code>/dev/sda1</code> <code>/dev/sda2</code>, 其中 <code>/dev/sda2</code> 为LVM文件系统类型</li><li><code>/dev/sdb</code> 磁盘(个人知道是U盘), 划分为1个分区 <code>/dev/sdb1</code> , 文件系统类型是 <code>W95 FAT32</code></li><li>TODO: 疑问1  <code>/dev/mapper/centos-root</code> <code>/dev/mapper/centos-swap</code> 分别都是啥? 个人已知是在 <code>/dev/sda2</code> 下继续分区出来的, 如下 <code>lsblk</code> 命令指示. 但为啥这里没有</li><li>TODO: 疑问2 <code>Linux LVM</code> 具体是啥文件系统类型?</li></ol><blockquote><p>SATA device names follow the pattern &#x2F;dev&#x2F;sd[a-z]<br>while NVMe device names have the following pattern &#x2F;dev&#x2F;nvme[1-9]n[1-9]</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># fdisk -l</span>Disk /dev/sda: <span class="token number">21.5</span> GB, <span class="token number">21474836480</span> bytes, <span class="token number">41943040</span> sectorsUnits <span class="token operator">=</span> sectors of <span class="token number">1</span> * <span class="token number">512</span> <span class="token operator">=</span> <span class="token number">512</span> bytesSector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: <span class="token number">512</span> bytes / <span class="token number">512</span> bytesI/O size <span class="token punctuation">(</span>minimum/optimal<span class="token punctuation">)</span>: <span class="token number">512</span> bytes / <span class="token number">512</span> bytesDisk label type: dosDisk identifier: 0x000b7bb1   Device Boot      Start         End      Blocks   Id  System/dev/sda1   *        <span class="token number">2048</span>     <span class="token number">2099199</span>     <span class="token number">1048576</span>   <span class="token number">83</span>  Linux/dev/sda2         <span class="token number">2099200</span>    <span class="token number">41943039</span>    <span class="token number">19921920</span>   8e  Linux LVMDisk /dev/mapper/centos-root: <span class="token number">18.2</span> GB, <span class="token number">18249416704</span> bytes, <span class="token number">35643392</span> sectorsUnits <span class="token operator">=</span> sectors of <span class="token number">1</span> * <span class="token number">512</span> <span class="token operator">=</span> <span class="token number">512</span> bytesSector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: <span class="token number">512</span> bytes / <span class="token number">512</span> bytesI/O size <span class="token punctuation">(</span>minimum/optimal<span class="token punctuation">)</span>: <span class="token number">512</span> bytes / <span class="token number">512</span> bytesDisk /dev/mapper/centos-swap: <span class="token number">2147</span> MB, <span class="token number">2147483648</span> bytes, <span class="token number">4194304</span> sectorsUnits <span class="token operator">=</span> sectors of <span class="token number">1</span> * <span class="token number">512</span> <span class="token operator">=</span> <span class="token number">512</span> bytesSector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: <span class="token number">512</span> bytes / <span class="token number">512</span> bytesI/O size <span class="token punctuation">(</span>minimum/optimal<span class="token punctuation">)</span>: <span class="token number">512</span> bytes / <span class="token number">512</span> bytesDisk /dev/sdb: <span class="token number">31.5</span> GB, <span class="token number">31457280000</span> bytes, <span class="token number">61440000</span> sectorsUnits <span class="token operator">=</span> sectors of <span class="token number">1</span> * <span class="token number">512</span> <span class="token operator">=</span> <span class="token number">512</span> bytesSector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: <span class="token number">512</span> bytes / <span class="token number">512</span> bytesI/O size <span class="token punctuation">(</span>minimum/optimal<span class="token punctuation">)</span>: <span class="token number">512</span> bytes / <span class="token number">512</span> bytesDisk label type: dosDisk identifier: 0x1c9aed9e   Device Boot      Start         End      Blocks   Id  System/dev/sdb1   *          <span class="token number">64</span>    <span class="token number">61439999</span>    <span class="token number">30719968</span>    b  W95 FAT32<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="lsblk"><a href="#lsblk" class="headerlink" title="lsblk"></a>lsblk</h3><ul><li>如下, 类型为”disk”的有两个, sda sdb</li><li>sda 被划分为了2个分区, sda1 与 sda2</li><li>sdb 被划分为了1个分区, sdb1</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># lsblk</span>NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTsda               <span class="token number">8</span>:0    <span class="token number">0</span>   20G  <span class="token number">0</span> disk├─sda1            <span class="token number">8</span>:1    <span class="token number">0</span>    1G  <span class="token number">0</span> part /boot└─sda2            <span class="token number">8</span>:2    <span class="token number">0</span>   19G  <span class="token number">0</span> part  ├─centos-root <span class="token number">253</span>:0    <span class="token number">0</span>   17G  <span class="token number">0</span> lvm  /  └─centos-swap <span class="token number">253</span>:1    <span class="token number">0</span>    2G  <span class="token number">0</span> lvm  <span class="token punctuation">[</span>SWAP<span class="token punctuation">]</span>sdb               <span class="token number">8</span>:16   <span class="token number">1</span> <span class="token number">29</span>.3G  <span class="token number">0</span> disk└─sdb1            <span class="token number">8</span>:17   <span class="token number">1</span> <span class="token number">29</span>.3G  <span class="token number">0</span> part<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查看设备的文件系统类型"><a href="#查看设备的文件系统类型" class="headerlink" title="查看设备的文件系统类型"></a>查看设备的文件系统类型</h2><h3 id="不挂载查看-fdisk-l"><a href="#不挂载查看-fdisk-l" class="headerlink" title="不挂载查看: fdisk -l"></a>不挂载查看: fdisk -l</h3><p>如上, </p><h3 id="不挂载查看-blkid"><a href="#不挂载查看-blkid" class="headerlink" title="不挂载查看: blkid"></a>不挂载查看: blkid</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># blkid /dev/sda2</span>/dev/sda2: <span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">"xb72qt-XG0d-7jNA-VOEC-z3jt-y7bz-mtye35"</span> <span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">"LVM2_member"</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># blkid /dev/mapper/centos-root</span>/dev/mapper/centos-root: <span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">"a30443bd-8ab9-4869-917d-fe51b512b993"</span> <span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">"xfs"</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># blkid /dev/sdb1</span>/dev/sdb1: <span class="token assign-left variable">LABEL</span><span class="token operator">=</span><span class="token string">"DISK_IMG"</span> <span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">"1C9A-ED9E"</span> <span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">"vfat"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="挂载后查看-df-hT"><a href="#挂载后查看-df-hT" class="headerlink" title="挂载后查看: df -hT"></a>挂载后查看: df -hT</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># df -hT</span>Filesystem              Type      Size  Used Avail Use% Mounted ondevtmpfs                devtmpfs  475M     <span class="token number">0</span>  475M   <span class="token number">0</span>% /devtmpfs                   tmpfs     487M     <span class="token number">0</span>  487M   <span class="token number">0</span>% /dev/shmtmpfs                   tmpfs     487M  <span class="token number">7</span>.7M  479M   <span class="token number">2</span>% /runtmpfs                   tmpfs     487M     <span class="token number">0</span>  487M   <span class="token number">0</span>% /sys/fs/cgroup/dev/mapper/centos-root xfs        17G  <span class="token number">1</span>.4G   16G   <span class="token number">9</span>% //dev/sda1               xfs      1014M  138M  877M  <span class="token number">14</span>% /boottmpfs                   tmpfs      98M     <span class="token number">0</span>   98M   <span class="token number">0</span>% /run/user/0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看所有已挂载的分区与挂载点文件系统等信息-findmnt"><a href="#查看所有已挂载的分区与挂载点文件系统等信息-findmnt" class="headerlink" title="查看所有已挂载的分区与挂载点文件系统等信息 findmnt"></a>查看所有已挂载的分区与挂载点文件系统等信息 findmnt</h3><p>如下: </p><ol><li><code>/dev/mapper/centos-root</code> 分区挂载在 <code>/</code> 目录下, 文件系统类型是<code>xfs</code></li><li><code>/dev/sda1</code> 分区挂载在 <code>/boot/</code> 目录下, 文件系统类型是<code>xfs</code></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># findmnt</span>TARGET                                SOURCE                  FSTYPE     OPTIONS/                                     /dev/mapper/centos-root xfs        rw,relatime,seclabel,attr2,inode64,noquota├─/sys                                sysfs                   sysfs      rw,nosuid,nodev,noexec,relatime,seclabel│ ├─/sys/kernel/security              securityfs              securityfs rw,nosuid,nodev,noexec,relatime│ ├─/sys/fs/cgroup                    tmpfs                   tmpfs      ro,nosuid,nodev,noexec,seclabel,mode<span class="token operator">=</span><span class="token number">755</span>│ │ ├─/sys/fs/cgroup/systemd          cgroup                  cgroup     rw,nosuid,nodev,noexec,relatime,seclabel,xattr,release_agent<span class="token operator">=</span>/usr/lib/systemd/systemd-cgroups-agent,name<span class="token operator">=</span>systemd│ │ ├─/sys/fs/cgroup/memory           cgroup                  cgroup     rw,nosuid,nodev,noexec,relatime,seclabel,memory│ │ ├─/sys/fs/cgroup/blkio            cgroup                  cgroup     rw,nosuid,nodev,noexec,relatime,seclabel,blkio│ │ ├─/sys/fs/cgroup/cpuset           cgroup                  cgroup     rw,nosuid,nodev,noexec,relatime,seclabel,cpuset│ │ ├─/sys/fs/cgroup/perf_event       cgroup                  cgroup     rw,nosuid,nodev,noexec,relatime,seclabel,perf_event│ │ ├─/sys/fs/cgroup/net_cls,net_prio cgroup                  cgroup     rw,nosuid,nodev,noexec,relatime,seclabel,net_prio,net_cls│ │ ├─/sys/fs/cgroup/devices          cgroup                  cgroup     rw,nosuid,nodev,noexec,relatime,seclabel,devices│ │ ├─/sys/fs/cgroup/cpu,cpuacct      cgroup                  cgroup     rw,nosuid,nodev,noexec,relatime,seclabel,cpuacct,cpu│ │ ├─/sys/fs/cgroup/hugetlb          cgroup                  cgroup     rw,nosuid,nodev,noexec,relatime,seclabel,hugetlb│ │ ├─/sys/fs/cgroup/freezer          cgroup                  cgroup     rw,nosuid,nodev,noexec,relatime,seclabel,freezer│ │ └─/sys/fs/cgroup/pids             cgroup                  cgroup     rw,nosuid,nodev,noexec,relatime,seclabel,pids│ ├─/sys/fs/pstore                    pstore                  pstore     rw,nosuid,nodev,noexec,relatime│ ├─/sys/kernel/config                configfs                configfs   rw,relatime│ ├─/sys/fs/selinux                   selinuxfs               selinuxfs  rw,relatime│ └─/sys/kernel/debug                 debugfs                 debugfs    rw,relatime├─/proc                               proc                    proc       rw,nosuid,nodev,noexec,relatime│ └─/proc/sys/fs/binfmt_misc          systemd-1               autofs     rw,relatime,fd<span class="token operator">=</span><span class="token number">26</span>,pgrp<span class="token operator">=</span><span class="token number">1</span>,timeout<span class="token operator">=</span><span class="token number">0</span>,minproto<span class="token operator">=</span><span class="token number">5</span>,maxproto<span class="token operator">=</span><span class="token number">5</span>,direct,pipe_ino<span class="token operator">=</span><span class="token number">13709</span>├─/dev                                devtmpfs                devtmpfs   rw,nosuid,seclabel,size<span class="token operator">=</span>485840k,nr_inodes<span class="token operator">=</span><span class="token number">121460</span>,mode<span class="token operator">=</span><span class="token number">755</span>│ ├─/dev/shm                          tmpfs                   tmpfs      rw,nosuid,nodev,seclabel│ ├─/dev/pts                          devpts                  devpts     rw,nosuid,noexec,relatime,seclabel,gid<span class="token operator">=</span><span class="token number">5</span>,mode<span class="token operator">=</span><span class="token number">620</span>,ptmxmode<span class="token operator">=</span>000│ ├─/dev/hugepages                    hugetlbfs               hugetlbfs  rw,relatime,seclabel│ └─/dev/mqueue                       mqueue                  mqueue     rw,relatime,seclabel├─/run                                tmpfs                   tmpfs      rw,nosuid,nodev,seclabel,mode<span class="token operator">=</span><span class="token number">755</span>│ └─/run/user/0                       tmpfs                   tmpfs      rw,nosuid,nodev,relatime,seclabel,size<span class="token operator">=</span>99568k,mode<span class="token operator">=</span><span class="token number">700</span>└─/boot                               /dev/sda1               xfs        rw,relatime,seclabel,attr2,inode64,noquota<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h2><h3 id="划分分区-fdisk-n"><a href="#划分分区-fdisk-n" class="headerlink" title="划分分区: fdisk n"></a>划分分区: fdisk n</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># fdisk /dev/sdb</span>Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> <span class="token builtin class-name">help</span><span class="token punctuation">)</span>: nPartition type:   p   primary <span class="token punctuation">(</span><span class="token number">0</span> primary, <span class="token number">0</span> extended, <span class="token number">4</span> <span class="token function">free</span><span class="token punctuation">)</span>   e   extendedSelect <span class="token punctuation">(</span>default p<span class="token punctuation">)</span>: pPartition number <span class="token punctuation">(</span><span class="token number">1</span>-4, default <span class="token number">1</span><span class="token punctuation">)</span>:First sector <span class="token punctuation">(</span><span class="token number">2048</span>-61439999, default <span class="token number">2048</span><span class="token punctuation">)</span>:Using default value <span class="token number">2048</span>Last sector, +sectors or +size<span class="token punctuation">&#123;</span>K,M,G<span class="token punctuation">&#125;</span> <span class="token punctuation">(</span><span class="token number">2048</span>-61439999, default <span class="token number">61439999</span><span class="token punctuation">)</span>:Using default value <span class="token number">61439999</span>Partition <span class="token number">1</span> of <span class="token builtin class-name">type</span> Linux and of size <span class="token number">29.3</span> GiB is <span class="token builtin class-name">set</span>Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> <span class="token builtin class-name">help</span><span class="token punctuation">)</span>: wThe partition table has been altered<span class="token operator">!</span>Calling ioctl<span class="token punctuation">(</span><span class="token punctuation">)</span> to re-read partition table.Syncing disks.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除分区-fdisk-d"><a href="#删除分区-fdisk-d" class="headerlink" title="删除分区 fdisk d"></a>删除分区 fdisk d</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># fdisk /dev/sdb</span>命令<span class="token punctuation">(</span>输入 m 获取帮助<span class="token punctuation">)</span>：d分区号 <span class="token punctuation">(</span><span class="token number">1</span>-3，默认 <span class="token number">3</span><span class="token punctuation">)</span>：分区 <span class="token number">3</span> 已删除命令<span class="token punctuation">(</span>输入 m 获取帮助<span class="token punctuation">)</span>：wThe partition table has been altered<span class="token operator">!</span>Calling ioctl<span class="token punctuation">(</span><span class="token punctuation">)</span> to re-read partition table.正在同步磁盘。<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># lsblk -p</span>NAME                        MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT/dev/sda                      <span class="token number">8</span>:0    <span class="token number">0</span>   20G  <span class="token number">0</span> disk├─/dev/sda1                   <span class="token number">8</span>:1    <span class="token number">0</span>    1G  <span class="token number">0</span> part /boot└─/dev/sda2                   <span class="token number">8</span>:2    <span class="token number">0</span>   19G  <span class="token number">0</span> part  ├─/dev/mapper/centos-root <span class="token number">253</span>:0    <span class="token number">0</span>   17G  <span class="token number">0</span> lvm  /  └─/dev/mapper/centos-swap <span class="token number">253</span>:1    <span class="token number">0</span>    2G  <span class="token number">0</span> lvm  <span class="token punctuation">[</span>SWAP<span class="token punctuation">]</span>/dev/sdb                      <span class="token number">8</span>:16   <span class="token number">1</span> <span class="token number">29</span>.3G  <span class="token number">0</span> disk├─/dev/sdb1                   <span class="token number">8</span>:17   <span class="token number">1</span>   10G  <span class="token number">0</span> part└─/dev/sdb2                   <span class="token number">8</span>:18   <span class="token number">1</span>    4G  <span class="token number">0</span> part/dev/sr0                     <span class="token number">11</span>:0    <span class="token number">1</span>  973M  <span class="token number">0</span> rom<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="挂载分区-mount"><a href="#挂载分区-mount" class="headerlink" title="挂载分区 mount"></a>挂载分区 mount</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># mount /dev/sdb1 /root/movie</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># mount /dev/sdb2 /root/book</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># df -h</span>文件系统                 容量  已用  可用 已用% 挂载点/dev/sdb1                 10G   33M   10G    <span class="token number">1</span>% /root/movie/dev/sdb2                <span class="token number">4</span>.0G   33M  <span class="token number">4</span>.0G    <span class="token number">1</span>% /root/book<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># lsblk -p</span>NAME                        MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT/dev/sdb                      <span class="token number">8</span>:16   <span class="token number">1</span> <span class="token number">29</span>.3G  <span class="token number">0</span> disk├─/dev/sdb1                   <span class="token number">8</span>:17   <span class="token number">1</span>   10G  <span class="token number">0</span> part /root/movie└─/dev/sdb2                   <span class="token number">8</span>:18   <span class="token number">1</span>    4G  <span class="token number">0</span> part /root/book<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="卸载分区-umount"><a href="#卸载分区-umount" class="headerlink" title="卸载分区 umount"></a>卸载分区 umount</h3><blockquote><p>本质上与Windows上弹出U盘(设备)是一样道理, 底层就是将该设备从文件树中删除.<br>因此如果操作系统正在访问&#x2F;占用该设备, 会卸载&#x2F;弹出失败.</p></blockquote><p>卸载方式: </p><ul><li>通过挂载点卸载</li><li>通过设备名卸载</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># umount -v /root/movie #通过挂载点卸载</span>umount: /root/movie <span class="token punctuation">(</span>/dev/sdb1<span class="token punctuation">)</span> 已卸载<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># umount -v /dev/sdb2 #通过设备名卸载</span>umount: /root/book <span class="token punctuation">(</span>/dev/sdb2<span class="token punctuation">)</span> 已卸载<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># lsblk -p</span>NAME                        MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT/dev/sdb                      <span class="token number">8</span>:16   <span class="token number">1</span> <span class="token number">29</span>.3G  <span class="token number">0</span> disk├─/dev/sdb1                   <span class="token number">8</span>:17   <span class="token number">1</span>   10G  <span class="token number">0</span> part└─/dev/sdb2                   <span class="token number">8</span>:18   <span class="token number">1</span>    4G  <span class="token number">0</span> part<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># df -h</span>文件系统                 容量  已用  可用 已用% 挂载点devtmpfs                 475M     <span class="token number">0</span>  475M    <span class="token number">0</span>% /dev/dev/mapper/centos-root   17G  <span class="token number">1</span>.4G   16G    <span class="token number">9</span>% //dev/sda1               1014M  138M  877M   <span class="token number">14</span>% /boot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>卸载之后, 重新挂载:</p><ol><li>不要求新的挂载点与之前一直. 例如之前<code>/dev/sdb2</code>挂载到<code>/root/book</code>目录下, 卸载之后重新挂载, <code>/dev/sdb2</code>可以挂载到 <code>/root/movie</code> 目录下</li><li>分区里边的内容仍然是保留的. 例如 <code>/dev/sdb2</code> 分区卸载重新挂载到其他目录, 该分区下的内容仍然是保留的, 能从新的目录下访问到该内容.</li></ol><h1 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h1><h2 id="为磁盘格式化文件系统"><a href="#为磁盘格式化文件系统" class="headerlink" title="为磁盘格式化文件系统"></a>为磁盘格式化文件系统</h2><h3 id="不分区-直接格式化整个设备"><a href="#不分区-直接格式化整个设备" class="headerlink" title="不分区, 直接格式化整个设备"></a>不分区, 直接格式化整个设备</h3><ul><li>如下, 直接把U盘格式化为xfs文件系统, 之后使用 <code>blkid</code> 查看设备的文件系统类型, 使用<code>lsblk</code>只能看到该设备是裸设备: <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># mkfs.xfs -f /dev/sdb</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># blkid /dev/sdb</span>/dev/sdb: <span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">"b3841552-6b45-4e76-980a-911a107fbade"</span> <span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">"xfs"</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># lsblk -p</span>NAME                        MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT/dev/sda                      <span class="token number">8</span>:0    <span class="token number">0</span>   20G  <span class="token number">0</span> disk├─/dev/sda1                   <span class="token number">8</span>:1    <span class="token number">0</span>    1G  <span class="token number">0</span> part /boot└─/dev/sda2                   <span class="token number">8</span>:2    <span class="token number">0</span>   19G  <span class="token number">0</span> part  ├─/dev/mapper/centos-root <span class="token number">253</span>:0    <span class="token number">0</span>   17G  <span class="token number">0</span> lvm  /  └─/dev/mapper/centos-swap <span class="token number">253</span>:1    <span class="token number">0</span>    2G  <span class="token number">0</span> lvm  <span class="token punctuation">[</span>SWAP<span class="token punctuation">]</span>/dev/sdb                      <span class="token number">8</span>:16   <span class="token number">1</span> <span class="token number">29</span>.3G  <span class="token number">0</span> disk/dev/sr0                     <span class="token number">11</span>:0    <span class="token number">1</span>  973M  <span class="token number">0</span> rom<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="分区-格式化分区"><a href="#分区-格式化分区" class="headerlink" title="分区, 格式化分区"></a>分区, 格式化分区</h3><ul><li><p>如下, <code>/dev/sdb</code>U盘分成1个分区, 但不对分区进行格式化, blkid 查看到的信息为空</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># fdisk -l</span>   Device Boot      Start         End      Blocks   Id  System/dev/sdb1            <span class="token number">2048</span>    <span class="token number">61439999</span>    <span class="token number">30718976</span>   <span class="token number">83</span>  Linux<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># blkid /dev/sdb</span>/dev/sdb: <span class="token assign-left variable">PTTYPE</span><span class="token operator">=</span><span class="token string">"dos"</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># blkid /dev/sdb1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将分区格式化之后, blkid 查看到具体分区文件系统类型信息:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># mkfs.xfs -f /dev/sdb1</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># blkid /dev/sdb1</span>/dev/sdb1: <span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">"6c3bcc54-b925-4e3c-a101-6edf5ca28268"</span> <span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">"xfs"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="扩容-x2F-缩容分区"><a href="#扩容-x2F-缩容分区" class="headerlink" title="扩容&#x2F;缩容分区"></a>扩容&#x2F;缩容分区</h2><h3 id="普通类型分区"><a href="#普通类型分区" class="headerlink" title="普通类型分区"></a>普通类型分区</h3><p>可以无损扩容缩容么? </p><h3 id="LVM类型"><a href="#LVM类型" class="headerlink" title="LVM类型"></a>LVM类型</h3><p>参照: <a href="https://zhuanlan.zhihu.com/p/450057653">centos7扩容根目录</a><br>自己使用的虚拟机是20G硬盘. 想要扩容下根目录, 扩容到32G, 即如下的 <code>MOUNTPOINT /</code>: </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># lsblk -p</span>NAME                        MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT/dev/sda                      <span class="token number">8</span>:0    <span class="token number">0</span>   20G  <span class="token number">0</span> disk├─/dev/sda1                   <span class="token number">8</span>:1    <span class="token number">0</span>    1G  <span class="token number">0</span> part /boot└─/dev/sda2                   <span class="token number">8</span>:2    <span class="token number">0</span>   19G  <span class="token number">0</span> part  ├─/dev/mapper/centos-root <span class="token number">253</span>:0    <span class="token number">0</span>   17G  <span class="token number">0</span> lvm  /  └─/dev/mapper/centos-swap <span class="token number">253</span>:1    <span class="token number">0</span>    2G  <span class="token number">0</span> lvm  <span class="token punctuation">[</span>SWAP<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="VMWare-Fusion中修改磁盘大小"><a href="#VMWare-Fusion中修改磁盘大小" class="headerlink" title="VMWare Fusion中修改磁盘大小"></a>VMWare Fusion中修改磁盘大小</h4><p>操作方式比较简单, 直接在控制面板修改文件大小即可.<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202211222348543.png"></p><ul><li>该步骤结束后, 效果:<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># lsblk -p</span>NAME                        MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT/dev/sda                      <span class="token number">8</span>:0    <span class="token number">0</span>   32G  <span class="token number">0</span> disk├─/dev/sda1                   <span class="token number">8</span>:1    <span class="token number">0</span>    1G  <span class="token number">0</span> part /boot└─/dev/sda2                   <span class="token number">8</span>:2    <span class="token number">0</span>   19G  <span class="token number">0</span> part  ├─/dev/mapper/centos-root <span class="token number">253</span>:0    <span class="token number">0</span>   17G  <span class="token number">0</span> lvm  /  └─/dev/mapper/centos-swap <span class="token number">253</span>:1    <span class="token number">0</span>    2G  <span class="token number">0</span> lvm  <span class="token punctuation">[</span>SWAP<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="将新增的空间新建一个LVM类型分区-fdisk"><a href="#将新增的空间新建一个LVM类型分区-fdisk" class="headerlink" title="将新增的空间新建一个LVM类型分区(fdisk)"></a>将新增的空间新建一个LVM类型分区(fdisk)</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># fdisk /dev/sda</span>命令<span class="token punctuation">(</span>输入 m 获取帮助<span class="token punctuation">)</span>：nPartition type:   p   primary <span class="token punctuation">(</span><span class="token number">2</span> primary, <span class="token number">0</span> extended, <span class="token number">2</span> <span class="token function">free</span><span class="token punctuation">)</span>   e   extendedSelect <span class="token punctuation">(</span>default p<span class="token punctuation">)</span>:Using default response p分区号 <span class="token punctuation">(</span><span class="token number">3,4</span>，默认 <span class="token number">3</span><span class="token punctuation">)</span>：起始 扇区 <span class="token punctuation">(</span><span class="token number">41943040</span>-67108863，默认为 <span class="token number">41943040</span><span class="token punctuation">)</span>：将使用默认值 <span class="token number">41943040</span>Last 扇区, +扇区 or +size<span class="token punctuation">&#123;</span>K,M,G<span class="token punctuation">&#125;</span> <span class="token punctuation">(</span><span class="token number">41943040</span>-67108863，默认为 <span class="token number">67108863</span><span class="token punctuation">)</span>：将使用默认值 <span class="token number">67108863</span>分区 <span class="token number">3</span> 已设置为 Linux 类型，大小设为 <span class="token number">12</span> GiB命令<span class="token punctuation">(</span>输入 m 获取帮助<span class="token punctuation">)</span>：p磁盘 /dev/sda：34.4 GB, <span class="token number">34359738368</span> 字节，67108864 个扇区Units <span class="token operator">=</span> 扇区 of <span class="token number">1</span> * <span class="token number">512</span> <span class="token operator">=</span> <span class="token number">512</span> bytes扇区大小<span class="token punctuation">(</span>逻辑/物理<span class="token punctuation">)</span>：512 字节 / <span class="token number">512</span> 字节I/O 大小<span class="token punctuation">(</span>最小/最佳<span class="token punctuation">)</span>：512 字节 / <span class="token number">512</span> 字节磁盘标签类型：dos磁盘标识符：0x000b7bb1   设备 Boot      Start         End      Blocks   Id  System/dev/sda1   *        <span class="token number">2048</span>     <span class="token number">2099199</span>     <span class="token number">1048576</span>   <span class="token number">83</span>  Linux/dev/sda2         <span class="token number">2099200</span>    <span class="token number">41943039</span>    <span class="token number">19921920</span>   8e  Linux LVM/dev/sda3        <span class="token number">41943040</span>    <span class="token number">67108863</span>    <span class="token number">12582912</span>   <span class="token number">83</span>  Linux命令<span class="token punctuation">(</span>输入 m 获取帮助<span class="token punctuation">)</span>：t分区号 <span class="token punctuation">(</span><span class="token number">1</span>-3，默认 <span class="token number">3</span><span class="token punctuation">)</span>：3Hex 代码<span class="token punctuation">(</span>输入 L 列出所有代码<span class="token punctuation">)</span>：LHex 代码<span class="token punctuation">(</span>输入 L 列出所有代码<span class="token punctuation">)</span>：8e已将分区“Linux”的类型更改为“Linux LVM”命令<span class="token punctuation">(</span>输入 m 获取帮助<span class="token punctuation">)</span>：wThe partition table has been altered<span class="token operator">!</span>正在同步磁盘。<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># partprobe</span>Warning: 无法以读写方式打开 /dev/sr0 <span class="token punctuation">(</span>只读文件系统<span class="token punctuation">)</span>。/dev/sr0 已按照只读方式打开。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>该步骤结束后, 效果如下, 看到多了一块分区<code>/dev/sda3</code>, TODO: 为啥这里看到的类型还是<code>part</code>??</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># lsblk</span>NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTsda               <span class="token number">8</span>:0    <span class="token number">0</span>   32G  <span class="token number">0</span> disk├─sda1            <span class="token number">8</span>:1    <span class="token number">0</span>    1G  <span class="token number">0</span> part /boot├─sda2            <span class="token number">8</span>:2    <span class="token number">0</span>   19G  <span class="token number">0</span> part│ ├─centos-root <span class="token number">253</span>:0    <span class="token number">0</span>   17G  <span class="token number">0</span> lvm  /│ └─centos-swap <span class="token number">253</span>:1    <span class="token number">0</span>    2G  <span class="token number">0</span> lvm  <span class="token punctuation">[</span>SWAP<span class="token punctuation">]</span>└─sda3            <span class="token number">8</span>:3    <span class="token number">0</span>   12G  <span class="token number">0</span> partsr0              <span class="token number">11</span>:0    <span class="token number">1</span>  973M  <span class="token number">0</span> rom<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="将该LVM分区添加到pv-group下-并扩展原来的Logical-volume-实现逻辑卷扩容"><a href="#将该LVM分区添加到pv-group下-并扩展原来的Logical-volume-实现逻辑卷扩容" class="headerlink" title="将该LVM分区添加到pv group下, 并扩展原来的Logical volume, 实现逻辑卷扩容"></a>将该LVM分区添加到pv group下, 并扩展原来的Logical volume, 实现逻辑卷扩容</h4><ol><li><p>将该LVM分区添加到pv group下, <code>vgextend</code>:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># lvm</span>lvm<span class="token operator">></span> pvcreate /dev/sda3  Physical volume <span class="token string">"/dev/sda3"</span> successfully created.lvm<span class="token operator">></span> pvdisplay  --- Physical volume ---  PV Name               /dev/sda2  VG Name               centos  PV Size               <span class="token operator">&lt;</span><span class="token number">19.00</span> GiB / not usable <span class="token number">3.00</span> MiB  Allocatable           <span class="token function">yes</span> <span class="token punctuation">(</span>but full<span class="token punctuation">)</span>  PE Size               <span class="token number">4.00</span> MiB  Total PE              <span class="token number">4863</span>  Free PE               <span class="token number">0</span>  Allocated PE          <span class="token number">4863</span>  PV UUID               xb72qt-XG0d-7jNA-VOEC-z3jt-y7bz-mtye35  <span class="token string">"/dev/sda3"</span> is a new physical volume of <span class="token string">"12.00 GiB"</span>  --- NEW Physical volume ---  PV Name               /dev/sda3  VG Name  PV Size               <span class="token number">12.00</span> GiB  Allocatable           NO  PE Size               <span class="token number">0</span>  Total PE              <span class="token number">0</span>  Free PE               <span class="token number">0</span>  Allocated PE          <span class="token number">0</span>  PV UUID               f71O6u-tlAf-F2Cr-rTyy-zGcq-YqE2-PvO5Rilvm<span class="token operator">></span> vgdisplay   --- Volume group ---  VG Name               centos  System ID  Format                lvm2  Metadata Areas        <span class="token number">1</span>  Metadata Sequence No  <span class="token number">3</span>  VG Access             read/write  VG Status             resizable  MAX LV                <span class="token number">0</span>  Cur LV                <span class="token number">2</span>  Open LV               <span class="token number">2</span>  Max PV                <span class="token number">0</span>  Cur PV                <span class="token number">1</span>  Act PV                <span class="token number">1</span>  VG Size               <span class="token operator">&lt;</span><span class="token number">19.00</span> GiB  PE Size               <span class="token number">4.00</span> MiB  Total PE              <span class="token number">4863</span>  Alloc PE / Size       <span class="token number">4863</span> / <span class="token operator">&lt;</span><span class="token number">19.00</span> GiB  Free  PE / Size       <span class="token number">0</span> / <span class="token number">0</span>  VG UUID               seZW4N-tjt9-C5Qg-UFYp-z0uY-TZgq-2F94Hdlvm<span class="token operator">></span> vgextend centos /dev/sda3 <span class="token comment"># 将该LVM分区添加到pv group下</span>  Volume group <span class="token string">"centos"</span> successfully extended<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>扩展原始的Logical Volume, <code>lvextend</code>:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lvm<span class="token operator">></span> lvdisplay  --- Logical volume ---  LV Path                /dev/centos/swap  LV Name                swap  VG Name                centos  LV UUID                wltk2Z-WIJW-vB6N-en6c-z5kg-U1IV-MWF7iX  LV Write Access        read/write  LV Creation host, <span class="token function">time</span> localhost, <span class="token number">2022</span>-10-22 07:51:02 -0400  LV Status              available  <span class="token comment"># open                 2</span>  LV Size                <span class="token number">2.00</span> GiB  Current LE             <span class="token number">512</span>  Segments               <span class="token number">1</span>  Allocation             inherit  Read ahead sectors     auto  - currently <span class="token builtin class-name">set</span> to     <span class="token number">8192</span>  Block device           <span class="token number">253</span>:1lvm<span class="token operator">></span> lvextend -l +100%FREE /dev/centos/root  Size of logical volume centos/root changed from <span class="token operator">&lt;</span><span class="token number">17.00</span> GiB <span class="token punctuation">(</span><span class="token number">4351</span> extents<span class="token punctuation">)</span> to <span class="token number">28.99</span> GiB <span class="token punctuation">(</span><span class="token number">7422</span> extents<span class="token punctuation">)</span>.  Logical volume centos/root successfully resized.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>该步骤结束后, 效果如下:</p></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># lsblk -p</span>NAME                        MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT/dev/sda                      <span class="token number">8</span>:0    <span class="token number">0</span>   32G  <span class="token number">0</span> disk├─/dev/sda1                   <span class="token number">8</span>:1    <span class="token number">0</span>    1G  <span class="token number">0</span> part /boot├─/dev/sda2                   <span class="token number">8</span>:2    <span class="token number">0</span>   19G  <span class="token number">0</span> part│ ├─/dev/mapper/centos-root <span class="token number">253</span>:0    <span class="token number">0</span>   29G  <span class="token number">0</span> lvm  /│ └─/dev/mapper/centos-swap <span class="token number">253</span>:1    <span class="token number">0</span>    2G  <span class="token number">0</span> lvm  <span class="token punctuation">[</span>SWAP<span class="token punctuation">]</span>└─/dev/sda3                   <span class="token number">8</span>:3    <span class="token number">0</span>   12G  <span class="token number">0</span> part  └─/dev/mapper/centos-root <span class="token number">253</span>:0    <span class="token number">0</span>   29G  <span class="token number">0</span> lvm  /<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="同步到文件系统-实现根目录扩容"><a href="#同步到文件系统-实现根目录扩容" class="headerlink" title="同步到文件系统, 实现根目录扩容"></a>同步到文件系统, 实现根目录扩容</h4><p>注意, 这里的 <code>/dev/centos/root</code> 是<code>Logical volume</code>的<code>LV Path</code>, 即使用 <code>lvdisplay</code> 之后显示的<code>LV Path</code><br>而不是 <code>/dev/mapper/centos-root</code> 这个路径.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># xfs_growfs /dev/centos/root</span>meta-data<span class="token operator">=</span>/dev/mapper/centos-root <span class="token assign-left variable">isize</span><span class="token operator">=</span><span class="token number">512</span>    <span class="token assign-left variable">agcount</span><span class="token operator">=</span><span class="token number">4</span>, <span class="token assign-left variable">agsize</span><span class="token operator">=</span><span class="token number">1113856</span> blks         <span class="token operator">=</span>                       <span class="token assign-left variable">sectsz</span><span class="token operator">=</span><span class="token number">512</span>   <span class="token assign-left variable">attr</span><span class="token operator">=</span><span class="token number">2</span>, <span class="token assign-left variable">projid32bit</span><span class="token operator">=</span><span class="token number">1</span>         <span class="token operator">=</span>                       <span class="token assign-left variable">crc</span><span class="token operator">=</span><span class="token number">1</span>        <span class="token assign-left variable">finobt</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">spinodes</span><span class="token operator">=</span><span class="token number">0</span>data     <span class="token operator">=</span>                       <span class="token assign-left variable">bsize</span><span class="token operator">=</span><span class="token number">4096</span>   <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">4455424</span>, <span class="token assign-left variable">imaxpct</span><span class="token operator">=</span><span class="token number">25</span>         <span class="token operator">=</span>                       <span class="token assign-left variable">sunit</span><span class="token operator">=</span><span class="token number">0</span>      <span class="token assign-left variable">swidth</span><span class="token operator">=</span><span class="token number">0</span> blksnaming   <span class="token operator">=</span>version <span class="token number">2</span>              <span class="token assign-left variable">bsize</span><span class="token operator">=</span><span class="token number">4096</span>   ascii-ci<span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">ftype</span><span class="token operator">=</span><span class="token number">1</span>log      <span class="token operator">=</span>internal               <span class="token assign-left variable">bsize</span><span class="token operator">=</span><span class="token number">4096</span>   <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">2560</span>, <span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token number">2</span>         <span class="token operator">=</span>                       <span class="token assign-left variable">sectsz</span><span class="token operator">=</span><span class="token number">512</span>   <span class="token assign-left variable">sunit</span><span class="token operator">=</span><span class="token number">0</span> blks, lazy-count<span class="token operator">=</span><span class="token number">1</span>realtime <span class="token operator">=</span>none                   <span class="token assign-left variable">extsz</span><span class="token operator">=</span><span class="token number">4096</span>   <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">rtextents</span><span class="token operator">=</span><span class="token number">0</span>data blocks changed from <span class="token number">4455424</span> to <span class="token number">7600128</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>该步骤结束后, 效果如下: <pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# lsblk -pNAME                        MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT&#x2F;dev&#x2F;sda                      8:0    0   32G  0 disk├─&#x2F;dev&#x2F;sda1                   8:1    0    1G  0 part &#x2F;boot├─&#x2F;dev&#x2F;sda2                   8:2    0   19G  0 part│ ├─&#x2F;dev&#x2F;mapper&#x2F;centos-root 253:0    0   29G  0 lvm  &#x2F;│ └─&#x2F;dev&#x2F;mapper&#x2F;centos-swap 253:1    0    2G  0 lvm  [SWAP]└─&#x2F;dev&#x2F;sda3                   8:3    0   12G  0 part  └─&#x2F;dev&#x2F;mapper&#x2F;centos-root 253:0    0   29G  0 lvm  &#x2F;[root@localhost ~]# df -h文件系统                 容量  已用  可用 已用% 挂载点&#x2F;dev&#x2F;mapper&#x2F;centos-root   29G  1.4G   28G    5% &#x2F;&#x2F;dev&#x2F;sda1               1014M  138M  877M   14% &#x2F;boot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="总结-amp-思考"><a href="#总结-amp-思考" class="headerlink" title="总结&amp;思考"></a>总结&amp;思考</h1><p>深刻体会到了磁盘与文件系统的关系, 如知乎某位大神所言, <strong>根本没有关系!</strong> </p><ul><li>一个磁盘(块设备)可以分为多个分区, 每个分区都可以分别格式化为不同的文件系统, 然后分别挂载在不同的目录下.</li><li>裸设备也可以不分区, 直接格式化为文件系统.</li><li>文件系统里一个文件可以作为(虚拟化为)一个块设备使用 </li><li>多个磁盘&#x2F;多个分区也可以共同组成一个设备, 该设备使用一个分区&#x2F;文件系统类型.</li></ul><p>TODO: </p><ol><li>研究下LVM吧, 不求源码级别的深入, 但原理与实践需要跟上.</li><li>分区与文件系统格式方案的最佳实践是啥?</li></ol><h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h1><ul><li><a href="https://linux.cn/article-10194-1.html">如何在 Linux 中查看已挂载的文件系统类型</a></li><li><a href="https://zhuanlan.zhihu.com/p/450057653">centos7扩容根目录（&#x2F;dev&#x2F;mapper&#x2F;centos-root）</a></li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;磁盘&quot;&gt;&lt;a href=&quot;#磁盘&quot; class=&quot;headerlink&quot; title=&quot;磁盘&quot;&gt;&lt;/a&gt;磁盘&lt;/h1&gt;&lt;h2 id=&quot;查看当前系统块设备列表&quot;&gt;&lt;a href=&quot;#查看当前系统块设备列表&quot; class=&quot;headerlink&quot; title=&quot;查看当前系统块设备列表&quot;&gt;&lt;/a&gt;查看当前系统块设备列表&lt;/h2&gt;&lt;h3 id=&quot;fdisk-l&quot;&gt;&lt;a href=&quot;#fdisk-l&quot; class=&quot;headerlink&quot; title=&quot;fdisk -l&quot;&gt;&lt;/a&gt;fdisk -l&lt;/h3&gt;&lt;p&gt;如下, &lt;code&gt;fdisk -l&lt;/code&gt; 命令, 可以显示出:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当前系统存在2块块设备, 分别是 &lt;code&gt;/dev/sda&lt;/code&gt; 与 &lt;code&gt;/dev/sdb&lt;/code&gt;, 大小分别为 21.5GB 与 31.5GB&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/dev/sda&lt;/code&gt; 磁盘, 划为两个分区, 分别是 &lt;code&gt;/dev/sda1&lt;/code&gt; &lt;code&gt;/dev/sda2&lt;/code&gt;, 其中 &lt;code&gt;/dev/sda2&lt;/code&gt; 为LVM文件系统类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/dev/sdb&lt;/code&gt; 磁盘(个人知道是U盘), 划分为1个分区 &lt;code&gt;/dev/sdb1&lt;/code&gt; , 文件系统类型是 &lt;code&gt;W95 FAT32&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;TODO: 疑问1  &lt;code&gt;/dev/mapper/centos-root&lt;/code&gt; &lt;code&gt;/dev/mapper/centos-swap&lt;/code&gt; 分别都是啥? 个人已知是在 &lt;code&gt;/dev/sda2&lt;/code&gt; 下继续分区出来的, 如下 &lt;code&gt;lsblk&lt;/code&gt; 命令指示. 但为啥这里没有&lt;/li&gt;
&lt;li&gt;TODO: 疑问2 &lt;code&gt;Linux LVM&lt;/code&gt; 具体是啥文件系统类型?&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;SATA device names follow the pattern &amp;#x2F;dev&amp;#x2F;sd[a-z]&lt;br&gt;while NVMe device names have the following pattern &amp;#x2F;dev&amp;#x2F;nvme[1-9]n[1-9]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@localhost ~&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# fdisk -l&lt;/span&gt;
Disk /dev/sda: &lt;span class=&quot;token number&quot;&gt;21.5&lt;/span&gt; GB, &lt;span class=&quot;token number&quot;&gt;21474836480&lt;/span&gt; bytes, &lt;span class=&quot;token number&quot;&gt;41943040&lt;/span&gt; sectors
Units &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; sectors of &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; * &lt;span class=&quot;token number&quot;&gt;512&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;512&lt;/span&gt; bytes
Sector size &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;logical/physical&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;: &lt;span class=&quot;token number&quot;&gt;512&lt;/span&gt; bytes / &lt;span class=&quot;token number&quot;&gt;512&lt;/span&gt; bytes
I/O size &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;minimum/optimal&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;: &lt;span class=&quot;token number&quot;&gt;512&lt;/span&gt; bytes / &lt;span class=&quot;token number&quot;&gt;512&lt;/span&gt; bytes
Disk label type: dos
Disk identifier: 0x000b7bb1

   Device Boot      Start         End      Blocks   Id  System
/dev/sda1   *        &lt;span class=&quot;token number&quot;&gt;2048&lt;/span&gt;     &lt;span class=&quot;token number&quot;&gt;2099199&lt;/span&gt;     &lt;span class=&quot;token number&quot;&gt;1048576&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;83&lt;/span&gt;  Linux
/dev/sda2         &lt;span class=&quot;token number&quot;&gt;2099200&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;41943039&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;19921920&lt;/span&gt;   8e  Linux LVM

Disk /dev/mapper/centos-root: &lt;span class=&quot;token number&quot;&gt;18.2&lt;/span&gt; GB, &lt;span class=&quot;token number&quot;&gt;18249416704&lt;/span&gt; bytes, &lt;span class=&quot;token number&quot;&gt;35643392&lt;/span&gt; sectors
Units &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; sectors of &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; * &lt;span class=&quot;token number&quot;&gt;512&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;512&lt;/span&gt; bytes
Sector size &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;logical/physical&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;: &lt;span class=&quot;token number&quot;&gt;512&lt;/span&gt; bytes / &lt;span class=&quot;token number&quot;&gt;512&lt;/span&gt; bytes
I/O size &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;minimum/optimal&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;: &lt;span class=&quot;token number&quot;&gt;512&lt;/span&gt; bytes / &lt;span class=&quot;token number&quot;&gt;512&lt;/span&gt; bytes

Disk /dev/mapper/centos-swap: &lt;span class=&quot;token number&quot;&gt;2147&lt;/span&gt; MB, &lt;span class=&quot;token number&quot;&gt;2147483648&lt;/span&gt; bytes, &lt;span class=&quot;token number&quot;&gt;4194304&lt;/span&gt; sectors
Units &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; sectors of &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; * &lt;span class=&quot;token number&quot;&gt;512&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;512&lt;/span&gt; bytes
Sector size &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;logical/physical&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;: &lt;span class=&quot;token number&quot;&gt;512&lt;/span&gt; bytes / &lt;span class=&quot;token number&quot;&gt;512&lt;/span&gt; bytes
I/O size &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;minimum/optimal&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;: &lt;span class=&quot;token number&quot;&gt;512&lt;/span&gt; bytes / &lt;span class=&quot;token number&quot;&gt;512&lt;/span&gt; bytes

Disk /dev/sdb: &lt;span class=&quot;token number&quot;&gt;31.5&lt;/span&gt; GB, &lt;span class=&quot;token number&quot;&gt;31457280000&lt;/span&gt; bytes, &lt;span class=&quot;token number&quot;&gt;61440000&lt;/span&gt; sectors
Units &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; sectors of &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; * &lt;span class=&quot;token number&quot;&gt;512&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;512&lt;/span&gt; bytes
Sector size &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;logical/physical&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;: &lt;span class=&quot;token number&quot;&gt;512&lt;/span&gt; bytes / &lt;span class=&quot;token number&quot;&gt;512&lt;/span&gt; bytes
I/O size &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;minimum/optimal&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;: &lt;span class=&quot;token number&quot;&gt;512&lt;/span&gt; bytes / &lt;span class=&quot;token number&quot;&gt;512&lt;/span&gt; bytes
Disk label type: dos
Disk identifier: 0x1c9aed9e

   Device Boot      Start         End      Blocks   Id  System
/dev/sdb1   *          &lt;span class=&quot;token number&quot;&gt;64&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;61439999&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;30719968&lt;/span&gt;    b  W95 FAT32&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;lsblk&quot;&gt;&lt;a href=&quot;#lsblk&quot; class=&quot;headerlink&quot; title=&quot;lsblk&quot;&gt;&lt;/a&gt;lsblk&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;如下, 类型为”disk”的有两个, sda sdb&lt;/li&gt;
&lt;li&gt;sda 被划分为了2个分区, sda1 与 sda2&lt;/li&gt;
&lt;li&gt;sdb 被划分为了1个分区, sdb1&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@localhost ~&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# lsblk&lt;/span&gt;
NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
sda               &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;:0    &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;   20G  &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; disk
├─sda1            &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;:1    &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;    1G  &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; part /boot
└─sda2            &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;:2    &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;   19G  &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; part
  ├─centos-root &lt;span class=&quot;token number&quot;&gt;253&lt;/span&gt;:0    &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;   17G  &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; lvm  /
  └─centos-swap &lt;span class=&quot;token number&quot;&gt;253&lt;/span&gt;:1    &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;    2G  &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; lvm  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;SWAP&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
sdb               &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;:16   &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;29&lt;/span&gt;.3G  &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; disk
└─sdb1            &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;:17   &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;29&lt;/span&gt;.3G  &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; part&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Linux常用命令" scheme="https://davyjones2010.github.io/categories/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="linux" scheme="https://davyjones2010.github.io/tags/linux/"/>
    
    <category term="disk" scheme="https://davyjones2010.github.io/tags/disk/"/>
    
    <category term="os" scheme="https://davyjones2010.github.io/tags/os/"/>
    
    <category term="file-system" scheme="https://davyjones2010.github.io/tags/file-system/"/>
    
  </entry>
  
  <entry>
    <title>十万个为什么--用晶体管数量衡量芯片的先进性合理么?</title>
    <link href="https://davyjones2010.github.io/2022-11-05-transistor-cnt-a-flawed-metric/"/>
    <id>https://davyjones2010.github.io/2022-11-05-transistor-cnt-a-flawed-metric/</id>
    <published>2022-11-05T02:55:04.000Z</published>
    <updated>2023-03-05T16:39:20.009Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-Intro"><a href="#0x00-Intro" class="headerlink" title="0x00: Intro"></a>0x00: Intro</h1><p>最近在看 <a href="https://zhuanlan.zhihu.com/p/479978458">The Basic Principles of Computers for Everyone</a> 这本书, 从 </p><ul><li>与非门(NAND) 开始, 加上非门, 构建与门</li><li>4个NAND构建一位带开关的存储单元(M); </li><li>8个存储单元(M)构建1Byte的存储(B)</li><li>8个与门构建一个8位的Enabler(E)</li><li>B+E 构建一个 8位 <strong>寄存器(R)</strong> + 总线</li><li>8个与门+3个非门构建一个 <strong>3X8译码器(Decoder)</strong></li><li>1个8位寄存器&amp;2个4X16译码器(用于寻址) + 256个1位寄存器(R)&amp;3个与门(用于存数) 构建 256位 的RAM</li></ul><p>等等, 非常深入浅出. 后边会把读书笔记补充上来. </p><p>忍不住思维跳跃了下, 构建一个256位的RAM至少需要((4*8+8) + (4+16) + (4+1)*256 + 3 &#x3D; 1343)个门(4个MOS管构建出一个与非门, 但当前主流的都是FinFET, 场效应晶体管). 虽然是RAM的实现, 与实际CPU上L1&#x2F;L2&#x2F;L3Cache的实现方式不同, 但也能基本说明点儿问题, 就是我们构建CPU&#x2F;DRAM等都需要庞大数量的晶体管.</p><p>想起苹果2021发布的M1 Max芯片, <a href="https://www.apple.com/hk/en/newsroom/2021/10/introducing-m1-pro-and-m1-max-the-most-powerful-chips-apple-has-ever-built/">晶体管数量是570亿, 57 billion transistors</a>, 例如自己在用的<code>Intel Xeon E5 2660 V3</code>, 也有2.6 billion个transistors. 这种庞大的数字, 总是让人很震撼. 也无外乎厂商会用这个数字来吹嘘, 来作为重要指标, 说明自己的CPU&#x2F;芯片有多复杂多先进. 毕竟芯片面积总共就那么大, 10倍晶体管数量的提升, 基本就只能提升密度了, 也就是得靠先进制程等. </p><p>但我们技术人都要有批判性思维, 仔细再想下, CPU中<a href="https://zhuanlan.zhihu.com/p/31422201">几乎一半的面积都是L3 Cache</a>, Cache的电路设计并不复杂, 因此都是先进制程带来的红利么? 晶体管数量庞大, 真的能说明技术NB么?</p><p>遂搜索了下资料, 发现果然有人砸场子的, <a href="https://www.realworldtech.com/transistor-count-flawed-metric/">Transistor Count: A Flawed Metric</a>, 在标题里就明确之处, <strong>晶体管数量是一个有缺陷的指标</strong>. 详细阅读了之后, 我试着总结下作者的几个理由.</p><h1 id="0x01-晶体管数量是数不准的"><a href="#0x01-晶体管数量是数不准的" class="headerlink" title="0x01: 晶体管数量是数不准的!!"></a>0x01: 晶体管数量是数不准的!!</h1><hr><p>厂商给出的晶体管数量都是一个近似值. 同样的设计, 晶体管数量会有33%到37%的误差. 为啥呢? 摘录 <a href="https://www.eet-china.com/news/202009071737.html">为什么说Intel的10nm工艺比别家7nm更先进？</a> 中的片段:</p><blockquote><p>比较古老的一种计量密度的方法，其实是用 CPP（contacted poly pitch，即 gate pitch，栅间距）去乘以 metal pitch 最小金属间距。<br>到了 FinFET 晶体管时期，增加 fin（鳍）高度、减少 fin 之间的间距就能有效增加驱动电流。驱动电流上去之后，就可以减少 fin 的数量——一个单元减少 fin 的数量，也就实现了金属 track 的减少，可以降低动态功耗，与此同时确保性能，甚至还能通过一些优化手法来提升速度。<br>在金属 track 减少之后，传统计算密度的方法其实就不怎么准确了，因为它其实不能反映单元高度减少这样的实际结构变化。所以后来有方法是 CPP 乘以 MMP（最小金属间距），再乘以 Track 数。<br>但更多的结构优化，比如后文会提到的 COAG 技术进一步降低了单元高度，同时采用 dummy gate 来缩减单元的宽度。那么在单元宽度、高度同时降低的情况下，上面这种计算方法就又不准确了。<br>所以如今的晶体管数字，更多的应当作为一种参考来看，毕竟晶体管并不是以均匀的方式分布在 die 上的。</p></blockquote><h1 id="0x02-不同类型的芯片-设计目标是有差异的-不会一味追求高密度"><a href="#0x02-不同类型的芯片-设计目标是有差异的-不会一味追求高密度" class="headerlink" title="0x02: 不同类型的芯片, 设计目标是有差异的, 不会一味追求高密度"></a>0x02: 不同类型的芯片, 设计目标是有差异的, 不会一味追求高密度</h1><hr><p>例如</p><ul><li>ASCI芯片, 只需要达到目标的吞吐量即可, 不需要追求高主频. 例如<code>Cisco Silicon One</code>, 只需要达到目标的400Gbps以太网吞吐量即可. 因此ASCI设计团队更倾向于 1. 使用自动化设计工具 2. 更少的定制电路 3. 更高密度晶体管(单Fin的FinFET晶体管). </li><li>服务器芯片追求更高频率, 例如<code>Xeon 8268</code>和<code>Xeon 8260</code>都有24 Core, 但8268的频率是2.9GHz, 8260是2.4GHz, 价格相差了$1600. 因此服务器芯片设计更倾向于 1. 更多的定制电路 2. 更大的晶体管(2Fin, 3Fin甚至更多Fin的FinFET晶体管)<blockquote><p>TODO: FinFET中Fin数量与主频的关系是?</p></blockquote></li></ul><h1 id="0x03-芯片中不同功能区域密度不同"><a href="#0x03-芯片中不同功能区域密度不同" class="headerlink" title="0x03. 芯片中不同功能区域密度不同"></a>0x03. 芯片中不同功能区域密度不同</h1><hr><p><img data-src="https://plantegg.github.io/images/951413iMgBlog/4Z1nU.png"><br>如上图, 处理器组成部分:</p><ol><li>CPU Cores, 包含 cores, L1 Cache, L2 Cache</li><li>L3 Cache</li><li>System Interface</li><li>I&#x2F;O, 包含 QPI, DIMM</li></ol><p>如下两个处理器, 都是for服务器场景:<br><img data-src="https://www.realworldtech.com/wp-content/uploads/2020/05/Table1.png?x97168" alt="Table 1. Transistor count and density for major regions for the Poulson and Tukwila generations of Itanium processors"></p><p>如上图, CPU 不同区域, 密度差异能高达20倍. 例如Poulson的L3 Cache密度是13.33Mtr&#x2F;mm2, 但IO区域密度是0.65Mtr&#x2F;mm2</p><blockquote><p>Naturally, the cache region which primarily comprises ultra-dense SRAM is the densest and makes up most of the transistors in each design.<br>The I&#x2F;O is the least dense portion of the two designs, because it contains many delicate analog circuits such as PLLs and DLLs, digital filters, and the large, high-voltage I&#x2F;O transistors that are used to transmit and receive off-chip data.</p></blockquote><p>如果只追求高密度, 庞大数量, 直接堆L3Cache就行了.</p><h1 id="0x04-实际有很多无效的晶体管"><a href="#0x04-实际有很多无效的晶体管" class="headerlink" title="0x04: 实际有很多无效的晶体管"></a>0x04: 实际有很多无效的晶体管</h1><hr><p>正常工作的叫做active transistors, 但实际上, 生产出来的芯片里还会包含: </p><ol><li>dummy transistors: 主要用来提升良品率, 但数量不算那么庞大.</li><li>decap transistors(decoupling capacitors): 数量就比较巨大了.</li></ol><blockquote><p>To ensure yield, the die must be relatively uniform and the whitespace cannot be truly empty. Many designs will fill the whitespace with decap cells to provide decoupling capacitance for power delivery and thereby improve operating frequency.</p></blockquote><p>实际上无效晶体管数量占到了20%~30%, 甚至更多.</p><blockquote><p>They found that in the small sampled regions that the active transistors were between 70-80% of the total, and the remaining 20-30% of layout transistors were decap and dummy devices.</p></blockquote><h1 id="0x05-晶体管不贵多而贵在精"><a href="#0x05-晶体管不贵多而贵在精" class="headerlink" title="0x05. 晶体管不贵多而贵在精"></a>0x05. 晶体管不贵多而贵在精</h1><hr><p>例如 AMD Radeon VII 比 RX 5700多了28%的transistors, 但是两者性能差不多. 部分原因是RX 5700使用了更加先进的架构, 而且RX 5700要便宜很多.</p><blockquote><p>When it comes to actual value to customers, it’s not about the transistor count, but how the transistors are used.</p></blockquote><h1 id="0x06-总结"><a href="#0x06-总结" class="headerlink" title="0x06: 总结"></a>0x06: 总结</h1><p>所以, 这东西就跟娱乐大师跑分一样, 只作为一个参考项, 不要作为唯一指标. 不能一叶障目不见泰山.</p><p>更重要的是, 我们技术人, <strong>需要保持独立思考能力</strong>, 知其然, 也要知其所以然, 不要被厂商忽悠了. </p><h1 id="0xFF-其他一些好玩儿的科普"><a href="#0xFF-其他一些好玩儿的科普" class="headerlink" title="0xFF:其他一些好玩儿的科普"></a>0xFF:其他一些好玩儿的科普</h1><ol><li>L3 Cache为啥不能做得更大一些? 直接替换掉RAM不行么?</li></ol><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;0x00-Intro&quot;&gt;&lt;a href=&quot;#0x00-Intro&quot; class=&quot;headerlink&quot; title=&quot;0x00: Intro&quot;&gt;&lt;/a&gt;0x00: Intro&lt;/h1&gt;&lt;p&gt;最近在看 &lt;a href=&quot;https://zhuanlan.zhihu.com/p/479978458&quot;&gt;The Basic Principles of Computers for Everyone&lt;/a&gt; 这本书, 从 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;与非门(NAND) 开始, 加上非门, 构建与门&lt;/li&gt;
&lt;li&gt;4个NAND构建一位带开关的存储单元(M); &lt;/li&gt;
&lt;li&gt;8个存储单元(M)构建1Byte的存储(B)&lt;/li&gt;
&lt;li&gt;8个与门构建一个8位的Enabler(E)&lt;/li&gt;
&lt;li&gt;B+E 构建一个 8位 &lt;strong&gt;寄存器(R)&lt;/strong&gt; + 总线&lt;/li&gt;
&lt;li&gt;8个与门+3个非门构建一个 &lt;strong&gt;3X8译码器(Decoder)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;1个8位寄存器&amp;amp;2个4X16译码器(用于寻址) + 256个1位寄存器(R)&amp;amp;3个与门(用于存数) 构建 256位 的RAM&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;等等, 非常深入浅出. 后边会把读书笔记补充上来. &lt;/p&gt;
&lt;p&gt;忍不住思维跳跃了下, 构建一个256位的RAM至少需要((4*8+8) + (4+16) + (4+1)*256 + 3 &amp;#x3D; 1343)个门(4个MOS管构建出一个与非门, 但当前主流的都是FinFET, 场效应晶体管). 虽然是RAM的实现, 与实际CPU上L1&amp;#x2F;L2&amp;#x2F;L3Cache的实现方式不同, 但也能基本说明点儿问题, 就是我们构建CPU&amp;#x2F;DRAM等都需要庞大数量的晶体管.&lt;/p&gt;
&lt;p&gt;想起苹果2021发布的M1 Max芯片, &lt;a href=&quot;https://www.apple.com/hk/en/newsroom/2021/10/introducing-m1-pro-and-m1-max-the-most-powerful-chips-apple-has-ever-built/&quot;&gt;晶体管数量是570亿, 57 billion transistors&lt;/a&gt;, 例如自己在用的&lt;code&gt;Intel Xeon E5 2660 V3&lt;/code&gt;, 也有2.6 billion个transistors. 这种庞大的数字, 总是让人很震撼. 也无外乎厂商会用这个数字来吹嘘, 来作为重要指标, 说明自己的CPU&amp;#x2F;芯片有多复杂多先进. 毕竟芯片面积总共就那么大, 10倍晶体管数量的提升, 基本就只能提升密度了, 也就是得靠先进制程等. &lt;/p&gt;
&lt;p&gt;但我们技术人都要有批判性思维, 仔细再想下, CPU中&lt;a href=&quot;https://zhuanlan.zhihu.com/p/31422201&quot;&gt;几乎一半的面积都是L3 Cache&lt;/a&gt;, Cache的电路设计并不复杂, 因此都是先进制程带来的红利么? 晶体管数量庞大, 真的能说明技术NB么?&lt;/p&gt;
&lt;p&gt;遂搜索了下资料, 发现果然有人砸场子的, &lt;a href=&quot;https://www.realworldtech.com/transistor-count-flawed-metric/&quot;&gt;Transistor Count: A Flawed Metric&lt;/a&gt;, 在标题里就明确之处, &lt;strong&gt;晶体管数量是一个有缺陷的指标&lt;/strong&gt;. 详细阅读了之后, 我试着总结下作者的几个理由.&lt;/p&gt;
&lt;h1 id=&quot;0x01-晶体管数量是数不准的&quot;&gt;&lt;a href=&quot;#0x01-晶体管数量是数不准的&quot; class=&quot;headerlink&quot; title=&quot;0x01: 晶体管数量是数不准的!!&quot;&gt;&lt;/a&gt;0x01: 晶体管数量是数不准的!!&lt;/h1&gt;&lt;hr&gt;</summary>
    
    
    
    <category term="十万个为什么" scheme="https://davyjones2010.github.io/categories/%E5%8D%81%E4%B8%87%E4%B8%AA%E4%B8%BA%E4%BB%80%E4%B9%88/"/>
    
    
    <category term="semi-conductor" scheme="https://davyjones2010.github.io/tags/semi-conductor/"/>
    
    <category term="cpu" scheme="https://davyjones2010.github.io/tags/cpu/"/>
    
    <category term="hardware" scheme="https://davyjones2010.github.io/tags/hardware/"/>
    
    <category term="chip" scheme="https://davyjones2010.github.io/tags/chip/"/>
    
  </entry>
  
  <entry>
    <title>玩转minikube</title>
    <link href="https://davyjones2010.github.io/2022-11-02-k8s-play-with-minikube/"/>
    <id>https://davyjones2010.github.io/2022-11-02-k8s-play-with-minikube/</id>
    <published>2022-11-02T15:31:12.000Z</published>
    <updated>2023-03-05T16:39:20.005Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><ul><li><p>登录Node</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">minikube <span class="token function">ssh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li></li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;登录Node&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;minikube &lt;span class=&quot;token function&quot;&gt;ssh&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;script type=&quot;text&amp;#x2F;javascript&quot; src=&quot;https://unpkg.com/kity@2.0.4/dist/kity.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text&amp;#x2F;javascript&quot; src=&quot;https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;true&quot; type=&quot;text&amp;#x2F;javascript&quot; src=&quot;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js&quot;&gt;&lt;/script&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text&amp;#x2F;css&quot; href=&quot;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css&quot;&gt;</summary>
    
    
    
    
    <category term="k8s" scheme="https://davyjones2010.github.io/tags/k8s/"/>
    
    <category term="kubectl" scheme="https://davyjones2010.github.io/tags/kubectl/"/>
    
    <category term="minikube" scheme="https://davyjones2010.github.io/tags/minikube/"/>
    
  </entry>
  
  <entry>
    <title>K8s部署使用错误排查</title>
    <link href="https://davyjones2010.github.io/2022-11-01-k8s-trouble-shooting/"/>
    <id>https://davyjones2010.github.io/2022-11-01-k8s-trouble-shooting/</id>
    <published>2022-11-01T13:45:41.000Z</published>
    <updated>2023-03-05T16:39:20.005Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ImagePullBackOff"><a href="#ImagePullBackOff" class="headerlink" title="ImagePullBackOff"></a>ImagePullBackOff</h1><h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><hr><p>在mac上使用minikube, 创建pod出现如下 ImagePullBackOff:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Normal   Pulling    8s               kubelet            Pulling image <span class="token string">"docker.io/nginx:1.23"</span>Warning  Failed     8s               kubelet            Failed to pull image <span class="token string">"docker.io/nginx:1.23"</span><span class="token builtin class-name">:</span> rpc error: code <span class="token operator">=</span> Unknown desc <span class="token operator">=</span> Error response from daemon: Get <span class="token string">"https://registry-1.docker.io/v2/"</span><span class="token builtin class-name">:</span> dial tcp: lookup registry-1.docker.io on <span class="token number">192.168</span>.64.1:53: server misbehavingWarning  Failed     8s               kubelet            Error: ErrImagePullNormal   BackOff    6s <span class="token punctuation">(</span>x2 over 7s<span class="token punctuation">)</span>  kubelet            Back-off pulling image <span class="token string">"docker.io/nginx:1.23"</span>Warning  Failed     6s <span class="token punctuation">(</span>x2 over 7s<span class="token punctuation">)</span>  kubelet            Error: ImagePullBackOff<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><hr><p>参见: <a href="https://github.com/docker/for-mac/issues/1317">解决方案</a></p><ol><li><p>登录minikube的节点</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ minikube <span class="token function">ssh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在minikube node上手动 pull docker image, 如下, 发现问题仍然重现</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> pull docker.io/nginxUsing default tag: latestError response from daemon: Get <span class="token string">"https://registry-1.docker.io/v2/"</span><span class="token builtin class-name">:</span> dial tcp: lookup registry-1.docker.io on <span class="token number">192.168</span>.64.1:53: server misbehaving<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>修改minikube node上的resolv.conf文件的nameserver:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">vi</span> /etc/resolv.confnameserver <span class="token number">8.8</span>.8.8search <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>重新尝试手动pull image, 发现问题解决:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> pull docker.io/nginx:1.23<span class="token number">1.23</span>: Pulling from library/nginxDigest: sha256:943c25b4b66b332184d5ba6bb18234273551593016c0e0ae906bab111548239fStatus: Downloaded newer image <span class="token keyword">for</span> nginx:1.23docker.io/library/nginx:1.23<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>退出node, 在Mac上重新检查pod状态, 问题解决🎉🎉🎉:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">davywalkerdeMacBook-Pro:~ davywalker$ k get poNAME                              READY   STATUS    RESTARTS   AGEhello-minikube-67b8c7bdfd-965qn   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          87s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="为啥叫”ImagePullBackOff”"><a href="#为啥叫”ImagePullBackOff”" class="headerlink" title="为啥叫”ImagePullBackOff”??"></a>为啥叫”ImagePullBackOff”??</h2><hr><p>参见文章 <a href="https://www.tutorialworks.com/kubernetes-imagepullbackoff/">Kubernetes ImagePullBackOff error: what you need to know</a> 说明.</p><blockquote><p>The status ImagePullBackOff means that a Pod couldn’t start,<br>because Kubernetes couldn’t pull a container image.<br>The ‘BackOff’ part means that Kubernetes will keep trying to pull the image,<br>with an increasing delay (‘back-off’).</p></blockquote><p>这里的”BackOff”就是”退避”的意思, 当拉取失败时, kubelet应该有个退避算法来重试拉取. 具体退避算法是啥, 有待后续钻研. 🤔</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;ImagePullBackOff&quot;&gt;&lt;a href=&quot;#ImagePullBackOff&quot; class=&quot;headerlink&quot; title=&quot;ImagePullBackOff&quot;&gt;&lt;/a&gt;ImagePullBackOff&lt;/h1&gt;&lt;h2 id=&quot;错误&quot;&gt;&lt;a href=&quot;#错误&quot; class=&quot;headerlink&quot; title=&quot;错误&quot;&gt;&lt;/a&gt;错误&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;在mac上使用minikube, 创建pod出现如下 ImagePullBackOff:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Normal   Pulling    8s               kubelet            Pulling image &lt;span class=&quot;token string&quot;&gt;&quot;docker.io/nginx:1.23&quot;&lt;/span&gt;
Warning  Failed     8s               kubelet            Failed to pull image &lt;span class=&quot;token string&quot;&gt;&quot;docker.io/nginx:1.23&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; rpc error: code &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Unknown desc &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Error response from daemon: Get &lt;span class=&quot;token string&quot;&gt;&quot;https://registry-1.docker.io/v2/&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; dial tcp: lookup registry-1.docker.io on &lt;span class=&quot;token number&quot;&gt;192.168&lt;/span&gt;.64.1:53: server misbehaving
Warning  Failed     8s               kubelet            Error: ErrImagePull
Normal   BackOff    6s &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x2 over 7s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  kubelet            Back-off pulling image &lt;span class=&quot;token string&quot;&gt;&quot;docker.io/nginx:1.23&quot;&lt;/span&gt;
Warning  Failed     6s &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x2 over 7s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  kubelet            Error: ImagePullBackOff&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方案&quot; class=&quot;headerlink&quot; title=&quot;解决方案&quot;&gt;&lt;/a&gt;解决方案&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;参见: &lt;a href=&quot;https://github.com/docker/for-mac/issues/1317&quot;&gt;解决方案&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;登录minikube的节点&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ minikube &lt;span class=&quot;token function&quot;&gt;ssh&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在minikube node上手动 pull docker image, 如下, 发现问题仍然重现&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; pull docker.io/nginx
Using default tag: latest
Error response from daemon: Get &lt;span class=&quot;token string&quot;&gt;&quot;https://registry-1.docker.io/v2/&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; dial tcp: lookup registry-1.docker.io on &lt;span class=&quot;token number&quot;&gt;192.168&lt;/span&gt;.64.1:53: server misbehaving&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改minikube node上的resolv.conf文件的nameserver:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;vi&lt;/span&gt; /etc/resolv.conf
nameserver &lt;span class=&quot;token number&quot;&gt;8.8&lt;/span&gt;.8.8
search &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;重新尝试手动pull image, 发现问题解决:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; pull docker.io/nginx:1.23
&lt;span class=&quot;token number&quot;&gt;1.23&lt;/span&gt;: Pulling from library/nginx
Digest: sha256:943c25b4b66b332184d5ba6bb18234273551593016c0e0ae906bab111548239f
Status: Downloaded newer image &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; nginx:1.23
docker.io/library/nginx:1.23&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;退出node, 在Mac上重新检查pod状态, 问题解决🎉🎉🎉:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;davywalkerdeMacBook-Pro:~ davywalker$ k get po
NAME                              READY   STATUS    RESTARTS   AGE
hello-minikube-67b8c7bdfd-965qn   &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;/1     Running   &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;          87s&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;为啥叫”ImagePullBackOff”&quot;&gt;&lt;a href=&quot;#为啥叫”ImagePullBackOff”&quot; class=&quot;headerlink&quot; title=&quot;为啥叫”ImagePullBackOff”??&quot;&gt;&lt;/a&gt;为啥叫”ImagePullBackOff”??&lt;/h2&gt;</summary>
    
    
    
    
    <category term="k8s" scheme="https://davyjones2010.github.io/tags/k8s/"/>
    
    <category term="kubectl" scheme="https://davyjones2010.github.io/tags/kubectl/"/>
    
    <category term="trouble-shooting" scheme="https://davyjones2010.github.io/tags/trouble-shooting/"/>
    
  </entry>
  
  <entry>
    <title>十万个为什么之--为什么磁盘需要分区与挂载?</title>
    <link href="https://davyjones2010.github.io/2022-08-30-disk-partition/"/>
    <id>https://davyjones2010.github.io/2022-08-30-disk-partition/</id>
    <published>2022-08-30T03:41:13.000Z</published>
    <updated>2023-03-05T16:39:20.005Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>经常会有个疑问: </p><ul><li>为什么磁盘需要进行分区, 不分区直接按照文件夹划分有啥问题? 这个在Windows下尤其有疑问.</li><li>为啥需要挂载? 直接插入设备, 为啥不能像Windows下U盘一样直接热插拔? Linux下为啥还需要手动挂载下? </li><li>分区与格式化以及文件系统有啥关系与区别? 是一对一的么? 一个分区下只能有一个文件系统么? 一个文件系统下只能有一个分区么?</li></ul><h1 id="为啥需要分区"><a href="#为啥需要分区" class="headerlink" title="为啥需要分区?"></a>为啥需要分区?</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>习惯了使用Linux&#x2F;Mac之后, 完全没有分区的概念了.</p><ul><li>Linux&#x2F;Ubuntu装机步骤:<ul><li>一整块磁盘, 选定文件系统类型, 进行格式化.</li><li>直接在磁盘上安装操作系统, 就可以开始使用了.</li></ul></li><li>Mac甚至无需装机, 开机直接使用.</li></ul><p>实际使用过程中, 不分区有如下优势:</p><ul><li>软件安装: 无需关注需要把软件安装在哪个盘(C盘&#x2F;D盘&#x2F;E盘…), 通常只需要默认路径就好;</li><li>文件下载存储: 无需关注文件要保存在哪个盘, 只需要关注保存在哪个目录即可.</li></ul><blockquote><p>因此完全不用担心到底分几个区, 每个分区大小多少, C盘满了如何扩容之类的问题.</p></blockquote><p>因此, 在攒了台Windows机器之后, 犹豫要不要分多个区. 后来事实教会了我怎么做人.</p><blockquote><p>Win10很无节操地会在C盘预留30GB+的空间, 还要放虚拟内存文件等, 导致可怜的C盘立刻存储报警.</p></blockquote><h2 id="个人实践理解"><a href="#个人实践理解" class="headerlink" title="个人实践理解"></a>个人实践理解</h2><p>个人使用下来, 唯一的理由就是: <strong>分区隔离, 方便无损重装系统.</strong></p><p>Mac&#x2F;Linux上, 几乎无需也没有重装过系统. 但<strong>在Windows下, 重装系统简直是常态</strong>. </p><blockquote><p>垃圾(病毒)软件太多, 连所谓的纯净镜像也根本不纯净.</p></blockquote><ul><li>都想往注册表里偷偷塞东西. 清理注册表, 一不小心就会把系统清理蓝屏.</li><li>或者有病毒, 直接系统崩溃.</li></ul><blockquote><p>解决方案</p></blockquote><ul><li>要么通过PE进入系统, 找到问题点, 进行修复. </li><li>要么直接重装系统. </li><li>找到问题点太麻烦, 所以还是无脑一键重装吧.</li></ul><p>但重装系统, 就需要把分区重新格式化. 想想吧, 辛苦安装的软件, 设定的配置, 保存的文件, 都会随着格式化被完全抹除!<br>所以还是分区吧, 只格式化C盘就好. 软件啊, 文件啊, 配置啊, 都放到其他盘里好了.</p><h2 id="其他专业理由"><a href="#其他专业理由" class="headerlink" title="其他专业理由"></a>其他专业理由</h2><p>参照知乎 <a href="https://www.zhihu.com/question/47538075/answer/107737383">其实windows分区是不是分C盘和D盘就好了？</a> 回答.</p><ul><li>病毒泛滥, 会把系统搞Crash, 需要频繁重装系统.</li><li>早期的FAT16&#x2F;32文件系统支持的单个分区容量有限. FAT32最大文件系统总容量 128GB, 在现在随便一个硬盘就是1TB+, 无法充分利用磁盘空间.</li><li>xp之前的windows系列操作系统本身稳定性堪忧，很容易因为用户操作、软件故障崩溃甚至破坏。尤其是经常折腾的桌面系统。这就导致用户不得不频繁重装系统。</li><li>操作系统权限&amp;软件兼容问题: 现在win10管理员权限小了，某些软件装在C盘会有权限问题，比如notepad++装在C盘，直接运行的话是不能保存自定义配置的</li></ul><blockquote><p>所以在Windows下, 还是老老实实分区吧! 当然在严肃的企业场景, 也推荐按照系统盘与数据盘进行下区分.</p></blockquote><h1 id="为啥需要挂载"><a href="#为啥需要挂载" class="headerlink" title="为啥需要挂载?"></a>为啥需要挂载?</h1><p>尤其是在Linux下, 设备可以从 &#x2F;dev&#x2F;sda[b] 路径下获取, 为啥不能直接操作这些设备? 还需要挂载(mount)下?</p><h2 id="为啥磁盘需要挂载才能使用"><a href="#为啥磁盘需要挂载才能使用" class="headerlink" title="为啥磁盘需要挂载才能使用?"></a>为啥磁盘需要挂载才能使用?</h2><h3 id="为啥不能直接操作-dev-sda-b-等裸设备"><a href="#为啥不能直接操作-dev-sda-b-等裸设备" class="headerlink" title="为啥不能直接操作/dev/sda[b]等裸设备?"></a>为啥不能直接操作<code>/dev/sda[b]</code>等裸设备?</h3><h3 id="挂载具体做了啥"><a href="#挂载具体做了啥" class="headerlink" title="挂载具体做了啥?"></a>挂载具体做了啥?</h3><p>本质上, Windows下也是有挂载这一步的, 本质上挂载就是把分区&#x2F;磁盘格式化之后的文件系统, 挂载到操作系统文件树下, 映射到某个目录,<br>便于操作系统</p><h3 id="Windows下也有挂载么"><a href="#Windows下也有挂载么" class="headerlink" title="Windows下也有挂载么?"></a>Windows下也有挂载么?</h3><p>是的. Windows下</p><h2 id="为啥不能像Windows一样-插入设备直接默认挂载"><a href="#为啥不能像Windows一样-插入设备直接默认挂载" class="headerlink" title="为啥不能像Windows一样, 插入设备直接默认挂载?"></a>为啥不能像Windows一样, 插入设备直接默认挂载?</h2><p>这个搜索了知乎, <a href="https://www.zhihu.com/question/524667726/answer/2437578886">得到的结论</a>是: </p><ol><li><p>Unix-like的操作系统不支持自动mount原因是为了权限控制</p><blockquote><p>POSIX权限的概念出现的很早，Unix、Linux都是支持POSIX权限的。<br>那么对于一个新设备来说，操作系统不是很确定是不是所有用户都对这个设备有访问权限，<br>这种情况下，如果自动mount，那么这个设备的内容就可能会被所有用户看到，<br>这样会有安全的隐患。所以Unix和Linux才要求必须先mount，<br>并且mount命令必须要用root权限，也就是说对于一个未知的设备，<br>必须由root来决定是不是可用的。</p><p>所以，这种设计的原因已经很清晰了，就是为了权限控制。</p></blockquote></li><li><p>Windows不需要这个机制，是因为Windows是从DOS发展过来的，这个过程中一直没有权限控制，</p><blockquote><p>所以Windows也不需要mount</p></blockquote></li><li><p>Linux也可以做到自动挂载, 例如Ubuntu就是自动挂载的</p></li></ol><h1 id="磁盘-amp-文件系统的扩展知识"><a href="#磁盘-amp-文件系统的扩展知识" class="headerlink" title="磁盘&amp;文件系统的扩展知识"></a>磁盘&amp;文件系统的扩展知识</h1><h2 id="磁盘-分区-文件系统-关系"><a href="#磁盘-分区-文件系统-关系" class="headerlink" title="磁盘, 分区, 文件系统 关系"></a>磁盘, 分区, 文件系统 关系</h2><p>如下: </p><pre class="mermaid">erDiagram    DiskDevice ||--|{ Partition : contain    Partition ||--|| FileSystem : format</pre><h3 id="磁盘-x2F-块设备-gt-分区"><a href="#磁盘-x2F-块设备-gt-分区" class="headerlink" title="磁盘&#x2F;块设备 -&gt; 分区"></a>磁盘&#x2F;块设备 -&gt; 分区</h3><p>一个磁盘设备(HDD, SSD, U盘等), 可以划分为多个分区. 分区方式有MBR, GPT两种.<br>那么磁盘分区的元信息写在哪里? </p><ul><li>是存储在文件系统中么? 此时磁盘还没有文件系统, 所以应该不是以文件形式保存, 所以我们也就无法直接在操作系统里找到这个文件并操作.</li><li>是存储在裸设备的固定位置(它在硬盘上的三维地址为（柱面，磁头，扇区）＝（0，0，1）。)</li><li>通过 <code>lsblk</code> 命令查看已经挂载的块设备<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@662fd3213ce8:/data<span class="token comment"># lsblk</span>NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTvda    <span class="token number">254</span>:0    <span class="token number">0</span> <span class="token number">59</span>.6G  <span class="token number">0</span> disk`-vda1 <span class="token number">254</span>:1    <span class="token number">0</span> <span class="token number">59</span>.6G  <span class="token number">0</span> part /etc/hosts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="分区-gt-文件系统"><a href="#分区-gt-文件系统" class="headerlink" title="分区 -&gt; 文件系统"></a>分区 -&gt; 文件系统</h3><p>一个分区对应一个文件系统. 因此同一个磁盘设备的多个分区, 各个分区都可以格式化成不同的文件系统类型.</p><ul><li>通过 <code>df -h</code> 命令查看分区<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@662fd3213ce8:/data<span class="token comment"># df -h</span>Filesystem      Size  Used Avail Use% Mounted onoverlay          59G  <span class="token number">2</span>.7G   53G   <span class="token number">5</span>% /tmpfs            64M     <span class="token number">0</span>   64M   <span class="token number">0</span>% /devshm              64M     <span class="token number">0</span>   64M   <span class="token number">0</span>% /dev/shm/dev/vda1        59G  <span class="token number">2</span>.7G   53G   <span class="token number">5</span>% /datatmpfs           <span class="token number">3</span>.9G     <span class="token number">0</span>  <span class="token number">3</span>.9G   <span class="token number">0</span>% /proc/acpitmpfs           <span class="token number">3</span>.9G     <span class="token number">0</span>  <span class="token number">3</span>.9G   <span class="token number">0</span>% /sys/firmware<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="文件系统类型描述元数据"><a href="#文件系统类型描述元数据" class="headerlink" title="文件系统类型描述元数据"></a>文件系统类型描述元数据</h3><div class="note warning"><p>TODO: 暂时还没搜索到相关信息.</p></div><h3 id="文件系统内部目录-amp-文件元数据"><a href="#文件系统内部目录-amp-文件元数据" class="headerlink" title="文件系统内部目录&amp;文件元数据:"></a>文件系统内部目录&amp;文件元数据:</h3><ul><li>例如ext4, 以inode形式保存. 包括文件大小, 权限信息, gmtCreated, gmtModified, 包含的block数量, 存储在磁盘的位置(柱面) 等</li><li>可以使用 stat 命令查看</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@662fd3213ce8:/data<span class="token comment"># stat dump.rdb</span>  File: dump.rdb  Size: <span class="token number">105</span>       Blocks: <span class="token number">8</span>          IO Block: <span class="token number">4096</span>   regular <span class="token function">file</span>Device: fe01h/65025dInode: <span class="token number">1055693</span>     Links: <span class="token number">1</span>Access: <span class="token punctuation">(</span>0600/-rw-------<span class="token punctuation">)</span>  Uid: <span class="token punctuation">(</span>  <span class="token number">999</span>/   redis<span class="token punctuation">)</span>   Gid: <span class="token punctuation">(</span>  <span class="token number">999</span>/   redis<span class="token punctuation">)</span>Access: <span class="token number">2022</span>-10-12 <span class="token number">16</span>:01:07.043330092 +0000Modify: <span class="token number">2022</span>-06-26 <span class="token number">10</span>:16:40.880774990 +0000Change: <span class="token number">2022</span>-06-26 <span class="token number">10</span>:16:40.896774990 +0000 Birth: <span class="token number">2022</span>-06-26 <span class="token number">10</span>:16:40.869774990 +0000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="note warning"><p>TODO: 分析下stat的具体信息含义, 尤其是 Device 相关的, 是不是操作系统直接就按照这个信息去寻找到文件的柱面范围了?</p></div><h3 id="分区名称规范"><a href="#分区名称规范" class="headerlink" title="分区名称规范"></a>分区名称规范</h3><ul><li>在Linux系统中，硬盘分区命名为sda1－sda4或者hda1－hda4</li></ul><div class="note warning"><p>TODO: 自己找个U盘试下划分成多个分区, 每个分区不同的文件系统类型?</p></div><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;经常会有个疑问: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为什么磁盘需要进行分区, 不分区直接按照文件夹划分有啥问题? 这个在Windows下尤其有疑问.&lt;/li&gt;
&lt;li&gt;为啥需要挂载? 直接插入设备, 为啥不能像Windows下U盘一样直接热插拔? Linux下为啥还需要手动挂载下? &lt;/li&gt;
&lt;li&gt;分区与格式化以及文件系统有啥关系与区别? 是一对一的么? 一个分区下只能有一个文件系统么? 一个文件系统下只能有一个分区么?&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;为啥需要分区&quot;&gt;&lt;a href=&quot;#为啥需要分区&quot; class=&quot;headerlink&quot; title=&quot;为啥需要分区?&quot;&gt;&lt;/a&gt;为啥需要分区?&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;习惯了使用Linux&amp;#x2F;Mac之后, 完全没有分区的概念了.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux&amp;#x2F;Ubuntu装机步骤:&lt;ul&gt;
&lt;li&gt;一整块磁盘, 选定文件系统类型, 进行格式化.&lt;/li&gt;
&lt;li&gt;直接在磁盘上安装操作系统, 就可以开始使用了.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mac甚至无需装机, 开机直接使用.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实际使用过程中, 不分区有如下优势:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;软件安装: 无需关注需要把软件安装在哪个盘(C盘&amp;#x2F;D盘&amp;#x2F;E盘…), 通常只需要默认路径就好;&lt;/li&gt;
&lt;li&gt;文件下载存储: 无需关注文件要保存在哪个盘, 只需要关注保存在哪个目录即可.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;因此完全不用担心到底分几个区, 每个分区大小多少, C盘满了如何扩容之类的问题.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="十万个为什么" scheme="https://davyjones2010.github.io/categories/%E5%8D%81%E4%B8%87%E4%B8%AA%E4%B8%BA%E4%BB%80%E4%B9%88/"/>
    
    
    <category term="linux" scheme="https://davyjones2010.github.io/tags/linux/"/>
    
    <category term="disk" scheme="https://davyjones2010.github.io/tags/disk/"/>
    
    <category term="os" scheme="https://davyjones2010.github.io/tags/os/"/>
    
  </entry>
  
  <entry>
    <title>瞎折腾洋垃圾电脑笔记</title>
    <link href="https://davyjones2010.github.io/2022-08-13-computer-diy/"/>
    <id>https://davyjones2010.github.io/2022-08-13-computer-diy/</id>
    <published>2022-08-13T13:39:48.000Z</published>
    <updated>2023-03-05T16:39:20.005Z</updated>
    
    <content type="html"><![CDATA[<p>垃圾佬的周末, 没事儿就是瞎折腾, 自从在B站被种草了洋垃圾, 按耐不住心中的冲动, 决定也用洋垃圾组装一台能数框框的电脑, 玩玩儿游戏, 压榨压榨性能.</p><h1 id="为啥要使用洋垃圾"><a href="#为啥要使用洋垃圾" class="headerlink" title="为啥要使用洋垃圾"></a>为啥要使用洋垃圾</h1><ul><li>一: 穷, </li><li>二: 玩,</li></ul><h1 id="配置清单"><a href="#配置清单" class="headerlink" title="配置清单"></a>配置清单</h1><blockquote><p>几乎都是从海鲜市场淘来的</p><ul><li>优点是便宜, 性价比高; </li><li>缺点是电气特性衰减不明确, 长期稳定性没有保障.</li></ul></blockquote><p>但对于偶尔玩一玩游戏, 不是长期高负荷跑渲染等, 整体还OK. 目标是<strong>1000元</strong>左右搞定.</p><h2 id="详细清单"><a href="#详细清单" class="headerlink" title="详细清单"></a>详细清单</h2><table><thead><tr><th>配件名称</th><th>品牌</th><th>数量</th><th>价格</th><th>详细说明</th></tr></thead><tbody><tr><td>CPU</td><td><a href="https://ark.intel.com/content/www/us/en/ark/products/83357/intel-xeon-processor-e52630l-v3-20m-cache-1-80-ghz.html">Intel® Xeon® Processor E5-2630L v3</a></td><td>1</td><td>80</td><td>Haswell; 8Core 16HT; 22 nm制程; Base 1.8GHz, Burst 2.90 GHz; 20MB L3 Cache; 55W TDP</td></tr><tr><td>主板</td><td><a href="https://item.taobao.com/item.htm?id=676047268901">X99寨板</a></td><td>1</td><td>250</td><td></td></tr><tr><td>内存</td><td>威刚万紫千红</td><td>4</td><td>160 + 200</td><td>8GB; DDR4 2133MHz; 强迫症4条必须插满, 组成4通道^_^</td></tr><tr><td>闪存</td><td><a href="https://www.intel.com/content/www/us/en/products/sku/134583/intel-ssd-760p-series-256gb-m-2-80mm-pcie-3-1-x4-3d2-tlc/specifications.html">Intel® SSD 760P</a></td><td>1</td><td>160</td><td>256GB; PCIe 3.1 x4 接口, NVMe</td></tr><tr><td>显卡</td><td>蓝宝石RX460</td><td>1</td><td>350</td><td>4GB显存; 无需单独供电; HDMI + VGA + DP 接口</td></tr><tr><td>电源</td><td>鑫谷全模组</td><td>1</td><td>120</td><td>550W, 整体绰绰有余了</td></tr><tr><td>CPU散热器</td><td>长城霄龙400</td><td>1</td><td>45</td><td>4铜管, 3针脚</td></tr><tr><td>机箱</td><td>待挑选</td><td>1</td><td>??</td><td>??</td></tr></tbody></table><p>合计 <code>80 + 250 + 160 + 200 + 160 + 350 + 120 + 45 = 1,365</code><br>现在显卡电源都还没到, 希望组装上去之后一次点亮, 就可以说声”真香!”啦.</p><h2 id="主板细节"><a href="#主板细节" class="headerlink" title="主板细节"></a>主板细节</h2><p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208132325729.png"></p><div class="note info"><p>x99含义<br>所谓的x99主板, 代表的其实是<code>Intel X99 chipset</code>, 是Intel的PCH(Platform Controller Hub)即南桥芯片, 定义了主板的规范, 如下:<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208140001662.png"></p></div><p>其他细节: </p><ul><li>CPU插槽: 单路; LGA2011 <ul><li>LGA代表LGA(Land Grid Array)封装类型, 即CPU上只有触点, 没有针; 与之对应的是PGA(Pin Grid Array)封装类型, 即CPU上有针(印象中老式的CPU都是这种类型), 更容易折断; 两者优缺点参见:<a href="https://techedged.com/lga-vs-pga/">LGA vs PGA CPU Sockets: What’s the Difference?</a>, 非常详细了. TODO: 啥时候翻译出来.</li><li>2011代表是2011个针脚; <a href="https://zhuanlan.zhihu.com/p/48593932">CPU底部的小块是干什么用？为什么CPU这么多电源引脚？</a></li></ul></li><li>CPU只支持DDR4内存, 但主板支持DDR3(问了店家, 主板同时也支持DDR4), 现在DDR4普遍价格比较贵, 没办法使用闲鱼上价格巨便宜的DDR3 ECC内存.</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="CPU型号"><a href="#CPU型号" class="headerlink" title="CPU型号"></a>CPU型号</h3><p>买的时候没有看清楚CPU型号, 以为是 <code>E5-2630 V3</code>, 结果实际是 <code>E5-2630L V3</code>, 才知道多了的这个<code>L</code>代表<mark>低功耗(Low Power)</mark>, 基频只有<code>1.8GHz</code>不能忍.<br>因此就又淘了如下两个能够适配X99主板的CPU, 准备到时候各自对比测试下:</p><table><thead><tr><th>配件名称</th><th>品牌</th><th>数量</th><th>价格</th><th>详细说明</th></tr></thead><tbody><tr><td>CPU</td><td><a href="https://ark.intel.com/content/www/us/en/ark/products/83357/intel-xeon-processor-e52630l-v3-20m-cache-1-80-ghz.html">Intel® Xeon® Processor E5-2630L v3</a></td><td>1</td><td>80</td><td>8Core 16HT; 22 nm制程; Base 1.8GHz, Burst 2.90 GHz; 20MB L3 Cache; 55W TDP</td></tr><tr><td>CPU</td><td><a href="https://ark.intel.com/content/www/us/en/ark/products/81706/intel-xeon-processor-e52660-v3-25m-cache-2-60-ghz.html">Intel® Xeon® Processor E5-2660 v3</a></td><td>1</td><td>100</td><td>10Core 20HT; 22 nm制程; Base 2.60 GHz, Burst 3.3 GHz; 25MB L3 Cache; 105W TDP</td></tr><tr><td>CPU</td><td><a href="https://ark.intel.com/content/www/us/en/ark/products/83352/intel-xeon-processor-e52620-v3-15m-cache-2-40-ghz.html">Intel® Xeon® Processor E5-2620 v3</a></td><td>1</td><td>20</td><td>6Core 12HT; 22 nm制程; Base 2.40 GHz, Burst 3.20 GHz; 15MB L3 Cache; 85W TDP; 你不能对一个20块钱的CPU要求更多了! :)</td></tr></tbody></table><div class="note info"><blockquote><p>CPU盖子上的<code>Costa Rica</code>, <code>Malay</code> 代表啥意思?<br>Just to clear something up, the markings on the back of the CPU refer to the packaging site - not the manufacturing site of the actual silicon chip itself.<br>也就是说<mark>代表的是封装工厂的地点</mark>, <code>Malay</code> 代表 <code>Malaysia</code></p></blockquote></div><h3 id="ECC内存"><a href="#ECC内存" class="headerlink" title="ECC内存"></a>ECC内存</h3><div class="note warning"><p>内存买成ECC却不能用 ECC内存到底是什么鬼?</p></div><ul><li>这是因为一般的电脑为了速度，一般都是不支持ECC内存，而ECC内存由于有校验这一步骤，一般都多用在服务器领域，<mark>普通的家用主板一般都是不支持的</mark>，而且对于服务器，还要区分REG-ECC和纯ECC的区别，REG是带寄存器的ECC内存，可以支持更大的单条容量，但是由于有寄存器的存在，延迟会更高。</li></ul><h3 id="CPU散热器"><a href="#CPU散热器" class="headerlink" title="CPU散热器"></a>CPU散热器</h3><div class="note warning"><p>主板上<code>CPU FAN</code>是4针的, 买来的散热器风扇是3针的. 区别是啥? 怎么插?</p></div><blockquote><p>2针, 3针与4针风扇区别?</p></blockquote><ul><li>2针的散热风扇（结构简单，但不能测速）: 一个用于供电、一个用于接地，不过没有测速功能。目前2针的散热风扇已经在市场上大量采用，但是2针的风扇在变速等方面上已经不能满足要求了</li><li>3针的散热风扇（VC电压调速，灵活性欠佳）: 第三条线, 主要是起着测速的作用，通过主板能够侦测到风扇是否在转、转速为多少，但是3针散热风扇的调速是通过调整风扇电压来实现的，此外，能不能调速还需要看下主板是否支持，显然这种调节转速并不够灵活，不能实时反映CPU状态的信息，还需要在主板BIOS中进行各种设置。</li><li>4针的散热风扇（更加灵活更加智能的调速）: 4针的散热风扇是在3针基础上又多了一根PWM线（ 脉宽调变），所谓的PWM线就是利用PWM机制来调节风扇转速，而风扇电压是恒定的，避免了控制电压来变速的一系列弊端。而PWM风扇无需依赖主板BIOS，更加省心方便。PWM脉冲信号可以输出不同的占空比（Duty Cycle），0-100%之间的占空比就能调节出不同的风扇转速，所以能够做到精确、灵活控制。</li></ul><p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208140950640.png"></p><blockquote><p>3针怎么插入主板4针接口中?</p></blockquote><ul><li>兼容, 有防呆机制.</li></ul><p>总体来说, 风扇踩坑了, 但也够用了:</p><ol><li>应该购买6铜管</li><li>应该购买4针的</li></ol><h2 id="成果展示"><a href="#成果展示" class="headerlink" title="成果展示"></a>成果展示</h2><h3 id="成品图"><a href="#成品图" class="headerlink" title="成品图"></a>成品图</h3><p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208172253812.png"></p><h3 id="数框框"><a href="#数框框" class="headerlink" title="数框框"></a>数框框</h3><p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208172318658.png"><br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208172253927.png"><br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208172254393.png"></p><h2 id="升级潜力-amp-计划"><a href="#升级潜力-amp-计划" class="headerlink" title="升级潜力&amp;计划"></a>升级潜力&amp;计划</h2><p>整体CPU还是比较强悍的, 有很大升级潜力</p><h3 id="主板升级"><a href="#主板升级" class="headerlink" title="主板升级"></a>主板升级</h3><ul><li>升级成两路, 看有没必要吧, 这样电费吃不消, 电源可能也要升级; <a href="https://post.smzdm.com/p/aoo8wewm/pic_3/#bigImg">X99双路主板简评</a> 指明了方向</li></ul><h3 id="CPU升级"><a href="#CPU升级" class="headerlink" title="CPU升级"></a>CPU升级</h3><ul><li>X99整体还支持V4(Broadwell)的CPU, 例如 <code>E5-2660 V4</code>, 16年上市, 14nm制程. 全部列表参见: </li><li>2699 v3: 650RMB左右</li><li><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208141020764.png"></li></ul><h3 id="内存升级"><a href="#内存升级" class="headerlink" title="内存升级"></a>内存升级</h3><ul><li>ECC内存: 这几个CPU都支持ECC内存, 等下批服务器淘汰, 或者DDR5主流, 就可以低价淘几个DDR4 ECC内存;</li><li>容量升级: CPU支持 <code>192GB * 4 = 768GB</code> 主板支持<code>32GB*4=128GB</code>; 当前是<code>8GB*4=32GB</code>, 有很大升级潜力, 等内存价格下降吧~</li><li>频率升级: CPU限制最大支持2133MHz, 导致最新的3200MHz都没法用(能用, 但会自动降频到2133MHz).</li></ul><h1 id="学到了啥"><a href="#学到了啥" class="headerlink" title="学到了啥"></a>学到了啥</h1><h2 id="常用主板型号"><a href="#常用主板型号" class="headerlink" title="常用主板型号"></a>常用主板型号</h2><ul><li>X79<ul><li>Sandy Bridge-E, Ivy Bridge-E</li><li>Quad-channel DDR3, up to two DIMMs per channel</li></ul></li><li>X99<ul><li>Haswell-E, Broadwell-E</li><li>Quad-channel DDR4, up to two DIMMs per channel</li></ul></li></ul><h2 id="家用机箱型号"><a href="#家用机箱型号" class="headerlink" title="家用机箱型号"></a>家用机箱型号</h2><ul><li>E-ATX</li><li>ATX</li><li>M-ATX</li><li>ITX</li></ul><h2 id="奇技淫巧"><a href="#奇技淫巧" class="headerlink" title="奇技淫巧"></a>奇技淫巧</h2><blockquote><p>Q: 鞋盒机箱, 如何无开关开机?<br>A: 直接螺丝刀戳主板, 连接针脚.<br><img data-src="http://p8.itc.cn/images01/20200823/5eb93a0ca39443f68d7d3392fc3615ea.jpeg"></p></blockquote><h2 id="其他体悟"><a href="#其他体悟" class="headerlink" title="其他体悟"></a>其他体悟</h2><ul><li>知道了经常说的V3, V4利旧是啥了; 对这种洋垃圾CPU市场行情有了大概的认知.</li><li>计算机并非只有CPU, 还有内存, 主板, 显卡甚至电源, 散热器等; 也都是极为关键的. 尤其是这种洋垃圾, CPU跟不要钱一样, 其他组件的可扩展性与稳定性就至关重要了. 很多特性不止要看CPU是否支持, 也要看主板. 例如内存的DDR代数, 最大容量, 通道数, 最大频率, 是否支持ECC; 例如CPU插槽的针脚数;</li><li>摩尔定律的恐怖: 上边几个CPU基本都是14年Q3上市, 到今天2022年Q2, 仅仅8年左右:  <ul><li>价格: 就已经跌倒了白菜价, 以<code>E5-2660 v3</code>为例, 上市价格是<code>$1445.00</code>, 现在是<code>100RMB=$15</code>. </li><li>性能: 当前主流的12代Intel, 以家用的 <a href="https://ark.intel.com/content/www/cn/zh/ark/products/134594/intel-core-i712700k-processor-25m-cache-up-to-5-00-ghz.html">i7-12700K</a> 为例, 制程已经到了7nm; 更不用提ARM架构下的主流制程都是5nm了.</li></ul></li></ul><blockquote><p>旧时王谢堂前燕, 飞入寻常百姓家</p></blockquote><h2 id="老司机踩坑记"><a href="#老司机踩坑记" class="headerlink" title="老司机踩坑记"></a>老司机踩坑记</h2><blockquote><p>自诩为垃圾佬, 结果这次组装电脑, 结结实实把自己给教育了一番.</p></blockquote><h3 id="U盘套路"><a href="#U盘套路" class="headerlink" title="U盘套路"></a>U盘套路</h3><p>在某宝买了2个32GB的U盘, 想要分别作为win10与centos的装机PE.<br>结果在拷贝镜像到U盘的时候, 发现传输速度奇慢无比, 只有6MB&#x2F;s.<br>普通的win10镜像大小是4GB左右, 也就是全部拷贝到U盘里需要: <code>4 * 1024 / 6 / 60 = 11.3</code>, 要10min+;<br>不解, 遂问客服, 解释道是USB2.0的. 仔细看了下详情页, 硕大的”USB 2.0”仿佛在嘲讽我@-@<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208172225310.png"></p><p>What??? 都2202年了, 竟然还有USB 2.0?? 我仿佛听到了一个国际笑话.<br>个人下意识里USB2.0都已经跟鼠标&#x2F;键盘的PS&#x2F;2接口一样, 已经销声匿迹了, by default不都应该是3.0的么?</p><p>此为坑一.</p><h3 id="镜像文件套路"><a href="#镜像文件套路" class="headerlink" title="镜像文件套路"></a>镜像文件套路</h3><p>为图省事儿, 在某CSXN网站花了N多积分, 下载了个”纯净版”镜像.<br>结果一安装, 里边密密麻麻各种软件, 什么360全家桶, TX全家桶, 2345全家桶.<br>浏览器主页被修改得不像样子.<br><mark>原来伪装成纯净版啊</mark></p><p>去搜自己仍然停留在十年前的经典的 雨林X风, 深度, 系统之家等, 结果一个一个都不像样子. 一点都不<code>纯净</code>!<br>最后只能老老实实去下载官方镜像, 又不是不能用@-@</p><h3 id="2345套路"><a href="#2345套路" class="headerlink" title="2345套路"></a>2345套路</h3><p>注册表里搜索”看图王”, 不查不知道, 一查吓一跳. 密密麻麻的, 看得我神经衰弱.<br>心想一个一个删除也不是个事儿啊.<br>索性大笔一挥, 直接把父节点删除. 结果直接经典的windows蓝屏.<br>没办法, 只好拾起传统艺能, 进入PE, 重装系统!</p><ul><li>不搜不知道, 一搜吓一跳. <a href="https://www.zhihu.com/question/35188509/answer/1266544765">劣迹斑斑</a>. 原来老板已经跑路, 搞起了网贷, 区块链.</li><li>好家伙, 我直呼好家伙. 原来还想做百年企业, 天天在官网给自己倒计时呢.</li></ul><p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208172241888.png"></p><blockquote><p>同样是小章鱼, 差别咋就那么大呢? 瞧瞧人家 <a href="https://github.com/">GitHub</a> 多有节操.</p></blockquote><h3 id="win10无节操套路"><a href="#win10无节操套路" class="headerlink" title="win10无节操套路"></a>win10无节操套路</h3><p>安装好系统, 准备安装显卡驱动, 结果报警, C盘存储空间不足.<br>What??? 我C盘可是40GB的容量, 就装了个系统, 啥软件都没安装呢, 咋就没了?<br>每个文件夹大小加起来, 总共也才10多GB, 剩下的20GB哪里去了? 查询才知道, 原来是被微软套路了.</p><ul><li><a href="https://www.itechtics.com/reserved-storage-windows-10/">17GB的预留空间</a></li><li>5GB的休眠文件</li></ul><blockquote><p>FxxK MicroSoft!</p></blockquote><h3 id="多么痛的领悟"><a href="#多么痛的领悟" class="headerlink" title="多么痛的领悟"></a>多么痛的领悟</h3><p>想想之前, 自己被mac&#x2F;linux保护得太好了. 还一直在纳闷为啥要给硬盘分区, C盘, D盘啥的多麻烦.<br>这次我知道了, 我乖乖地分成了几个区, 安装好了GHOST工具, 乖乖给C盘打了个GHOST镜像.<br>随时准备被这些流氓软件”XX”, 随时准备重装&#x2F;恢复系统.</p><blockquote><p>没办法, Windows的生存环境实在是太恶劣了!!</p></blockquote><h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h1><ul><li><a href="https://www.expreview.com/62077.html">散热风扇的2针、3针、4针都有什么区别？</a></li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;p&gt;垃圾佬的周末, 没事儿就是瞎折腾, 自从在B站被种草了洋垃圾, 按耐不住心中的冲动, 决定也用洋垃圾组装一台能数框框的电脑, 玩玩儿游戏, 压榨压榨性能.&lt;/p&gt;
&lt;h1 id=&quot;为啥要使用洋垃圾&quot;&gt;&lt;a href=&quot;#为啥要使用洋垃圾&quot; class=&quot;headerlink&quot; title=&quot;为啥要使用洋垃圾&quot;&gt;&lt;/a&gt;为啥要使用洋垃圾&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;一: 穷, &lt;/li&gt;
&lt;li&gt;二: 玩,&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;配置清单&quot;&gt;&lt;a href=&quot;#配置清单&quot; class=&quot;headerlink&quot; title=&quot;配置清单&quot;&gt;&lt;/a&gt;配置清单&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;几乎都是从海鲜市场淘来的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点是便宜, 性价比高; &lt;/li&gt;
&lt;li&gt;缺点是电气特性衰减不明确, 长期稳定性没有保障.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;但对于偶尔玩一玩游戏, 不是长期高负荷跑渲染等, 整体还OK. 目标是&lt;strong&gt;1000元&lt;/strong&gt;左右搞定.&lt;/p&gt;
&lt;h2 id=&quot;详细清单&quot;&gt;&lt;a href=&quot;#详细清单&quot; class=&quot;headerlink&quot; title=&quot;详细清单&quot;&gt;&lt;/a&gt;详细清单&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配件名称&lt;/th&gt;
&lt;th&gt;品牌&lt;/th&gt;
&lt;th&gt;数量&lt;/th&gt;
&lt;th&gt;价格&lt;/th&gt;
&lt;th&gt;详细说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;CPU&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://ark.intel.com/content/www/us/en/ark/products/83357/intel-xeon-processor-e52630l-v3-20m-cache-1-80-ghz.html&quot;&gt;Intel® Xeon® Processor E5-2630L v3&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;td&gt;Haswell; 8Core 16HT; 22 nm制程; Base 1.8GHz, Burst 2.90 GHz; 20MB L3 Cache; 55W TDP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;主板&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://item.taobao.com/item.htm?id=676047268901&quot;&gt;X99寨板&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;内存&lt;/td&gt;
&lt;td&gt;威刚万紫千红&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;160 + 200&lt;/td&gt;
&lt;td&gt;8GB; DDR4 2133MHz; 强迫症4条必须插满, 组成4通道^_^&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;闪存&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://www.intel.com/content/www/us/en/products/sku/134583/intel-ssd-760p-series-256gb-m-2-80mm-pcie-3-1-x4-3d2-tlc/specifications.html&quot;&gt;Intel® SSD 760P&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;160&lt;/td&gt;
&lt;td&gt;256GB; PCIe 3.1 x4 接口, NVMe&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;显卡&lt;/td&gt;
&lt;td&gt;蓝宝石RX460&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;350&lt;/td&gt;
&lt;td&gt;4GB显存; 无需单独供电; HDMI + VGA + DP 接口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;电源&lt;/td&gt;
&lt;td&gt;鑫谷全模组&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;550W, 整体绰绰有余了&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPU散热器&lt;/td&gt;
&lt;td&gt;长城霄龙400&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;45&lt;/td&gt;
&lt;td&gt;4铜管, 3针脚&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;机箱&lt;/td&gt;
&lt;td&gt;待挑选&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;??&lt;/td&gt;
&lt;td&gt;??&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;合计 &lt;code&gt;80 + 250 + 160 + 200 + 160 + 350 + 120 + 45 = 1,365&lt;/code&gt;&lt;br&gt;现在显卡电源都还没到, 希望组装上去之后一次点亮, 就可以说声”真香!”啦.&lt;/p&gt;
&lt;h2 id=&quot;主板细节&quot;&gt;&lt;a href=&quot;#主板细节&quot; class=&quot;headerlink&quot; title=&quot;主板细节&quot;&gt;&lt;/a&gt;主板细节&lt;/h2&gt;</summary>
    
    
    
    <category term="瞎折腾" scheme="https://davyjones2010.github.io/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="diy" scheme="https://davyjones2010.github.io/tags/diy/"/>
    
  </entry>
  
</feed>
