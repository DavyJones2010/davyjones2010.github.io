<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2021 年度书单</title>
    <url>//2020-12-31-booklist-for-2021/</url>
    <content><![CDATA[<ul>
<li>&lt;呼兰河传&gt; -done</li>
<li>&lt;炸裂志&gt; -done</li>
<li>&lt;我们台湾这些年&gt; -done</li>
<li>&lt;行为经济学&gt; -done</li>
<li>重温 &lt;三体&gt; -done</li>
<li>&lt;红星照耀中国&gt; -done</li>
<li>2021年8月: 重温 &lt;英雄志&gt; -done</li>
<li>2021年10月: &lt;穿越土星环&gt; -done</li>
<li>2021年11月: &lt;沙丘1&gt; &lt;沙丘2&gt; -done</li>
<li>鸟哥的Linux私房菜-基础篇 第四版 -done</li>
<li>&lt;SRE：Google运维解密&gt;</li>
<li>&lt;图解密码技术&gt;</li>
<li>&lt;程序员必备的思维能力&gt;</li>
<li>&lt;全彩图说时间简史&gt; -20211210 done</li>
<li>&lt;k8s权威指南&gt; -done</li>
<li>&lt;金瓶梅&gt; -无法欣赏, 无法理解, 弃坑</li>
<li>&lt;明朝那些事儿-1&gt; ~ &lt;明朝那些事儿-4&gt; -done</li>
<li>&lt;七周七并发模型&gt; 第一到第三章</li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>书单</category>
      </categories>
      <tags>
        <tag>books</tag>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>golang入门笔记之基础语法</title>
    <url>//2021-08-31-golang-basic/</url>
    <content><![CDATA[<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>局部变量单纯地给 a 赋值也是不够的，这个值必须被使用, 否则会编译错误<br>全局变量是允许声明但不使用</p>
<hr>
<h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><hr>
<h1 id="交叉编译"><a href="#交叉编译" class="headerlink" title="交叉编译"></a>交叉编译</h1><p>目标是linux64<br>GOOS&#x3D;linux GOARCH&#x3D;amd64 go build -o app.linux<br>目标是win64<br>GOOS&#x3D;windows GOARCH&#x3D;amd64 go build</p>
<hr>
<p>类型的别名&amp;定义<br>&#x2F;&#x2F; 将NewInt定义为int类型<br>type NewInt int<br>&#x2F;&#x2F; 将int取一个别名叫IntAlias<br>type IntAlias &#x3D; int</p>
<p>– 声明数组<br>intArray :&#x3D; []int{1, 2, 3, 4}</p>
<p>数组的长度必须是常量表达式，因为数组的长度需要在编译阶段确定。</p>
<p>– make的作用:<br>slice1 :&#x3D; []int{1, 2, 3, 4, 5}<br>slice2 :&#x3D; []int{3, 3, 3}<br>slice3 :&#x3D; make([]int, 3)</p>
<p>copy(slice3, slice2)<br>copy(slice2, slice1)<br>copy(slice1, slice3)<br>fmt.Println(slice2)<br>fmt.Println(slice1)<br>fmt.Println(slice3)</p>
<p>在引用某个包时，如果只是希望执行包初始化的 init 函数，而不使用包内部的数据时，可以使用匿名引用格式，如下所示：<br>import _ “fmt”<br>包初始化的 init 函数</p>
<hr>
<p>如何写ut?</p>
<p>GO是没有方法重载的!<br><a href="https://www.zhihu.com/question/40661108">https://www.zhihu.com/question/40661108</a></p>
<hr>
<p>rune 类型:<br>&#x2F;&#x2F; rune is an alias for int32 and is equivalent to int32 in all ways. It is<br>&#x2F;&#x2F; used, by convention, to distinguish character values from integer values.<br>&#x2F;&#x2F;int32的别名，几乎在所有方面等同于int32<br>&#x2F;&#x2F;它用来区分字符值和整数值</p>
<p>type rune &#x3D; int32</p>
<hr>
<p>关于 Go 语言的类（class）<br>Go 语言中没有“类”的概念，也不支持“类”的继承等面向对象的概念。<br>Go 语言的结构体与“类”都是复合结构体，但 Go 语言中结构体的内嵌配合接口比面向对象具有更高的扩展性和灵活性。<br>Go 语言不仅认为结构体能拥有方法，且每种自定义类型也可以拥有自己的方法。</p>
<p><a href="http://c.biancheng.net/view/83.html">http://c.biancheng.net/view/83.html</a></p>
<hr>
<p>defer 关键词<br>类似java里的finally, 用于资源安全地释放</p>
<pre class="line-numbers language-none"><code class="language-none">defer func() &#123;
  pc.workqueue.ShutDown()
  pc.deletequeue.ShutDown()
&#125;()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<ul>
<li><p>如何快速赋值?<br>例如: </p>
<pre class="line-numbers language-none"><code class="language-none">flavor, _ :&#x3D; cmd.Flags().GetString(&quot;flavor&quot;)
request.InstanceType &#x3D; flavor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>怎么样能变成一行? </p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 如下有编译错误, 怎么消除编译错误? 
request.InstanceType &#x3D; cmd.Flags().GetString(&quot;flavor&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

</li>
<li><p>如何快速给结构体中部分field赋值?<br>例如: </p>
<pre class="line-numbers language-none"><code class="language-none">request :&#x3D; ecs.CreateRunInstancesRequest()
request.RegionId &#x3D; region
request.ZoneId &#x3D; zone
request.InstanceType &#x3D; flavor
request.InstanceChargeType &#x3D; payType<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>怎样才能快速变成例如:</p>
<pre class="line-numbers language-none"><code class="language-none">request &#123;
    RegionId &#x3D; region
    ZoneId &#x3D; zone
    InstanceType &#x3D; flavor
    InstanceChargeType &#x3D; payType
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



</li>
<li></li>
</ul>
<hr>
<h1 id="感悟-amp-吐槽"><a href="#感悟-amp-吐槽" class="headerlink" title="感悟&amp;吐槽"></a>感悟&amp;吐槽</h1><ul>
<li>函数可以返回多值, 太爽啦, 可以用匿名变量来屏蔽不需要的字段, 节省内存</li>
<li>不显式声明类之间的继承关系, 实现关系, 代码看起来困难很多? 有没有更简便的方式?</li>
<li></li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>golang-lib</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s基础架构笔记</title>
    <url>//2021-08-31-k8s-architect/</url>
    <content><![CDATA[<h2 id="基础应用组件"><a href="#基础应用组件" class="headerlink" title="基础应用组件"></a>基础应用组件</h2><ul>
<li>APIServer<ul>
<li>认证</li>
<li>鉴权</li>
<li>准入控制<ul>
<li>Quota</li>
</ul>
</li>
</ul>
</li>
<li>Scheduler</li>
<li>Kubelet</li>
<li>Etcd</li>
<li>Kube-Controller Manager包括<ul>
<li>ReplicaSet Controller</li>
<li>CDR的Controller</li>
<li>AdmissionController </li>
<li>等</li>
</ul>
</li>
</ul>
<h2 id="资源分为两类"><a href="#资源分为两类" class="headerlink" title="资源分为两类"></a>资源分为两类</h2><ul>
<li>Cluster-scoped resources<ul>
<li>如node</li>
</ul>
</li>
<li>Namespace-scoped resources<ul>
<li>如pod</li>
</ul>
</li>
</ul>
<h2 id="基础流程"><a href="#基础流程" class="headerlink" title="基础流程"></a>基础流程</h2><p><img data-src="https://hugo-picture.oss-cn-beijing.aliyuncs.com/what-happens-when-k8s.svg" alt="基础流程"></p>
<h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><ul>
<li>workloads</li>
</ul>
<h2 id="基础组件"><a href="#基础组件" class="headerlink" title="基础组件"></a>基础组件</h2><ul>
<li>Node</li>
<li>Pod</li>
</ul>
<h2 id="Controller控制组件"><a href="#Controller控制组件" class="headerlink" title="Controller控制组件"></a>Controller控制组件</h2><ul>
<li>ReplicationController(弃用) –&gt; ReplicaSet(类似ESS)</li>
<li>Deployment: 后端用ESS, 区别是什么? </li>
<li>DaemonSet: Pod组, 部署在每个Node上. 新加入Node, 会自动新部署Pod. 下线Node, 会自动删除Pod.</li>
<li>StatefulSets: </li>
<li>Job&amp;CronJob:</li>
</ul>
<h2 id="编排组件"><a href="#编排组件" class="headerlink" title="编排组件"></a>编排组件</h2><ul>
<li>Operator &#x3D; 资源(CRD) + Controller</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li>CDR</li>
<li>OAM</li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>k8s</tag>
        <tag>k8s-architect</tag>
      </tags>
  </entry>
  <entry>
    <title>K8S调度器研究</title>
    <url>//2021-09-03-kube-scheduler/</url>
    <content><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="关于kube-scheduler的资源记账"><a href="#关于kube-scheduler的资源记账" class="headerlink" title="关于kube-scheduler的资源记账:"></a>关于kube-scheduler的资源记账:</h2><h3 id="以为的记账流程"><a href="#以为的记账流程" class="headerlink" title="以为的记账流程:"></a>以为的记账流程:</h3><ul>
<li>研究kube-scheduler代码, 关于nodeInfo里资源的记账, 总是有个误解, 以为会分为三个部分: <ul>
<li>node上全量资源(totalCpu, totalMem)</li>
<li>node上已经确定占用的资源(usedCpu, usedMem)</li>
<li>调度完成, node上待绑定的资源(assumedCpu, assumedMem), 实际绑定成功&#x2F;失败未知, 只是for调度使用:  <ul>
<li>当绑定成功, 会收到事件, 将assumedCpu&#x2F;Mem清理, 并把assumedCpu&#x2F;Mem 放到usedCpu&#x2F;usedMem里</li>
<li>当绑定失败, 会收到事件, 将assumedCpu&#x2F;Mem清理, 不叠加到usedCpu&#x2F;usedMem里.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="实际的记账流程参照文章-Node-allocatable资源的含义"><a href="#实际的记账流程参照文章-Node-allocatable资源的含义" class="headerlink" title="实际的记账流程参照文章 Node allocatable资源的含义"></a>实际的记账流程参照文章 <a href="https://www.mgasch.com/2017/10/sched-reconcile/">Node allocatable资源的含义</a></h3><ul>
<li>但实际上kube-scheduler, 把nodeInfo分为2部分:<ul>
<li>node上全量资源(NodeInfo.Allocatable), 注意之前经常会搞混, 以为allocatable &#x3D; total - used; 实际上allocatable代表total. 实际发现其他同学也有理解错的: <a href="https://github.com/kubernetes-sigs/kube-batch/issues/881">Allocatable Resources is calculated wrong</a></li>
<li>node上已经占用的资源(NodeInfo.Requested), 包括如下2部分: <ul>
<li>node上已经确定占用的资源</li>
<li>调度完成, node上待绑定的资源(assumedCpu, assumedMem)</li>
</ul>
</li>
<li>实际的对账过程: <ul>
<li>当调度成功, bind前, 会直接把pod.request叠加到node.requested里.</li>
<li>bind成功, (修改pod状态), node.requested不变</li>
<li>bind失败, 1秒一次的轮询, 更新pod状态, 将pod的资源归还回node.requested里</li>
<li>kube-scheduler重启: 会</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="引发的问题"><a href="#引发的问题" class="headerlink" title="引发的问题"></a>引发的问题</h3><ul>
<li>kube-scheduler重启, 会执行一次fullsync, cache同步更新量会很大, 耗时可能会比较久, 这中间scheduler是不提供服务的</li>
<li>如果多个scheduler同时工作, 由于不共享requestedResource, 并发场景下, 导致资源超卖:<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208071215437.png"><ul>
<li>当前解决方案:</li>
</ul>
</li>
</ul>
<h3 id="如何改进-x2F-使用多个scheduler"><a href="#如何改进-x2F-使用多个scheduler" class="headerlink" title="如何改进&#x2F;使用多个scheduler"></a>如何改进&#x2F;使用多个scheduler</h3><p>HOSS方案: </p>
<h4 id="Part1-Job-dispatch"><a href="#Part1-Job-dispatch" class="headerlink" title="Part1: Job dispatch:"></a>Part1: Job dispatch:</h4><ol>
<li>instanceLevel load balancing: 防止某些scheduler非常繁忙, 某些scheduler非常空闲.</li>
<li>dynamic scheduling policy: 基于scheduler的标签, 进行调度</li>
</ol>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208071215523.png"><br>方案总结: 即新增scheduler-controller模块, 对多个scheduler进行进一步调度</p>
<h4 id="Part2-Conflict-resolution"><a href="#Part2-Conflict-resolution" class="headerlink" title="Part2: Conflict resolution:"></a>Part2: Conflict resolution:</h4><ol>
<li><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208071216225.png"><br>方案总结: 即在api-server增加conflict-resolver模块, 识别binding的request, 进行冲突校验, 进行failfast.</li>
</ol>
<h4 id="HOSS与kube-scheduler的对比"><a href="#HOSS与kube-scheduler的对比" class="headerlink" title="HOSS与kube-scheduler的对比"></a>HOSS与kube-scheduler的对比</h4><p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208071216726.png"></p>
<h2 id="关于k8s中大页内存资源管理"><a href="#关于k8s中大页内存资源管理" class="headerlink" title="关于k8s中大页内存资源管理"></a>关于k8s中大页内存资源管理</h2><h3 id="限制条件"><a href="#限制条件" class="headerlink" title="限制条件:"></a>限制条件:</h3><ul>
<li>Nodes must pre-allocate huge pages in order for the node to report its huge page capacity. </li>
<li>A node can only pre-allocate huge pages for a single size.</li>
<li>Unlike CPU or memory, huge pages do not support over-commitment. (普通k8s的memory是如何over-commit的?)</li>
</ul>
<h3 id="如何在node上开启-amp-分配大页内存-并上报到apiserver"><a href="#如何在node上开启-amp-分配大页内存-并上报到apiserver" class="headerlink" title="如何在node上开启&amp;分配大页内存(并上报到apiserver?)"></a>如何在node上开启&amp;分配大页内存(并上报到apiserver?)</h3><ul>
<li>k8s中, node上需要实现定义&amp;分配好大页内存, 如下, 注意下边<code>bootloader</code>部分: </li>
<li>同时要注意, 可以在node运行时分配大页内存, 也可以在node boot时分配. 但最好在boot时分配, 因为运行时可能由于内存碎片, 无法分配出对应数量的大页内存.</li>
<li>如下例子, 分配2M的大页内存, 数量是50个</li>
</ul>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> tuned.openshift.io/v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Tuned
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> hugepages
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> openshift<span class="token punctuation">-</span>cluster<span class="token punctuation">-</span>node<span class="token punctuation">-</span>tuning<span class="token punctuation">-</span>operator
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">profile</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">data</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
        [main]
        summary=Boot time configuration for hugepages
        include=openshift-node
        [bootloader]
        cmdline_openshift_node_hugepages=hugepagesz=2M hugepages=50 </span>
      <span class="token key atrule">name</span><span class="token punctuation">:</span> openshift<span class="token punctuation">-</span>node<span class="token punctuation">-</span>hugepages

  <span class="token key atrule">recommend</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">machineConfigLabels</span><span class="token punctuation">:</span>
        <span class="token key atrule">machineconfiguration.openshift.io/role</span><span class="token punctuation">:</span> <span class="token string">"worker-hp"</span>
      <span class="token key atrule">priority</span><span class="token punctuation">:</span> <span class="token number">30</span>
      <span class="token key atrule">profile</span><span class="token punctuation">:</span> openshift<span class="token punctuation">-</span>node<span class="token punctuation">-</span>hugepages<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="如何在pod创建时声明使用大页内存"><a href="#如何在pod创建时声明使用大页内存" class="headerlink" title="如何在pod创建时声明使用大页内存?"></a>如何在pod创建时声明使用大页内存?</h3><p>k8s中, pod使用是通过volumes来进行大页内存的Requests, 如下(下边的是单个node支持多种大小的大页内存, 但实际一般一个node只会支持一种大页内存大小): </p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> huge<span class="token punctuation">-</span>pages<span class="token punctuation">-</span>example
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">containers</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> example
    <span class="token key atrule">image</span><span class="token punctuation">:</span> fedora<span class="token punctuation">:</span>latest
    <span class="token key atrule">command</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> sleep
    <span class="token punctuation">-</span> inf
    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /hugepages<span class="token punctuation">-</span>2Mi
      <span class="token key atrule">name</span><span class="token punctuation">:</span> hugepage<span class="token punctuation">-</span>2mi
    <span class="token punctuation">-</span> <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /hugepages<span class="token punctuation">-</span>1Gi
      <span class="token key atrule">name</span><span class="token punctuation">:</span> hugepage<span class="token punctuation">-</span>1gi
    <span class="token key atrule">resources</span><span class="token punctuation">:</span>
      <span class="token key atrule">limits</span><span class="token punctuation">:</span>
        <span class="token key atrule">hugepages-2Mi</span><span class="token punctuation">:</span> 100Mi
        <span class="token key atrule">hugepages-1Gi</span><span class="token punctuation">:</span> 2Gi
        <span class="token key atrule">memory</span><span class="token punctuation">:</span> 100Mi
      <span class="token key atrule">requests</span><span class="token punctuation">:</span>
        <span class="token key atrule">memory</span><span class="token punctuation">:</span> 100Mi
  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> hugepage<span class="token punctuation">-</span>2mi
    <span class="token key atrule">emptyDir</span><span class="token punctuation">:</span>
      <span class="token key atrule">medium</span><span class="token punctuation">:</span> HugePages<span class="token punctuation">-</span>2Mi
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> hugepage<span class="token punctuation">-</span>1gi
    <span class="token key atrule">emptyDir</span><span class="token punctuation">:</span>
      <span class="token key atrule">medium</span><span class="token punctuation">:</span> HugePages<span class="token punctuation">-</span>1Gi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="pod实际是如何使用大页内存的"><a href="#pod实际是如何使用大页内存的" class="headerlink" title="pod实际是如何使用大页内存的?"></a>pod实际是如何使用大页内存的?</h3><h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h1><ul>
<li><a href="https://www.mgasch.com/2017/10/sched-reconcile/">Node allocatable资源的含义</a></li>
<li><a href="https://www.youtube.com/watch?v=avORKrcyctM">Running Multiple Schedulers in Kubernetes by Xiaoning Ding, Huawei</a></li>
<li><a href="https://access.redhat.com/documentation/en-us/openshift_container_platform/4.5/html/scalability_and_performance/what-huge-pages-do-and-how-they-are-consumed">k8s大页内存分配&amp;使用</a></li>
<li><a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/performance_tuning_guide/sect-red_hat_enterprise_linux-performance_tuning_guide-configuring_transparent_huge_pages">linux上如何分配大页内存</a></li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>k8s</tag>
        <tag>scheduler</tag>
      </tags>
  </entry>
  <entry>
    <title>Jekyll搭建博客总结</title>
    <url>//2021-09-05-jekyll-site/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>终于下定决心，花一些事件，把自己沉淀与思考，都用GitHubPages保存起来。</p>
<ul>
<li>一来，作为自己备忘，如此之多的知识，如果不加以梳理，在脑海里始终就是分散的点。</li>
<li>二来，有幸同道中人看到，加以指正与讨论，更是妙哉！</li>
</ul>
<hr>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><ul>
<li><p>启动本地服务</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bundle <span class="token builtin class-name">exec</span> jekyll serve --draft<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>编译，生成_site目录</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bundle <span class="token builtin class-name">exec</span> jekyll build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>在Gemfile中增加了插件之后，安装插件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bundle <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul>
<hr>
<h1 id="使用的插件"><a href="#使用的插件" class="headerlink" title="使用的插件"></a>使用的插件</h1><ul>
<li><a href="https://beautifuljekyll.com/">Beautiful Jekyll</a>: beautiful-jekyll主题</li>
<li><a href="https://github.com/allejo/jekyll-toc">jekyll-toc</a>：方便增加toc，虽然有点丑</li>
<li><a href="https://github.com/allejo/jekyll-anchor-headings">jekyll-anchor-headings</a>：方便给标题增加anchor链接，虽然也有点丑，😅</li>
<li><a href="http://www.fontawesome.com.cn/icons/list/">font-awesome</a>: 无须重新安装， 默认beautiful-jekyll里包含了</li>
<li><a href="https://www.netlifycms.org/docs/add-to-your-site/#enable-identity-and-git-gateway">netlifycms</a>：使用这个CMS系统，直接在网页写blog并发布到gh-pages里</li>
</ul>
<hr>
<h1 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h1><h2 id="时区问题导致文章不可见"><a href="#时区问题导致文章不可见" class="headerlink" title="时区问题导致文章不可见"></a>时区问题导致文章不可见</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>新的博客文章写好了，并且看日志也自动生成了，但：</p>
<ol>
<li>在_site目录下看不到生成的文件</li>
<li>本地调试也看不到新增的文件</li>
<li>往github上push之后，远程站点打开就可以看到。</li>
</ol>
<p>相关日志如下，怀疑是由于时间戳的问题。因为Post的时间戳是2021-09-05，且本机当前时间也是2021-09-05，但看如下本地服务器启动的时间戳，应该是UTC+0的时区，<br>还是在2021-09-04。Jekyll应该有这种潜规则或者限制，<mark><font color=red>大于当前日期的Post默认不显示</font></mark>。<br><img data-src="/../assets/img/site-generate-error.png" alt="site-generate-error.png"></p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>如下图，修改<code>_config.yaml</code>文件中<code>timezone</code>配置即可，修改成<code>Asia/Shanghai</code><br><img data-src="/../assets/img/2021-09-05-jekyll-site-timezone-config-yaml.png" alt="2021-09-05-jekyll-site-timezone-config-yaml.png"></p>
<hr>
<h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1><h2 id="同一天的文章，如何进行先后排序？"><a href="#同一天的文章，如何进行先后排序？" class="headerlink" title="同一天的文章，如何进行先后排序？"></a>同一天的文章，如何进行先后排序？</h2><hr>
<ul>
<li>使用front-matter里的date就可以，date可以具体到时、分、秒。精确到时分秒，会自动按照时分秒排序。</li>
</ul>
<h2 id="如何把博客进行Archive？"><a href="#如何把博客进行Archive？" class="headerlink" title="如何把博客进行Archive？"></a>如何把博客进行Archive？</h2><hr>
<ul>
<li>参见： <a href="https://stackoverflow.com/questions/18669143/how-to-group-posts-by-date-on-home-page-in-jekyll">How to group posts by date on home page in Jekyll?</a></li>
<li>日期格式要修改下，日期格式参见 <a href="https://learn.cloudcannon.com/jekyll/date-formatting/">Date formatting</a>，按照我个人习惯，修改成：<code>&#39;%Y-%m-%d&#39;</code></li>
</ul>
<h2 id="如何把博客进行一级标题分类？"><a href="#如何把博客进行一级标题分类？" class="headerlink" title="如何把博客进行一级标题分类？"></a>如何把博客进行一级标题分类？</h2><hr>
<h2 id="如何为anchor增加可点击链接？"><a href="#如何为anchor增加可点击链接？" class="headerlink" title="如何为anchor增加可点击链接？"></a>如何为anchor增加可点击链接？</h2><ul>
<li>使用 <a href="https://github.com/allejo/jekyll-anchor-headings">jekyll-anchor-headings</a> 插件</li>
</ul>
<hr>
<h2 id="如何自动生成front-matter的date？"><a href="#如何自动生成front-matter的date？" class="headerlink" title="如何自动生成front-matter的date？"></a>如何自动生成front-matter的date？</h2><hr>
<h1 id="一些酷炫优秀的网站"><a href="#一些酷炫优秀的网站" class="headerlink" title="一些酷炫优秀的网站"></a>一些酷炫优秀的网站</h1><p><i class="fas fa-code"> <a href="https://lei1025.github.io/posts/">lei1025</a></i><br><i class="fas fa-code"> <a href="https://longqian.me/2017/02/12/jekyll-support-chinese/">https://longqian.me/2017/02/12/jekyll-support-chinese/</a> </i></p>
<hr>
<h1 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h1><ul>
<li>生成TOC，花太多功夫了，并且即使做出来，也丑出天际，羡慕别人这种浮动的，后续经过调研发现，jekyll支持bootstrap，使用bootstrap的默认就好。</li>
<li>插入图片也不太方便了。能自动把图片放在单独folder中，并自动生成图片的id该多好</li>
<li>中文字体太丑了，大小也不合适，找时间修改下字体。</li>
</ul>
<p>慢慢来吧，一点点建设起来。</p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>jekyll</tag>
      </tags>
  </entry>
  <entry>
    <title>明朝那些事儿</title>
    <url>//2021-09-04-ming-dynasty/</url>
    <content><![CDATA[<h1 id="牛人"><a href="#牛人" class="headerlink" title="牛人"></a>牛人</h1><h2 id="王守仁"><a href="#王守仁" class="headerlink" title="王守仁"></a>王守仁</h2><blockquote>
<p>身在夜郎家万里，五云天北是神州！</p>
<p>天地圣贤之道，并非存于万物，也无须存于万物，天人本是一体，何时可分？又何必分？<br>随心而动，随意而行，万法自然，便是圣贤之道。存天理，去人欲？天理即是人欲。</p>
</blockquote>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>history</tag>
        <tag>ming-dynasty</tag>
      </tags>
  </entry>
  <entry>
    <title>模拟电路笔记</title>
    <url>//2021-09-05-analog-circuit/</url>
    <content><![CDATA[<p>电子二极管 –&gt; 晶体二极管</p>
<p>半加器 –&gt; 全加器</p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>computer</tag>
        <tag>analog-circuit</tag>
      </tags>
  </entry>
  <entry>
    <title>golang入门笔记之常用基础库</title>
    <url>//2021-09-06-golang-common-lib/</url>
    <content><![CDATA[<p>go-http 是kube-scheduler healthz, metrics的实现基础</p>
<p><a href="https://learnku.com/docs/build-web-application-with-golang/034-gos-http-package-detailed-solution/3171">go-http</a></p>
<hr>
<p>go-restful 是kube-apiserver的基础, 只用到了它最基础的功能，即路由功能<br><a href="https://github.com/emicklei/go-restful">go-restful</a><br><a href="https://hackerain.me/2020/09/28/golang/go-restful-overview.html">go-restful-sample</a></p>
<hr>
<p>Semantic Versioning: 实现语义化版本比较与管理, k8s使用该库进行版本判断<br><a href="https://github.com/blang/semver">semver</a></p>
<hr>
<p>testify: 用于单测<br><a href="http://github.com/stretchr/testify">testify</a></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>golang</tag>
        <tag>golang-lib</tag>
      </tags>
  </entry>
  <entry>
    <title>golang入门笔记</title>
    <url>//2021-09-07-golang-cobra/</url>
    <content><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul>
<li><p>创建简版的ECS CLI, 实现实例创建等基础操作</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">runInstances --region cn-beijing --zone cn-beijing-h --instanceType ecs.c5.large --payType spot --image xxx --vpc xxx --vsw xxx --sg xxx --count <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>创建go版本 <a href="https://github.com/aliyun/alibabacloud-ecs-easy-sdk/tree/master/incubator-plugins/preemptive-instance-recommendation">Preemptive Instance Recommendation CLI</a></p>
</li>
<li><p>创建&amp;部署<a href="https://github.com/kube-aws/kube-spot-termination-notice-handler">spot-interruption-handler</a></p>
</li>
</ul>
<h1 id="cobra"><a href="#cobra" class="headerlink" title="cobra"></a>cobra</h1><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://www.qikqiak.com/post/create-cli-app-with-cobra/">在 Golang 中使用 Cobra 创建 CLI 应用</a></p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="初始化cobra-CLI应用脚手架"><a href="#初始化cobra-CLI应用脚手架" class="headerlink" title="初始化cobra CLI应用脚手架"></a>初始化cobra CLI应用脚手架</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cobra init --pkg-name spot-tool<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="编译二进制"><a href="#编译二进制" class="headerlink" title="编译二进制"></a>编译二进制</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go build -o spot-tool<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="增加子命令"><a href="#增加子命令" class="headerlink" title="增加子命令"></a>增加子命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">增加子命令
cobra <span class="token function">add</span> runInstances<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">执行子命令 ./rootCmd subCmd params
./spot-tool runInstances <span class="token number">10</span> <span class="token number">11</span> <span class="token number">12</span> <span class="token number">13</span> <span class="token number">14</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="增加孙命令"><a href="#增加孙命令" class="headerlink" title="增加孙命令"></a>增加孙命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">增加子命令
cobra <span class="token function">add</span> subRunInstances<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">修改subRunIntances.go的init
rootCmd.AddCommand<span class="token punctuation">(</span>subRunInstancesCmd<span class="token punctuation">)</span> 改成
runInstancesCmd.AddCommand<span class="token punctuation">(</span>subRunInstancesCmd<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">执行孙命令
./spot-tool runInstances subRunIntances params<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>


<h3 id="为命令增加flag"><a href="#为命令增加flag" class="headerlink" title="为命令增加flag"></a>为命令增加flag</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">子命令init中增加标识 
runInstancesCmd.Flags<span class="token punctuation">(</span><span class="token punctuation">)</span>.BoolP<span class="token punctuation">(</span><span class="token string">"float"</span>, <span class="token string">"f"</span>, false, <span class="token string">"Add Floating Numbers"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Run: func 中增加识别该标识的逻辑
fstatus, _ :<span class="token operator">=</span> cmd.Flags<span class="token punctuation">(</span><span class="token punctuation">)</span>.GetBool<span class="token punctuation">(</span><span class="token string">"float"</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> fstatus <span class="token punctuation">&#123;</span>
    floatAdd<span class="token punctuation">(</span>args<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    intAdd<span class="token punctuation">(</span>args<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="k8s中如何使用cobra"><a href="#k8s中如何使用cobra" class="headerlink" title="k8s中如何使用cobra"></a>k8s中如何使用cobra</h3><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>golang</tag>
        <tag>cobra</tag>
      </tags>
  </entry>
  <entry>
    <title>心理学之本我 自我 超我</title>
    <url>//2021-09-08-ego-super-ego/</url>
    <content><![CDATA[<p>怪诞行为学有感.</p>
<h1 id="本我-Id"><a href="#本我-Id" class="headerlink" title="本我: Id"></a>本我: Id</h1><p>本我只遵循一个原则——快樂原則（pleasure principle）<br>而不關心社會的規則，意为追求个体的生物性需求，如食物的饱足与性欲的满足，以及避免痛苦或不愉快[7]。它不能忍受任何挫折，就像一個被溺愛的小孩子，想要甚麽就要甚麽[8]:88。弗洛伊德认为，享乐原则的影响最大化是在人的婴幼儿时期，也是本我思想表现最突出的时候。本我沒有對錯判斷力[9]，也没有想自我破壞的慾望[10]。</p>
<hr>
<h1 id="自我-Ego"><a href="#自我-Ego" class="headerlink" title="自我: Ego"></a>自我: Ego</h1><p>自我在自身和其環境中進行調節，如延遲享樂[14]。佛洛伊德認為自我是人格的執行者。</p>
<p>意涵：個人的生物欲望和社會規範之間相互協調折衷，所表現出來的「自我」。</p>
<hr>
<h1 id="超我-super-ego"><a href="#超我-super-ego" class="headerlink" title="超我: super-ego"></a>超我: super-ego</h1><p>人格結構中的管制者，由道德原則支配，想要完美[17]，屬於人格結構中的道德部份。<br>佛洛伊德的學說中，超我是父親形象與文化規範的符號同化，由於對客體的衝突，超我傾向於站在「本我」的原始渴望的反對立場[18]，而對「自我」帶有侵略性。超我以道德心的形式運作[19]，維持個體的道德感、迴避禁忌，而令自我左右為難。超我的形成發生在戀母情結的崩解時期[20]，是一種對父親形象的內化認同，由於小男孩無法成功地維持母親成為其愛戀的客體，對父親可能對其的閹割報復或懲罰產生阉割情结（castration anxiety），進而轉為認同父親。<br>意涵：因應社會文化的行為規範和道德期待，形成「超我」的動力。</p>
<hr>
<p>本我、自我、超我構成了人的完整的人格。人的一切心理活動都可以從它們之間的聯繫中得到合理的解釋，自我是永久存在的，而超我和本我又幾乎是永久對立的，為了協調本我和超我之間的矛盾，自我需要進行調節[21]。若個人承受的來自本我、超我和外界壓力過大而產生焦慮時，自我就會幫助啟動防御機制，並稱為心理防衛機制或自我防衛機制。防御機制有：壓抑、否認、退行、抵消、投射、昇華等等。</p>
<p>本我對應了人腦中央部位，自我對應了前額葉皮質， 超我對應了眶額葉皮層[22]。</p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>psychology</tag>
        <tag>ego</tag>
        <tag>super-ego</tag>
      </tags>
  </entry>
  <entry>
    <title>kube-scheduler笔记之亲和性调度</title>
    <url>//2021-09-08-kube-scheduler-affinity/</url>
    <content><![CDATA[<h2 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h2><p><a href="https://github.com/DavyJones2010/k8s-source-code-analysis/blob/master/core/scheduler/affinity.md">https://github.com/DavyJones2010/k8s-source-code-analysis/blob/master/core/scheduler/affinity.md</a></p>
<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>分为如下几种: </p>
<ul>
<li><p>NodeSelector</p>
</li>
<li><p>NodeAffinity</p>
<ul>
<li>preferredDuringSchedulingIgnoredDuringExecution: 软约束</li>
<li>requiredDuringSchedulingIgnoredDuringExecution: 硬约束</li>
</ul>
</li>
<li><p>PodAffinity:</p>
<ul>
<li>preferredDuringSchedulingIgnoredDuringExecution: 软约束</li>
<li>requiredDuringSchedulingIgnoredDuringExecution: 硬约束</li>
</ul>
</li>
<li><p>requiredDuringSchedulingIgnoredDuringExecution</p>
<ul>
<li><p>与 NodeSelector 或者 LabelSelector 有啥区别? 都是硬约束, 都会导致Node被筛除掉</p>
<ul>
<li><p>区别在于: LabelSelector 只能判断 “a.label.equals(b.label)”, 而NodeSelector支持完整的表达式, 例如</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">affinity</span><span class="token punctuation">:</span>
    <span class="token key atrule">nodeAffinity</span><span class="token punctuation">:</span>
      <span class="token key atrule">requiredDuringSchedulingIgnoredDuringExecution</span><span class="token punctuation">:</span>
        <span class="token key atrule">nodeSelectorTerms</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> kubernetes.io/e2e<span class="token punctuation">-</span>az<span class="token punctuation">-</span>name
            <span class="token key atrule">operator</span><span class="token punctuation">:</span> In
            <span class="token key atrule">values</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> e2e<span class="token punctuation">-</span>az1
            <span class="token punctuation">-</span> e2e<span class="token punctuation">-</span>az2
      <span class="token key atrule">preferredDuringSchedulingIgnoredDuringExecution</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">weight</span><span class="token punctuation">:</span> <span class="token number">1</span>
        <span class="token key atrule">preference</span><span class="token punctuation">:</span>
          <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> another<span class="token punctuation">-</span>node<span class="token punctuation">-</span>label<span class="token punctuation">-</span>key
            <span class="token key atrule">operator</span><span class="token punctuation">:</span> In
            <span class="token key atrule">values</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> another<span class="token punctuation">-</span>node<span class="token punctuation">-</span>label<span class="token punctuation">-</span>value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
</ul>
</li>
<li><p>“IgnoredDuringExecution”部分意味着，类似于 <code>nodeSelector</code> 的工作原理，如果节点的标签在运行时发生变更，从而不再满足 pod 上的亲和规则，那么 pod 将仍然继续在该节点上运行。也就是onetime的原则, 只会在调度时关注该标签, 后续节点标签变化, 不会重调度.</p>
</li>
</ul>
<h2 id="实现研究"><a href="#实现研究" class="headerlink" title="实现研究"></a>实现研究</h2><h3 id="NodeAffinity"><a href="#NodeAffinity" class="headerlink" title="NodeAffinity"></a>NodeAffinity</h3><p>代码样例</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">affinity</span><span class="token punctuation">:</span>
    <span class="token key atrule">nodeAffinity</span><span class="token punctuation">:</span>
      <span class="token key atrule">requiredDuringSchedulingIgnoredDuringExecution</span><span class="token punctuation">:</span>
        <span class="token key atrule">nodeSelectorTerms</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> kubernetes.io/e2e<span class="token punctuation">-</span>az<span class="token punctuation">-</span>name
            <span class="token key atrule">operator</span><span class="token punctuation">:</span> In
            <span class="token key atrule">values</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> e2e<span class="token punctuation">-</span>az1
            <span class="token punctuation">-</span> e2e<span class="token punctuation">-</span>az2
      <span class="token key atrule">preferredDuringSchedulingIgnoredDuringExecution</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">weight</span><span class="token punctuation">:</span> <span class="token number">1</span>
        <span class="token key atrule">preference</span><span class="token punctuation">:</span>
          <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> another<span class="token punctuation">-</span>node<span class="token punctuation">-</span>label<span class="token punctuation">-</span>key
            <span class="token key atrule">operator</span><span class="token punctuation">:</span> In
            <span class="token key atrule">values</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> another<span class="token punctuation">-</span>node<span class="token punctuation">-</span>label<span class="token punctuation">-</span>value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="RequiredDuringSchedulingIgnoredDuringExecution-硬约束"><a href="#RequiredDuringSchedulingIgnoredDuringExecution-硬约束" class="headerlink" title="RequiredDuringSchedulingIgnoredDuringExecution(硬约束)"></a>RequiredDuringSchedulingIgnoredDuringExecution(硬约束)</h4><p>在Filter阶段生效</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">pkg<span class="token operator">/</span>scheduler<span class="token operator">/</span>algorithm<span class="token operator">/</span>predicates<span class="token operator">/</span>predicates<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">848</span> podMatchesNodeSelectorAndAffinityTerms
<span class="token keyword">func</span> <span class="token function">podMatchesNodeSelectorAndAffinityTerms</span><span class="token punctuation">(</span>pod <span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">,</span> node <span class="token operator">*</span>v1<span class="token punctuation">.</span>Node<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// NodeSelector, 筛选Node</span>
  selector <span class="token operator">:=</span> labels<span class="token punctuation">.</span><span class="token function">SelectorFromSet</span><span class="token punctuation">(</span>pod<span class="token punctuation">.</span>Spec<span class="token punctuation">.</span>NodeSelector<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token operator">!</span>selector<span class="token punctuation">.</span><span class="token function">Matches</span><span class="token punctuation">(</span>labels<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>Labels<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">&#125;</span>
  
  <span class="token comment">// NodeAffinity.requiredDuringSchedulingIgnoredDuringExecution, 硬约束</span>
  <span class="token keyword">if</span> nodeAffinity<span class="token punctuation">.</span>RequiredDuringSchedulingIgnoredDuringExecution <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			nodeSelectorTerms <span class="token operator">:=</span> nodeAffinity<span class="token punctuation">.</span>RequiredDuringSchedulingIgnoredDuringExecution<span class="token punctuation">.</span>NodeSelectorTerms
			nodeAffinityMatches <span class="token operator">=</span> nodeAffinityMatches <span class="token operator">&amp;&amp;</span> <span class="token function">nodeMatchesNodeSelectorTerms</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> nodeSelectorTerms<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="PreferredDuringSchedulingIgnoredDuringExecution-软约束"><a href="#PreferredDuringSchedulingIgnoredDuringExecution-软约束" class="headerlink" title="PreferredDuringSchedulingIgnoredDuringExecution(软约束)"></a>PreferredDuringSchedulingIgnoredDuringExecution(软约束)</h4><p>在Weighter阶段生效</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">pkg<span class="token operator">/</span>scheduler<span class="token operator">/</span>algorithm<span class="token operator">/</span>priorities<span class="token operator">/</span>node_affinity<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">34</span> CalculateNodeAffinityPriorityMap

<span class="token keyword">func</span> <span class="token function">CalculateNodeAffinityPriorityMap</span><span class="token punctuation">(</span>pod <span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">,</span> meta <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> nodeInfo <span class="token operator">*</span>schedulernodeinfo<span class="token punctuation">.</span>NodeInfo<span class="token punctuation">)</span> <span class="token punctuation">(</span>schedulerapi<span class="token punctuation">.</span>HostPriority<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   node <span class="token operator">:=</span> nodeInfo<span class="token punctuation">.</span><span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   affinity <span class="token operator">:=</span> pod<span class="token punctuation">.</span>Spec<span class="token punctuation">.</span>Affinity

   <span class="token keyword">var</span> count <span class="token builtin">int32</span>

  <span class="token comment">// 遍历所有Soft约束</span>
  <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> affinity<span class="token punctuation">.</span>NodeAffinity<span class="token punctuation">.</span>PreferredDuringSchedulingIgnoredDuringExecution <span class="token punctuation">&#123;</span>
    preferredSchedulingTerm <span class="token operator">:=</span> <span class="token operator">&amp;</span>affinity<span class="token punctuation">.</span>NodeAffinity<span class="token punctuation">.</span>PreferredDuringSchedulingIgnoredDuringExecution<span class="token punctuation">[</span>i<span class="token punctuation">]</span>

    <span class="token comment">// 根据表达式生成Selector</span>
    nodeSelector<span class="token punctuation">,</span> err <span class="token operator">:=</span> v1helper<span class="token punctuation">.</span><span class="token function">NodeSelectorRequirementsAsSelector</span><span class="token punctuation">(</span>preferredSchedulingTerm<span class="token punctuation">.</span>Preference<span class="token punctuation">.</span>MatchExpressions<span class="token punctuation">)</span>
    <span class="token comment">// 根据Selector计算权重.</span>
    <span class="token keyword">if</span> nodeSelector<span class="token punctuation">.</span><span class="token function">Matches</span><span class="token punctuation">(</span>labels<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>Labels<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      count <span class="token operator">+=</span> preferredSchedulingTerm<span class="token punctuation">.</span>Weight
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

   <span class="token comment">// 返回计算好的权重</span>
   <span class="token keyword">return</span> schedulerapi<span class="token punctuation">.</span>HostPriority<span class="token punctuation">&#123;</span>
      Host<span class="token punctuation">:</span>  node<span class="token punctuation">.</span>Name<span class="token punctuation">,</span>
      Score<span class="token punctuation">:</span> <span class="token function">int</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">,</span>
   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="PodAffinity"><a href="#PodAffinity" class="headerlink" title="PodAffinity"></a>PodAffinity</h3><p>yaml样例</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> with<span class="token punctuation">-</span>pod<span class="token punctuation">-</span>affinity
  <span class="token key atrule">labels</span><span class="token punctuation">:</span>
    <span class="token key atrule">app</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>affinity<span class="token punctuation">-</span>pod
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">containers</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> with<span class="token punctuation">-</span>pod<span class="token punctuation">-</span>affinity
    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx
  <span class="token key atrule">affinity</span><span class="token punctuation">:</span>
    <span class="token key atrule">podAffinity</span><span class="token punctuation">:</span>
      <span class="token key atrule">requiredDuringSchedulingIgnoredDuringExecution</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">labelSelector</span><span class="token punctuation">:</span>
          <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> app
            <span class="token key atrule">operator</span><span class="token punctuation">:</span> In
            <span class="token key atrule">values</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> busybox<span class="token punctuation">-</span>pod
        <span class="token key atrule">topologyKey</span><span class="token punctuation">:</span> kubernetes.io/hostname
    <span class="token key atrule">podAntiAffinity</span><span class="token punctuation">:</span>
      <span class="token key atrule">preferredDuringSchedulingIgnoredDuringExecution</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">weight</span><span class="token punctuation">:</span> <span class="token number">1</span>
        <span class="token key atrule">podAffinityTerm</span><span class="token punctuation">:</span>
          <span class="token key atrule">labelSelector</span><span class="token punctuation">:</span>
            <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> app
              <span class="token key atrule">operator</span><span class="token punctuation">:</span> In
              <span class="token key atrule">values</span><span class="token punctuation">:</span>
              <span class="token punctuation">-</span> node<span class="token punctuation">-</span>affinity<span class="token punctuation">-</span>pod
          <span class="token key atrule">topologyKey</span><span class="token punctuation">:</span> kubernetes.io/hostname<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="RequiredDuringSchedulingIgnoredDuringExecution-硬约束-1"><a href="#RequiredDuringSchedulingIgnoredDuringExecution-硬约束-1" class="headerlink" title="RequiredDuringSchedulingIgnoredDuringExecution(硬约束)"></a>RequiredDuringSchedulingIgnoredDuringExecution(硬约束)</h4><ul>
<li>在filter阶段生效</li>
</ul>
<p>如何实现的podAntiAffinity? 能强保障么? </p>
<h3 id="Service亲和性"><a href="#Service亲和性" class="headerlink" title="Service亲和性"></a>Service亲和性</h3><p><em>一个服务的第一个Pod被调度到带有Label “region&#x3D;foo”的Nodes（资源集群）上， 那么其服务后面的其它Pod都将调度至Label “region&#x3D;foo”的Nodes。</em></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.qikqiak.com/post/understand-kubernetes-affinity/">https://www.qikqiak.com/post/understand-kubernetes-affinity/</a></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>k8s</tag>
        <tag>scheduler</tag>
        <tag>kube-scheduler</tag>
      </tags>
  </entry>
  <entry>
    <title>kube-scheduler笔记之SchedulerCache研究</title>
    <url>//2021-09-08-kube-scheduler-cache/</url>
    <content><![CDATA[<h1 id="源码路径"><a href="#源码路径" class="headerlink" title="源码路径"></a>源码路径</h1><pre class="line-numbers language-none"><code class="language-none">kubernetes&#x2F;pkg&#x2F;scheduler&#x2F;internal&#x2F;cache&#x2F;cache.go<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h1 id="结构详解"><a href="#结构详解" class="headerlink" title="结构详解"></a>结构详解</h1><h2 id="SchedulerCache"><a href="#SchedulerCache" class="headerlink" title="SchedulerCache"></a>SchedulerCache</h2><h3 id="结构代码"><a href="#结构代码" class="headerlink" title="结构代码"></a>结构代码</h3><pre class="line-numbers language-none"><code class="language-none">type schedulerCache struct &#123;

	&#x2F;&#x2F; 锁信息
	&#x2F;&#x2F; This mutex guards all fields within this cache struct.
	mu sync.RWMutex
	
	&#x2F;&#x2F; Pod信息(重要)
	&#x2F;&#x2F; a set of assumed pod keys.
	&#x2F;&#x2F; The key could further be used to get an entry in podStates.
	assumedPods map[string]bool
	&#x2F;&#x2F; a map from pod key to podState.
	podStates map[string]*podState
	
	&#x2F;&#x2F; Node信息(重要)
	nodes     map[string]*nodeInfoListItem
	&#x2F;&#x2F; headNode points to the most recently updated NodeInfo in &quot;nodes&quot;. It is the
	&#x2F;&#x2F; head of the linked list.
	headNode *nodeInfoListItem
	nodeTree *NodeTree
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>是调度决策的资源信息核心. 包括如下重要部分:</p>
<ul>
<li>headNode *nodeInfoListItem: 指向nodeInfo链表的头部指针</li>
<li>nodes map[string]*nodeInfoListItem: nodeInfo的组合, key: nodeName, value: nodeInfo</li>
<li>nodeTree *NodeTree: 按zone打散的node结构.</li>
</ul>
<h3 id="核心操作"><a href="#核心操作" class="headerlink" title="核心操作"></a>核心操作</h3><h4 id="AddNode"><a href="#AddNode" class="headerlink" title="AddNode"></a>AddNode</h4><pre class="line-numbers language-none"><code class="language-none">func (cache *schedulerCache) AddNode(node *v1.Node) error &#123;
	cache.mu.Lock()
	defer cache.mu.Unlock()

	n, ok :&#x3D; cache.nodes[node.Name]
	if !ok &#123;
		n &#x3D; newNodeInfoListItem(schedulernodeinfo.NewNodeInfo())
		cache.nodes[node.Name] &#x3D; n
	&#125; else &#123;
		cache.removeNodeImageStates(n.info.Node())
	&#125;
	cache.moveNodeInfoToHead(node.Name)

	cache.nodeTree.AddNode(node)
	cache.addNodeImageStates(node, n.info)
	return n.info.SetNode(node)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol>
<li>把&lt;nodeName, nodeInfo&gt;放到nodes这个map中.</li>
<li>把当前node append到nodeInfoList链表的头部, 将头部节点指针改成当前node</li>
<li></li>
</ol>
<h4 id="RemoveNode"><a href="#RemoveNode" class="headerlink" title="RemoveNode"></a>RemoveNode</h4><p>与AddNode操作相反.</p>
<h4 id="UpdateNodeInfoSnapshot"><a href="#UpdateNodeInfoSnapshot" class="headerlink" title="UpdateNodeInfoSnapshot"></a>UpdateNodeInfoSnapshot</h4><p>创建NodeInfo的快照, 每次调度前都会调用该方法, 此后调度都依赖该Snapshot进行决策. 具体参见另外一篇&lt;快照机制&gt;</p>
<h2 id="NodeTree"><a href="#NodeTree" class="headerlink" title="NodeTree"></a>NodeTree</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><ul>
<li>本质上NodeTree是为了在调度时, 让Pod能在不同的zone内不同的Node上能够尽量打散.</li>
<li>但如下分析, 在进入调度Filter之前就把Node构建成了树, 然后在Filter的时候, 逐个从NodeTree.next()来pop node信息. 有如下问题: <ul>
<li>业务上: <ul>
<li>那么Pod放在哪个Node上与请求顺序有很大关联. 很可能Filter掉之后, 所有Pod还是聚合在同一个zone下, 甚至同一个Node上. 为啥不在Filter之后将剩余的Node组成NodeTree呢? </li>
<li>Weighter如何进行打分排序? weighter机制是否已经失效?</li>
</ul>
</li>
<li>性能上: <ul>
<li>所有Node都被缓存起来, 内存开销? </li>
<li>NodeTree是如何保证同步的?</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="结构代码-1"><a href="#结构代码-1" class="headerlink" title="结构代码"></a>结构代码</h3><pre class="line-numbers language-none"><code class="language-none">type NodeTree struct &#123;
    tree      map[string]*nodeArray &#x2F;&#x2F; 存储zone和zone下面的node信息
    zones     []string              &#x2F;&#x2F; 存储zones
    zoneIndex int
    numNodes  int
    mu        sync.RWMutex
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">type nodeArray struct &#123;
    nodes     []string
    lastIndex int
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="结构分析"><a href="#结构分析" class="headerlink" title="结构分析"></a>结构分析</h3><ul>
<li>tree map[string] *nodeArray: <ul>
<li>负责存储一个zone下面的所有node节点</li>
<li>key: zoneName</li>
<li>value: zone下所有的node节点</li>
<li>nodeArray:<ul>
<li>nodes: 该zone下所有node的</li>
<li>lastIndex: 记录当前zone分配到的节点索引</li>
</ul>
</li>
</ul>
</li>
<li>zones: 将调度域下所有的zone名称打平放在zones里</li>
<li>zoneIndex: 当前分配到的zone的索引</li>
</ul>
<h3 id="如何构建NodeTree"><a href="#如何构建NodeTree" class="headerlink" title="如何构建NodeTree?"></a>如何构建NodeTree?</h3><ul>
<li>添加node: <ul>
<li>根据node对应的zone(如果zone不存在, 则新增加zone), 从map中获取到nodeArray</li>
<li>将node添加到nodeArray的队列结尾</li>
</ul>
</li>
<li>删除node: <ul>
<li>根据node对应的zone, 从map中获取到nodeArray</li>
<li>将node删除后, 将队列里node之后其他节点往前移动一位.</li>
<li>如果node删除后zone为空了, 那么同时将该&lt;zoneName, nodeArray&gt;的kv从map中删除掉.</li>
</ul>
</li>
</ul>
<h3 id="何时构建NodeTree"><a href="#何时构建NodeTree" class="headerlink" title="何时构建NodeTree?"></a>何时构建NodeTree?</h3><ul>
<li><p>何时构建tree?</p>
<ul>
<li>调度开始, 构建本地cache的时候, 就同时把空的nodeTree构建出来了</li>
</ul>
</li>
<li><p>何时添加node?<br>  * </p>
</li>
<li><p>何时删除node?<br>  * </p>
</li>
<li><p>调度的时候, 应该是把所有node打平了, 那么是在什么时候使用这个nodeTree呢? </p>
</li>
<li><p>分配node的流程怎样?</p>
<ul>
<li>zoneIndex与nodeArray同时增加,</li>
</ul>
</li>
</ul>
<h3 id="分配Node打散算法样例"><a href="#分配Node打散算法样例" class="headerlink" title="分配Node打散算法样例"></a>分配Node打散算法样例</h3><p><img data-src="https://imgedu.lagou.com/665f5d51ad30466ba0e9c365d4a7e8cb.jpg" alt="image.png"></p>
<ul>
<li>如下结构:</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">&#123;ZoneA:[NodeA1, NodeA2, NodeA3], ZoneB:[NodeB1, NodeB2], ZoneC:[NodeC1, NodeC2, NodeC3, NodeC4]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


<ul>
<li>依次next(), 分配顺序:</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">ZoneA.NodeA1,ZoneB.NodeB1,ZoneC.NodeC1,
ZoneA.NodeA2,ZoneB.NodeB2,ZoneC.NodeC2,
ZoneA.NodeA3,ZoneC.NodeC3,
ZoneC.NodeC4
-&gt; ResetExhausted(Zone的Index与Zone内Node的Index全部都被重置)
ZoneA.NodeA1,ZoneB.NodeB1,ZoneC.NodeC1,
ZoneA.NodeA2,ZoneB.NodeB2,ZoneC.NodeC2,
ZoneA.NodeA3,ZoneC.NodeC3,
ZoneC.NodeC4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="NodeInfoListItem"><a href="#NodeInfoListItem" class="headerlink" title="NodeInfoListItem"></a>NodeInfoListItem</h2><h3 id="结构代码-2"><a href="#结构代码-2" class="headerlink" title="结构代码"></a>结构代码</h3><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; nodeInfoListItem holds a NodeInfo pointer and acts as an item in a doubly
&#x2F;&#x2F; linked list. When a NodeInfo is updated, it goes to the head of the list.
&#x2F;&#x2F; The items closer to the head are the most recently updated items.
type nodeInfoListItem struct &#123;
	info *schedulernodeinfo.NodeInfo
	next *nodeInfoListItem
	prev *nodeInfoListItem
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="结构概述"><a href="#结构概述" class="headerlink" title="结构概述"></a>结构概述</h3><p>本质上: 是一个NodeInfo的双向链表. (注意头部节点没有prev, 尾部节点没有next, 所以并非环). 一旦NodeInfo更新&#x2F;添加, 那么该NodeInfo便被放到链表的头部. 如下结构: </p>
<pre class="line-numbers language-none"><code class="language-none">+-------+           +--------+        +--------+
|  NodeA| +-------&gt; |   NodeB| +----&gt; |   NodeC|
|       |           |        |        |        |
+-+-----+ &lt;-------+ +--------+ &lt;----+ +--------+
  ^
  |
 Head<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>目的是: </p>
<p>如何做到: </p>
<ul>
<li>怎样保证更新之后必然放到链表头部: 参加AddNode操作解析</li>
<li>谁会触发NodeInfo的更新? </li>
<li>何时出发NodeInfo的更新?</li>
</ul>
<p>版本号机制: </p>
<ul>
<li>cache维护了一个全局的版本号(generation).</li>
<li>NodeInfo结构中, 每个NodeInfo都有一个generation, 每次对链表&#x2F;Node本身进行操作, 都会把NodeInfo放到链表头. 同时NodeInfo.generation &#x3D; 全局的版本号+1. </li>
<li>这样就保证了链表头的generation肯定是最大的. 并且链表中从头到尾, generation是从高到低依次递减的.</li>
</ul>
<h3 id="核心操作-1"><a href="#核心操作-1" class="headerlink" title="核心操作"></a>核心操作</h3><h4 id="AddNode-1"><a href="#AddNode-1" class="headerlink" title="AddNode"></a>AddNode</h4><p>纯链表操作, 比较容易理解. </p>
<ul>
<li>将当前Node放到NodeInfo链表的头部</li>
<li>将头部指针指向当前Node</li>
<li>将当前Node的generation+1(推测应该是 当前node的generation&#x3D;之前头部node的generation + 1), 这样才能保证Node链表的generation是从高到低进行的排列.</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; moveNodeInfoToHead moves a NodeInfo to the head of &quot;cache.nodes&quot; doubly
&#x2F;&#x2F; linked list. The head is the most recently updated NodeInfo.
&#x2F;&#x2F; We assume cache lock is already acquired.
func (cache *schedulerCache) moveNodeInfoToHead(name string) &#123;
	ni, ok :&#x3D; cache.nodes[name]
	if !ok &#123;
		klog.Errorf(&quot;No NodeInfo with name %v found in the cache&quot;, name)
		return
	&#125;
	&#x2F;&#x2F; if the node info list item is already at the head, we are done.
	if ni &#x3D;&#x3D; cache.headNode &#123;
		return
	&#125;

	if ni.prev !&#x3D; nil &#123;
		ni.prev.next &#x3D; ni.next
	&#125;
	if ni.next !&#x3D; nil &#123;
		ni.next.prev &#x3D; ni.prev
	&#125;
	if cache.headNode !&#x3D; nil &#123;
		cache.headNode.prev &#x3D; ni
	&#125;
	ni.next &#x3D; cache.headNode
	ni.prev &#x3D; nil
	cache.headNode &#x3D; ni
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="RemoveNode-1"><a href="#RemoveNode-1" class="headerlink" title="RemoveNode"></a>RemoveNode</h4><p>是AddNode的反向操作. 纯链表操作. 不再赘述. </p>
<ul>
<li>注意这里cache.nodes的map很有用, 能根据Node的Name直接找到Node对象. 复杂度O(1)</li>
<li>对比下RemovePod, 需要从头到尾遍历, 复杂度O(n)较高.</li>
</ul>
<h3 id="NodeInfo"><a href="#NodeInfo" class="headerlink" title="NodeInfo"></a>NodeInfo</h3><h4 id="结构概述-1"><a href="#结构概述-1" class="headerlink" title="结构概述"></a>结构概述</h4><p>代表单个Node资源信息的最核心部分.</p>
<h4 id="结构代码-3"><a href="#结构代码-3" class="headerlink" title="结构代码"></a>结构代码</h4><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; NodeInfo is node level aggregated information.
type NodeInfo struct &#123;
	&#x2F;&#x2F; Overall node information.
	node *v1.Node

	pods             []*v1.Pod
	podsWithAffinity []*v1.Pod
	usedPorts        HostPortInfo

	&#x2F;&#x2F; Total requested resource of all pods on this node.
	&#x2F;&#x2F; It includes assumed pods which scheduler sends binding to apiserver but
	&#x2F;&#x2F; didn&#39;t get it as scheduled yet.
	requestedResource *Resource
	nonzeroRequest    *Resource
	&#x2F;&#x2F; We store allocatedResources (which is Node.Status.Allocatable.*) explicitly
	&#x2F;&#x2F; as int64, to avoid conversions and accessing map.
	allocatableResource *Resource

	&#x2F;&#x2F; Cached taints of the node for faster lookup.
	taints    []v1.Taint
	taintsErr error

	&#x2F;&#x2F; imageStates holds the entry of an image if and only if this image is on the node. The entry can be used for
	&#x2F;&#x2F; checking an image&#39;s existence and advanced usage (e.g., image locality scheduling policy) based on the image
	&#x2F;&#x2F; state information.
	imageStates map[string]*ImageStateSummary

	&#x2F;&#x2F; TransientInfo holds the information pertaining to a scheduling cycle. This will be destructed at the end of
	&#x2F;&#x2F; scheduling cycle.
	&#x2F;&#x2F; TODO: @ravig. Remove this once we have a clear approach for message passing across predicates and priorities.
	TransientInfo *TransientSchedulerInfo

	&#x2F;&#x2F; Cached conditions of node for faster lookup.
	memoryPressureCondition v1.ConditionStatus
	diskPressureCondition   v1.ConditionStatus
	pidPressureCondition    v1.ConditionStatus

	&#x2F;&#x2F; Whenever NodeInfo changes, generation is bumped.
	&#x2F;&#x2F; This is used to avoid cloning it if the object didn&#39;t change.
	generation int64
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="结构分析-1"><a href="#结构分析-1" class="headerlink" title="结构分析"></a>结构分析</h4><ul>
<li><p>requestedResource *Resource: </p>
<ul>
<li>已经调度在该Node上的资源总和, 包括两种状态的Pod(参照Pod状态图)<ul>
<li>Assumed, 但未Binding. 即这些Pod都是在waitForBindingQueue里.</li>
<li>Added, 即已经BindToNode</li>
</ul>
</li>
<li>所以理论上存在这种问题, 即单个Node上多个Pod一直都waitForBinding, 导致该Node上资源一直被占用无法被释放. (是否有超时机制?)</li>
<li>如果Pod已经是Binded&#x2F;Added状态, 那么会从requestResource里删除掉么? 不会.</li>
</ul>
</li>
<li><p>allocatableResource *Resource:</p>
<ul>
<li>该Node上总资源. 应该是totalAmount的概念.</li>
</ul>
</li>
<li><p>pods []*v1.Pod: 调度&#x2F;分配到该Node的Pod队列集合.</p>
</li>
<li><p>podsWithAffinity []*v1.Pod: TODO: 待研究</p>
</li>
<li><p>generation: 标识当前Node资源数据的版本号. 每次AddPod, RemovePod操作之后, 都会把版本号+1</p>
</li>
<li><p>疑问:</p>
<ul>
<li>该Node上总资源是多少(totalAmount)? allocatableResource么?</li>
</ul>
</li>
</ul>
<h4 id="核心操作-2"><a href="#核心操作-2" class="headerlink" title="核心操作"></a>核心操作</h4><h5 id="AddPod"><a href="#AddPod" class="headerlink" title="AddPod"></a>AddPod</h5><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; AddPod adds pod information to this NodeInfo.
func (n *NodeInfo) AddPod(pod *v1.Pod) &#123;
	res, non0CPU, non0Mem :&#x3D; calculateResource(pod)
	n.requestedResource.MilliCPU +&#x3D; res.MilliCPU
	n.requestedResource.Memory +&#x3D; res.Memory
	n.requestedResource.EphemeralStorage +&#x3D; res.EphemeralStorage
	if n.requestedResource.ScalarResources &#x3D;&#x3D; nil &amp;&amp; len(res.ScalarResources) &gt; 0 &#123;
		n.requestedResource.ScalarResources &#x3D; map[v1.ResourceName]int64&#123;&#125;
	&#125;
	for rName, rQuant :&#x3D; range res.ScalarResources &#123;
		n.requestedResource.ScalarResources[rName] +&#x3D; rQuant
	&#125;
	n.nonzeroRequest.MilliCPU +&#x3D; non0CPU
	n.nonzeroRequest.Memory +&#x3D; non0Mem
	n.pods &#x3D; append(n.pods, pod)
	if hasPodAffinityConstraints(pod) &#123;
		n.podsWithAffinity &#x3D; append(n.podsWithAffinity, pod)
	&#125;

	&#x2F;&#x2F; Consume ports when pods added.
	n.UpdateUsedPorts(pod, true)

	n.generation &#x3D; nextGeneration()
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h6 id="流程说明"><a href="#流程说明" class="headerlink" title="流程说明"></a>流程说明</h6><ol>
<li>将Pod请求的资源(cpu, mem等)叠加到Node的requestedResource里.</li>
<li>NonzeroRequest代表啥意思? 目前没看明白</li>
<li>将Pod放到Pod队列尾部.</li>
<li>将NodeInfo的版本号+1</li>
</ol>
<h5 id="RemovePod"><a href="#RemovePod" class="headerlink" title="RemovePod"></a>RemovePod</h5><p>与AddPod操作完全相反. 不再赘述. 将NodeInfo的版本号+1. </p>
<ul>
<li>这里吐槽下, remove的时候, 竟然是将Pods的列表, 从头到尾遍历, 当ID等于当前PodID的时候, 执行删除操作.</li>
</ul>
<h4 id="疑问总结"><a href="#疑问总结" class="headerlink" title="疑问总结"></a>疑问总结</h4><ol>
<li>在什么时候执行AddPod操作? <ol>
<li>看起来是在SchedulerCache.addPod, SchedulerCache.updatePod, SchedulerCache.assumePod的时候使用.</li>
<li>但在什么时候执行呢? 没找到入口. 后续继续看下.</li>
</ol>
</li>
<li></li>
</ol>
<h1 id="Snapshot机制"><a href="#Snapshot机制" class="headerlink" title="Snapshot机制"></a>Snapshot机制</h1><h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><ol>
<li>打平节点, 深拷贝机制</li>
<li>版本号对比, 增量更新机制</li>
</ol>
<h2 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h2><h3 id="NodeInfoSnapshot"><a href="#NodeInfoSnapshot" class="headerlink" title="NodeInfoSnapshot"></a>NodeInfoSnapshot</h3><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; NodeInfoSnapshot is a snapshot of cache NodeInfo. The scheduler takes a
&#x2F;&#x2F; snapshot at the beginning of each scheduling cycle and uses it for its
&#x2F;&#x2F; operations in that cycle.
type NodeInfoSnapshot struct &#123;
	NodeInfoMap map[string]*schedulernodeinfo.NodeInfo
	Generation  int64
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>NodeInfoMap: &lt;nodeName, NodeInfo&gt;,<ul>
<li>即为NodeName到NodeInfo的一个Map, 是从NodeInfo的链表中将所有Node都深拷贝一份, 打平了放在NodeInfoMap里.</li>
<li>同时增加了版本号对比机制, 这样能保证每次打snapshot时, 都是增量深拷贝&#x2F;更新, 而不是全量.</li>
</ul>
</li>
<li>Generation: 当前Snapshot对应的最新版本号, 等于打snapshot时, 所有NodeInfo里的最大generation值(即链表头节点的generation).</li>
<li></li>
</ul>
<h2 id="重要操作"><a href="#重要操作" class="headerlink" title="重要操作"></a>重要操作</h2><p>scheduler_cache中的一个方法.</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; UpdateNodeInfoSnapshot takes a snapshot of cached NodeInfo map. This is called at
&#x2F;&#x2F; beginning of every scheduling cycle.
&#x2F;&#x2F; This function tracks generation number of NodeInfo and updates only the
&#x2F;&#x2F; entries of an existing snapshot that have changed after the snapshot was taken.
func (cache *schedulerCache) UpdateNodeInfoSnapshot(nodeSnapshot *NodeInfoSnapshot) error &#123;
	cache.mu.Lock()
	defer cache.mu.Unlock()
	balancedVolumesEnabled :&#x3D; utilfeature.DefaultFeatureGate.Enabled(features.BalanceAttachedNodeVolumes)

	&#x2F;&#x2F; Get the last generation of the the snapshot.
	snapshotGeneration :&#x3D; nodeSnapshot.Generation

	&#x2F;&#x2F; Start from the head of the NodeInfo doubly linked list and update snapshot
	&#x2F;&#x2F; of NodeInfos updated after the last snapshot.
	for node :&#x3D; cache.headNode; node !&#x3D; nil; node &#x3D; node.next &#123;
		if node.info.GetGeneration() &lt;&#x3D; snapshotGeneration &#123;
			&#x2F;&#x2F; all the nodes are updated before the existing snapshot. We are done.
			break
		&#125;
		if balancedVolumesEnabled &amp;&amp; node.info.TransientInfo !&#x3D; nil &#123;
			&#x2F;&#x2F; Transient scheduler info is reset here.
			node.info.TransientInfo.ResetTransientSchedulerInfo()
		&#125;
		if np :&#x3D; node.info.Node(); np !&#x3D; nil &#123;
			nodeSnapshot.NodeInfoMap[np.Name] &#x3D; node.info.Clone()
		&#125;
	&#125;
	&#x2F;&#x2F; Update the snapshot generation with the latest NodeInfo generation.
	if cache.headNode !&#x3D; nil &#123;
		nodeSnapshot.Generation &#x3D; cache.headNode.info.GetGeneration()
	&#125;

	if len(nodeSnapshot.NodeInfoMap) &gt; len(cache.nodes) &#123;
		for name :&#x3D; range nodeSnapshot.NodeInfoMap &#123;
			if _, ok :&#x3D; cache.nodes[name]; !ok &#123;
				delete(nodeSnapshot.NodeInfoMap, name)
			&#125;
		&#125;
	&#125;
	return nil
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>由于Cache中的Node是个双向链表, 且必须保证链表中所有Node的generation是从高到低排序的.<ul>
<li>但目前看generation的更新机制, generation不能保证从高到低排序??</li>
</ul>
</li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>k8s</tag>
        <tag>scheduler</tag>
        <tag>kube-scheduler</tag>
        <tag>kube-scheduler-cache</tag>
      </tags>
  </entry>
  <entry>
    <title>kube-scheduler笔记之filter</title>
    <url>//2021-09-08-kube-scheduler-filter/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul>
<li>Predicates Policies就是提供给Scheduler用来过滤出满足所定义条件的Nodes，<strong>并发的</strong>(最多16个goroutine)对每个Node启动所有Predicates Policies的遍历Filter，看其是否都满足配置的Predicates Policies，若有一个Policy不满足，则直接被淘汰。</li>
</ul>
<h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Filters the nodes to find the ones that fit based on the given predicate functions</span>
<span class="token comment">// Each node is passed through the predicate functions to determine if it is a fit</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>genericScheduler<span class="token punctuation">)</span> <span class="token function">findNodesThatFit</span><span class="token punctuation">(</span>pod <span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">,</span> nodes <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>v1<span class="token punctuation">.</span>Node<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>v1<span class="token punctuation">.</span>Node<span class="token punctuation">,</span> FailedPredicateMap<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> filtered <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>v1<span class="token punctuation">.</span>Node
	failedPredicateMap <span class="token operator">:=</span> FailedPredicateMap<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>predicates<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		filtered <span class="token operator">=</span> nodes
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		allNodes <span class="token operator">:=</span> <span class="token function">int32</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">NodeTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">NumNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		numNodesToFind <span class="token operator">:=</span> g<span class="token punctuation">.</span><span class="token function">numFeasibleNodesToFind</span><span class="token punctuation">(</span>allNodes<span class="token punctuation">)</span>

		<span class="token comment">// Create filtered list with enough space to avoid growing it</span>
		<span class="token comment">// and allow assigning.</span>
		filtered <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>v1<span class="token punctuation">.</span>Node<span class="token punctuation">,</span> numNodesToFind<span class="token punctuation">)</span>
		errs <span class="token operator">:=</span> errors<span class="token punctuation">.</span>MessageCountMap<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
		<span class="token keyword">var</span> <span class="token punctuation">(</span>
			predicateResultLock sync<span class="token punctuation">.</span>Mutex
			filteredLen         <span class="token builtin">int32</span>
		<span class="token punctuation">)</span>

		ctx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithCancel</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

		<span class="token comment">// We can use the same metadata producer for all nodes.</span>
		meta <span class="token operator">:=</span> g<span class="token punctuation">.</span><span class="token function">predicateMetaProducer</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> g<span class="token punctuation">.</span>nodeInfoSnapshot<span class="token punctuation">.</span>NodeInfoMap<span class="token punctuation">)</span>

		checkNode <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			nodeName <span class="token operator">:=</span> g<span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">NodeTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			fits<span class="token punctuation">,</span> failedPredicates<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">podFitsOnNode</span><span class="token punctuation">(</span>
				pod<span class="token punctuation">,</span>
				meta<span class="token punctuation">,</span>
				g<span class="token punctuation">.</span>nodeInfoSnapshot<span class="token punctuation">.</span>NodeInfoMap<span class="token punctuation">[</span>nodeName<span class="token punctuation">]</span><span class="token punctuation">,</span>
				g<span class="token punctuation">.</span>predicates<span class="token punctuation">,</span>
				g<span class="token punctuation">.</span>schedulingQueue<span class="token punctuation">,</span>
				g<span class="token punctuation">.</span>alwaysCheckAllPredicates<span class="token punctuation">,</span>
			<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
				predicateResultLock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
				errs<span class="token punctuation">[</span>err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">++</span>
				predicateResultLock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
				<span class="token keyword">return</span>
			<span class="token punctuation">&#125;</span>
			<span class="token keyword">if</span> fits <span class="token punctuation">&#123;</span>
				length <span class="token operator">:=</span> atomic<span class="token punctuation">.</span><span class="token function">AddInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>filteredLen<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
				<span class="token keyword">if</span> length <span class="token operator">></span> numNodesToFind <span class="token punctuation">&#123;</span>
					<span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
					atomic<span class="token punctuation">.</span><span class="token function">AddInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>filteredLen<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
				<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
					filtered<span class="token punctuation">[</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> g<span class="token punctuation">.</span>nodeInfoSnapshot<span class="token punctuation">.</span>NodeInfoMap<span class="token punctuation">[</span>nodeName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
				<span class="token punctuation">&#125;</span>
			<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
				predicateResultLock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
				failedPredicateMap<span class="token punctuation">[</span>nodeName<span class="token punctuation">]</span> <span class="token operator">=</span> failedPredicates
				predicateResultLock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">// Stops searching for more nodes once the configured number of feasible nodes</span>
		<span class="token comment">// are found.</span>
		workqueue<span class="token punctuation">.</span><span class="token function">ParallelizeUntil</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token function">int</span><span class="token punctuation">(</span>allNodes<span class="token punctuation">)</span><span class="token punctuation">,</span> checkNode<span class="token punctuation">)</span>

		filtered <span class="token operator">=</span> filtered<span class="token punctuation">[</span><span class="token punctuation">:</span>filteredLen<span class="token punctuation">]</span>
		<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>errs<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>v1<span class="token punctuation">.</span>Node<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> FailedPredicateMap<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">CreateAggregateFromMessageCountMap</span><span class="token punctuation">(</span>errs<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>filtered<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>extenders<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> extender <span class="token operator">:=</span> <span class="token keyword">range</span> g<span class="token punctuation">.</span>extenders <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> <span class="token operator">!</span>extender<span class="token punctuation">.</span><span class="token function">IsInterested</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">continue</span>
			<span class="token punctuation">&#125;</span>
			filteredList<span class="token punctuation">,</span> failedMap<span class="token punctuation">,</span> err <span class="token operator">:=</span> extender<span class="token punctuation">.</span><span class="token function">Filter</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> filtered<span class="token punctuation">,</span> g<span class="token punctuation">.</span>nodeInfoSnapshot<span class="token punctuation">.</span>NodeInfoMap<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">if</span> extender<span class="token punctuation">.</span><span class="token function">IsIgnorable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
					klog<span class="token punctuation">.</span><span class="token function">Warningf</span><span class="token punctuation">(</span><span class="token string">"Skipping extender %v as it returned error %v and has ignorable flag set"</span><span class="token punctuation">,</span>
						extender<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
					<span class="token keyword">continue</span>
				<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
					<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>v1<span class="token punctuation">.</span>Node<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> FailedPredicateMap<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> err
				<span class="token punctuation">&#125;</span>
			<span class="token punctuation">&#125;</span>

			<span class="token keyword">for</span> failedNodeName<span class="token punctuation">,</span> failedMsg <span class="token operator">:=</span> <span class="token keyword">range</span> failedMap <span class="token punctuation">&#123;</span>
				<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> found <span class="token operator">:=</span> failedPredicateMap<span class="token punctuation">[</span>failedNodeName<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">!</span>found <span class="token punctuation">&#123;</span>
					failedPredicateMap<span class="token punctuation">[</span>failedNodeName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>predicates<span class="token punctuation">.</span>PredicateFailureReason<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
				<span class="token punctuation">&#125;</span>
				failedPredicateMap<span class="token punctuation">[</span>failedNodeName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>failedPredicateMap<span class="token punctuation">[</span>failedNodeName<span class="token punctuation">]</span><span class="token punctuation">,</span> predicates<span class="token punctuation">.</span><span class="token function">NewFailureReason</span><span class="token punctuation">(</span>failedMsg<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">&#125;</span>
			filtered <span class="token operator">=</span> filteredList
			<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>filtered<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">break</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> filtered<span class="token punctuation">,</span> failedPredicateMap<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>





<h3 id="PodFitsOnNode"><a href="#PodFitsOnNode" class="headerlink" title="PodFitsOnNode"></a>PodFitsOnNode</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">podFitsOnNode</span><span class="token punctuation">(</span>
	pod <span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">,</span>
	meta predicates<span class="token punctuation">.</span>PredicateMetadata<span class="token punctuation">,</span>
	info <span class="token operator">*</span>schedulernodeinfo<span class="token punctuation">.</span>NodeInfo<span class="token punctuation">,</span>
	predicateFuncs <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>predicates<span class="token punctuation">.</span>FitPredicate<span class="token punctuation">,</span>
	queue internalqueue<span class="token punctuation">.</span>SchedulingQueue<span class="token punctuation">,</span>
	alwaysCheckAllPredicates <span class="token builtin">bool</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>predicates<span class="token punctuation">.</span>PredicateFailureReason<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> failedPredicates <span class="token punctuation">[</span><span class="token punctuation">]</span>predicates<span class="token punctuation">.</span>PredicateFailureReason

	podsAdded <span class="token operator">:=</span> <span class="token boolean">false</span>

	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		metaToUse <span class="token operator">:=</span> meta
		nodeInfoToUse <span class="token operator">:=</span> info
		<span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
			podsAdded<span class="token punctuation">,</span> metaToUse<span class="token punctuation">,</span> nodeInfoToUse <span class="token operator">=</span> <span class="token function">addNominatedPods</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> meta<span class="token punctuation">,</span> info<span class="token punctuation">,</span> queue<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token operator">!</span>podsAdded <span class="token operator">||</span> <span class="token function">len</span><span class="token punctuation">(</span>failedPredicates<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> predicateKey <span class="token operator">:=</span> <span class="token keyword">range</span> predicates<span class="token punctuation">.</span><span class="token function">Ordering</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">var</span> <span class="token punctuation">(</span>
				fit     <span class="token builtin">bool</span>
				reasons <span class="token punctuation">[</span><span class="token punctuation">]</span>predicates<span class="token punctuation">.</span>PredicateFailureReason
				err     <span class="token builtin">error</span>
			<span class="token punctuation">)</span>
			
			<span class="token keyword">if</span> predicate<span class="token punctuation">,</span> exist <span class="token operator">:=</span> predicateFuncs<span class="token punctuation">[</span>predicateKey<span class="token punctuation">]</span><span class="token punctuation">;</span> exist <span class="token punctuation">&#123;</span>
				fit<span class="token punctuation">,</span> reasons<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">predicate</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> metaToUse<span class="token punctuation">,</span> nodeInfoToUse<span class="token punctuation">)</span>
				<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
					<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>predicates<span class="token punctuation">.</span>PredicateFailureReason<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> err
				<span class="token punctuation">&#125;</span>

				<span class="token keyword">if</span> <span class="token operator">!</span>fit <span class="token punctuation">&#123;</span>
					<span class="token comment">// eCache is available and valid, and predicates result is unfit, record the fail reasons</span>
					failedPredicates <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>failedPredicates<span class="token punctuation">,</span> reasons<span class="token operator">...</span><span class="token punctuation">)</span>
					<span class="token comment">// if alwaysCheckAllPredicates is false, short circuit all predicates when one predicate fails.</span>
					<span class="token keyword">if</span> <span class="token operator">!</span>alwaysCheckAllPredicates <span class="token punctuation">&#123;</span>
						klog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infoln</span><span class="token punctuation">(</span><span class="token string">"since alwaysCheckAllPredicates has not been set, the predicate "</span> <span class="token operator">+</span>
							<span class="token string">"evaluation is short circuited and there are chances "</span> <span class="token operator">+</span>
							<span class="token string">"of other predicates failing as well."</span><span class="token punctuation">)</span>
						<span class="token keyword">break</span>
					<span class="token punctuation">&#125;</span>
				<span class="token punctuation">&#125;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>failedPredicates<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span> failedPredicates<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><h3 id="NominatedPods"><a href="#NominatedPods" class="headerlink" title="NominatedPods"></a>NominatedPods</h3><p>当enable PodPriority feature gate后，scheduler会在集群资源资源不足时为preemptor抢占低优先级的Pods（成为victims）的资源，然后preemptor会再次入调度队列，等待下次victims的优雅终止并进行下一次调度。</p>
<p>为了尽量避免从preemptor抢占资源到真正再次执行调度这个时间段的scheduler能感知到那些资源已经被抢占，在scheduler调度其他更低优先级的Pods时考虑这些资源已经被抢占，因此在抢占阶段，为给preemptor设置<code>pod.Status.NominatedNodeName</code>，表示在NominatedNodeName上发生了抢占，preemptor期望调度在该node上。</p>
<p>PriorityQueue中缓存了每个node上的NominatedPods，这些NominatedPods表示已经被该node提名的，期望调度在该node上的，但是又还没最终成功调度过来的Pods。</p>
<h3 id="CriticalPod-amp-NonCriticalPod"><a href="#CriticalPod-amp-NonCriticalPod" class="headerlink" title="CriticalPod&amp;NonCriticalPod"></a>CriticalPod&amp;NonCriticalPod</h3><p><a href="https://cloud.tencent.com/developer/article/1402111">https://cloud.tencent.com/developer/article/1402111</a></p>
<p>CriticalPod, 用来部署关键组件, 希望能够: </p>
<ol>
<li>调度时, 即使资源不足, 仍然能够调度上去. </li>
<li>不能被抢占</li>
</ol>
<h2 id="核心流程"><a href="#核心流程" class="headerlink" title="核心流程"></a>核心流程</h2><ol>
<li>根据NodeSize, 确定Filter之后能参与后续Weighter的Node个数</li>
<li>g.cache.NodeTree().Next(): <ol>
<li>从cache的NodeTree中依次获取NodeName, 便于Node打散. </li>
<li>从snapshot的中根据NodeName获取到Node对象.</li>
</ol>
</li>
<li>podFitsOnNode(): 后续调度的</li>
<li></li>
</ol>
<pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">var (
	predicatesOrdering &#x3D; []string&#123;CheckNodeConditionPred, CheckNodeUnschedulablePred,
		GeneralPred, HostNamePred, PodFitsHostPortsPred,
		MatchNodeSelectorPred, PodFitsResourcesPred, NoDiskConflictPred,
		PodToleratesNodeTaintsPred, PodToleratesNodeNoExecuteTaintsPred, CheckNodeLabelPresencePred,
		CheckServiceAffinityPred, MaxEBSVolumeCountPred, MaxGCEPDVolumeCountPred, MaxCSIVolumeCountPred,
		MaxAzureDiskVolumeCountPred, MaxCinderVolumeCountPred, CheckVolumeBindingPred, NoVolumeZoneConflictPred,
		CheckNodeMemoryPressurePred, CheckNodePIDPressurePred, CheckNodeDiskPressurePred, MatchInterPodAffinityPred&#125;
)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>











<h3 id="资源量Filter-x2F-Predicates"><a href="#资源量Filter-x2F-Predicates" class="headerlink" title="资源量Filter&#x2F;Predicates"></a>资源量Filter&#x2F;Predicates</h3><h4 id="NonCriticalPredicates"><a href="#NonCriticalPredicates" class="headerlink" title="NonCriticalPredicates"></a>NonCriticalPredicates</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go">pkg<span class="token operator">/</span>scheduler<span class="token operator">/</span>algorithm<span class="token operator">/</span>predicates<span class="token operator">/</span>predicates<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">1114</span> GeneralPredicates
pkg<span class="token operator">/</span>scheduler<span class="token operator">/</span>algorithm<span class="token operator">/</span>predicates<span class="token operator">/</span>predicates<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">1136</span> noncriticalPredicates
pkg<span class="token operator">/</span>scheduler<span class="token operator">/</span>algorithm<span class="token operator">/</span>predicates<span class="token operator">/</span>predicates<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">769</span> PodFitsResources

<span class="token keyword">func</span> <span class="token function">PodFitsResources</span><span class="token punctuation">(</span>pod <span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">,</span> meta PredicateMetadata<span class="token punctuation">,</span> nodeInfo <span class="token operator">*</span>schedulernodeinfo<span class="token punctuation">.</span>NodeInfo<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>PredicateFailureReason<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	node <span class="token operator">:=</span> nodeInfo<span class="token punctuation">.</span><span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">var</span> predicateFails <span class="token punctuation">[</span><span class="token punctuation">]</span>PredicateFailureReason
	allowedPodNumber <span class="token operator">:=</span> nodeInfo<span class="token punctuation">.</span><span class="token function">AllowedPodNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// Pod数量校验</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>nodeInfo<span class="token punctuation">.</span><span class="token function">Pods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">></span> allowedPodNumber <span class="token punctuation">&#123;</span>
		predicateFails <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>predicateFails<span class="token punctuation">,</span> <span class="token function">NewInsufficientResourceError</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span>ResourcePods<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">int64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>nodeInfo<span class="token punctuation">.</span><span class="token function">Pods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">int64</span><span class="token punctuation">(</span>allowedPodNumber<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">var</span> podRequest <span class="token operator">*</span>schedulernodeinfo<span class="token punctuation">.</span>Resource
	podRequest <span class="token operator">=</span> <span class="token function">GetResourceRequest</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span>
	allocatable <span class="token operator">:=</span> nodeInfo<span class="token punctuation">.</span><span class="token function">AllocatableResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// CPU量校验</span>
	<span class="token keyword">if</span> allocatable<span class="token punctuation">.</span>MilliCPU <span class="token operator">&lt;</span> podRequest<span class="token punctuation">.</span>MilliCPU<span class="token operator">+</span>nodeInfo<span class="token punctuation">.</span><span class="token function">RequestedResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>MilliCPU <span class="token punctuation">&#123;</span>
		predicateFails <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>predicateFails<span class="token punctuation">,</span> <span class="token function">NewInsufficientResourceError</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span>ResourceCPU<span class="token punctuation">,</span> podRequest<span class="token punctuation">.</span>MilliCPU<span class="token punctuation">,</span> nodeInfo<span class="token punctuation">.</span><span class="token function">RequestedResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>MilliCPU<span class="token punctuation">,</span> allocatable<span class="token punctuation">.</span>MilliCPU<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
  <span class="token comment">// MEM量校验</span>
	<span class="token keyword">if</span> allocatable<span class="token punctuation">.</span>Memory <span class="token operator">&lt;</span> podRequest<span class="token punctuation">.</span>Memory<span class="token operator">+</span>nodeInfo<span class="token punctuation">.</span><span class="token function">RequestedResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Memory <span class="token punctuation">&#123;</span>
		predicateFails <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>predicateFails<span class="token punctuation">,</span> <span class="token function">NewInsufficientResourceError</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span>ResourceMemory<span class="token punctuation">,</span> podRequest<span class="token punctuation">.</span>Memory<span class="token punctuation">,</span> nodeInfo<span class="token punctuation">.</span><span class="token function">RequestedResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Memory<span class="token punctuation">,</span> allocatable<span class="token punctuation">.</span>Memory<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>predicateFails<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span> predicateFails<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="CriticalPredicates"><a href="#CriticalPredicates" class="headerlink" title="CriticalPredicates"></a>CriticalPredicates</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go">pkg<span class="token operator">/</span>scheduler<span class="token operator">/</span>algorithm<span class="token operator">/</span>predicates<span class="token operator">/</span>predicates<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">1150</span> EssentialPredicates
<span class="token keyword">func</span> <span class="token function">EssentialPredicates</span><span class="token punctuation">(</span>pod <span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">,</span> meta PredicateMetadata<span class="token punctuation">,</span> nodeInfo <span class="token operator">*</span>schedulernodeinfo<span class="token punctuation">.</span>NodeInfo<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>PredicateFailureReason<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> predicateFails <span class="token punctuation">[</span><span class="token punctuation">]</span>PredicateFailureReason
  <span class="token comment">// 1. PodFitsHost校验: (pod.Spec.NodeName == node.Name)</span>
	fit<span class="token punctuation">,</span> reasons<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">PodFitsHost</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> meta<span class="token punctuation">,</span> nodeInfo<span class="token punctuation">)</span>
  <span class="token comment">// 2. PodFitsHostPorts校验: 端口量是否充足</span>
	fit<span class="token punctuation">,</span> reasons<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">PodFitsHostPorts</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> meta<span class="token punctuation">,</span> nodeInfo<span class="token punctuation">)</span>
  <span class="token comment">// 3. PodMatchNodeSelector校验: </span>
	fit<span class="token punctuation">,</span> reasons<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">PodMatchNodeSelector</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> meta<span class="token punctuation">,</span> nodeInfo<span class="token punctuation">)</span>

	<span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>predicateFails<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span> predicateFails<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="Label匹配"><a href="#Label匹配" class="headerlink" title="Label匹配"></a>Label匹配</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">pkg<span class="token operator">/</span>scheduler<span class="token operator">/</span>algorithm<span class="token operator">/</span>predicates<span class="token operator">/</span>predicates<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">948</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>n <span class="token operator">*</span>NodeLabelChecker<span class="token punctuation">)</span> <span class="token function">CheckNodeLabelPresence</span><span class="token punctuation">(</span>pod <span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">,</span> meta PredicateMetadata<span class="token punctuation">,</span> nodeInfo <span class="token operator">*</span>schedulernodeinfo<span class="token punctuation">.</span>NodeInfo<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>PredicateFailureReason<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	node <span class="token operator">:=</span> nodeInfo<span class="token punctuation">.</span><span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  
	<span class="token keyword">var</span> exists <span class="token builtin">bool</span>
  <span class="token comment">// 获取Node上的所有Label</span>
	nodeLabels <span class="token operator">:=</span> labels<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>Labels<span class="token punctuation">)</span>
  <span class="token comment">// 遍历pod请求里的所有Label</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> label <span class="token operator">:=</span> <span class="token keyword">range</span> n<span class="token punctuation">.</span>labels <span class="token punctuation">&#123;</span>
    <span class="token comment">// 如果Node的Label没有包含pod请求里的Label, 那么证明该Node不合法(缺少对应的Label), 则筛除掉</span>
		exists <span class="token operator">=</span> nodeLabels<span class="token punctuation">.</span><span class="token function">Has</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>exists <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>n<span class="token punctuation">.</span>presence<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">!</span>exists <span class="token operator">&amp;&amp;</span> n<span class="token punctuation">.</span>presence<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>PredicateFailureReason<span class="token punctuation">&#123;</span>ErrNodeLabelPresenceViolated<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://my.oschina.net/jxcdwangtao/blog/1818975">https://my.oschina.net/jxcdwangtao/blog/1818975</a></p>
<p><a href="https://my.oschina.net/jxcdwangtao/blog/826741">https://my.oschina.net/jxcdwangtao/blog/826741</a></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>k8s</tag>
        <tag>scheduler</tag>
        <tag>kube-scheduler</tag>
      </tags>
  </entry>
  <entry>
    <title>kube-scheduler笔记</title>
    <url>//2021-09-08-kube-scheduler-overview/</url>
    <content><![CDATA[<h2 id="一言概之"><a href="#一言概之" class="headerlink" title="一言概之"></a>一言概之</h2><p>将PodSpec.NodeName为空的Pods逐个地，经过预选(Predicates)和优选(Priorities)两个步骤，挑选最合适的Node作为该Pod的Destination。</p>
<h2 id="架构概述"><a href="#架构概述" class="headerlink" title="架构概述"></a>架构概述</h2><ol>
<li>kube-scheduler作为kubernetes master上一个单独的进程提供调度服务，通过–master指定kube-api-server的地址，用来watch pod和node和调用api server bind接口完成node和pod的Bind操作。</li>
<li>kube-scheduler中维护了一个FIFO类型的PodQueue cache，新创建的Pod都会被ConfigFactory watch到，被添加到该PodQueue中，每次调度都从该PodQueue中getNextPod作为即将调度的Pod。</li>
<li>获取到待调度的Pod后，就执行AlgorithmProvider配置Algorithm的Schedule方法进行调度，整个调度过程分两个关键步骤：Predicates和Priorities，最终选出一个最适合该Pod借宿的Node返回。</li>
<li>更新SchedulerCache中Pod的状态(AssumePod)，标志该Pod为scheduled，并更新到对应的NodeInfo中。</li>
<li>调用api server的Bind接口，完成node和pod的Bind操作，如果Bind失败，从SchedulerCache中删除上一步中已经Assumed的Pod。</li>
</ol>
<h2 id="重要疑问"><a href="#重要疑问" class="headerlink" title="重要疑问"></a>重要疑问</h2><ol>
<li>如何实现亲和性&#x2F;反亲和性调度?<ol>
<li>参见亲和性调度部分</li>
</ol>
</li>
<li>如何做到Weighter?</li>
<li>NC实际资源与Scheduler缓存的资源一致性如何保证?<ol>
<li>snapshot机制, 无法保证, 只是在调度前都拿该资源</li>
<li>同时将资源的操作都在scheduler进行收口</li>
</ol>
</li>
<li>如果单个Pod调度失败(无论是在Filter&amp;Weigher阶段, 还是在assume阶段, 还是在Bind阶段), 这个Pod之后还会被重试调度么? 还是说直接失败? </li>
<li>是否有类似Reservation功能呢? </li>
<li>抢占式调度是如何实现的? <ol>
<li>参见抢占式调度部分</li>
</ol>
</li>
<li>调度发生时机是怎样的? 是否支持热迁移? 是否有离线规划? <ol>
<li>无热迁移需求. </li>
<li>只有ASI有离线规划情况.</li>
</ol>
</li>
</ol>
<h2 id="结构分析"><a href="#结构分析" class="headerlink" title="结构分析"></a>结构分析</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> genericScheduler <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	cache                    internalcache<span class="token punctuation">.</span>Cache
	schedulingQueue          internalqueue<span class="token punctuation">.</span>SchedulingQueue
	predicates               <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>predicates<span class="token punctuation">.</span>FitPredicate
	priorityMetaProducer     priorities<span class="token punctuation">.</span>PriorityMetadataProducer
	predicateMetaProducer    predicates<span class="token punctuation">.</span>PredicateMetadataProducer
	prioritizers             <span class="token punctuation">[</span><span class="token punctuation">]</span>priorities<span class="token punctuation">.</span>PriorityConfig
	pluginSet                pluginsv1alpha1<span class="token punctuation">.</span>PluginSet
	extenders                <span class="token punctuation">[</span><span class="token punctuation">]</span>algorithm<span class="token punctuation">.</span>SchedulerExtender
	lastNodeIndex            <span class="token builtin">uint64</span>
	alwaysCheckAllPredicates <span class="token builtin">bool</span>
	nodeInfoSnapshot         internalcache<span class="token punctuation">.</span>NodeInfoSnapshot
	volumeBinder             <span class="token operator">*</span>volumebinder<span class="token punctuation">.</span>VolumeBinder
	pvcLister                corelisters<span class="token punctuation">.</span>PersistentVolumeClaimLister
	pdbLister                algorithm<span class="token punctuation">.</span>PDBLister
	disablePreemption        <span class="token builtin">bool</span>
	percentageOfNodesToScore <span class="token builtin">int32</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>cache: 调度的cache</li>
<li>nodeInfoSnapshot: node的snapshot, 详细分析参见”Scheduler Cache研究”</li>
<li>schedulingQueue:  <ul>
<li>参见: pkg&#x2F;scheduler&#x2F;internal&#x2F;queue&#x2F;scheduling_queue.go</li>
<li>本质上是PriorityQueue, 详细分析参见: “Scheduler Queue研究”</li>
</ul>
</li>
<li></li>
</ul>
<h2 id="关键操作"><a href="#关键操作" class="headerlink" title="关键操作"></a>关键操作</h2><h3 id="1-ScheduleOne"><a href="#1-ScheduleOne" class="headerlink" title="1. ScheduleOne"></a>1. ScheduleOne</h3><h4 id="1-1-代码"><a href="#1-1-代码" class="headerlink" title="1.1 代码"></a>1.1 代码</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go">pkg<span class="token operator">/</span>scheduler<span class="token operator">/</span>scheduler<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">436</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>sched <span class="token operator">*</span>Scheduler<span class="token punctuation">)</span> <span class="token function">scheduleOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// 1. 从??获取到要调度的Pod信息</span>
  pod <span class="token operator">:=</span> sched<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">NextPod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 2. 执行调度, 找到合适的Node</span>
	scheduleResult<span class="token punctuation">,</span> err <span class="token operator">:=</span> sched<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span>

	<span class="token comment">// 3. 执行Node资源扣减</span>
  assumedPod <span class="token operator">:=</span> pod<span class="token punctuation">.</span><span class="token function">DeepCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	err <span class="token operator">=</span> sched<span class="token punctuation">.</span><span class="token function">assume</span><span class="token punctuation">(</span>assumedPod<span class="token punctuation">,</span> scheduleResult<span class="token punctuation">.</span>SuggestedHost<span class="token punctuation">)</span>

	<span class="token comment">// 4. 执行Bind流程</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// 4.1 执行prebind, 如果无法bind通过, 则将Node资源归还</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> pl <span class="token operator">:=</span> <span class="token keyword">range</span> plugins<span class="token punctuation">.</span><span class="token function">PrebindPlugins</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			approved<span class="token punctuation">,</span> err <span class="token operator">:=</span> pl<span class="token punctuation">.</span><span class="token function">Prebind</span><span class="token punctuation">(</span>plugins<span class="token punctuation">,</span> assumedPod<span class="token punctuation">,</span> scheduleResult<span class="token punctuation">.</span>SuggestedHost<span class="token punctuation">)</span>
			<span class="token keyword">if</span> <span class="token operator">!</span>approved <span class="token punctuation">&#123;</span>
				forgetErr <span class="token operator">:=</span> sched<span class="token punctuation">.</span><span class="token function">Cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ForgetPod</span><span class="token punctuation">(</span>assumedPod<span class="token punctuation">)</span>
				<span class="token keyword">return</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token comment">// 4.2 执行bind, 如果无法bind通过, 此bind方法里将Node资源归还</span>
		err <span class="token operator">:=</span> sched<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>assumedPod<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v1<span class="token punctuation">.</span>Binding<span class="token punctuation">&#123;</span>
			ObjectMeta<span class="token punctuation">:</span> metav1<span class="token punctuation">.</span>ObjectMeta<span class="token punctuation">&#123;</span>Namespace<span class="token punctuation">:</span> assumedPod<span class="token punctuation">.</span>Namespace<span class="token punctuation">,</span> Name<span class="token punctuation">:</span> assumedPod<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> UID<span class="token punctuation">:</span> assumedPod<span class="token punctuation">.</span>UID<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
			Target<span class="token punctuation">:</span> v1<span class="token punctuation">.</span>ObjectReference<span class="token punctuation">&#123;</span>
				Kind<span class="token punctuation">:</span> <span class="token string">"Node"</span><span class="token punctuation">,</span>
				Name<span class="token punctuation">:</span> scheduleResult<span class="token punctuation">.</span>SuggestedHost<span class="token punctuation">,</span>
			<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="1-2-操作详解"><a href="#1-2-操作详解" class="headerlink" title="1.2 操作详解"></a>1.2 操作详解</h4><ul>
<li>本质上就分为上边4步, 清晰易懂.</li>
</ul>
<h3 id="2-Schedule"><a href="#2-Schedule" class="headerlink" title="2. Schedule"></a>2. Schedule</h3><h4 id="1-1-代码-1"><a href="#1-1-代码-1" class="headerlink" title="1.1 代码"></a>1.1 代码</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go">generic_scheduler<span class="token punctuation">.</span><span class="token keyword">go</span>

<span class="token comment">// Schedule tries to schedule the given pod to one of the nodes in the node list.</span>
<span class="token comment">// If it succeeds, it will return the name of the node.</span>
<span class="token comment">// If it fails, it will return a FitError error with reasons.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>genericScheduler<span class="token punctuation">)</span> <span class="token function">Schedule</span><span class="token punctuation">(</span>pod <span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">,</span> nodeLister algorithm<span class="token punctuation">.</span>NodeLister<span class="token punctuation">)</span> <span class="token punctuation">(</span>result ScheduleResult<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

<span class="token comment">// 1. 获取最新Node信息</span>
	nodes<span class="token punctuation">,</span> err <span class="token operator">:=</span> nodeLister<span class="token punctuation">.</span><span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 2. 用Node信息更新到scheduler的缓存中, 打个快照</span>
  g<span class="token punctuation">.</span><span class="token function">snapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 3. 执行filter</span>
	filteredNodes<span class="token punctuation">,</span> failedPredicateMap<span class="token punctuation">,</span> err <span class="token operator">:=</span> g<span class="token punctuation">.</span><span class="token function">findNodesThatFit</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> nodes<span class="token punctuation">)</span>
<span class="token comment">// 4. 执行weighter</span>
	metaPrioritiesInterface <span class="token operator">:=</span> g<span class="token punctuation">.</span><span class="token function">priorityMetaProducer</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> g<span class="token punctuation">.</span>nodeInfoSnapshot<span class="token punctuation">.</span>NodeInfoMap<span class="token punctuation">)</span>
	priorityList<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">PrioritizeNodes</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> g<span class="token punctuation">.</span>nodeInfoSnapshot<span class="token punctuation">.</span>NodeInfoMap<span class="token punctuation">,</span> metaPrioritiesInterface<span class="token punctuation">,</span> g<span class="token punctuation">.</span>prioritizers<span class="token punctuation">,</span> filteredNodes<span class="token punctuation">,</span> g<span class="token punctuation">.</span>extenders<span class="token punctuation">)</span>
<span class="token comment">// 如果相同priority, 则根据roundrobin算法从list中获取随机NC</span>
	host<span class="token punctuation">,</span> err <span class="token operator">:=</span> g<span class="token punctuation">.</span><span class="token function">selectHost</span><span class="token punctuation">(</span>priorityList<span class="token punctuation">)</span>
	<span class="token keyword">return</span> ScheduleResult<span class="token punctuation">&#123;</span>
		SuggestedHost<span class="token punctuation">:</span>  host<span class="token punctuation">,</span>
		EvaluatedNodes<span class="token punctuation">:</span> <span class="token function">len</span><span class="token punctuation">(</span>filteredNodes<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">len</span><span class="token punctuation">(</span>failedPredicateMap<span class="token punctuation">)</span><span class="token punctuation">,</span>
		FeasibleNodes<span class="token punctuation">:</span>  <span class="token function">len</span><span class="token punctuation">(</span>filteredNodes<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> err
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="1-2-操作详解-1"><a href="#1-2-操作详解-1" class="headerlink" title="1.2. 操作详解"></a>1.2. 操作详解</h4><ol>
<li>nodeLister.list? 需要整体看下list机制.</li>
<li>g.snapshot(): 给所有Node打一次快照. 具体参见Cache Snapshot机制</li>
</ol>
<h3 id="2-findNodesThatFit"><a href="#2-findNodesThatFit" class="headerlink" title="2. findNodesThatFit"></a>2. findNodesThatFit</h3><h4 id="2-1-代码"><a href="#2-1-代码" class="headerlink" title="2.1 代码"></a>2.1 代码</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>genericScheduler<span class="token punctuation">)</span> <span class="token function">findNodesThatFit</span><span class="token punctuation">(</span>pod <span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">,</span> nodes <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>v1<span class="token punctuation">.</span>Node<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>v1<span class="token punctuation">.</span>Node<span class="token punctuation">,</span> FailedPredicateMap<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  
	<span class="token keyword">var</span> filtered <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>v1<span class="token punctuation">.</span>Node

  <span class="token comment">// 1. 根据所有Node个数, 确定最终Filter之后最大的Node个数, 缩小之后Weighter的范围</span>
	allNodes <span class="token operator">:=</span> <span class="token function">int32</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">NodeTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">NumNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	numNodesToFind <span class="token operator">:=</span> g<span class="token punctuation">.</span><span class="token function">numFeasibleNodesToFind</span><span class="token punctuation">(</span>allNodes<span class="token punctuation">)</span>
	filtered <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>v1<span class="token punctuation">.</span>Node<span class="token punctuation">,</span> numNodesToFind<span class="token punctuation">)</span>
	meta <span class="token operator">:=</span> g<span class="token punctuation">.</span><span class="token function">predicateMetaProducer</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> g<span class="token punctuation">.</span>nodeInfoSnapshot<span class="token punctuation">.</span>NodeInfoMap<span class="token punctuation">)</span>

  <span class="token comment">// 2. 根据NodeTree结构, 找下一个Node, 判断Node资源是否能满足Pod资源请求</span>
	checkNode <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		nodeName <span class="token operator">:=</span> g<span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">NodeTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		fits<span class="token punctuation">,</span> failedPredicates<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">podFitsOnNode</span><span class="token punctuation">(</span>
			pod<span class="token punctuation">,</span>
			meta<span class="token punctuation">,</span>
			g<span class="token punctuation">.</span>nodeInfoSnapshot<span class="token punctuation">.</span>NodeInfoMap<span class="token punctuation">[</span>nodeName<span class="token punctuation">]</span><span class="token punctuation">,</span>
			g<span class="token punctuation">.</span>predicates<span class="token punctuation">,</span>
			g<span class="token punctuation">.</span>schedulingQueue<span class="token punctuation">,</span>
			g<span class="token punctuation">.</span>alwaysCheckAllPredicates<span class="token punctuation">,</span>
		<span class="token punctuation">)</span>
		<span class="token keyword">if</span> fits <span class="token punctuation">&#123;</span>
			length <span class="token operator">:=</span> atomic<span class="token punctuation">.</span><span class="token function">AddInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>filteredLen<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> length <span class="token operator">></span> numNodesToFind <span class="token punctuation">&#123;</span>
				atomic<span class="token punctuation">.</span><span class="token function">AddInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>filteredLen<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
			<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
				filtered<span class="token punctuation">[</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> g<span class="token punctuation">.</span>nodeInfoSnapshot<span class="token punctuation">.</span>NodeInfoMap<span class="token punctuation">[</span>nodeName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

  <span class="token comment">// 3. 类似Fork&amp;Join, 启动16个协程并行进行Filter</span>
	workqueue<span class="token punctuation">.</span><span class="token function">ParallelizeUntil</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token function">int</span><span class="token punctuation">(</span>allNodes<span class="token punctuation">)</span><span class="token punctuation">,</span> checkNode<span class="token punctuation">)</span>

	<span class="token keyword">return</span> filtered<span class="token punctuation">,</span> failedPredicateMap<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-1-操作详解"><a href="#2-1-操作详解" class="headerlink" title="2.1 操作详解"></a>2.1 操作详解</h4><ol>
<li>遍历Node, 使用的是NodeTree.next()机制, 这样就必须保证NodeTree.next()是线程安全的. K8S里采用mutex信号量来保障</li>
<li>具体NodeTree的机制, 参见单独文章.</li>
</ol>
<h3 id="3-PodFitsResources"><a href="#3-PodFitsResources" class="headerlink" title="3. PodFitsResources"></a>3. PodFitsResources</h3><h4 id="3-1-核心代码"><a href="#3-1-核心代码" class="headerlink" title="3.1 核心代码"></a>3.1 核心代码</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go">pkg<span class="token operator">/</span>scheduler<span class="token operator">/</span>algorithm<span class="token operator">/</span>predicates<span class="token operator">/</span>predicates<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">769</span>

<span class="token keyword">func</span> <span class="token function">PodFitsResources</span><span class="token punctuation">(</span>pod <span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">,</span> meta PredicateMetadata<span class="token punctuation">,</span> nodeInfo <span class="token operator">*</span>schedulernodeinfo<span class="token punctuation">.</span>NodeInfo<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>PredicateFailureReason<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  node <span class="token operator">:=</span> nodeInfo<span class="token punctuation">.</span><span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment">// 1. 检查是否超过NC上允许调度的Pod个数上限</span>
	allowedPodNumber <span class="token operator">:=</span> nodeInfo<span class="token punctuation">.</span><span class="token function">AllowedPodNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>nodeInfo<span class="token punctuation">.</span><span class="token function">Pods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">></span> allowedPodNumber <span class="token punctuation">&#123;</span>
		predicateFails <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>predicateFails<span class="token punctuation">,</span> <span class="token function">NewInsufficientResourceError</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span>ResourcePods<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">int64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>nodeInfo<span class="token punctuation">.</span><span class="token function">Pods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">int64</span><span class="token punctuation">(</span>allowedPodNumber<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

  <span class="token comment">// 2. 计算出Pod的资源请求量</span>
	<span class="token keyword">var</span> podRequest <span class="token operator">*</span>schedulernodeinfo<span class="token punctuation">.</span>Resource
	podRequest <span class="token operator">=</span> <span class="token function">GetResourceRequest</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span>

	allocatable <span class="token operator">:=</span> nodeInfo<span class="token punctuation">.</span><span class="token function">AllocatableResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 3. 判断Node.totalVcpu - podRequest.Vcpu - Node.usedVcpu是否OK</span>
	<span class="token keyword">if</span> allocatable<span class="token punctuation">.</span>MilliCPU <span class="token operator">&lt;</span> podRequest<span class="token punctuation">.</span>MilliCPU<span class="token operator">+</span>nodeInfo<span class="token punctuation">.</span><span class="token function">RequestedResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>MilliCPU <span class="token punctuation">&#123;</span>
		predicateFails <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>predicateFails<span class="token punctuation">,</span> <span class="token function">NewInsufficientResourceError</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span>ResourceCPU<span class="token punctuation">,</span> podRequest<span class="token punctuation">.</span>MilliCPU<span class="token punctuation">,</span> nodeInfo<span class="token punctuation">.</span><span class="token function">RequestedResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>MilliCPU<span class="token punctuation">,</span> allocatable<span class="token punctuation">.</span>MilliCPU<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> allocatable<span class="token punctuation">.</span>Memory <span class="token operator">&lt;</span> podRequest<span class="token punctuation">.</span>Memory<span class="token operator">+</span>nodeInfo<span class="token punctuation">.</span><span class="token function">RequestedResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Memory <span class="token punctuation">&#123;</span>
		predicateFails <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>predicateFails<span class="token punctuation">,</span> <span class="token function">NewInsufficientResourceError</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span>ResourceMemory<span class="token punctuation">,</span> podRequest<span class="token punctuation">.</span>Memory<span class="token punctuation">,</span> nodeInfo<span class="token punctuation">.</span><span class="token function">RequestedResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Memory<span class="token punctuation">,</span> allocatable<span class="token punctuation">.</span>Memory<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>predicateFails<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span> predicateFails<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="3-2-操作详解"><a href="#3-2-操作详解" class="headerlink" title="3.2 操作详解"></a>3.2 操作详解</h4><ol>
<li>Node上重要的几个资源字段:<ol>
<li>nodeInfo.AllocatableResource(): 代表该Node上所有的CPU量. 与openstack的totalCpu相同</li>
<li>podRequest.MilliCPU: 代表该新Pod所需求的CPU量. </li>
<li>nodeInfo.RequestedResource(): <ol>
<li>代表已经调度到该Node上Pods已经占用的资源. 与openstack的usedCpu相同</li>
<li>包含了已经assumed的, 但还没有实际bind到Node上的Pod资源.</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="4-assume"><a href="#4-assume" class="headerlink" title="4. assume"></a>4. assume</h3><h4 id="4-1-核心代码"><a href="#4-1-核心代码" class="headerlink" title="4.1 核心代码"></a>4.1 核心代码</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go">
<span class="token keyword">func</span> <span class="token punctuation">(</span>sched <span class="token operator">*</span>Scheduler<span class="token punctuation">)</span> <span class="token function">assume</span><span class="token punctuation">(</span>assumed <span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">,</span> host <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	assumed<span class="token punctuation">.</span>Spec<span class="token punctuation">.</span>NodeName <span class="token operator">=</span> host
	sched<span class="token punctuation">.</span>config<span class="token punctuation">.</span>SchedulerCache<span class="token punctuation">.</span><span class="token function">AssumePod</span><span class="token punctuation">(</span>assumed<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>cache <span class="token operator">*</span>schedulerCache<span class="token punctuation">)</span> <span class="token function">AssumePod</span><span class="token punctuation">(</span>pod <span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	key<span class="token punctuation">,</span> err <span class="token operator">:=</span> schedulernodeinfo<span class="token punctuation">.</span><span class="token function">GetPodKey</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span>

	<span class="token comment">// podName之前不能在podStates里</span>
	<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> cache<span class="token punctuation">.</span>podStates<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"pod %v is in the cache, so can't be assumed"</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	cache<span class="token punctuation">.</span><span class="token function">addPod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span>
	ps <span class="token operator">:=</span> <span class="token operator">&amp;</span>podState<span class="token punctuation">&#123;</span>
		pod<span class="token punctuation">:</span> pod<span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>
	cache<span class="token punctuation">.</span>podStates<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> ps
	cache<span class="token punctuation">.</span>assumedPods<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>cache <span class="token operator">*</span>schedulerCache<span class="token punctuation">)</span> <span class="token function">addPod</span><span class="token punctuation">(</span>pod <span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	n<span class="token punctuation">,</span> ok <span class="token operator">:=</span> cache<span class="token punctuation">.</span>nodes<span class="token punctuation">[</span>pod<span class="token punctuation">.</span>Spec<span class="token punctuation">.</span>NodeName<span class="token punctuation">]</span>	
  <span class="token comment">// 见下方详解</span>
	n<span class="token punctuation">.</span>info<span class="token punctuation">.</span><span class="token function">AddPod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span>
 <span class="token comment">// 将Node移动到双链表的头部</span>
	cache<span class="token punctuation">.</span><span class="token function">moveNodeInfoToHead</span><span class="token punctuation">(</span>pod<span class="token punctuation">.</span>Spec<span class="token punctuation">.</span>NodeName<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>n <span class="token operator">*</span>NodeInfo<span class="token punctuation">)</span> <span class="token function">AddPod</span><span class="token punctuation">(</span>pod <span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 1. 计算Pod所需资源</span>
	res<span class="token punctuation">,</span> non0CPU<span class="token punctuation">,</span> non0Mem <span class="token operator">:=</span> <span class="token function">calculateResource</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span>
  <span class="token comment">// 2. 将Pod所需资源叠加到Node.requestedResource上</span>
	n<span class="token punctuation">.</span>requestedResource<span class="token punctuation">.</span>MilliCPU <span class="token operator">+=</span> res<span class="token punctuation">.</span>MilliCPU
	n<span class="token punctuation">.</span>requestedResource<span class="token punctuation">.</span>Memory <span class="token operator">+=</span> res<span class="token punctuation">.</span>Memory
  <span class="token comment">// 3. 将Pod得加到Node.pods列表上</span>
	n<span class="token punctuation">.</span>pods <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>pods<span class="token punctuation">,</span> pod<span class="token punctuation">)</span>
  <span class="token comment">// 4. 更新Node.generation</span>
	n<span class="token punctuation">.</span>generation <span class="token operator">=</span> <span class="token function">nextGeneration</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如下重要操作次序:</p>
<ul>
<li>将pod放到cache中Node的pods[]列表中</li>
<li>将pod需求的资源量叠加到Node的requestedResource中(注意在调度filter的时候, 判断已经占用的资源, 用的就是这个字段).</li>
<li>更新Node的generation, 将Node放到Node双向链表的头部(方便打增量snapshot)</li>
</ul>
<p>疑问&amp;关注点:</p>
<ul>
<li>如何防止Node资源超卖? 即将pod放到Node的pods[]列表中的时候, Node本身资源发生了变化, 导致useResource&gt;totalResource?</li>
<li></li>
</ul>
<h3 id="5-bind"><a href="#5-bind" class="headerlink" title="5. bind"></a>5. bind</h3><h4 id="5-1-核心代码"><a href="#5-1-核心代码" class="headerlink" title="5.1 核心代码"></a>5.1 核心代码</h4><p>Binding结构核心: </p>
<pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">err :&#x3D; sched.bind(assumedPod, &amp;v1.Binding&#123;
   ObjectMeta: metav1.ObjectMeta&#123;Namespace: assumedPod.Namespace, Name: assumedPod.Name, UID: assumedPod.UID&#125;,
   Target: v1.ObjectReference&#123;
      Kind: &quot;Node&quot;,
      Name: scheduleResult.SuggestedHost,
   &#125;,
&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>bind逻辑核心:</p>
<pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">func (sched *Scheduler) bind(assumed *v1.Pod, b *v1.Binding) error &#123;
  &#x2F;&#x2F; 1. 获取Binder, 并调用RPC接口, 让对应Node执行绑定Pod
   err :&#x3D; sched.config.GetBinder(assumed).Bind(b)
   if err !&#x3D; nil &#123;
      sched.config.SchedulerCache.ForgetPod(assumed)
      return err
   &#125;
   return nil
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>逆向流程: </p>
<pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">func (cache *schedulerCache) ForgetPod(pod *v1.Pod) error &#123;
  &#x2F;&#x2F; 1. 获取PodID
   key, err :&#x3D; schedulernodeinfo.GetPodKey(pod)

   currState, ok :&#x3D; cache.podStates[key]
   case ok &amp;&amp; cache.assumedPods[key]:
       &#x2F;&#x2F; 2. 将pod从SchedulerCache中移除
      err :&#x3D; cache.removePod(pod)
      delete(cache.assumedPods, key)
      delete(cache.podStates, key)
   return nil
&#125;

func (cache *schedulerCache) removePod(pod *v1.Pod) error &#123;
  &#x2F;&#x2F; 1. 找到该Pod调度到的Node, 从NodeInfo中移除该Pod
	n, ok :&#x3D; cache.nodes[pod.Spec.NodeName]
  err :&#x3D; n.info.RemovePod(pod)
	if len(n.info.Pods()) &#x3D;&#x3D; 0 &amp;&amp; n.info.Node() &#x3D;&#x3D; nil &#123;
    &#x2F;&#x2F; 2. 将空的Node从链表中移除
		cache.removeNodeInfoFromList(pod.Spec.NodeName)
	&#125; else &#123;
    &#x2F;&#x2F; 3. 将Node放到双链表头部
		cache.moveNodeInfoToHead(pod.Spec.NodeName)
	&#125;
	return nil
&#125;

func (n *NodeInfo) RemovePod(pod *v1.Pod) error &#123;
	k1, err :&#x3D; GetPodKey(pod)
	for i :&#x3D; range n.pods &#123;
		k2, err :&#x3D; GetPodKey(n.pods[i])
		if k1 &#x3D;&#x3D; k2 &#123;
			&#x2F;&#x2F; 将Pod从Node的Pods列表中移除
			n.pods[i] &#x3D; n.pods[len(n.pods)-1]
			n.pods &#x3D; n.pods[:len(n.pods)-1]
			&#x2F;&#x2F; 归还Node资源
			res, non0CPU, non0Mem :&#x3D; calculateResource(pod)
			n.requestedResource.MilliCPU -&#x3D; res.MilliCPU
			n.requestedResource.Memory -&#x3D; res.Memory
      &#x2F;&#x2F; 更新Node版本号
			n.generation &#x3D; nextGeneration()
			return nil
		&#125;
	&#125;
	return fmt.Errorf(&quot;no corresponding pod %s in pods of node %s&quot;, pod.Name, n.node.Name)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="5-2-操作详解"><a href="#5-2-操作详解" class="headerlink" title="5.2 操作详解"></a>5.2 操作详解</h4><ol>
<li>Binding对象: 本质上是{Pod.UID, Node.nodeName}, </li>
<li>执行绑定流程: 本质上是调用RPC, 将该Binding对象发送到对应Node上, 执行绑定<ol>
<li>此处RPC模式是怎样的需要确认:  TODO<ol>
<li>Pub-Sub模式: scheduler将请求发送到, Node上agent监听到该请求, 发现自身NodeId与消息中相同, 则执行bind过程. </li>
<li>P2P模式: scheduler直接将请求发送到对应Node上, 执行.</li>
</ol>
</li>
<li>此处RPC是同步还是一部需要确认: TODO<ol>
<li>同步: 当前逆向流程即可覆盖</li>
<li>异步: 需要单独注册回调, 在哪里? 怎么执行?</li>
</ol>
</li>
<li>具体到Node上, kubelet执行的操作是怎样的, 同样需要确认. TODO</li>
</ol>
</li>
<li>逆向流程: 本质上是将Pod资源归还给Node.</li>
</ol>
<h2 id="调度请求对象"><a href="#调度请求对象" class="headerlink" title="调度请求对象"></a>调度请求对象</h2><p><a href="https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/">https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/</a></p>
<pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">type ResourceRequirements struct &#123;
	Limits ResourceList &#96;json:&quot;limits,omitempty&quot; protobuf:&quot;bytes,1,rep,name&#x3D;limits,casttype&#x3D;ResourceList,castkey&#x3D;ResourceName&quot;&#96;
	Requests ResourceList &#96;json:&quot;requests,omitempty&quot; protobuf:&quot;bytes,2,rep,name&#x3D;requests,casttype&#x3D;ResourceList,castkey&#x3D;ResourceName&quot;&#96;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>limits: 给kubelets用的, 指的是这个Pod能使用的最大资源量</li>
<li>requests: 给scheduler用的, 指的是这个Pod最小需求的资源量</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://my.oschina.net/jxcdwangtao/blog/824965">https://my.oschina.net/jxcdwangtao/blog/824965</a></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>k8s</tag>
        <tag>scheduler</tag>
        <tag>kube-scheduler</tag>
      </tags>
  </entry>
  <entry>
    <title>kube-scheduler笔记之Queue研究</title>
    <url>//2021-09-08-kube-scheduler-queue/</url>
    <content><![CDATA[<h2 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h2><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">type PriorityQueue struct &#123;

   &#x2F;&#x2F; backoff队列
   podBackoff *util.PodBackoff
   &#x2F;&#x2F; backoff队列, 与podBackoff区别?
   podBackoffQ *util.Heap
  
   &#x2F;&#x2F; activeQ is heap structure that scheduler actively looks at to find pods to
   &#x2F;&#x2F; schedule. Head of heap is the highest priority pod.
   activeQ *util.Heap

   &#x2F;&#x2F; unschedulable队列
   unschedulableQ *UnschedulablePodsMap
  
   &#x2F;&#x2F; 抢占式调度成功后, 将preemptor放到nominatedPodMap里
   nominatedPods *nominatedPodMap
  
   &#x2F;&#x2F; 全局调度周期的递增序号，当pod pop的时候会递增
   schedulingCycle int64
   &#x2F;&#x2F; 当未调度的pod重新被添加到activeQueue中会保存schedulingCycle到moveRequestCycle中
   moveRequestCycle int64
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="核心解读"><a href="#核心解读" class="headerlink" title="核心解读"></a>核心解读</h2><ol>
<li>Heap结构, 即为最大堆.</li>
<li>activeQ: 存储所有等待调度的Pod的队列, 根据pod.Spec.Priority来构建最大堆</li>
<li>podBackoffQ: 存储在多个schedulingCycle中依旧调度失败的情况下，则会通过之前说的backOff机制，延迟等待调度的时间. 但该backoffQ是纯的PodHeap, 并没有存储pod的backOff的具体信息</li>
<li>podBackoff: 类似一个记分板, backoff的计数器，最后一次更新的时间等</li>
<li>unschedulableQ: 本质上是&lt;podName, podInfo&gt;的map, 而不是一个队列.</li>
</ol>
<h2 id="重点疑问"><a href="#重点疑问" class="headerlink" title="重点疑问"></a>重点疑问</h2><ol>
<li><p>在什么时候Pod被加入到activeQ中? 何时加入podBackoffQ中? 何时加入unschedulableQ中? Pod在这几个Q中间是如何变化的?</p>
<ol>
<li></li>
</ol>
</li>
<li><p>podBackoffQ是按照什么来划分优先级的?</p>
<ol>
<li>如果仍然是按照优先级来, 如何防止高优先级Pod反复拉起, 反复失败?</li>
<li>应该是按照调度失败次数? 还是调度等待时长?</li>
<li>根据podsCompareBackoffCompleted, 按照podBackoffTime, 即调度失败次数. 调度等待时长与调度失败次数有一个函数关系.<ol>
<li>如果pod从podBackoffQ中移入到activeQ中, 接下来调度失败, 重新移入podBackoffQ中, 此时podBackoffTime会重置么?</li>
</ol>
</li>
</ol>
</li>
<li><p>从unschedulableQ中移出pod的优先级是怎样的?</p>
<ol>
<li></li>
</ol>
</li>
<li><p>Pod调度失败的终止条件是什么? 还是说没有终止条件? 始终在几个Queue中打转?</p>
<ol>
<li>对的. 除非显式调用api删除掉该Pod</li>
</ol>
</li>
<li><p>各个队列有大小限制么? 如何防止Pod请求积压过多导致Queue(内存)满了?</p>
</li>
</ol>
<p><img data-src="https://bbsmax.ikafan.com/static/L3Byb3h5L2h0dHBzL2ltZzIwMTguY25ibG9ncy5jb20vYmxvZy8xNTA2NzI0LzIwMjAwMS8xNTA2NzI0LTIwMjAwMTEzMTEwMzU5Mzg1LTM2MDkzMzYzNS5wbmc=.jpg" alt="img"></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.shuzhiduo.com/A/rV576rRXJP/">https://www.shuzhiduo.com/A/rV576rRXJP/</a></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>k8s</tag>
        <tag>scheduler</tag>
        <tag>kube-scheduler</tag>
        <tag>kube-scheduler-queue</tag>
      </tags>
  </entry>
  <entry>
    <title>精神训练与身体训练</title>
    <url>//2021-09-08-physical-psychological/</url>
    <content><![CDATA[<blockquote>
<p>在杨念群的研究里，<br>毛泽东后来的《体育之研究》强调的就是精神训练与身体训练之间的关系，<br>强调的是实践对心灵改造的意义，而不是新文化核心：伦理的突出作用，它具有独特的地域化记忆，<br>这种地域记忆并非自毛泽东始，曾国藩、谭嗣同、杨昌济都在做类似的事情。<br>毛泽东自己都是在1920年亲自实践失败后才打消了湖南自治这个想法，更何况其他人。</p>
</blockquote>
<blockquote>
<p>他拒绝的是精英圈子本身。<br>他拒绝的是人活着就要往上爬的这种事本身。</p>
</blockquote>
<blockquote>
<p>非第强筋骨也，又足以增知识。近人有言曰：文明其精神，野蛮其体魄。此言是也。欲文明其精神，先自野蛮其体魄；苟野蛮其体魄矣，则文明之精神随之。 <br><br>– 毛泽东 &lt;体育之研究&gt;</p>
</blockquote>
<p>所以要注意加强锻炼身体哦~</p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>snippets</tag>
        <tag>physical</tag>
        <tag>psychological</tag>
      </tags>
  </entry>
  <entry>
    <title>诗文摘录</title>
    <url>//2021-09-08-random-snippets/</url>
    <content><![CDATA[<hr>
<h1 id="故乡"><a href="#故乡" class="headerlink" title="故乡"></a>故乡</h1><blockquote>
<p>我要还家 <br/><br>我要转回故乡，头上插满鲜花 <br/><br>我要在故乡的天空下 <br/><br>沉默寡言或大声谈吐 <br/><br>我要头上插满故乡的鲜花 <br/><br>——海子 《诗人叶赛宁》</p>
</blockquote>
<blockquote>
<p>席慕蓉说，故乡的面貌是一种模糊的怅惘，仿佛雾里的挥手别离。<br>长久以来，坡井永远熠熠生辉的灯光照亮着我所有努力的方向。尤其是在每一个农忙季节的夜晚，我躺在小学南边打谷场的麦秸垛上数满天的繁星时，对面坡井耀眼的灯光提示我，他们是永远不用靠啄食泥土而生活的。能够像他们一样“买着吃”，是父母在我身上倾注的所有期望。</p>
</blockquote>
<hr>
<h1 id="读书与做人"><a href="#读书与做人" class="headerlink" title="读书与做人"></a>读书与做人</h1><blockquote>
<p>黄山谷说：“人不读书，则尘俗生其间，照镜则面目可憎，对人则语言无味。”<br>细味其言，觉得似有道理。事实上，我们所看到的人，确实是面目可憎语言无味的居多。我曾思索，其中因果关系安在？何以不读书便面目可憎语言无味？我想也许是因为读书等于是尚友古人，而且那些古人著书立说必定是一时才俊，与古人游不知不觉受其熏染，终乃收改变气质之功，境界既高，胸襟既广，脸上自然透露出一股清醇爽朗之气，无以名之，名之曰书卷气。同时在谈吐上也自然高远不俗。反过来说，人不读书，则所为何事，大概是陷身于世网尘劳，困厄于名缰利锁，五烧六蔽，苦恼烦心，自然面目可憎，焉能语言有味？</p>
</blockquote>
<hr>
<h1 id="旅行-amp-世界"><a href="#旅行-amp-世界" class="headerlink" title="旅行&amp;世界"></a>旅行&amp;世界</h1><blockquote>
<p>你背单词时,阿拉斯加的鳕鱼正跃出水面,你算数学时,太平洋彼岸的海鸥振翅掠过城市上空,你晚自习时,极图中的夜空散漫了五彩斑斓,但是少年你别着急,在你为自己未来踏踏实实地努力时,那些你感觉从来不会看到的景色,那些你觉得终身不会遇到的人,正一步步向你走来。</p>
</blockquote>
<blockquote>
<p>当我们站在山顶，百万亩梯田如巨浪般涌入眼帘时，我们才会愕然记起，看似平静的表象下深藏的惊涛骇浪。正如哈尼梯田被称为“大地的雕刻”一样，波澜壮阔的历史也镌刻在这片土地上。</p>
</blockquote>
<hr>
<h1 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h1><blockquote>
<p>瀑布的水逆流而上，蒲公英的种子从远处飘回，变成伞的模样。太阳从西边升起，落向东方。子弹退回枪膛，运动员回到起跑线上，我交回录取通知书，忘了十年寒窗。厨房里飘来饭菜的香，你把我的卷子签好名字，关掉电视，帮我把书包背上。你还在我身旁。</p>
</blockquote>
<blockquote>
<p>“刹那和永恒有什么区别?”“就是你问我这句话的刹那，我已经在脑海里陪你度过了无数个春夏秋冬”</p>
</blockquote>
<blockquote>
</blockquote>
<hr>
<blockquote>
<p>自幼曾攻经史，长成亦有权谋。恰如猛虎卧荒丘，潜伏爪牙忍受。<br>不幸刺文双颊，那堪配在江州。他年若得报冤仇，血染浔阳江口。</p>
</blockquote>
<hr>
<p>了不起的盖茨比</p>
<blockquote>
<p>“每当你想批评别人的时候，”他对我说，“一定要记得并不是世界上每个人都曾拥有你所拥有的优势。”</p>
</blockquote>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>poems</tag>
      </tags>
  </entry>
  <entry>
    <title>传习录 摘录</title>
    <url>//2021-09-08-wangyangming/</url>
    <content><![CDATA[<blockquote>
<p>无善无恶心之体，有善有恶意之动，知善知恶是良知，为善去恶是格物</p>
</blockquote>
<blockquote>
<p>知行合一</p>
</blockquote>
<p>{: .box-note} 自己很明确知道自己的缺点, 知始终走在行的前边, 较为关注原理性理论行的知识, 而实际落地的行动力较弱. 一定需要加强 </p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>psychology</tag>
        <tag>wangyangming</tag>
      </tags>
  </entry>
  <entry>
    <title>一个简单的Fork&amp;Join框架实现</title>
    <url>//2021-10-08-simple-fork-join-framework/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在代码里, 经常需要类似fork&amp;join的方式来并行完成一些耗时的任务, 并将结果聚合起来.<br>通常有如下几种方式来实现:</p>
<h1 id="常用实现方式"><a href="#常用实现方式" class="headerlink" title="常用实现方式"></a>常用实现方式</h1><h2 id="countdown-latch"><a href="#countdown-latch" class="headerlink" title="countdown latch"></a>countdown latch</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">davyjones2010<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token punctuation">.</span>concurrent</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CountDownLatch</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">LinkedBlockingDeque</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadPoolExecutor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>base<span class="token punctuation">.</span></span><span class="token class-name">Splitter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>collect<span class="token punctuation">.</span></span><span class="token class-name">Lists</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">BasicThreadFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">davyjones2010<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CustomForkJoinService</span><span class="token punctuation">.</span><span class="token static">CORE_SIZE</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">davyjones2010<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CustomForkJoinService</span><span class="token punctuation">.</span><span class="token static">POOL_NAME</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomForkJoinServiceTest</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">countDownLatchTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 1. 创建线程池</span>
        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>CORE_SIZE<span class="token punctuation">,</span> CORE_SIZE<span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BasicThreadFactory<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">namingPattern</span><span class="token punctuation">(</span>POOL_NAME <span class="token operator">+</span> <span class="token string">"-%d"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> validStrs <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newCopyOnWriteArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 2. 创建&amp;提交任务</span>
        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">CountDownLatch</span> latch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">40</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"hello-"</span> <span class="token operator">+</span> i<span class="token punctuation">;</span>
            executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                    <span class="token class-name">Task</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        validStrs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
                    latch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            latch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"countDownLatchTest finished. validStrs: %s cost: %d \n"</span><span class="token punctuation">,</span> validStrs<span class="token punctuation">,</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Task</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 这里模拟耗时操作</span>
            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"echo finished. cost: %d \n"</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token class-name">Splitter</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">splitToList</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>优点:<ul>
<li>实现很简单</li>
<li>很容易实现超时机制, 防止木桶效应造成过大影响(如上边例子, 最大100s返回)</li>
</ul>
</li>
<li>缺点: <ul>
<li>必须使用一个线程安全的容器来保存每个任务分片的结果(如上边例子的CopyOnWriteArrayList), 如果使用线程不安全的容器例如HashMap, ArrayList, 很容易造成问题, 所以编码很容易踩坑.<ul>
<li>例如如果不使用CopyOnWriteArrayList, 而使用ArrayList, 并发add, 会造成<a href="https://blogs.sap.com/2017/03/04/arraylist-in-multi-thread-context/">IndexOutOfBoundsException</a></li>
<li>例如如果不使用ConcurrentHashMap, 而使用HashMap, 并发add, 会造成<a href="https://www.pixelstech.net/article/1585457836-Why-accessing-Java-HashMap-may-cause-infinite-loop-in-concurrent-environment">InfinityLoop</a></li>
</ul>
</li>
<li>由于使用了共享容器, 在线程竞争激烈的情况下, 效率必然会受到影响</li>
<li>通常是需要在需要多线程的类里来管理线程池(ExecutorService), 因此造成线程池遍地飞的场景, 不好几种管理.</li>
</ul>
</li>
</ul>
<h2 id="future-get"><a href="#future-get" class="headerlink" title="future.get"></a>future.get</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">davyjones2010<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token punctuation">.</span>concurrent</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CountDownLatch</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Future</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">LinkedBlockingDeque</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadPoolExecutor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>base<span class="token punctuation">.</span></span><span class="token class-name">Splitter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>collect<span class="token punctuation">.</span></span><span class="token class-name">Lists</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">BasicThreadFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">davyjones2010<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CustomForkJoinService</span><span class="token punctuation">.</span><span class="token static">CORE_SIZE</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">davyjones2010<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CustomForkJoinService</span><span class="token punctuation">.</span><span class="token static">POOL_NAME</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomForkJoinServiceTest</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">futureTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 1. 创建线程池</span>
        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>CORE_SIZE<span class="token punctuation">,</span> CORE_SIZE<span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BasicThreadFactory<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">namingPattern</span><span class="token punctuation">(</span>POOL_NAME <span class="token operator">+</span> <span class="token string">"-%d"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 2. 创建&amp;提交任务</span>
        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span><span class="token punctuation">></span></span> futures <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">40</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"hello-"</span> <span class="token operator">+</span> i<span class="token punctuation">;</span>
            <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> submit <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                    <span class="token class-name">Task</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            futures<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>submit<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> future <span class="token operator">:</span> futures<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">Boolean</span> aBoolean <span class="token operator">=</span> future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span> aBoolean<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"skipped."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"futureTest finished. cost: %d \n"</span><span class="token punctuation">,</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Task</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 这里模拟耗时操作</span>
            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"echo finished. cost: %d \n"</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token class-name">Splitter</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">splitToList</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>优点:<ul>
<li>实现很简单快捷</li>
</ul>
</li>
<li>缺点:<ul>
<li>效率不如countdownlatch方式, 由于最终结果还是串行通过future.get拿到的. 如果前边几个future.get耗时很久(或者超时), 那么很容易造成方法瓶颈. </li>
<li>不太容易实现部分成功, 返回部分成功结果</li>
<li>返回结果需要封装: 如上边例子, 很难知道哪个String是valid的, 必须再对结果进行一层封装, 这样增加了实现的复杂度.</li>
</ul>
</li>
</ul>
<h2 id="java原生的fork-amp-join框架"><a href="#java原生的fork-amp-join框架" class="headerlink" title="java原生的fork&amp;join框架"></a>java原生的fork&amp;join框架</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// TODO: 待补充</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="CompletionService"><a href="#CompletionService" class="headerlink" title="CompletionService"></a>CompletionService</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">davyjones2010<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token punctuation">.</span>concurrent</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CompletionService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CountDownLatch</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorCompletionService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Future</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">LinkedBlockingDeque</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadPoolExecutor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>base<span class="token punctuation">.</span></span><span class="token class-name">Splitter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>collect<span class="token punctuation">.</span></span><span class="token class-name">Lists</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">BasicThreadFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">davyjones2010<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CustomForkJoinService</span><span class="token punctuation">.</span><span class="token static">CORE_SIZE</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">davyjones2010<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CustomForkJoinService</span><span class="token punctuation">.</span><span class="token static">POOL_NAME</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomForkJoinServiceTest</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">completionServiceTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 1. 创建线程池</span>
        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>CORE_SIZE<span class="token punctuation">,</span> CORE_SIZE<span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BasicThreadFactory<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">namingPattern</span><span class="token punctuation">(</span>POOL_NAME <span class="token operator">+</span> <span class="token string">"-%d"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CompletionService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> completionService <span class="token operator">=</span>
            <span class="token keyword">new</span> <span class="token class-name">ExecutorCompletionService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>executorService<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 2. 创建&amp;提交任务</span>
        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">40</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"hello-"</span> <span class="token operator">+</span> i<span class="token punctuation">;</span>
            completionService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">Task</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">40</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> take <span class="token operator">=</span> completionService<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Boolean</span> isValid <span class="token operator">=</span> take<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 这里丢失了上下文, 不知道当前get到的是for哪个String的</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"isValid "</span> <span class="token operator">+</span> isValid<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"completionServiceTest finished. cost: %d \n"</span><span class="token punctuation">,</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Task</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 这里模拟耗时操作</span>
            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"echo finished. cost: %d \n"</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token class-name">Splitter</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">splitToList</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>优点:<ul>
<li>效率上要比future.get整体好很多: 由于<code>CompletionService</code>内部实现, 是把结果放入一个共享的queue中, 而不是串行地顺序地future.get</li>
</ul>
</li>
<li>缺点:<ul>
<li>仍然需要维护线程池<code>ExecutorService</code></li>
<li>由于拿到的结果是乱序的, 因此不容易get到上下文信息. 如上边例子, 很难知道哪个String是valid的. 必须进行一层封装, 这样增加了实现的复杂度.</li>
</ul>
</li>
</ul>
<h2 id="几种实现方式总结"><a href="#几种实现方式总结" class="headerlink" title="几种实现方式总结"></a>几种实现方式总结</h2><p>使用起来都不太优雅: </p>
<ol>
<li>需要自己管理线程池</li>
<li>需要自己做结果的聚合</li>
<li>需要自己处理异常情况等</li>
</ol>
<p>因此我基于<code>CompletionService</code>的方式, 封装了一个小的Fork&amp;Join框架, 来满足日常需求.</p>
<h1 id="框架参考代码"><a href="#框架参考代码" class="headerlink" title="框架参考代码"></a>框架参考代码</h1><h2 id="核心部分"><a href="#核心部分" class="headerlink" title="核心部分"></a>核心部分</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">davyjones2010<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token punctuation">.</span>concurrent</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CompletionService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorCompletionService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Future</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">LinkedBlockingDeque</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadPoolExecutor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>collect<span class="token punctuation">.</span></span><span class="token class-name">Lists</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">BasicThreadFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span></span><span class="token class-name">DisposableBean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span></span><span class="token class-name">InitializingBean</span></span><span class="token punctuation">;</span>

<span class="token comment">/**
 * 一个简单的Fork&amp;Join框架, 用于将批量请求分布到多个线程中, 并且通过completionService队列拿到所有结果
 *
 * @author kunlun.ykl
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token comment">//@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomForkJoinService</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span><span class="token punctuation">,</span> <span class="token class-name">DisposableBean</span> <span class="token punctuation">&#123;</span>

    <span class="token class-name">ExecutorService</span> executorService<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CORE_SIZE <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> POOL_NAME <span class="token operator">=</span> <span class="token string">"CFJ"</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CustomForkJoinResult</span><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">forkJoin</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CustomForkJoinCallable</span><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span><span class="token punctuation">></span></span> callables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"forkJoin start. request.size: %d \n"</span><span class="token punctuation">,</span> callables<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// hantingtodo: 这里可以增加容灾, 如果executorService初始化失败, 可以降级为串行执行</span>
        <span class="token class-name">CompletionService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CustomForkJoinResult</span><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span><span class="token punctuation">></span></span> completionService <span class="token operator">=</span>
            <span class="token keyword">new</span> <span class="token class-name">ExecutorCompletionService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>executorService<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// fork</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">CustomForkJoinCallable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> callable <span class="token operator">:</span> callables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            completionService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>
                <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> callable<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">// join</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CustomForkJoinResult</span><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span><span class="token punctuation">></span></span> results <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> callables<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CustomForkJoinResult</span><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span><span class="token punctuation">></span></span> take <span class="token operator">=</span> completionService<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">CustomForkJoinResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> take<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> result <span class="token operator">&amp;&amp;</span> result<span class="token punctuation">.</span>success<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    results<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"invoke error."</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"forkJoin finished. request.size: %d result.size: %d cost: %d \n"</span><span class="token punctuation">,</span> callables<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            results<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> results<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> executorService<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        executorService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>CORE_SIZE<span class="token punctuation">,</span> CORE_SIZE<span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BasicThreadFactory<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">namingPattern</span><span class="token punctuation">(</span>POOL_NAME <span class="token operator">+</span> <span class="token string">"-%d"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Request-amp-Response对象封装"><a href="#Request-amp-Response对象封装" class="headerlink" title="Request&amp;Response对象封装"></a>Request&amp;Response对象封装</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">davyjones2010<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token punctuation">.</span>concurrent</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSON</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ReflectionUtils</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomForkJoinCallable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Object</span> o<span class="token punctuation">;</span>
    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> params<span class="token punctuation">;</span>
    <span class="token class-name">String</span> methodName<span class="token punctuation">;</span>
    <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> paramTypes<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">CustomForkJoinCallable</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token class-name">String</span> methodName<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> params<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> paramTypes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>o <span class="token operator">=</span> o<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>params <span class="token operator">=</span> params<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>methodName <span class="token operator">=</span> methodName<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>paramTypes <span class="token operator">=</span> paramTypes<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">CustomForkJoinResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">CustomForkJoinResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomForkJoinResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Method</span> m <span class="token operator">=</span> <span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">findMethod</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> methodName<span class="token punctuation">,</span> paramTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span>
                    <span class="token string">"cannot find method: "</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">" for class: "</span> <span class="token operator">+</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token class-name">V</span> v <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">V</span><span class="token punctuation">)</span><span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">invokeMethod</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>o<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>
            result<span class="token punctuation">.</span>success <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            result<span class="token punctuation">.</span>rawResponse <span class="token operator">=</span> v<span class="token punctuation">;</span>
            result<span class="token punctuation">.</span>params <span class="token operator">=</span> params<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"invoke error. o: %s methodName: %s params: %s \n"</span><span class="token punctuation">,</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                methodName<span class="token punctuation">,</span>
                JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            result<span class="token punctuation">.</span>success <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">davyjones2010<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token punctuation">.</span>concurrent</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomForkJoinResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> params<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">V</span> rawResponse<span class="token punctuation">;</span>

    <span class="token comment">// 代表本次fork&amp;join调用是否成功</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> success<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="实现细节说明"><a href="#实现细节说明" class="headerlink" title="实现细节说明"></a>实现细节说明</h2><p>之所以封装<code>CustomForkJoinResult</code>对象, 是由于我们通常Fork&amp;Join使用时, 不仅要感知实际invoke的结果, 很多时候也需要感知到传入的参数.<br>因此将<code>Object[] params</code>放入到<code>CustomForkJoinResult</code>里, 作为成员变量, 作为<strong>方法调用的上下文</strong>.<br>例如判断一个String是否有效, 核心的invoke方法签名如下: </p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token class-name">String</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>当Fork&amp;Join框架传入一堆的String时, 如果直接将结果聚合.<br>由于结果是乱序拿到的, 那么拿到的是一堆的”boolean”值, 我们根本不知道哪个String对应哪个boolean.<br>也就不知道哪个String是有效的, 哪个String是无效的了. (具体可以参见下边的测试代码)</p>
<h1 id="测试验证"><a href="#测试验证" class="headerlink" title="测试验证"></a>测试验证</h1><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">davyjones2010<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token punctuation">.</span>concurrent</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>base<span class="token punctuation">.</span></span><span class="token class-name">Splitter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>collect<span class="token punctuation">.</span></span><span class="token class-name">Lists</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomForkJoinServiceTest</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">forkJoinTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">CustomForkJoinService</span> forkJoinService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomForkJoinService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        forkJoinService<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CustomForkJoinCallable</span><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span><span class="token punctuation">></span></span> callables <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">40</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Task</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">CustomForkJoinCallable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> callable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomForkJoinCallable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token string">"isValid"</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token string">"hello-"</span> <span class="token operator">+</span> i<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            callables<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>callable<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CustomForkJoinResult</span><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span><span class="token punctuation">></span></span> results <span class="token operator">=</span> forkJoinService<span class="token punctuation">.</span><span class="token function">forkJoin</span><span class="token punctuation">(</span>callables<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"forkJoin finished. callables.size: %d results.size: %d cost: %d \n"</span><span class="token punctuation">,</span> callables<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            results<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">CustomForkJoinResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> result <span class="token operator">:</span> results<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s isValid: %b \n"</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span>rawResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Task</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 这里模拟耗时操作</span>
            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"echo finished. cost: %d \n"</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token class-name">Splitter</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">splitToList</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="测试结果分析"><a href="#测试结果分析" class="headerlink" title="测试结果分析"></a>测试结果分析</h2><pre class="line-numbers language-none"><code class="language-none">forkJoin start. request.size: 40 
echo finished. cost: 29 
echo finished. cost: 35 
echo finished. cost: 124  
...(为了简便省略掉了)
echo finished. cost: 629 
echo finished. cost: 680 
echo finished. cost: 893 
echo finished. cost: 961 
echo finished. cost: 968 
forkJoin finished. request.size: 40 result.size: 40 cost: 1231 
forkJoin finished. callables.size: 40 results.size: 40 cost: 1238 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到, 平均单次执行的期望是500ms左右, 如果串行, 耗时应该在 500ms * 40 &#x3D;20s 左右.<br>但使用Fork&amp;Join框架, 最终耗时是1s左右</p>
<h1 id="使用限制-amp-改进点"><a href="#使用限制-amp-改进点" class="headerlink" title="使用限制&amp;改进点"></a>使用限制&amp;改进点</h1><ul>
<li>木桶效应:<ul>
<li>如果某个任务分片执行很久, 例如耗时如: 1, 2, 1, 2, 100, 那么最终的Fork&amp;Join耗时肯定是100ms+;</li>
<li>优化点: 可以增加整体的超时时间, 丢弃掉超时的任务. 以期待部分的返回.</li>
</ul>
</li>
<li>线程池: <ul>
<li>这里线程池只是简单地使用了默认的线程池</li>
<li>可以使用带监控能力的线程池, 增加例如活跃线程数, 任务队列堆积情况等<br>不过整体来说, 基本够用了, 可以无损替换掉之前使用countdownlatch等不太优雅的做法.</li>
</ul>
</li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>code-snippets</tag>
        <tag>concurrent</tag>
      </tags>
  </entry>
  <entry>
    <title>2021年10月第三周</title>
    <url>//2021-10-17-weekend-summary/</url>
    <content><![CDATA[<p>闲适的周末, 读完了科幻小说: &lt;穿越土星环&gt;, 主要讲的是未来世界的一个富二代在追逐彗星图中, 由于机械故障导致飞船偏离预定巷道, 被遗落在土星环.<br>在绝境中努力求生, 最后在AI的帮助下, 受苦受难, 艰难度过一年, 最终返回地球的故事.<br>个人感觉比较平淡一般, 乏善可陈. 没有特别瑰丽的想象. 从文笔的优美, 科幻的硬核程度, 想象的宏大等方面, 跟&lt;三体&gt;比起来, 差的太多了.</p>
<p>看了 &lt;殷瑗小聚&gt; 之 &lt;前&amp;后赤壁赋&gt; , 听着蒋勋老师不焦不躁的富有磁性的声音, 娓娓道来. 才真正体会到这篇文章是如此之美, 为何会这样美.<br>例如摘抄如下: </p>
<blockquote>
<p>东坡的由来 <br/><br>我觉得随缘可能是生命里面最好的部分<br>因为你不计较了, 因为 轼 这个字对他来讲, 本来是一个很得意的字. 东坡这个字反而很随缘. 你到东边的坡地了, 你就叫自己东坡. 我想那个随缘变成他的快乐.</p>
</blockquote>
<blockquote>
<p>月出于东山之上. <br/><br>我常常用赤壁赋在观察我自己生活的周遭环境. 特别是到月圆的晚上.<br>所以你可以想象到, 一千年以前苏东坡在生命里面追寻的东西, 我们今天一样可以碰到, 他并不遥远.</p>
</blockquote>
<blockquote>
<p>扣舷而歌之 <br/><br>很有一种姿态上的美<br>如果我今天唱歌, 很正经的唱歌, 跟我躺在船边, 扣着那个船舷唱歌, 感觉是不太一样的, 因为这里面有一种节奏感.<br>我觉得人生一定要找到这种快乐. 这种快乐是你忽然觉得你放松了. 你在人生上没有什么东西要计较, 也没有什么东西要做作.</p>
</blockquote>
<p>如果在学校如果老师能这样解析, 那可能层次就又不一样了. 还好不算晚, 我们人生毕竟还有那么长呢.</p>
<p>提前过了自己31岁生日, 已经踏入32个年头了, 回想起来有种恍然若梦的不真实感. 感觉自己仍然是个少年, 仍然赤脚在故乡的天空下奔跑, 在金黄的麦田里大声谈吐.<br>想起了苏轼的&lt;寒食帖&gt;中所言: </p>
<blockquote>
<p>闇中偷负去，夜半真有力。 <br/><br>何殊病少年，病起头已白。</p>
</blockquote>
<p>玩了玩&lt;如龙0&gt; &lt;绝对绝望少女&gt;, 只玩了片刻, 却不怎么能提起兴趣. 可能是上了年纪吧. </p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>weekend</tag>
        <tag>diary</tag>
        <tag>books</tag>
      </tags>
  </entry>
  <entry>
    <title>2021年10月第四周</title>
    <url>//2021-10-23-weekend-summary/</url>
    <content><![CDATA[<p>周末, 深秋, 天寒, 江南, 清冷. 因感冒而略微发烧, 咳嗽残病的两天. 在病榻上, 突然想起杜甫在&lt;登高&gt;中所言:</p>
<blockquote>
<p>无边落木萧萧下，不尽长江滚滚来。<br>万里悲秋常作客，百年多病独登台。</p>
</blockquote>
<p>如此的应景, 引发强烈的内心共鸣.<br>仿佛秋季就应该属于杜甫, 毕竟写了如此之多悲秋之诗;<br>伤病也应该属于这位悲苦的诗人, 毕竟不是在生病, 就是在生病的路上.</p>
<blockquote>
<p>亲朋无一字, 老病有孤舟  —&lt;登岳阳楼&gt;</p>
</blockquote>
<p>想到此眼前不禁浮现一个眉头紧皱的穷酸倒霉鬼形象, 唉声叹气, 自怨自艾, 吊着书袋, 不觉苦笑, 莞尔.</p>
<hr>
<p>周六晚上看了&lt;八角亭迷雾&gt;, 迷雾剧场出品, 本来保有一丝期待, 结果只看了三四集便兴致寥寥, 遂决定弃剧. </p>
<p>一是选角绝对是最大败笔, 根本想不到”名动街坊邻里的大美女”竟然是表情僵硬, 眉头紧皱, 披头散发, 苦大仇深, 容貌平庸之状. 实在是难以缺乏共鸣. 可能是带资进组吧.<br>另外实在是看不出来玄珠是有什么样的魅力, 能让老板说出 “只要你一句话, 我便跟她离婚” 这句话. 原配从身材样貌, 没看出来那点儿比她差的. </p>
<p>二是角色塑造不合情理, 没有一个正常人. 不是在爆发, 就是在爆发的路上, 拧巴纠结, 没有一点正常人的理智. 大哥玄梁是个因为妹妹被杀导致对女儿病态关爱的PTSD患者,<br>二姐因为生不出孩子导致几乎神经病, 双胞胎妹妹玄珠是18年都跟家里人断绝联系的绝情鬼. 妈妈是个糊涂鬼, 女儿是个智商为负的叛逆鬼, 警察是个无能的拖延鬼, 老师是个有跟踪癖好的变态鬼…等等不一而足.<br>三是整体气氛太压抑, 苦大仇深, 剧情推进节奏太慢. 观众仿佛也被一同浸没在水中, 难以呼吸.   </p>
<p>辣眼睛辣眼睛, 罢了罢了.<br>看了虎嗅上安利&lt;沙丘&gt;的文章, 有点心动, 下载来原著, 病床上安心读一读, 洗洗眼吧. </p>
<p>P.S. 杭城桂花开了, 由于气候原因, 比往年都要晚一些. 满城都氤氲在桂花的香味中, 家中打开窗户, 花香便随风潜入, 令人心旷神怡. 给病榻上的人一丝丝安慰.<br>小区中随处漫步, 金桂居多, 丹桂虽少但更为别致, 还有些由于之前异变的气温导致误开的樱花.</p>
<blockquote>
<p>江南忆<br/><br>最忆是杭州<br/><br>山寺月中寻桂子<br/><br>郡亭枕上看潮头<br/><br>何日更重游<br/><br>&lt;忆江南&gt; 白居易</p>
</blockquote>
<p>P.S.2 </p>
<blockquote>
<p>宁可食无肉，不可居无竹。<br/><br>无肉令人瘦，无竹令人俗。<br/><br>人瘦尚可肥，士俗不可医。<br/><br>旁人笑此言，似高还似痴。<br/><br>若对此君仍大嚼，世间那有扬州鹤？<br/><br>&lt;於潜僧绿筠轩&gt; 苏轼</p>
</blockquote>
<p>才知道东坡的这首诗, 就是在出任杭州通判时, 从富阳 新登 取道浮云岭, 进入於潜县境”视政”时写的.<br>於潜僧慧觉在於潜县南二里的丰国乡寂照寺出家。寺内有绿筠轩，以竹点缀环境，十分幽雅。苏轼与僧慧觉游绿筠轩时，写下了这首《於潜僧绿筠轩》。<br>具体位置应该是现在杭州市临安区於潜镇附近.<br>有时间可以去找一找. </p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>weekend</tag>
        <tag>diary</tag>
        <tag>books</tag>
      </tags>
  </entry>
  <entry>
    <title>2021年10月第五周</title>
    <url>//2021-10-30-weekend-summary/</url>
    <content><![CDATA[<p>第一次完整地参加了一次代码大赛, 即阿里云举办的 <a href="https://code83.ide.aliyun.com/billboard">83行代码</a>.<br>整体没有特别投入, 所以最终成绩也不算特别好. </p>
<hr>
<p>第二题: 一看题目就想到使用TrieTree, 但整体优化思路跟Perf工具没有特别好. 最主要是内存占用优化绕了圈子, 最终也没有走出来. 个人对最终结果不是特别满意.</p>
<ul>
<li>具体实现在这里: <a href="https://github.com/DavyJones2010/2021-code83-round2.git">round2</a></li>
<li>Update 20211114: 经过赛题详解与后续反思, 思考问题出在如下地方:<ul>
<li>由于抽象出了Node对象, 从而每个字符节点对应一个对象, 而<ul>
<li><a href="https://www.jianshu.com/p/1ca4b72d50f1">Java中空对象占用至少16Byte</a></li>
<li><a href="https://www.jianshu.com/p/1ca4b72d50f1">Java中引用占用至少占用4Byte</a></li>
</ul>
</li>
<li>所以虽然实际Node对象中只有一个char&#x2F;byte, 但实际占用空间至少是 16B+1B </li>
<li>所以官方给出的优化方案是: <ul>
<li>减少Node对象数量:<ul>
<li>使用 <a href="https://www.cs.usfca.edu/~galles/visualization/RadixTree.html">RadixTree</a> <img data-src="/../_assets/2021-10-31-weekend-summary/radix-tree.png" alt="radix-tree.png"></li>
<li>使用数组等方式, 不生产对象</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<p>第三题: 基本面向对象的重构完全没问题. 但正确率一直在50分. 始终想不到哪里的逻辑出错了.<br>主要一方面原因可以归结于题目描述过于含糊, 感觉成了阅读理解. 等待最终结果公布再看下吧.</p>
<ul>
<li>具体实现在这里: <a href="https://github.com/DavyJones2010/2021-code83-round3.git">round3</a></li>
<li>Update 20211114: 经过赛题详解与自我反思, 终于查明了原因:<ul>
<li>与正确答案对比, 发现我提交的代码逻辑是没有错的!</li>
<li>但由于题目里没有说清楚到底怎么评判结果, 个人以为是通过sysout等方式, 但实际推测应该是将构造函数中的items都在外部重新循环一遍查看.</li>
<li>由于我的实现里, 新new出了新的items, 完全没有使用外部传入的. 所以评判结果一直是错误. 后续按照官方的意图修改了下, 就OK了.</li>
<li>这个真是坑爹!!!<br><img data-src="/../_assets/2021-10-31-weekend-summary/round3.png" alt="img.png"></li>
</ul>
</li>
</ul>
<hr>
<p>第四题: 时间比较紧张, 但基本思路还OK. Bug基本也修复了. </p>
<pre class="line-numbers language-none"><code class="language-none">1. SpringSecurity禁用掉CSRF校验
2. addUser时, 使用的admin账号的密码有误, 使用了基础的BaseAuthentication方式, 账号&amp;密码是用base64编码的. 修复掉初始化时的admin密码即可. 
3. 权限设置也有点问题. 很简单就修复了. 
4. 根据协议反序列化为String时, 不能把编码方式放在ThreadLocal里. 
5. DataBuffer转化为byte[]是, 细节处理的不太好. <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>不过最终算是把乱码问题也都修复了. 在这个过程查漏补缺, 发现个人对DataBuffer不是特别熟悉, 找机会恶补一波.</p>
<hr>
<p>总结, 整体还是比较顺利的, 个人也真切感受到了其中的迷茫紧张与乐趣, 也得到了一些技术上的进步. </p>
<p>最终虽然只集齐了8个线索, 但基本满足预期, 可以另一个限量版的公仔哇咔咔.</p>
<p>总体来说作为一个工作多年的老司机, 被这么多后辈成绩甩在后边, 真是心有不甘, 后生可畏, 继续努力!</p>
<p>后续有这种活动, 还要继续参与, 简直是小投入, 大回报, 其乐无穷~</p>
<hr>
<p>另外, 附加一个网站, 可以在线看到数据结构的生成逻辑, 十分方便: <a href="https://www.cs.usfca.edu/~galles/visualization/">Data Structure Visualizations</a></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>weekend</tag>
        <tag>diary</tag>
        <tag>books</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次由于MDC.put引发的NPE</title>
    <url>//2021-11-03-java-mdc-put-npe/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>测试的时候, 发现代码某处抛出了NPE:<br>根据堆栈信息发现在如下地方抛出.<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208071137212.png"><br>追踪实现, 知道MDC.put底层本质上是使用的java.util.Hashtable.put</p>
<h1 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h1><h2 id="几种HashMap比较"><a href="#几种HashMap比较" class="headerlink" title="几种HashMap比较"></a>几种HashMap比较</h2><p>基于当前jdk1.8的实现, 比较如下:</p>
<table>
<thead>
<tr>
<th>操作\实现</th>
<th>java.util.HashMap</th>
<th>java.util.concurrent.ConcurrentHashMap</th>
<th>java.util.Hashtable</th>
</tr>
</thead>
<tbody><tr>
<td>put(null, value)</td>
<td>OK</td>
<td></td>
<td></td>
</tr>
<tr>
<td>可以通过get(null)获取到value</td>
<td>NPE</td>
<td>NPE</td>
<td></td>
</tr>
<tr>
<td>put(key, null)</td>
<td>OK</td>
<td></td>
<td></td>
</tr>
<tr>
<td>可以通过get(key)获取到null</td>
<td>NPE</td>
<td>NPE</td>
<td></td>
</tr>
<tr>
<td>get(null)</td>
<td>OK</td>
<td>NPE</td>
<td>NPE</td>
</tr>
<tr>
<td>remove(null)</td>
<td>OK</td>
<td>NPE</td>
<td>NPE</td>
</tr>
</tbody></table>
<h2 id="MDC-amp-NDC比较"><a href="#MDC-amp-NDC比较" class="headerlink" title="MDC&amp;NDC比较"></a>MDC&amp;NDC比较</h2><ul>
<li>MDC底层: put&#x2F;get&#x2F;remove 直接调用的hashtable的方法, 不论是<ul>
<li>org.apache.log4j.MDC</li>
<li>还是 org.slf4j.MDC, 底层用的还是org.apache.log4j.MDC</li>
</ul>
</li>
<li>NDC底层: push&#x2F;pop&#x2F;peek 的时候, 使用了 DiagnosticContext 封装 + java.util.Stack , 所以要安全很多</li>
</ul>
<table>
<thead>
<tr>
<th>操作\实现</th>
<th>MDC</th>
<th>NDC</th>
</tr>
</thead>
<tbody><tr>
<td>MDC.put(null, value)</td>
<td>NPE</td>
<td></td>
</tr>
<tr>
<td>MDC.put(key, null)</td>
<td>NPE</td>
<td></td>
</tr>
<tr>
<td>MDC.get(null)</td>
<td>IllegalArgumentException</td>
<td></td>
</tr>
<tr>
<td>MDC.remove(null)</td>
<td>IllegalArgumentException</td>
<td></td>
</tr>
<tr>
<td>NDC.push(null)</td>
<td></td>
<td>OK</td>
</tr>
<tr>
<td>NDC.pop()</td>
<td></td>
<td>可以pop出null</td>
</tr>
<tr>
<td>NDC.peek()</td>
<td></td>
<td>可以peek出null</td>
</tr>
</tbody></table>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>必须要吐槽下apache的MDC实现, 理论上<ul>
<li>MDC里做个NPE防御, 其实完全没有问题, 符合业务预期.</li>
<li>底层使用ConcurrentHashMap, 以提高性能.</li>
</ul>
</li>
<li>算是踩坑了, 以后使用MDC&#x2F;ConcurrentHashMap&#x2F;Hashtable的时候千万注意NPE!</li>
<li>尽量能用NDC就用NDC吧</li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>learn-from-failure</tag>
        <tag>java</tag>
        <tag>mdc</tag>
        <tag>npe</tag>
      </tags>
  </entry>
  <entry>
    <title>mac初始化配置</title>
    <url>//2021-11-06-mac-init/</url>
    <content><![CDATA[<h1 id="必装软件"><a href="#必装软件" class="headerlink" title="必装软件"></a>必装软件</h1><ul>
<li>TotalFinder</li>
<li>Alfred</li>
<li>Maven</li>
<li>Git</li>
<li>Protobuf</li>
<li>SourceTree</li>
<li>IntelliJ IDEA</li>
<li>Docker</li>
<li>ClashX</li>
<li>PlistEdit Pro</li>
<li>HomeBrew</li>
<li>XMind</li>
<li>Gliffy Diagrams</li>
<li>Sublime</li>
<li>空气日历</li>
<li>iShot</li>
<li>Timeout</li>
<li><a href="https://picgo.github.io/PicGo-Doc/en/guide/#picgo-is-here">PicGo</a> 图床软件, Blog必备</li>
</ul>
<h2 id="HomeBrew安装配置"><a href="#HomeBrew安装配置" class="headerlink" title="HomeBrew安装配置"></a>HomeBrew安装配置</h2><h3 id="安装脚本"><a href="#安装脚本" class="headerlink" title="安装脚本"></a>安装脚本</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/bin/bash -c <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> -fsSL https://cdn.jsdelivr.net/gh/ineo6/homebrew-install/install.sh<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="修改源站"><a href="#修改源站" class="headerlink" title="修改源站"></a>修改源站</h3><p>中文安装教程（建议收藏）：<a href="https://brew.idayer.com/">https://brew.idayer.com/</a><br>如果你想换源，可以使用镜像助手：<a href="https://brew.idayer.com/guide/change-source/">https://brew.idayer.com/guide/change-source/</a></p>
<h1 id="必要配置"><a href="#必要配置" class="headerlink" title="必要配置"></a>必要配置</h1><h3 id="关闭SIP安全设置"><a href="#关闭SIP安全设置" class="headerlink" title="关闭SIP安全设置"></a>关闭SIP安全设置</h3><p>1、重启 Mac，按住 Command+R 键直到 Apple logo 出现，进入 Recovery Mode</p>
<p>2、点击 Utilities &gt; Terminal。（我的是中文版的，看图左上角，实用工具 &gt; 终端）</p>
<p>3、在 Terminal 中输入 csrutil disable，之后回车</p>
<p>4、重启 Mac<br>（这样 SIP 安全设置就已经被关闭了，如果想重新开启该安全设置，重复上面步骤，在第三步中将命令更换为 csrutil enable。）</p>
<h3 id="删除默认英文输入法"><a href="#删除默认英文输入法" class="headerlink" title="删除默认英文输入法"></a>删除默认英文输入法</h3><ol>
<li>关闭SIP</li>
<li>使用PlistEdit Pro 编辑 <code>~/Library/Preferences/com.apple.HIToolbox.plist</code></li>
<li>删除 ABC的选项(或者U.S): <img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202302191145532.png"></li>
<li>再次重启电脑</li>
</ol>
<h4 id="参照"><a href="#参照" class="headerlink" title="参照"></a>参照</h4><p><a href="https://blog.csdn.net/fgx_123456/article/details/87815697">完美删除Mac Os自带输入法</a></p>
<h3 id="使用bash-替换掉默认的zsh"><a href="#使用bash-替换掉默认的zsh" class="headerlink" title="使用bash, 替换掉默认的zsh"></a>使用bash, 替换掉默认的zsh</h3><h4 id="全局账号"><a href="#全局账号" class="headerlink" title="全局账号"></a>全局账号</h4><p>参考: <a href="https://support.apple.com/zh-cn/guide/terminal/trml113/2.11/mac/11.0">在 Mac 上的“终端”中更改默认 shell</a></p>
<h4 id="iterm"><a href="#iterm" class="headerlink" title="iterm"></a>iterm</h4><p><code>iTerm2-&gt;Preferences-&gt;Profiles-&gt;Command</code><br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202302191145530.png"></p>
<h3 id="去除掉zsh烦人的提示"><a href="#去除掉zsh烦人的提示" class="headerlink" title="去除掉zsh烦人的提示"></a>去除掉zsh烦人的提示</h3><h4 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">The default interactive shell is now zsh.
To update your account to use zsh, please run <span class="token variable"><span class="token variable">`</span>chsh -s /bin/zsh<span class="token variable">`</span></span><span class="token builtin class-name">.</span>
For <span class="token function">more</span> details, please visit https://support.apple.com/kb/HT208050.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> ~/.bash_profile
<span class="token builtin class-name">export</span> <span class="token assign-left variable">BASH_SILENCE_DEPRECATION_WARNING</span><span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="参见"><a href="#参见" class="headerlink" title="参见"></a>参见</h4><p><a href="https://apple.stackexchange.com/questions/371997/suppressing-the-default-interactive-shell-is-now-zsh-message-in-macos-catalina">Suppressing “The default interactive shell is now zsh” message in macOS Catalina</a></p>
<h3 id="开启触摸板轻点确认"><a href="#开启触摸板轻点确认" class="headerlink" title="开启触摸板轻点确认"></a>开启触摸板轻点确认</h3><p>经常需要在触摸板上点击之类的, 默认是需要按下去, 才算是点击按钮, 但这样太费劲儿.</p>
<h3 id="开启tab切换对话框选项"><a href="#开启tab切换对话框选项" class="headerlink" title="开启tab切换对话框选项"></a>开启tab切换对话框选项</h3><h1 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h1><h2 id="github连接不上"><a href="#github连接不上" class="headerlink" title="github连接不上"></a>github连接不上</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">fatal: unable to access <span class="token string">'https://github.com/DavyJones2010/davyjones2010.github.io.git/'</span><span class="token builtin class-name">:</span> Failed to connect to github.com port <span class="token number">443</span>: Operation timed out<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>或者</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">SSL_ERROR_SYSCALL <span class="token keyword">in</span> connection to github.com:443<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>根本原因是本地启用了VPN(ClashX), 使用如下命令配置git的proxy即可: </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global http.proxy <span class="token number">127.0</span>.0.1:7890
<span class="token function">git</span> config --global https.proxy <span class="token number">127.0</span>.0.1:7890<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>配置好之后, 通过如下命令查看是否生效: </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global http.proxy
<span class="token function">git</span> config --global https.proxy <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>删除配置: </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global --unset http.proxy
<span class="token function">git</span> config --global --unset https.proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>参考 <a href="https://blog.csdn.net/qq_37555071/article/details/114260533">OpenSSL SSL_connect: Connection was reset in connection to github.com:443</a></p>
<h2 id="iTerm2配置-Option-←-Option-→-按单词快速移动"><a href="#iTerm2配置-Option-←-Option-→-按单词快速移动" class="headerlink" title="iTerm2配置 Option+← Option+→ 按单词快速移动"></a>iTerm2配置 Option+← Option+→ 按单词快速移动</h2><p>路径: iTerm2-&gt;Preferences-&gt;Profiles-&gt;Keys-&gt;Key Mappings</p>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202302191205207.png"></p>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202302191146635.png"></p>
<p>参考 <a href="https://blog.csdn.net/skyyws/article/details/78480132">Mac下iTerm2光标按照单词快速移动设置</a></p>
<h2 id="iTerm2快速分屏"><a href="#iTerm2快速分屏" class="headerlink" title="iTerm2快速分屏"></a>iTerm2快速分屏</h2><ul>
<li><code>⌘ + N</code> for a new window</li>
<li><code>⌘ + T</code> for a new tab</li>
<li><code>⌘ + D</code> to split my pane vertically</li>
<li><code>⌘ + ⇧ + D</code> to split it horizontally</li>
<li>同时需要保持新拆分出的窗口目录与当前文件目录保持一致: <a href="https://apple.stackexchange.com/questions/337377/iterm2-split-vertically-with-current-profile-with-same-working-directory">iterm2-split-vertically-with-current-profile-with-same-working-directory</a></li>
</ul>
<h2 id="iTerm2分屏导航"><a href="#iTerm2分屏导航" class="headerlink" title="iTerm2分屏导航"></a>iTerm2分屏导航</h2><ul>
<li><strong>cmd-opt-arrow</strong> 进行分屏导航</li>
<li><strong>cmd-1&#x2F;2&#x2F;3</strong> 或者 <strong>cmd-arrow</strong> 进行Tab导航</li>
</ul>
<h2 id="git配置SSHKey访问"><a href="#git配置SSHKey访问" class="headerlink" title="git配置SSHKey访问"></a>git配置SSHKey访问</h2><p>参见<a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">Connect with SSH</a></p>
<h2 id="Maven设置阿里云镜像"><a href="#Maven设置阿里云镜像" class="headerlink" title="Maven设置阿里云镜像"></a>Maven设置阿里云镜像</h2><p>Copy From <a href="https://zhuanlan.zhihu.com/p/71998219">将maven源改为国内阿里云镜像</a></p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.0.0<span class="token punctuation">"</span></span>
  <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.0.0
                      http://maven.apache.org/xsd/settings-1.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localRepository</span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>interactiveMode</span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>usePluginRegistry</span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>offline</span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginGroups</span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servers</span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrors</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>aliyunmaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>阿里云公共仓库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://maven.aliyun.com/repository/central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>repo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>central repo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://repo1.maven.org/maven2/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>aliyunmaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>apache snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>阿里云阿帕奇仓库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://maven.aliyun.com/repository/apache-snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>proxies</span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeProfiles</span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>  
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">></span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>aliyunmaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>aliyunmaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://maven.aliyun.com/repository/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releases</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releases</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>MavenCentral<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://repo1.maven.org/maven2/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>aliyunmavenApache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://maven.aliyun.com/repository/apache-snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">></span></span>             
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h1 id="常用命令-x2F-操作"><a href="#常用命令-x2F-操作" class="headerlink" title="常用命令&#x2F;操作"></a>常用命令&#x2F;操作</h1><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><ul>
<li><p>MAC怎么重置SMC&#x2F;NVRAM&#x2F;PRAM</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Option+Command+P+R<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>开机选择启动磁盘</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">按住 option 键<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>重装系统</p>
<ul>
<li>安装与你电脑兼容的 macOS 最新版本：Option-Command-R。 </li>
<li>重新安装你电脑原始版本的 macOS（包括可用的更新）：Option-Shift-Command-R。 </li>
<li>重新安装当前版本的 macOS：Command-R。</li>
</ul>
</li>
</ul>
<h2 id="硬件性能相关"><a href="#硬件性能相关" class="headerlink" title="硬件性能相关"></a>硬件性能相关</h2><ul>
<li><p>查看CPU型号</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> sysctl machdep.cpu.brand_string
machdep.cpu.brand_string: Intel<span class="token punctuation">(</span>R<span class="token punctuation">)</span> Core<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> M-5Y71 CPU @ <span class="token number">1</span>.20GHz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>查看物理内存大小</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> sysctl -n hw.memsize
<span class="token number">8589934592</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>加快TimeMachine备份的速度</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> <span class="token function">sudo</span> sysctl debug.lowpri_throttle_enabled<span class="token operator">=</span><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul>
<h1 id="常用链接-amp-工具"><a href="#常用链接-amp-工具" class="headerlink" title="常用链接&amp;工具"></a>常用链接&amp;工具</h1><ul>
<li>查询MacOS 支持的Mac型号: <a href="https://eshop.macsales.com/guides/Mac_OS_X_Compatibility">MacOS Compatibility Guide by Mac Model</a></li>
<li>查询Mac SN号码对应的硬件详细信息: <a href="https://appleserialnumberinfo.com/Desktop/index.php">Apple Serial Number Info</a></li>
<li>为老旧Mac安装新的 MacOS 系统: <a href="https://dortania.github.io/OpenCore-Legacy-Patcher/">OpenCore Legacy Patcher</a></li>
<li>MacOS各个版本官方下载地址: <a href="https://support.apple.com/zh-cn/HT211683">如何下载和安装 macOS - 官方 Apple 支持 (中国)</a></li>
<li>如何创建MacOS磁盘镜像(方便随时重装系统): <a href="https://support.apple.com/zh-cn/HT201372">创建可引导的 macOS 安装器 - 官方 Apple 支持 (中国)</a></li>
</ul>
<h1 id="新Mac初始化方式"><a href="#新Mac初始化方式" class="headerlink" title="新Mac初始化方式"></a>新Mac初始化方式</h1><p>新的Mac初始化, 按照上边这些步骤一个一个来, 确实需要花费不少时间.<br>尤其是自己喜欢折腾电脑, 这样导致的问题就更严重了.<br>因此调研了下初始化的方式: </p>
<h2 id="TimeMachine-方式"><a href="#TimeMachine-方式" class="headerlink" title="TimeMachine 方式"></a>TimeMachine 方式</h2><ol>
<li>优点: 非常方便靠谱, 基本可以 1:1 无损地进行迁移</li>
<li>缺点: <ol>
<li>需要单独搞块硬盘用来作为TimeMachine的备份盘. 但现在硬盘价格也便宜, 因此问题倒也不大.</li>
<li>只支持低版本的TimeMachine迁移到同版本或者高版本的MacOS上.</li>
</ol>
</li>
</ol>
<p>这个问题就比较严重. 现在自己的TimeMachine是基于Monterey来构建, 但新淘来的15款MacBook12寸, 只能支持到BigSur的MacOS.<br>因此只能使用 <a href="https://dortania.github.io/OpenCore-Legacy-Patcher/">OpenCore Legacy Patcher</a> 来强制升级系统到Monterey; 但性能是否受影响就难说了.</p>
<h2 id="Dotfile-方式"><a href="#Dotfile-方式" class="headerlink" title="Dotfile 方式"></a>Dotfile 方式</h2><ol>
<li>优点:<ol>
<li>github 托管, 无需单独硬盘.</li>
<li>版本兼容性较好.</li>
</ol>
</li>
<li>缺点:<ol>
<li>需要长期维护, 新增加啥配置或者软件, 都需要记得更新Dotfile. </li>
<li>不同Mac版本的兼容性也需要考虑.</li>
</ol>
</li>
</ol>
<p>自己暂时选用的是TimeMachine方式, 还算靠谱. </p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>关于分辨率的常识</title>
    <url>//2021-11-06-resolution/</url>
    <content><![CDATA[<h2 id="常见分辨率"><a href="#常见分辨率" class="headerlink" title="常见分辨率"></a>常见分辨率</h2><ul>
<li>480P: 720*480</li>
<li>720P: 1280x720</li>
<li>1080P: 1920x1080</li>
<li>2K: 2560x1440</li>
<li>4K:</li>
<li>15寸MacBookPro 2015Mid Retina屏: 2880 × 1800</li>
</ul>
<h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><ul>
<li>字母P代表: Progressive Scan, 即逐行扫描</li>
<li>480P代表:</li>
</ul>
<h2 id="常见刷新率"><a href="#常见刷新率" class="headerlink" title="常见刷新率"></a>常见刷新率</h2><ul>
<li>30Hz</li>
<li>60Hz</li>
<li></li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>common-sense</tag>
        <tag>resolution</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次mysql unique index未生效原因排查</title>
    <url>//2021-11-08-mysql-unique-index-not-working/</url>
    <content><![CDATA[<h1 id="背景描述"><a href="#背景描述" class="headerlink" title="背景描述"></a>背景描述</h1><p>如下SQL: serial_number默认可空, 且为unique key的一部分:</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>inventory<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>
<span class="token identifier"><span class="token punctuation">`</span>stockid<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
<span class="token identifier"><span class="token punctuation">`</span>productid<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
<span class="token identifier"><span class="token punctuation">`</span>factor1<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
<span class="token identifier"><span class="token punctuation">`</span>factor2<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
<span class="token identifier"><span class="token punctuation">`</span>factor3<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
<span class="token identifier"><span class="token punctuation">`</span>factor4<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
<span class="token identifier"><span class="token punctuation">`</span>factor5<span class="token punctuation">`</span></span> <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
<span class="token identifier"><span class="token punctuation">`</span>factor6<span class="token punctuation">`</span></span> <span class="token keyword">enum</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">,</span><span class="token string">'NEW'</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
<span class="token identifier"><span class="token punctuation">`</span>quantity<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
<span class="token identifier"><span class="token punctuation">`</span>stamp<span class="token punctuation">`</span></span> <span class="token keyword">timestamp</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">,</span>
<span class="token identifier"><span class="token punctuation">`</span>serial_number<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
<span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>stockid<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>serial_number<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>serial_number<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>productid_2<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>productid<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>factor1<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>factor2<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>factor3<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>factor4<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>factor5<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>factor6<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>serial_number<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>productid<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>productid<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>factor1<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>factor1<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>factor2<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>factor2<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>factor3<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>factor3<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> inventory <span class="token punctuation">(</span> productid<span class="token punctuation">,</span> factor1<span class="token punctuation">,</span> factor2<span class="token punctuation">,</span> factor3<span class="token punctuation">,</span> factor4<span class="token punctuation">,</span> factor5<span class="token punctuation">,</span> factor6<span class="token punctuation">,</span> quantity<span class="token punctuation">)</span>
<span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">242332</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'V67'</span><span class="token punctuation">,</span><span class="token number">3.30</span><span class="token punctuation">,</span><span class="token string">'NEW'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> inventory <span class="token punctuation">(</span> productid<span class="token punctuation">,</span> factor1<span class="token punctuation">,</span> factor2<span class="token punctuation">,</span> factor3<span class="token punctuation">,</span> factor4<span class="token punctuation">,</span> factor5<span class="token punctuation">,</span> factor6<span class="token punctuation">,</span> quantity<span class="token punctuation">)</span>
<span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">242332</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'V67'</span><span class="token punctuation">,</span><span class="token number">3.30</span><span class="token punctuation">,</span><span class="token string">'NEW'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token keyword">ON</span> <span class="token keyword">DUPLICATE</span> <span class="token keyword">KEY</span> <span class="token keyword">UPDATE</span> <span class="token identifier"><span class="token punctuation">`</span>quantity<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>quantity<span class="token punctuation">)</span> <span class="token operator">+</span> quantity<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>预期结果: 当执行第二条insert的时候, 应该会跟第一条duplicate, 从而执行更新操作.</li>
<li>实际结果: 当执行第二条insert的时候, 没有跟第一条duplicate, 也执行了插入操作. 从而出现了两条相同的结果如下:<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208071138358.png"></li>
</ul>
<h1 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h1><p>上google上按照关键词搜了下, 发现很多人已经踩过类似的坑:<br><a href="https://stackoverflow.com/questions/22156301/mysql-unique-key-not-working">https://stackoverflow.com/questions/22156301/mysql-unique-key-not-working</a></p>
<blockquote>
<p>Mysql allows multiple NULLs in an unique constraint.</p>
<p>In your serial_number column replace NULL with a value and the constraint is triggered,see:<br><a href="http://sqlfiddle.com/#!2/9dbd19/1">http://sqlfiddle.com/#!2/9dbd19/1</a></p>
<p>a UNIQUE index permits multiple NULL values for columns that can contain NULL</p>
</blockquote>
<h1 id="修改方案"><a href="#修改方案" class="headerlink" title="修改方案"></a>修改方案</h1><p>修改ddl如下:</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token identifier"><span class="token punctuation">`</span>serial_number<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h1 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h1><ul>
<li>方案1: 组成unique key的字段, 尽量不允许为空,  最好设置为: NOT NULL DEFAULT ‘’</li>
<li>方案2: 如果无法修改ddl, 那么最好在代码里做兼容, 把null值做个默认值映射, 填充进去.</li>
</ul>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>在线执行ddl, dml诊断的系统,  可以</p>
<ol>
<li>选择不同db类型&amp;版本, 方便重现问题</li>
<li>查看执行计划</li>
<li>分享诊断的永久链接, 方便他人排查:<br><a href="http://sqlfiddle.com/">http://sqlfiddle.com/</a></li>
</ol>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>learn-from-failure</tag>
        <tag>mysql</tag>
        <tag>index</tag>
        <tag>insert-on-duplicate</tag>
      </tags>
  </entry>
  <entry>
    <title>GFS论文笔记与思考</title>
    <url>//2021-11-13-GFS-thesis/</url>
    <content><![CDATA[<p>笔记:</p>
<ul>
<li>面向的批处理, 因此更加关注节点间的带宽稳定性, 而不是低延时.</li>
</ul>
<p>一些思考:</p>
<ul>
<li><p>操作系统的基本元素:</p>
<ul>
<li>处理机管理: 对中央处理机进行使用和分配的管理?? 这个具体指的是啥? 与作业管理有啥区别?</li>
<li>文件管理: 对文件的存放、检索、更新、共享和保护进行管理，为用户提供方便有效的文件使用方法. 文件系统</li>
<li>内存管理: 用某种数据结构t记录主存的使用情况，按照一定的策略对存储器进行分配和保护</li>
<li>设备管理: 管理各类外围设备，包括中断处理，输入输出程序设计，设备的驱动，外围设备的分配</li>
<li>任务调度&#x2F;作业管理: 为用户提供”作业控制语言””命令语言”,按一定策略对作业进行调度,控制.</li>
</ul>
</li>
<li><p>分布式的操作系统需要哪些元素?</p>
<ul>
<li>文件系统: GFS&#x2F;HDFS</li>
<li>资源&amp;任务调度系统: Yarn</li>
</ul>
</li>
<li><p>一些存储设备</p>
<ul>
<li>块存储<ul>
<li>aws的ebs</li>
</ul>
</li>
<li>文件存储<ul>
<li>OSS</li>
<li>NAS??</li>
</ul>
</li>
</ul>
</li>
<li><p>文件系统与存储设备是啥关系?</p>
</li>
<li><p>什么是POSIX接口? 为啥</p>
</li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>books</tag>
        <tag>2021</tag>
        <tag>GFS</tag>
        <tag>Google</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次Java Lambda转List为Map时 Duplicate key异常</title>
    <url>//2021-11-15-java-lambda-list-to-map/</url>
    <content><![CDATA[<h1 id="错误堆栈"><a href="#错误堆栈" class="headerlink" title="错误堆栈"></a>错误堆栈</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>IllegalStateException</span><span class="token operator">:</span> <span class="token class-name">Duplicate</span> key <span class="token number">21</span>
	at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span>Collectors</span><span class="token punctuation">.</span>lambda$throwingMerger$<span class="token function">0</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">133</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>HashMap</span><span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1254</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span>Collectors</span><span class="token punctuation">.</span>lambda$toMap$<span class="token function">58</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1320</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span>ReduceOps</span>$<span class="token number">3</span>ReducingSink<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">ReduceOps</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">169</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>ArrayList</span>$<span class="token class-name">ArrayListSpliterator</span><span class="token punctuation">.</span><span class="token function">forEachRemaining</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1382</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span>AbstractPipeline</span><span class="token punctuation">.</span><span class="token function">copyInto</span><span class="token punctuation">(</span><span class="token class-name">AbstractPipeline</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">481</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span>AbstractPipeline</span><span class="token punctuation">.</span><span class="token function">wrapAndCopyInto</span><span class="token punctuation">(</span><span class="token class-name">AbstractPipeline</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">471</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span>ReduceOps</span>$<span class="token class-name">ReduceOp</span><span class="token punctuation">.</span><span class="token function">evaluateSequential</span><span class="token punctuation">(</span><span class="token class-name">ReduceOps</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">708</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span>AbstractPipeline</span><span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token class-name">AbstractPipeline</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">234</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span>ReferencePipeline</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">ReferencePipeline</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">499</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>cjf<span class="token punctuation">.</span>java<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>jdk8<span class="token punctuation">.</span></span>StreamTest</span><span class="token punctuation">.</span><span class="token function">testStreamMap_duplicateKey</span><span class="token punctuation">(</span><span class="token class-name">StreamTest</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">90</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span>NativeMethodAccessorImpl</span><span class="token punctuation">.</span><span class="token function">invoke0</span><span class="token punctuation">(</span><span class="token class-name">Native</span> <span class="token class-name">Method</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span>NativeMethodAccessorImpl</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">NativeMethodAccessorImpl</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">62</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span>DelegatingMethodAccessorImpl</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">DelegatingMethodAccessorImpl</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">43</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span>Method</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Method</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">498</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runners<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span>FrameworkMethod</span>$<span class="token number">1.</span><span class="token function">runReflectiveCall</span><span class="token punctuation">(</span><span class="token class-name">FrameworkMethod</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">50</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>runners<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span>ReflectiveCallable</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ReflectiveCallable</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runners<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span>FrameworkMethod</span><span class="token punctuation">.</span><span class="token function">invokeExplosively</span><span class="token punctuation">(</span><span class="token class-name">FrameworkMethod</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">47</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>runners<span class="token punctuation">.</span>statements<span class="token punctuation">.</span></span>InvokeMethod</span><span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token class-name">InvokeMethod</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">17</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runners<span class="token punctuation">.</span></span>ParentRunner</span><span class="token punctuation">.</span><span class="token function">runLeaf</span><span class="token punctuation">(</span><span class="token class-name">ParentRunner</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">325</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runners<span class="token punctuation">.</span></span>BlockJUnit4ClassRunner</span><span class="token punctuation">.</span><span class="token function">runChild</span><span class="token punctuation">(</span><span class="token class-name">BlockJUnit4ClassRunner</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">78</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runners<span class="token punctuation">.</span></span>BlockJUnit4ClassRunner</span><span class="token punctuation">.</span><span class="token function">runChild</span><span class="token punctuation">(</span><span class="token class-name">BlockJUnit4ClassRunner</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">57</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runners<span class="token punctuation">.</span></span>ParentRunner</span>$<span class="token number">3.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ParentRunner</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">290</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runners<span class="token punctuation">.</span></span>ParentRunner</span>$<span class="token number">1.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token class-name">ParentRunner</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">71</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runners<span class="token punctuation">.</span></span>ParentRunner</span><span class="token punctuation">.</span><span class="token function">runChildren</span><span class="token punctuation">(</span><span class="token class-name">ParentRunner</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">288</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runners<span class="token punctuation">.</span></span>ParentRunner</span><span class="token punctuation">.</span>access$<span class="token function">000</span><span class="token punctuation">(</span><span class="token class-name">ParentRunner</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">58</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runners<span class="token punctuation">.</span></span>ParentRunner</span>$<span class="token number">2.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token class-name">ParentRunner</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">268</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runners<span class="token punctuation">.</span></span>ParentRunner</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ParentRunner</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">363</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span>JUnitCore</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">JUnitCore</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">137</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>intellij<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span>JUnit4IdeaTestRunner</span><span class="token punctuation">.</span><span class="token function">startRunnerWithArgs</span><span class="token punctuation">(</span><span class="token class-name">JUnit4IdeaTestRunner</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">68</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>intellij<span class="token punctuation">.</span>rt<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span>IdeaTestRunner</span>$<span class="token class-name">Repeater</span><span class="token punctuation">.</span><span class="token function">startRunnerWithArgs</span><span class="token punctuation">(</span><span class="token class-name">IdeaTestRunner</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">33</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>intellij<span class="token punctuation">.</span>rt<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span>JUnitStarter</span><span class="token punctuation">.</span><span class="token function">prepareStreamsAndStart</span><span class="token punctuation">(</span><span class="token class-name">JUnitStarter</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">230</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>intellij<span class="token punctuation">.</span>rt<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span>JUnitStarter</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">JUnitStarter</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">58</span><span class="token punctuation">)</span>
<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">255</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="错误代码"><a href="#错误代码" class="headerlink" title="错误代码"></a>错误代码</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Instance</span><span class="token punctuation">></span></span> instanceMap <span class="token operator">=</span> instances<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">Instance</span><span class="token operator">::</span><span class="token function">getInstanceId</span><span class="token punctuation">,</span> e <span class="token operator">-></span> e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h1 id="FIX"><a href="#FIX" class="headerlink" title="FIX"></a>FIX</h1><p>需要增加mergeFunction()处理方法, 即 Collectors.toMap()中第三个参数.</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Instance</span><span class="token punctuation">></span></span> instanceMap <span class="token operator">=</span> instances<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">Instance</span><span class="token operator">::</span><span class="token function">getInstanceId</span><span class="token punctuation">,</span> e <span class="token operator">-></span> e<span class="token punctuation">,</span> <span class="token punctuation">(</span>k1<span class="token punctuation">,</span> k2<span class="token punctuation">)</span> <span class="token operator">-></span> k2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h1><p><a href="https://blog.csdn.net/blueheart20/article/details/106326548/">https://blog.csdn.net/blueheart20/article/details/106326548/</a></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>learn-from-failure</tag>
        <tag>java</tag>
        <tag>lambda</tag>
      </tags>
  </entry>
  <entry>
    <title>鸟哥的Linux私房菜笔记</title>
    <url>//2021-11-18-Linux-Basic/</url>
    <content><![CDATA[<h1 id="设备与在Linux中文件名"><a href="#设备与在Linux中文件名" class="headerlink" title="设备与在Linux中文件名"></a>设备与在Linux中文件名</h1><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>books</tag>
        <tag>2021</tag>
        <tag>GFS</tag>
        <tag>Google</tag>
      </tags>
  </entry>
  <entry>
    <title>关于GPU封装与散热方式的笔记</title>
    <url>//2021-11-18-gpu-heat-dissipation/</url>
    <content><![CDATA[<h1 id="GPU散热方式"><a href="#GPU散热方式" class="headerlink" title="GPU散热方式"></a>GPU散热方式</h1><h2 id="被动散热"><a href="#被动散热" class="headerlink" title="被动散热"></a>被动散热</h2><ul>
<li><p>1997年, NVIDIA Riva 128显卡</p>
<ul>
<li>性能较低, 发热较低, 自然散热</li>
</ul>
</li>
<li><p>1998年, NVIDIA Riva TNT显卡</p>
<ul>
<li>性能功耗提升, 铝制散热片, 纯被动散热<br><img data-src="/_assets/2021-11-19-gpu-heat-dissipation/img_1.png" alt="img_1.png"></li>
<li>铝片工艺<ul>
<li>挤铝工艺: 一大片铝块高温挤压塑型</li>
<li>铸造工艺</li>
<li>铲齿工艺</li>
<li>切削工艺</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="主动散热-鳍片-风扇"><a href="#主动散热-鳍片-风扇" class="headerlink" title="主动散热: 鳍片+风扇"></a>主动散热: 鳍片+风扇</h2><ul>
<li>1999年, NVIDIA GeForce 256<ul>
<li>正式提出了GPU概念</li>
<li>鳍片 + 4厘米风扇, 主动散热</li>
</ul>
</li>
</ul>
<h2 id="主动散热-热管-鳍片-风扇"><a href="#主动散热-热管-鳍片-风扇" class="headerlink" title="主动散热: 热管+鳍片+风扇"></a>主动散热: 热管+鳍片+风扇</h2><p><img data-src="/../_assets/2021-11-19-gpu-heat-dissipation/img_3.png" alt="img_3.png"></p>
<h3 id="热管-HEAT-PIPE"><a href="#热管-HEAT-PIPE" class="headerlink" title="热管(HEAT PIPE)"></a>热管(HEAT PIPE)</h3><h4 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h4><ul>
<li>中空的铜管</li>
<li>内部填充相变冷却液</li>
<li>管子内部是烧结壁, 便于液体蒸发, 到冷区冷凝通过毛细现象返回热区</li>
<li>主流的热管规格是6mm 或 8mm<ul>
<li>热承载能力相差将近一倍<br><img data-src="/../_assets/2021-11-19-gpu-heat-dissipation/img_4.png" alt="img_4.png"></li>
</ul>
</li>
</ul>
<h4 id="热管数量"><a href="#热管数量" class="headerlink" title="热管数量"></a>热管数量</h4><ul>
<li>通常越多越好, 但是有边际效应</li>
</ul>
<h3 id="鳍片"><a href="#鳍片" class="headerlink" title="鳍片"></a>鳍片</h3><ul>
<li>热管与鳍片接触方式: <ul>
<li>方式1: 穿Fin工艺<ul>
<li>热管直接插入鳍片内</li>
<li>但长时间使用, 由于鳍片与热管热胀冷缩程度不同导致中间有缝隙, 从而影响散热效果</li>
<li>工艺简单, 成本较低, 良品率高</li>
</ul>
</li>
<li>方式2: 回流焊工艺<ul>
<li>直接用金属焊料把热管与鳍片焊接起来<br><img data-src="/../_assets/2021-11-19-gpu-heat-dissipation/img_5.png" alt="img_5.png"></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="热管-amp-GPU核心接触方案"><a href="#热管-amp-GPU核心接触方案" class="headerlink" title="热管&amp;GPU核心接触方案"></a>热管&amp;GPU核心接触方案</h3><ul>
<li>热管直触方案: <ul>
<li>问题1: 长时间热胀冷缩会导致空腔, 从而影响散热</li>
<li>问题2: 热管壁打磨, 导致使用寿命变短<br><img data-src="/../_assets/2021-11-19-gpu-heat-dissipation/img_6.png" alt="img_6.png"></li>
</ul>
</li>
<li>铜底方案:<ul>
<li>便于将热量均摊到各个热管上<br><img data-src="/../_assets/2021-11-19-gpu-heat-dissipation/img_7.png" alt="img_7.png"></li>
</ul>
</li>
<li>均热板方案: <ul>
<li>板状的热管, 内部也是液体蒸发, 气体冷凝传递热量</li>
</ul>
</li>
</ul>
<h3 id="风扇"><a href="#风扇" class="headerlink" title="风扇"></a>风扇</h3><h4 id="下压式显卡"><a href="#下压式显卡" class="headerlink" title="下压式显卡"></a>下压式显卡</h4><ul>
<li>工作方式<ul>
<li>风扇面吸风</li>
<li>四周出风</li>
</ul>
</li>
<li>优点:<ul>
<li>安静</li>
</ul>
</li>
<li>缺点:<ul>
<li>依赖机箱通风<br><img data-src="/../_assets/2021-11-19-gpu-heat-dissipation/img_8.png" alt="img_8.png"></li>
</ul>
</li>
</ul>
<h4 id="涡轮式显卡"><a href="#涡轮式显卡" class="headerlink" title="涡轮式显卡"></a>涡轮式显卡</h4><ul>
<li>缺点:<ul>
<li>转速偏高, 噪音偏大</li>
</ul>
</li>
</ul>
<h2 id="水冷"><a href="#水冷" class="headerlink" title="水冷"></a>水冷</h2><ul>
<li><p>由于GPU通常都比CPU面积要大, 因此水冷对于GPU相比对于CPU来说, 提升效果更加明显.<br><img data-src="/../_assets/2021-11-19-gpu-heat-dissipation/img_9.png" alt="img_9.png"></p>
</li>
<li><p>英伟达显卡都自带了GPU Boost, 自动超频机制</p>
<ul>
<li>出厂1700MHz的显卡, 往往跑在接近2000MHz频率上</li>
<li>功耗, 电压, 温度</li>
<li>更好的散热, 能让GPU Boost维持得更加稳定<br><img data-src="/../_assets/2021-11-19-gpu-heat-dissipation/img_10.png" alt="img_10.png"></li>
</ul>
</li>
</ul>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h1><ul>
<li><a href="https://www.zhihu.com/zvideo/1433777767221071872">全网最详细显卡散热工作原理科普</a></li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>common-sense</tag>
        <tag>throughput</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机常用接口标准与速度的常识</title>
    <url>//2021-11-18-throughput/</url>
    <content><![CDATA[<h1 id="常见接口协议速度"><a href="#常见接口协议速度" class="headerlink" title="常见接口协议速度"></a>常见接口协议速度</h1><hr>
<h2 id="内存接口"><a href="#内存接口" class="headerlink" title="内存接口"></a>内存接口</h2><h3 id="DDR-x2F-DIMM"><a href="#DDR-x2F-DIMM" class="headerlink" title="DDR&#x2F;DIMM"></a>DDR&#x2F;DIMM</h3><ul>
<li>内存的标准接口.</li>
<li>DDR与DIMM区别:<ul>
<li>DIMM是指针脚插槽, 也就是物理结构方面的分类</li>
<li>而SDRAM和DDR都是内部技术方面的分类</li>
</ul>
</li>
</ul>
<h4 id="Spec"><a href="#Spec" class="headerlink" title="Spec"></a>Spec</h4><table>
<thead>
<tr>
<th>SDRAM&#x2F;DDR</th>
<th>型號</th>
<th>資料寬度(bit)</th>
<th>內部時脈(MHz)</th>
<th>頻率速度</th>
<th>頻寬(頻率x寬度)</th>
</tr>
</thead>
<tbody><tr>
<td>DDR</td>
<td>DDR-266</td>
<td>64</td>
<td>133</td>
<td>266</td>
<td>2.1GBytes&#x2F;sec</td>
</tr>
<tr>
<td>DDR</td>
<td>DDR-400</td>
<td>64</td>
<td>200</td>
<td>400</td>
<td>3.2GBytes&#x2F;sec</td>
</tr>
<tr>
<td>DDR</td>
<td>DDR2-800</td>
<td>64</td>
<td>200</td>
<td>800</td>
<td>6.4GBytes&#x2F;sec</td>
</tr>
<tr>
<td>DDR</td>
<td>DDR3-1600</td>
<td>64</td>
<td>200</td>
<td>1600</td>
<td>12.8GBytes&#x2F;sec</td>
</tr>
<tr>
<td>DDR</td>
<td>DDR4-2133</td>
<td>64</td>
<td>200</td>
<td>2133</td>
<td>17.0GBytes&#x2F;sec</td>
</tr>
<tr>
<td>DDR</td>
<td>DDR4-2400</td>
<td>64</td>
<td>200</td>
<td>2400</td>
<td>19.2GBytes&#x2F;sec</td>
</tr>
<tr>
<td>DDR</td>
<td>DDR4-2666</td>
<td>64</td>
<td>200</td>
<td>2666</td>
<td>21.3GBytes&#x2F;sec</td>
</tr>
<tr>
<td>DDR</td>
<td>DDR4-3200</td>
<td>64</td>
<td>200</td>
<td>3200</td>
<td>25.6GBytes&#x2F;sec</td>
</tr>
</tbody></table>
<p>update 2022-10-9 23:03:35: 当前DDR5已经开始逐步铺货了, 可以知道未来两三年DDR5会成为主流.</p>
<h4 id="DIMM接口图片"><a href="#DIMM接口图片" class="headerlink" title="DIMM接口图片"></a>DIMM接口图片</h4><p><img data-src="/../_assets/2021-11-19-throughput/2021-11-19-throughput-dimm.png" alt="2021-11-19-throughput-dimm.png.png"></p>
<h4 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h4><ul>
<li>by 2021年, DDR4是主流, 2021年9月, SK Hynix出产第一批DDR5内存</li>
<li>DDR2-800的速度基本上跟HDMI 2.1速度差不多了. 果然整体还是DDR速度最快</li>
</ul>
<h2 id="总线接口DMI"><a href="#总线接口DMI" class="headerlink" title="总线接口DMI"></a>总线接口DMI</h2><h2 id="网络接口"><a href="#网络接口" class="headerlink" title="网络接口"></a>网络接口</h2><h3 id="RJ45"><a href="#RJ45" class="headerlink" title="RJ45"></a>RJ45</h3><h3 id="光纤"><a href="#光纤" class="headerlink" title="光纤"></a>光纤</h3><ul>
<li>百兆(100Mbps, 即10MB&#x2F;s), 是当前(2022年)家用的主流, 是 SATA 1.0 标称速度的1&#x2F;10;</li>
<li>千兆(1Gbps, 即100MB&#x2F;s), 是当前(2022年)服务器虚拟机的主流, 大约等于 SATA 1.0 的标称速度(所以在云上跑满带宽时, 磁盘大概率不会成为瓶颈);</li>
<li>万兆(10Gbps, 即1GB&#x2F;s), 是当前(2022年)物理服务器的主流, 已经大于的 SATA 3.0 的标称速度. 此时磁盘可能成为瓶颈;</li>
<li>25G(25Gbps, 即2.5GB&#x2F;s), 当前(2022年)物理服务器逐步在普及, 基本等于 DDR1 的标称速度, 是当前(by 2022年)主流的DDR4标称速度的1&#x2F;10;</li>
<li>50G(50Gbps, 即5GB&#x2F;s), 当前(2022年)物理服务器的前沿(尚未上量), 基本等于 DDR2 的标称速度</li>
</ul>
<h2 id="硬盘接口"><a href="#硬盘接口" class="headerlink" title="硬盘接口"></a>硬盘接口</h2><h3 id="SATA"><a href="#SATA" class="headerlink" title="SATA"></a>SATA</h3><p>一般老的HDD硬盘(2021年), 都用SATA接口: </p>
<h4 id="Spec-1"><a href="#Spec-1" class="headerlink" title="Spec"></a>Spec</h4><table>
<thead>
<tr>
<th>版本</th>
<th>頻寬 (Gbit&#x2F;s)</th>
<th>速度 (MByte&#x2F;s)</th>
</tr>
</thead>
<tbody><tr>
<td>SATA 1.0</td>
<td>1.5</td>
<td>150</td>
</tr>
<tr>
<td>SATA 2.0</td>
<td>3</td>
<td>300</td>
</tr>
<tr>
<td>SATA 3.0</td>
<td>6</td>
<td>600</td>
</tr>
</tbody></table>
<h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><p>自己组装电脑时单独安装了个SATA硬盘. </p>
<ul>
<li>分为数据线&amp;供电线. 数据线7针</li>
<li>需要单独供电</li>
<li>与之对比的是PCIE M.2接口, 可以用来对接SSD硬盘, 类似于一个口香糖插在主板上, 无需单独供电, 整体集成度更高.</li>
<li>个人实际使用下来, SATA 3.0 读取速度大概只能到150MB&#x2F;s左右(远没有达到标称速度); 与之对比的是M.2 SSD 读取速度到600MB&#x2F;s(也没有达到标称速度)</li>
</ul>
<h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><p><img data-src="/../_assets/2021-11-19-throughput/2021-11-19-throughput-sata.png" alt="2021-11-19-throughput-sata.png"></p>
<h3 id="PCIE-x2F-M-2接口"><a href="#PCIE-x2F-M-2接口" class="headerlink" title="PCIE&#x2F;M.2接口"></a>PCIE&#x2F;M.2接口</h3><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul>
<li>既是通道，也是接口</li>
</ul>
<p>一般新的SSD硬盘(2021年), 显卡等, 都用PCIE接口:</p>
<ul>
<li>PCI-E体积太大</li>
<li>M.2接口可以理解为就是PCI-E接口，只是换了个形状而已(但走的通道是PCIE通道)</li>
<li>PCI-E接口目前最大的作用就是插显卡，除了显卡还有无线网卡，万兆有线网卡这些高带宽设备</li>
<li>PCI-E接口也可以转接成很多接口，比如USB3.0，Type-c，雷电3，又或者U.2，M.2</li>
<li>当前(2021年12月)主流的是PCIE3</li>
</ul>
<h4 id="Spec-2"><a href="#Spec-2" class="headerlink" title="Spec"></a>Spec</h4><table>
<thead>
<tr>
<th>規格</th>
<th>1x頻寬</th>
<th>16x頻寬</th>
</tr>
</thead>
<tbody><tr>
<td>PCIe</td>
<td>1.0</td>
<td>250MByte&#x2F;s</td>
</tr>
<tr>
<td>PCIe</td>
<td>2.0</td>
<td>500MByte&#x2F;s</td>
</tr>
<tr>
<td>PCIe</td>
<td>3.0</td>
<td>~1GByte&#x2F;s</td>
</tr>
<tr>
<td>PCIe</td>
<td>4.0</td>
<td>~2GByte&#x2F;s</td>
</tr>
</tbody></table>
<h4 id="图片-1"><a href="#图片-1" class="headerlink" title="图片"></a>图片</h4><p><img data-src="/../_assets/2021-11-19-throughput/2021-11-19-throughput-pcie.png" alt="2021-11-19-throughput-pcie.png"></p>
<h2 id="外设"><a href="#外设" class="headerlink" title="外设"></a>外设</h2><h3 id="USB"><a href="#USB" class="headerlink" title="USB"></a>USB</h3><p>U盘等</p>
<h4 id="Spec-3"><a href="#Spec-3" class="headerlink" title="Spec"></a>Spec</h4><table>
<thead>
<tr>
<th>版本</th>
<th>頻寬 (Gbit&#x2F;s)</th>
<th>速度 (MByte&#x2F;s)</th>
</tr>
</thead>
<tbody><tr>
<td>USB 1.0</td>
<td>12</td>
<td>1.5</td>
</tr>
<tr>
<td>USB 2.0</td>
<td>480</td>
<td>60</td>
</tr>
<tr>
<td>USB 3.0</td>
<td>5G</td>
<td>500</td>
</tr>
<tr>
<td>USB 3.1</td>
<td>10G</td>
<td>1000</td>
</tr>
</tbody></table>
<h4 id="图片-2"><a href="#图片-2" class="headerlink" title="图片"></a>图片</h4><h3 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h3><h2 id="视频接口"><a href="#视频接口" class="headerlink" title="视频接口"></a>视频接口</h2><h3 id="VGA"><a href="#VGA" class="headerlink" title="VGA"></a>VGA</h3><p>模拟信号</p>
<h3 id="DP-DisplayPort"><a href="#DP-DisplayPort" class="headerlink" title="DP(DisplayPort)"></a>DP(DisplayPort)</h3><h3 id="雷电-ThunderBolt"><a href="#雷电-ThunderBolt" class="headerlink" title="雷电(ThunderBolt)"></a>雷电(ThunderBolt)</h3><h4 id="Spec-4"><a href="#Spec-4" class="headerlink" title="Spec"></a>Spec</h4><table>
<thead>
<tr>
<th>版本</th>
<th>頻寬 (Gbit&#x2F;s)</th>
<th>速度 (MByte&#x2F;s)</th>
</tr>
</thead>
<tbody><tr>
<td>Thunderbolt 1</td>
<td>10000bps</td>
<td>1.25GB</td>
</tr>
<tr>
<td>Thunderbolt 2</td>
<td>20000bps</td>
<td>2.5GB</td>
</tr>
</tbody></table>
<h4 id="图片-3"><a href="#图片-3" class="headerlink" title="图片"></a>图片</h4><p><img data-src="/../_assets/2021-11-19-throughput/2021-11-19-throughput-thunderbolt.png" alt="2021-11-19-throughput-thunderbolt.png"></p>
<h3 id="HDMI"><a href="#HDMI" class="headerlink" title="HDMI"></a>HDMI</h3><h4 id="Spec-5"><a href="#Spec-5" class="headerlink" title="Spec"></a>Spec</h4><ul>
<li>2.1 标准: 48Gbps –&gt; 6GB</li>
<li>2.0 标准: 18Gbps –&gt; 2.25GB<br><img data-src="/../_assets/2021-11-19-throughput/2021-11-19-throughput-hdmi.png" alt="2021-11-19-throughput-hdmi.png"></li>
</ul>
<h4 id="图片-4"><a href="#图片-4" class="headerlink" title="图片"></a>图片</h4><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><h2 id="HDMI传输分析"><a href="#HDMI传输分析" class="headerlink" title="HDMI传输分析"></a>HDMI传输分析</h2><hr>
<ul>
<li>单个像素点占用空间<ul>
<li>黑白二值图像, 一个像素只需要1bit</li>
<li>256种状态的灰度图像, 需要8bit, 成为”真彩色”, 称为色深(Color Depth), 色深的位数越高，越能细腻诠释色彩的色阶变化。 </li>
<li>由于屏幕单个色块是由RGB组成, 因此 8*3&#x3D;24bit</li>
<li>因此色彩数量: 2^24&#x3D;1670万色<br><img data-src="/../_assets/2021-11-19-throughput/2021-11-19-throughput-pixel.png" alt="img.png"></li>
</ul>
</li>
</ul>
<p>选购显示设备时，会经常看见6bit、8bit、10bit等.<br>当前(2021年)主流的是8bit</p>
<hr>
<p>以4K清晰度, FPS 120Hz, 游戏为例, 需要传输的带宽是怎样的?</p>
<ul>
<li>4096<em>2160</em>24*120 &#x3D; 25,480,396,800 bps &#x3D;23.73 Gbps 即HDMI 2.0不够</li>
</ul>
<h2 id="MacBook-Pro分析"><a href="#MacBook-Pro分析" class="headerlink" title="MacBook Pro分析"></a>MacBook Pro分析</h2><hr>
<p>自己使用的电脑 </p>
<ul>
<li>MacBook Pro (Retina, 15-inch, Mid 2015), <ul>
<li>256GB的SSD硬盘, 接口使用的SATA</li>
<li>内置键盘, 触摸板, 使用USB 3.0</li>
<li>2块1600MHz的DDR3 内存</li>
<li>2个ThunderBolt 2.0接口</li>
</ul>
</li>
<li>MacBook Pro (Retina, 16-inch, Mid 2020), 使用的是256GB的SSD硬盘, 接口使用的Nvme</li>
</ul>
<h2 id="Z390总线样例分析"><a href="#Z390总线样例分析" class="headerlink" title="Z390总线样例分析"></a>Z390总线样例分析</h2><p><img data-src="/../_assets/2021-11-19-throughput/2021-11-19-throughput-intel-z390.png" alt="2021-11-19-throughput-intel-z390.png"></p>
<ul>
<li>CPU直连一条PCIE 3.0*16, 可以插入显卡&#x2F;SSD</li>
<li>CPU直连2666MHz的4个DDR4 DIMM插槽</li>
<li>CPU直连3个独立的HDMI&#x2F;DP接口, 具体标准? 速率?</li>
<li>CPU通过DMI 3.0连接到南桥芯片组(Intel Z390 Chipset), <ul>
<li>南桥芯片组也叫 PCH芯片</li>
<li>通过南桥连接 PCIE3.0*24</li>
<li>SATA接口</li>
<li>USB接口</li>
<li>Optane Memory存储</li>
<li>声卡</li>
<li>无线网卡</li>
<li>PCIE存储设备</li>
<li>蓝牙</li>
<li>PCIE千兆网卡</li>
</ul>
</li>
<li>所以有时候显卡虽然插入了PCIE插槽, 需要分清楚, 是直连CPU的PCIE还是走南桥绕道的PCIE</li>
<li>雷电3，M.2，U.2目前都无法突破X4带宽，就是被这个DMI牙签总线限制了</li>
</ul>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h1><ul>
<li><a href="https://www.jianshu.com/p/1fc8c9926ac1">各种通信接口速率</a></li>
<li><a href="https://www.zhihu.com/collection/212284966">PCI-E通道是个什么东西？他是干啥的？</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/38984035">CPU总线进化</a></li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>common-sense</tag>
        <tag>throughput</tag>
      </tags>
  </entry>
  <entry>
    <title>常用的Git命令</title>
    <url>//2021-11-22-git/</url>
    <content><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><ul>
<li>HEAD: 默认是本地已commit的最新commit_id</li>
<li>origion&#x2F;master: 默认是远程已push的最新commit_id</li>
</ul>
<h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><h2 id="本地分支"><a href="#本地分支" class="headerlink" title="本地分支:"></a>本地分支:</h2><h3 id="新建"><a href="#新建" class="headerlink" title="新建:"></a>新建:</h3><ul>
<li>远程不存在: git branch ${branch_name}</li>
<li>远程存在: git checkout -b ${branch_name} origin&#x2F;${branch_name}</li>
</ul>
<h3 id="切换"><a href="#切换" class="headerlink" title="切换:"></a>切换:</h3><ul>
<li>git checkout ${branch_name}</li>
</ul>
<h3 id="查看"><a href="#查看" class="headerlink" title="查看:"></a>查看:</h3><ul>
<li>列出本地所有分支: git branch</li>
<li>列出当前分支: git branch 会在当前分支前加星号.</li>
</ul>
<h3 id="修改"><a href="#修改" class="headerlink" title="修改:"></a>修改:</h3><h3 id="删除-需要切换到其他分支-不能在当前分支下删除当前分支"><a href="#删除-需要切换到其他分支-不能在当前分支下删除当前分支" class="headerlink" title="删除:(需要切换到其他分支, 不能在当前分支下删除当前分支)"></a>删除:(需要切换到其他分支, 不能在当前分支下删除当前分支)</h3><ul>
<li>未跟踪远程分支: git branch -d ${branch_name}</li>
<li>已跟踪远程分支:</li>
</ul>
<ol>
<li>git branch -d ${branch_name} &#x2F;&#x2F;删除本地分支</li>
<li>git push origin –delete ${branch_name} &#x2F;&#x2F;删除远程分支</li>
</ol>
<h2 id="远程分支"><a href="#远程分支" class="headerlink" title="远程分支:"></a>远程分支:</h2><h3 id="推送"><a href="#推送" class="headerlink" title="推送:"></a>推送:</h3><ul>
<li>远程分支不存在(则新建): git push origin ${branch_name}</li>
<li>远程分支存在: git push</li>
</ul>
<h3 id="新建-1"><a href="#新建-1" class="headerlink" title="新建:"></a>新建:</h3><h3 id="查看-1"><a href="#查看-1" class="headerlink" title="查看:"></a>查看:</h3><ul>
<li>远程仓库具体地址: git remote -v</li>
<li>远程分支列表: git branch -a; git branch -r</li>
</ul>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ul>
<li>仅删除远程分支:</li>
</ul>
<ol>
<li>git branch -d -r origin&#x2F;${branch_name}</li>
<li>git push origin :${branch_name}</li>
</ol>
<ul>
<li>删除本地+远程:</li>
</ul>
<ol>
<li>git branch -d ${branch_name} &#x2F;&#x2F;删除本地分支</li>
<li>git push origin –delete ${branch_name} &#x2F;&#x2F;删除远程分支</li>
</ol>
<h2 id="本地-amp-远程关联关系"><a href="#本地-amp-远程关联关系" class="headerlink" title="本地&amp;远程关联关系:"></a>本地&amp;远程关联关系:</h2><h3 id="查看-2"><a href="#查看-2" class="headerlink" title="查看:"></a>查看:</h3><p>git branch -vv</p>
<h3 id="添加绑定"><a href="#添加绑定" class="headerlink" title="添加绑定:"></a>添加绑定:</h3><ul>
<li>远程分支已存在:</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch --set-upstream <span class="token variable">$&#123;branch_name&#125;</span> origin/<span class="token variable">$&#123;branch_name&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>远程分支未存在:</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push -u origin <span class="token variable">$&#123;branch_name&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="删除-1"><a href="#删除-1" class="headerlink" title="删除:"></a>删除:</h3><ul>
<li>仅删除绑定关系, 本地与远程分支都不删除: git branch –unset-upstream</li>
<li>仅删除远程分支: git branch -d -r origin&#x2F;${remote_branch}</li>
</ul>
<h1 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h1><h2 id="查看-3"><a href="#查看-3" class="headerlink" title="查看"></a>查看</h2><ul>
<li>当前分支: git log</li>
<li>指定分支: git log ${branch_name}</li>
</ul>
<h1 id="变更"><a href="#变更" class="headerlink" title="变更"></a>变更</h1><h2 id="未stage的变更"><a href="#未stage的变更" class="headerlink" title="未stage的变更:"></a>未stage的变更:</h2><ul>
<li>添加至stage: git add</li>
<li>添加至stash: git stash save “comments”</li>
<li>查看diff具体内容: git diff</li>
<li>丢弃(覆盖本地变更): git checkout .</li>
<li>删除本地(未加入.gitigonre的文件): git clean -f</li>
<li>删除本地目录: git clean -fd</li>
<li>删除本地(已经加入.gitigonre的文件): git clean -fX</li>
</ul>
<h2 id="已stage-未commit的变更"><a href="#已stage-未commit的变更" class="headerlink" title="已stage, 未commit的变更:"></a>已stage, 未commit的变更:</h2><ul>
<li>添加至本地repo: git commit -m “comments”</li>
<li>查看diff具体内容: git diff HEAD</li>
<li>丢弃<ul>
<li>变更内容退回至unstage: git reset HEAD .</li>
<li>变更内容退回至彻底丢弃: git reset –hard HEAD .</li>
</ul>
</li>
</ul>
<h2 id="已commit-未push的变更"><a href="#已commit-未push的变更" class="headerlink" title="已commit, 未push的变更:"></a>已commit, 未push的变更:</h2><ul>
<li>push: git push</li>
<li>查看diff具体内容:<ul>
<li>git log &#x2F;&#x2F; 拿到commit_id</li>
<li>git diff origin&#x2F;master commit_id</li>
</ul>
</li>
<li>丢弃:<ul>
<li>变更内容退回至unstage: git reset commit_id</li>
<li>变更内容退回至彻底丢弃:  git reset –hard commit_id</li>
</ul>
</li>
</ul>
<h2 id="已push的变更"><a href="#已push的变更" class="headerlink" title="已push的变更:"></a>已push的变更:</h2><ul>
<li>查看diff具体内容: git diff commit_a commit_b 或者 git show commit_no</li>
<li>丢弃:</li>
</ul>
<h2 id="stash的详细变更信息"><a href="#stash的详细变更信息" class="headerlink" title="stash的详细变更信息"></a>stash的详细变更信息</h2><ul>
<li>查看stash列表: git stash list</li>
<li>将stash的内容进行unstage: git pop stash_id</li>
<li>查看stash具体内容(而不pop出来):  git stash show -p stash_id</li>
</ul>
<h2 id="将stash内容删除"><a href="#将stash内容删除" class="headerlink" title="将stash内容删除"></a>将stash内容删除</h2><p>git stash drop stash_id</p>
<h1 id="问题排查-amp-修复"><a href="#问题排查-amp-修复" class="headerlink" title="问题排查&amp;修复"></a>问题排查&amp;修复</h1><h2 id="SSL"><a href="#SSL" class="headerlink" title="SSL"></a>SSL</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">LibreSSL SSL_connect: SSL_ERROR_SYSCALL <span class="token keyword">in</span> connection to github.com:443<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global --unset http.proxy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


<h1 id="常用技巧"><a href="#常用技巧" class="headerlink" title="常用技巧"></a>常用技巧</h1><ul>
<li>压缩commit</li>
<li>resolve conflicts</li>
<li>cherry-pick</li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>code-snippets</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>常用的Linux命令</title>
    <url>//2021-11-22-linux-scripts/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><h1 id="常用Linux命令"><a href="#常用Linux命令" class="headerlink" title="常用Linux命令"></a>常用Linux命令</h1><h2 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h2><ul>
<li>文件按固定行数切分</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">split</span> -l <span class="token number">20</span> cn-hangzhou.csv cn-hangzhou-<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>问题是: 生成的文件都是没有后缀名的, 如下可以使用xargs, 统一增加后缀名, 如下：</p>
<ul>
<li>mac:</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">split</span> -l <span class="token number">20</span> cn-hangzhou.csv cn-hangzhou- <span class="token operator">&amp;&amp;</span> <span class="token function">ls</span> <span class="token operator">|</span> <span class="token function">grep</span> cn-hangzhou- <span class="token operator">|</span> <span class="token function">xargs</span> -n1 -I<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token function">mv</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>linux:</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">split</span> -l <span class="token number">20</span> cn-hangzhou.csv cn-hangzhou- <span class="token operator">&amp;&amp;</span> <span class="token function">ls</span> <span class="token operator">|</span> <span class="token function">grep</span> cn-hangzhou- <span class="token operator">|</span> <span class="token function">xargs</span> -n1 -i<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token function">mv</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>文件按照某列进行排序</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sort</span> -n -k <span class="token number">1</span> -t , sample.csv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>文件查看某列去重数据</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">awk</span> -F<span class="token string">','</span> <span class="token string">'&#123;print $1&#125;'</span> sample.csv <span class="token operator">|</span> <span class="token function">sort</span> -n <span class="token operator">|</span> <span class="token function">uniq</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>计算文件中相同的行数量, 并按照数量倒序排列:</li>
</ul>
<p>todo: </p>
<ul>
<li><p>grep正则表达式<br>grep正则表达式元字符集（基本集）<br>^锚定行的开始 如：’^grep’匹配所有以grep开头的行。<br>$锚定行的结束 如：’grep$’匹配所有以grep结尾的行。</p>
</li>
<li><p>JSON处理</p>
</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jq<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>计算文件md5值</li>
</ul>
<ul>
<li><p>Linux: </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">md5sum a.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>Mac: </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">md5 a.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul>
<ul>
<li>创建空的大文件(全被0占据的文件, 而非打洞)</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">fallocate -l 50M /data/web/www/html/b.zip
<span class="token comment">## -l: 指定文件的长度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="目录管理"><a href="#目录管理" class="headerlink" title="目录管理"></a>目录管理</h2><ul>
<li>查看目录大小</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">du</span> -h --max-depth<span class="token operator">=</span><span class="token number">1</span> /home/admin/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>查看目录下文件大小</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">du</span> -sh * <span class="token operator">|</span> <span class="token function">sort</span> -nr <span class="token operator">|</span> <span class="token function">head</span>
<span class="token function">du</span> -sh * <span class="token operator">|</span> <span class="token function">sort</span> -nr <span class="token operator">|</span> <span class="token function">fgrep</span> <span class="token string">"G"</span> <span class="token operator">|</span> <span class="token function">head</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h2><h3 id="top"><a href="#top" class="headerlink" title="top"></a>top</h3><h4 id="进程排序"><a href="#进程排序" class="headerlink" title="进程排序"></a>进程排序</h4><ul>
<li>以 CPU 占用率大小的顺序排列进程列表 <ul>
<li>top进入之后， 按P </li>
<li>或者 <code>top -o %CPU</code></li>
</ul>
</li>
<li>以内存占用率大小的顺序排列进程列表<ul>
<li>top进入之后，按M </li>
<li>或者 <code>top -o %MEM</code></li>
</ul>
</li>
<li>以总共消耗的CPU时间片排序<ul>
<li>top进入之后，按T </li>
<li><code>top -o +TIME</code></li>
</ul>
</li>
<li>单独查看某个进程的CPU消耗情况<br><code>top -p $PID</code></li>
</ul>
<h4 id="线程排序"><a href="#线程排序" class="headerlink" title="线程排序"></a>线程排序</h4><ul>
<li>查看某个进程下各个线程CPU占用情况，倒序排列<ul>
<li><code>top -Hp $&#123;pid&#125; -o %CPU</code></li>
</ul>
</li>
<li>查看某个进程下各个线程内存占用情况，倒序排列<ul>
<li><code>top -Hp $&#123;pid&#125; -o %MEM</code></li>
</ul>
</li>
<li>查看某个进程下各个线程CPU时间片占用情况，倒序排列<ul>
<li><code>top -Hp $&#123;pid&#125; -o +TIME</code></li>
</ul>
</li>
</ul>
<h3 id="centOS-yum源路径"><a href="#centOS-yum源路径" class="headerlink" title="centOS yum源路径"></a>centOS yum源路径</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/yum.repos.d/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="进程-amp-网络管理"><a href="#进程-amp-网络管理" class="headerlink" title="进程&amp;网络管理"></a>进程&amp;网络管理</h2><ul>
<li>查看端口被哪个进程占用了</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">lsof</span> -i:<span class="token variable">$&#123;port&#125;</span>
<span class="token function">netstat</span> -natp <span class="token operator">|</span> <span class="token function">fgrep</span> <span class="token variable">$&#123;port&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>根据进程号, 查看进程占用了哪些tcp端口</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> -natp <span class="token operator">|</span> <span class="token function">fgrep</span> <span class="token variable">$&#123;pid&#125;</span>
<span class="token function">sudo</span> <span class="token function">lsof</span> -i -P <span class="token operator">|</span> <span class="token function">fgrep</span> <span class="token variable">$&#123;pid&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>查看进程信息:</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">fgrep</span> <span class="token variable">$&#123;pid&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><ul>
<li>锁定用户:</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">passwd</span> -l username<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>查看用户是否被锁定:</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">passwd</span> -S username
<span class="token function">sudo</span> <span class="token function">passwd</span> --status interlive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>或者看下密码前边是否有 “!!” 标记, 如果有, 则证明被标记了</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">fgrep</span> <span class="token string">"interlive"</span> /etc/shadow<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="绑核"><a href="#绑核" class="headerlink" title="绑核"></a>绑核</h2><ul>
<li>查看进程绑核情况</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">taskset -p <span class="token variable">$PID</span>
taskset -cp <span class="token variable">$PID</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">davywalker@davywalker-ThinkPad-X1-Carbon-4th:~/Downloads/Clash-Linux$ taskset -p <span class="token number">20697</span>
pid <span class="token number">20697</span><span class="token string">'s current affinity mask: f
davywalker@davywalker-ThinkPad-X1-Carbon-4th:~/Downloads/Clash-Linux$ taskset -cp 20697
pid 20697'</span>s current affinity list: <span class="token number">0</span>-3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>执行进程绑核操作</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">taskset -p COREMASK PID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


<h1 id="磁盘操作"><a href="#磁盘操作" class="headerlink" title="磁盘操作"></a>磁盘操作</h1><h2 id="查看块设备-包括已分区与未分区的"><a href="#查看块设备-包括已分区与未分区的" class="headerlink" title="查看块设备(包括已分区与未分区的)"></a>查看块设备(包括已分区与未分区的)</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@OpenWrt:~<span class="token comment"># lsblk</span>
NAME          MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTS
nvme0n1       <span class="token number">259</span>:0    <span class="token number">0</span> <span class="token number">465</span>.8G  <span class="token number">0</span> disk
├─nvme0n1p1   <span class="token number">259</span>:1    <span class="token number">0</span>    16M  <span class="token number">0</span> part /boot
│                                       /boot
├─nvme0n1p2   <span class="token number">259</span>:2    <span class="token number">0</span>   500M  <span class="token number">0</span> part /rom
├─nvme0n1p3   <span class="token number">259</span>:3    <span class="token number">0</span>   128G  <span class="token number">0</span> part /overlay
├─nvme0n1p4   <span class="token number">259</span>:4    <span class="token number">0</span>   128G  <span class="token number">0</span> part /mnt/nvme0n1p4
├─nvme0n1p5   <span class="token number">259</span>:5    <span class="token number">0</span>   128G  <span class="token number">0</span> part /mnt/nvme0n1p5
├─nvme0n1p6   <span class="token number">259</span>:6    <span class="token number">0</span>  <span class="token number">81</span>.3G  <span class="token number">0</span> part /mnt/nvme0n1p6
└─nvme0n1p128 <span class="token number">259</span>:7    <span class="token number">0</span>   239K  <span class="token number">0</span> part<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="查看分区的文件系统类型"><a href="#查看分区的文件系统类型" class="headerlink" title="查看分区的文件系统类型"></a>查看分区的文件系统类型</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@OpenWrt:~<span class="token comment"># parted -l</span>
Model: WD Blue SN570 500GB SSD <span class="token punctuation">(</span>nvme<span class="token punctuation">)</span>
Disk /dev/nvme0n1: 500GB
Sector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: 512B/512B
Partition Table: gpt
Disk Flags:

Number  Start   End     Size    File system  Name  Flags
<span class="token number">128</span>     <span class="token number">17</span>.4kB  262kB   245kB                      bios_grub
 <span class="token number">1</span>      262kB   <span class="token number">17</span>.0MB  <span class="token number">16</span>.8MB  fat16              legacy_boot
 <span class="token number">2</span>      <span class="token number">17</span>.0MB  541MB   524MB
 <span class="token number">3</span>      542MB   138GB   137GB   ext4
 <span class="token number">4</span>      138GB   275GB   137GB   ext4
 <span class="token number">5</span>      275GB   413GB   137GB   ext4
 <span class="token number">6</span>      413GB   500GB   <span class="token number">87</span>.2GB  ext4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="为块设备分区"><a href="#为块设备分区" class="headerlink" title="为块设备分区"></a>为块设备分区</h2><h2 id="为分区格式化文件系统类型"><a href="#为分区格式化文件系统类型" class="headerlink" title="为分区格式化文件系统类型"></a>为分区格式化文件系统类型</h2><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="查看centos版本"><a href="#查看centos版本" class="headerlink" title="查看centos版本"></a>查看centos版本</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># rpm --query centos-release</span>
centos-release-7-9.2009.0.el7.centos.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="查看Linux内核版本"><a href="#查看Linux内核版本" class="headerlink" title="查看Linux内核版本"></a>查看Linux内核版本</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># uname -a</span>
Linux localhost.localdomain <span class="token number">3.10</span>.0-1160.el7.x86_64 <span class="token comment">#1 SMP Mon Oct 19 16:18:59 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>code-snippets</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>无用的知识又增加了</title>
    <url>//2021-11-22-random-snippets/</url>
    <content><![CDATA[<p>CPU芯片中vendor_id:</p>
<ul>
<li><code>intel --&gt; Genuine Intel</code></li>
<li><code>amd --&gt; Authentic AMD</code></li>
</ul>
<p>哈哈, 为啥都加个”真实的”呢? 生怕别人伪造么?</p>
<hr>
<ul>
<li>为啥 Java 的 HeapDump 文件后缀是<code>hprof</code>, 例如<code>20230914-tmp.hprof</code>?</li>
<li>代表<code>Heap Profiling</code>, 即堆内存分析. 也是很早以前JDK提供的工具: <a href="https://www.cnblogs.com/linhaohong/archive/2012/07/12/2588657.html">HPROF: 一个Heap&#x2F;CPU Profiling工具</a></li>
</ul>
<hr>
<ul>
<li>K8s中各种shim组件, 具体为啥叫 shim ?</li>
<li>直译过来是<code>垫片</code>, 这是什么鬼? 很难理解. 其实本质就是Adaptor. 当然也有人也有类似的吐槽, 好好地叫adaptor很难么? <a href="https://hackernoon.com/design-patterns-wtf-is-a-shim-la1h338v">Design Patterns: WTF is a Shim?</a></li>
</ul>
<hr>
<ul>
<li>到底在什么场景下该用<code>java.util.LinkedList</code>? 具体谁用了?</li>
<li>巧了, LinkedList的作者<code>Joshua Bloch</code>也有同样的困惑. 基本结论, 就是学习思路可以, 但在实际生产环境中就尽量不要用啦.<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202309142358549.png"></li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>tech-for-fun</tag>
      </tags>
  </entry>
  <entry>
    <title>沙丘 笔记</title>
    <url>//2021-12-12-Dune/</url>
    <content><![CDATA[<hr>
<blockquote>
<p>他转过身, 沿着过道大步走回大厅, 脑海中的记忆翻腾起来, 就像一个个没牙的老太婆在唠唠叨叨地述说.<br>他想起了宽阔的水域, 起伏的波浪, 想起了满眼青草而不是黄沙的日子, 想起了艳阳高照的夏季, 这种日子已经像风暴中的落叶一样迅猛地离他而去了.</p>
</blockquote>
<hr>
<blockquote>
<p>生命会将狂暴的废物变成优雅的灵动之物, 他想, 这就是沙漠对我们的教诲.<br>现实的这种改变常常让他瞠目结舌.<br>他很想转身对着挤在穴地入口处的助手们大声叫喊:<br>如果你们一定要崇拜某种东西的话, 就崇拜生命吧<br>– 所有生命, 哪怕是最低贱的生命! 生命的美好属于我们全体!</p>
</blockquote>
<hr>
<blockquote>
<p>有那么一会儿，他任凭自己的思绪自由飘荡。<br>他想起他带着孩提时候的保罗到卡拉丹海滨市场的那一天。<br>太阳照在水面上，发出耀眼的光芒。<br>大海丰饶的产品静静地摆在那儿出售。<br>艾达荷还记起了经常为他们弹奏巴厘琴的哥尼·哈莱克，那些欢笑，那些快乐时光。<br>音乐的旋律在他的脑海中跳跃，像咒语一般，引领着他的意识，走进快乐的回忆。</p>
</blockquote>
<hr>
<blockquote>
<p>一瞬间，艾达荷触到了预知幻象，看到未来的人们用谈论大海的口气谈论保罗。<br>他一生蒙尘，在沙土中奔走，但水一直伴随着他。<br>“他的肉体沉没了，”人们会说，“可他却游了上来。”</p>
</blockquote>
<hr>
<blockquote>
<p>艾达荷把自己的嘴唇挨到她的头发上。“求求你，别难过了。”他低声说，<br>感到她的悲哀和自己的混合在一起，像两条小溪融入了同一个水池。</p>
</blockquote>
<hr>
<blockquote>
<p>他感觉自己是在时间的海洋中冲浪，时而跌进浪谷，时而骑上浪尖，<br>与此同时，周围的其他波浪此起彼伏，它们表面载着的东西也时隐时现。</p>
</blockquote>
<hr>
<blockquote>
<p>宪法是鼓动起来的社会权力，没有任何道德和良心。<br>它可以摧毁社会的各个阶层，无情地抹杀所有尊严和个性。它没有稳定的标准，也不受任何限制。<br>与此相比，我则是有限制的。为了给我的人民提供绝对的保护，我禁止颁布宪法。</p>
</blockquote>
<hr>
<blockquote>
<p>“啊，法律。”他说。他走到窗前，拉开帷幔，好像能看见外面似的，<br>“什么是法律？控制吗？法律过滤了混乱，滤下来的又是什么？祥和？法律既是我们的最高理想，又是我们最根本的天性。<br>法律经不起细看，认真琢磨的话，你会发现它只不过是一套理性化的阐释、合法的诡辩、一些方便人们运用的先例。<br>对，还有祥和，但那不过是死亡的代名词而已。”</p>
</blockquote>
<hr>
<blockquote>
<p>她曾给他引述了一段贝尼·杰瑟里特谚语：<br>“当宗教与政治同乘一辆马车时，驾车人会觉得没有什么东西可以阻挡他们。他们会一路狂奔，速度越来越快，把一切思想障碍都抛到一边。<br>他们会把一切危机意识抛诸脑后，忘记前面的悬崖并不会主动提醒闭起眼睛盲目狂奔的人。<br>他们不懂得悬崖勒马，直到为时已晚。”</p>
</blockquote>
<hr>
<blockquote>
<p>她只站了短短的一刻，一瞬而已，就像她自己的生命与时间本身相比那样不值一提。<br>但就在这一瞬，她觉得连这颗星球都快被狂风吹走了，和狂风挟带的其他一切一样，变成宇宙的尘埃。</p>
</blockquote>
<hr>
<blockquote>
<p>但他渐渐意识到，不留下任何痕迹地死去，或许是一种难得的礼遇——没有尸骸，什么都没有，整个星球就是他的墓地。</p>
</blockquote>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>books</tag>
        <tag>2021</tag>
        <tag>sci-fi</tag>
      </tags>
  </entry>
  <entry>
    <title>Java NIO疑问与总结</title>
    <url>//2021-12-17-java-nio/</url>
    <content><![CDATA[<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ByteBuffer</span> dst <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">SocketChannel</span> clientChannel <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> read <span class="token operator">=</span> clientChannel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> read<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    clientChannel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>dst<span class="token punctuation">.</span><span class="token function">hasRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
clientChannel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><p>这里 <code>-1==read</code> 与 <code>dst.hasRemaining()</code> 有啥区别? 上述两种判断方式有啥差异? </p>
</li>
<li><p>什么时候 <code>0 == read</code> ?</p>
</li>
<li><p>case1: 如果clientChannel刚好1024个字节:</p>
<ul>
<li>所以第一次read, 结果肯定不是-1, 而是1024, 即实际读取的字节数, 此时会进入下一次循环, clientChannel.read(dst); 变为”case3”</li>
<li>此时dst.hasRemaining() &#x3D;&#x3D; false</li>
</ul>
</li>
<li><p>case2: 如果clientChannel可读的&lt;1024个字节(例如128个字节): </p>
<ul>
<li>所以第一次read, 结果也不是-1, 而是1024, 即实际读取的字节数(128), 此时会进入下一次循环, clientChannel.read(dst); 变为”case3”</li>
<li>此时dst.hasRemaining() &#x3D;&#x3D; true</li>
</ul>
</li>
<li><p>case3: 如果clientChannel可读的0个字节: </p>
<ul>
<li>所以第一次read, 结果是-1</li>
<li>此时dst.hasRemaining() &#x3D;&#x3D; true<br>所以, 综上case, dst.hasRemaining() 与 -1&#x3D;&#x3D;read() 基本一致. 但在case2场景下, 会少一次循环.<br>不过一般的应用层协议, 会在请求头里标明本次请求的字节数, 典型的例如ZK, 所以不太需要按照上边这种方式.</li>
</ul>
</li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>code-snippets</tag>
        <tag>java</tag>
        <tag>nio</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP协议中TIME_WAIT疑问与思考</title>
    <url>//2021-12-17-tcp-time-wait/</url>
    <content><![CDATA[<hr>
<p>疑问: 从下图可以看出, 客户端可能会是TIME_WAIT状态. 但如果是服务端主动关闭的呢? 服务端可能会是TIME_WAIT状态么?<br><img data-src="/../_assets/2021-12-18-tcp-time-wait/tcp.png" alt="img.png"></p>
<p>答案: 是可能的. 服务端主动关闭, 那么四次挥手的过程, 上图中客户端&#x2F;服务端就要翻转下了. </p>
<hr>
<p>疑问: 为啥TIME_WAIT要持续2MSL?</p>
<ul>
<li>MSL: 最大分段生存期, 指明TCP报文在Internet上最长生存时间，每个具体的TCP实现都必须选择一个确定的MSL值。</li>
</ul>
<p>TIME_WAIT状态必须要有一定的持续时间，所以TIME_WAIT也被称为2MSL等待状态，一般持续时间在1分钟到4分钟之间。<br>RFC793定义了MSL为2分钟，Linux设置成了30s</p>
<p>主要有两个原因：<br>1、我们没有任何机制保证最后的一个ACK能够正常送达, TIME_WAIT确保有足够的时间让对端收到了ACK，<br>    * 如果被动关闭的那方没有收到ACK，就会触发被动端重发Fin，<br>    * 从上图查看, ACK到服务端1个MSL, 服务端如果在MSL里没收到ACK, 则会重发FIN, FIN到达客户端.<br>    * 上边ACK + FIN 耗时, 正好2个MSL；<br>2、有足够的时间让这个连接不会跟后面的连接混在一起（如果连接被重用了，那么这些延迟收到的包就有可能会跟新连接混在一起）。<br>    * </p>
<p>我们经常就会在服务器上发现有很多的wait_timeout，特别常见的就是http服务器，从上面的描述来看，这个状态应该是主动关闭的一方，才会有的状态，我们有没有想过，就是为什么服务器端会主动断开连接呢？不应该是客户端主动断开吗？</p>
<p>据说，其实在最初的http协议，服务器在发送完客户端需要的内容后，就主动关闭连接，因为当时的客户端，需要等待所有效果渲染完毕，才会主动断开连接，为了照顾当时性能低下的服务器，更好的服务其他客户，才在协议中这样规定，说到底就是http协议太老了，所以Google才会推他的SPDY协议。</p>
<hr>
<p>疑问: 实际上, 我们看到经常服务端会处于CLOSE_WAIT状态, 理论上CLOSE_WAIT应该持续时间很短, 为啥会经常处于这个状态?<br>解释: 出现大量close_wait的现象，主要原因是某种情况下对方关闭了socket链接，但是我方忙与读或者写，没有关闭连接。<br>    就是说CLOSE_WAIT时, 服务端还有数据要写给客户端, 所以没有给客户端发FIN<br>    代码需要判断socket，一旦读到0，断开连接，read返回负，检查一下errno，如果不是AGAIN，就断开连接。</p>
<hr>
<p>疑问: 可以从上图看出, 如果客户端在TIME_WAIT内重发了一次ACK, 但ACK还是没有被服务端收到, 那么服务端就会在LAST_ACK状态. 具体LAST_ACK会持续多久?<br>解释: LAST_ACK-&gt;CLOSE不靠超时. 加入服务端发送了FIN之后, 等待LAST_ACK.<br>但客户端回复的ACK丢失了, 在MSL里, 服务端重新发送了FIN, 客户端收到之后, 重新发送ACK, 此时ACK重新丢失.<br>客户端由于2MSL到期, 因此变为CLOSED状态;<br>服务端重新发送FIN, 由于客户端已经处于CLOSED状态, 因此连接丢失, 客户端回复RST, B收到RST进入CLOSED状态.</p>
<hr>
<p>疑问: 有啥最佳实践?<br>高并发TCP服务器中进行主动关闭的一方最好是客户端：</p>
<ul>
<li>因为对于高并发服务器来说文件描述符资源是很重要的资源，</li>
<li>如果对于每一个连接都要经历TIME_WAIT这个2MSL的时长，势必造成资源不能立马复用的浪费。</li>
<li>虽然对于客户端来说TIME_WAIT状态会占用端口和句柄资源，但是客户端一般很少有并发资源限制，所以客户端执行主动关闭是比较合适的。</li>
</ul>
<p>服务器端程序最好启用SO_REUSEADDR选项：</p>
<ul>
<li>我们想这样做一种情况，如果生产环境中服务端程序由于某种错误操作关闭了，我们肯定是要立马重启服务程序，</li>
<li>但是TIME_WAIT还在占用着这些地址端口资源让你的服务起不来，那你着不着急。</li>
<li>SOREUSEADDR这个选项正是允许地址端口的重复绑定。</li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>tcp</tag>
        <tag>timewait</tag>
      </tags>
  </entry>
  <entry>
    <title>ZkClient源码阅读与疑问总结</title>
    <url>//2021-12-17-zk-client/</url>
    <content><![CDATA[<ol>
<li>在client端使用NIO意义&#x2F;优点, 相比于传统的BIO是啥?<ol>
<li><a href="https://blog.csdn.net/cenwenchu79/article/details/4586939">https://blog.csdn.net/cenwenchu79/article/details/4586939</a></li>
<li>尤其是在client需要连接海量的服务端时, 例如爬虫, 或者海量物理机集群的管控服务等, 参见<a href="https://davyjones2010.github.io/2022-03-15-http-client-netty/">异步HttpClient使用Netty作为SocketChannel的Provider</a></li>
</ol>
</li>
<li>client重连机制是怎样的?<ol>
<li>client是如何判定连接断开的?</li>
<li>几个重要参数是怎样的?<ol>
<li>已经建立的连接, 超时时间是多久, 则认为是连接断开了?</li>
<li>未建立的连接, 建连超过多久则认为无法建立连接, 从而新选择其他zk host?</li>
</ol>
</li>
<li>后羿的重连机制?</li>
<li>curator的重连机制?</li>
<li>shuffle机制!!!</li>
</ol>
</li>
</ol>
<p>org.apache.zookeeper.ClientCnxn.SendThread#onConnected</p>
<p>readTimeout &#x3D; negotiatedSessionTimeout * 2 &#x2F; 3;<br>connectTimeout &#x3D; negotiatedSessionTimeout &#x2F; hostProvider.size();</p>
<p>为啥在连接建立的最后, 要queue一个None的Event?<br>eventThread.queueEvent(new WatchedEvent(<br>Watcher.Event.EventType.None,<br>eventState, null));</p>
<p>priming-packet 启动packet</p>
<p>WatchedEvent 里两个重要的属性:</p>
<ol>
<li><p>Watcher.Event.EventType<br>None (-1),<br>NodeCreated (1),<br>NodeDeleted (2),<br>NodeDataChanged (3),<br>NodeChildrenChanged (4);</p>
</li>
<li><p>KeeperState<br>case   -1: return KeeperState.Unknown;<br>case    0: return KeeperState.Disconnected;<br>case    1: return KeeperState.NoSyncConnected;<br>case    3: return KeeperState.SyncConnected;<br>case    4: return KeeperState.AuthFailed;<br>case    5: return KeeperState.ConnectedReadOnly;<br>case    6: return KeeperState.SaslAuthenticated;<br>case -112: return KeeperState.Expired;</p>
</li>
</ol>
<p>— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —<br>— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —<br>Auth机制&amp;流程</p>
<p>— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —<br>— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —<br>selectionKey关键:</p>
<ol>
<li>往selector里注册事件, sockKey.interestOps(SelectionKey.OP_READ | SelectionKey.OP_WRITE);<ol>
<li>幂等的. 即可以重复注册多次.</li>
<li>持续生效的: 即加入注册一次 sockKey.interestOps(SelectionKey.OP_READ | SelectionKey.OP_WRITE);<ol>
<li>后续任意时刻网卡里有数据可读, selector.selectedKeys() 都会返回 SelectionKey, 不会select一次之后就关掉该interest了</li>
<li>任意时刻网卡写队列可写, selector.selectedKeys() 都会返回 SelectionKey, 不会write一次之后即关掉了</li>
</ol>
</li>
<li>所以当没有数据要写时, 需要去掉OP_WRITE的interest, 否则会在SendThread里死循环.</li>
</ol>
</li>
<li>其他:<ol>
<li>Selector, Channel, SelectionKey 三者对象是啥关系?</li>
<li>三者的线程安全情况?</li>
</ol>
</li>
</ol>
<p>&#x2F;&#x2F; TODO: 待实验验证</p>
<p>— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —<br>— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —<br>三个重要的QUEUE:</p>
<ol>
<li>outgoingQueue(LinkedList):<ol>
<li>生产者: 客户线程; 注册&#x2F;执行操作, 会封装成packet, 放到outgoingQueue中.</li>
<li>消费者: SendThread; 将outgoingQueue中packet序列化, 执行网络IO, 发送给zookeeperServer</li>
<li>其他: 生产者可以通过 packet.finished+packet.wait(); 阻塞等待服务端返回结果</li>
</ol>
</li>
<li>pendingQueue(LinkedList):<ol>
<li>生产者: SendThread; 当将packet已经完全发送给服务端之后, 会把packet从outgoingQueue中移除, 放到pendingQueue中</li>
<li>消费者: SendThread; 当收到服务端的reply, 根据(xid+严格顺序)匹配到对应的packet之后, 会把该packet从pendingQueue中移除, 同时:</li>
</ol>
</li>
<li>waitingEvents(LinkedBlockingQueue):</li>
</ol>
<p>— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —<br>— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —<br>SendThread 机制:</p>
<p>为某个路径注册watcher过程<br>— UserThread发起: 生成packet对象</p>
<ol>
<li>UserThread: zk.exists(path,new Watcher() {xxx});</li>
<li>UserThread: 将{path, watcher对象} 封装成packet放到 outgoingQueue</li>
<li>UserThread: 调用selector.wakeup(); 引发SendThread解除阻塞</li>
<li>UserThread: 陷入阻塞, 循环等待packet.finished完成<br>synchronized (packet) {<br>while (!packet.finished) {<br>packet.wait();<br>}<br>}</li>
</ol>
<p>— SendThread注册Selector:</p>
<ol>
<li>SendThread: 之前阻塞在selector.select(waitTimeOut); 由于上一步, UserThread调用了selector.wakeup(), 导致解除阻塞</li>
<li>SendThread: selector.selectedKeys(); 由于服务端还没有返回数据, 即客户端缓冲区无数据, 所以为空.</li>
<li>SendThread: 接下来查看outgoingQueue非空, 因此在Selector里注册 SelectionKey.OP_WRITE 事件 sockKey.interestOps(i | SelectionKey.OP_WRITE);</li>
</ol>
<p>— SendThread执行I&#x2F;O Write: enrich packet.request</p>
<ol>
<li>SendThread: 重新进入循环, selector.selectedKeys(); 由于此时操作系统写缓冲区readyForWrite(即写缓冲区未溢出), 因此(k.readyOps() &amp;  SelectionKey.OP_WRITE &#x3D;&#x3D; SelectionKey.OP_WRITE)</li>
<li>SendThread: 将{path, watcher对象}序列化, 序列化的关键信息:<ol>
<li>xid: 如果packet里没有, 会在这个时候从ClientCnxn里拿出来设置给packet<ol>
<li>这里xid为per client的, 全局递增的ID</li>
<li>与sessionId是不同的.</li>
</ol>
</li>
<li>path:</li>
<li>watch: true&#x2F;false, 让服务端知道是否需要watch, 即该路径有变化时, 是否需要通知对应的xid</li>
<li>包字节长度 int, 占用4个字节: this.bb.putInt(this.bb.capacity() - 4);</li>
</ol>
</li>
<li>SendThread: SocketChannel.write(packet.bb); 执行网络IO</li>
<li>SendThread: 写包完成(具体大包拆解过程参加下边), 将packet放入到pendingQueue中</li>
</ol>
<p>— 服务端执行完成, 返回包给客户端, 数据已经写入客户端网卡缓冲区</p>
<p>— SendThread执行I&#x2F;O Read: enrich packet.response</p>
<ol>
<li>SendThread: 重新进入循环, selector.selectedKeys(); 由于此时客户端网卡读缓冲区有数据, 因此(k.readyOps() &amp;  SelectionKey.OP_READ &#x3D;&#x3D; SelectionKey.OP_READ)</li>
<li>SendThread: readResponse()<ol>
<li>反序列化ReplyHeader<ol>
<li>ReplyHeader重要字段:<ol>
<li>xid</li>
<li>zxid</li>
</ol>
</li>
<li>从pendingQueue中取出第一个packet</li>
<li>判断packet.xid 是否等于 replyHead.xid</li>
</ol>
</li>
<li>如果replyHeader匹配上packet, 则将反序列化responseBody; 设置为 packet.response; 至此response读取处理完毕</li>
<li>整个packet完整了, 既包含了request信息, 又包含了reponse信息</li>
<li>具体如何处理大的包的读取(拆包问题), 后边详细介绍.</li>
</ol>
</li>
<li>SendThread: 往Map&lt;String, Set<Watcher>&gt;里注册watcher, key是clientPath<ol>
<li>p.watchRegistration.register(p.replyHeader.getErr());</li>
<li>watches.put(clientPath, watchers);</li>
</ol>
</li>
<li>SendThread: 由于packet的callback为null, 因此<ol>
<li>p.finished &#x3D; true;</li>
<li>p.notifyAll();</li>
<li>终于到这里了, UserThread收到notifyAll的消息, 从block中唤醒.</li>
</ol>
</li>
<li>SendThread: IO Read流程结束. 重新新一轮的select流程</li>
</ol>
<p>— watcher怎么漏了? 具体怎么watch的呢? 参见下边  Watcher流程 章节</p>
<p>(具体是怎么找到写时候对应的packet呢? 根据啥作为index? )</p>
<ul>
<li>根据严格的 FIFO顺序+xid</li>
<li>即第一个发出去的packet, 必然会第一个收到reply. 这里有点不可思议: 如果网络包延时, 导致到达客户端的时候乱序怎么办?</li>
<li>同时根据xid进行匹配校验.</li>
</ul>
<p>— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —<br>— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —<br>SendThread 如何处理大包写问题: (拆包问题)<br>具体代码在这里: org.apache.zookeeper.ClientCnxnSocketNIO#doIO<br>大致流程:</p>
<ol>
<li><p>首先从outgoingQueue中获取到packet (注意此时不会把packet从outgoingQuque中删除)</p>
</li>
<li><p>序列化packet, 放到packet.bb字段中, 会在开头4个字节表明包内容长度</p>
</li>
<li><p>socketChannel.write(packet.bb)</p>
</li>
<li><p>判断bb.hasRemaining(); 如果为true, 则说明单次写入没写完.</p>
</li>
<li><p>重新往Selector里注册写需求: sockKey.interestOps(i | SelectionKey.OP_WRITE);</p>
</li>
<li><p>再次进入sendThread循环</p>
</li>
<li><p>由于上一步packet仍然在outgoingQueue中没被删除, 因此获取到了刚才的packet</p>
</li>
<li><p>由于已经序列化过, 即 packet.bb字段非空, 因此不需要重新序列化.</p>
</li>
<li><p>继续在之前的bb index处往后执行网络IO: socketChannel.write(packet.bb)</p>
</li>
<li><p>判断bb.hasRemaining(); 如果为true, 则循环 6~10 步骤</p>
</li>
<li><p>bb.hasRemaining() 为false; 则说明该包写完成.</p>
</li>
<li><p>将该包从outgoingQueue中删除</p>
</li>
<li><p>将该包放到pendingQueue中</p>
</li>
<li><p>如果outgoingQueue为空, 则不再注册SelectionKey.OP_WRITE 事件</p>
</li>
</ol>
<p>— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —<br>— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —<br>SendThread 如何处理大包读问题: (黏包问题)</p>
<p>— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —<br>— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —<br>ByteBuffer &amp; SocketChannel 的合并用法:<br>ByteBuffer bb &#x3D; xxx;  &#x2F;&#x2F; 假设1024B<br>SocketChannel.write(bb); &#x2F;&#x2F; 这里如果单次只写出了1B, 那么是否会移动bb的cursor?<br>bb.hasRemaining(); &#x2F;&#x2F; 这里是否为true?</p>
<p>— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —<br>— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —<br>心跳机制:</p>
<p>— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —<br>— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —</p>
<p>Zk的watch机制是如何工作的?</p>
<p>ZKWatchManager 里三个重要的watcherMap:<br>dataWatches<br>existWatches: 所有校验exists的watcher都放在这里, key: clientPath<br>childWatches:<br>defaultWatcher: new ZooKeeper()时在构造方法里传入的. 可以用来订阅zk状态变化, 也可以订阅zk node变化</p>
<p>作用分别是啥?<br>如何处理路径级联问题?<br>例如在&#x2F;root路径上注册了事件,  同时&#x2F;root&#x2F;dir 节点是存在的, 后边实际增加了 &#x2F;root&#x2F;dir&#x2F;a 节点; 那么&#x2F;root节点上注册watcher会收到事件么?</p>
<ol>
<li>所有的watcher都是在EventThread线程里, processEvent()方法里, 串行执行的.<br>通过LinkedBlockingQueue.take()一个一个串行执行.<br>所以需要避免在注册的watcher.process方法里执行过重的操作. 否则会导致整个watcher机制延时.</li>
</ol>
<p>Watcher流程</p>
<ol>
<li>SendThread: 服务端node有变化, 发送消息到客户端, 客户端网卡中数据readyForRead, 因此select()返回</li>
<li>SendThread: 反序列化消息头; 根据消息头replyHeader.xid &#x3D;&#x3D; -1 判定是watchEvent, 而不是普通packet的response.</li>
<li>SendThread: 反序列化消息体; WatcherEvent 结构, 重要字段:<ol>
<li>Path: 即发生变化的node路径</li>
<li>KeeperState: zk状态变化情况</li>
<li>EventType: zk node变化情况, 例如node数据更新, noe</li>
</ol>
</li>
<li>SendThread: materialize() 找到该event对应的watcher<ol>
<li>从watchRegistration里, 根据clientPath, map里获取到对应的watchers</li>
<li>Remove掉路径对应的这个watcher</li>
</ol>
</li>
<li>SendThread: 把WatcherSetEventPair{event, watchers} 组合加到EventThread的waitingEvents queue中.<br>所以当某个路径上的事件进入到watcher.process之后, 该watcher其实是已经被remove掉了. 如果有持续watch的需求, 还需要重新注册.</li>
</ol>
<p>EventThread处理流程:<br>6. EventThread: 无限循环, 从waitingEvents中take一个Event<br>7. EventThread: 获取对应的WatcherSetEventPair<br>    1. 从WatcherSetEventPair中获取到watchers,<br>    2. 循环遍历执行, watcher.process(event)</p>
<p>&#x2F;&#x2F; todo: EventThread processEvent里另外一个分支, Packet相关是怎么发生, 怎么处理的?</p>
<p>— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —<br>— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —<br>watcher有以下三个特性：</p>
<p>1、一次性：watch事件是一次性触发的，如果想再次监控数据，必须重新设置监控</p>
<p>2、客户端串行执行：客户端Watcher回调过程是一个串行同步的过程，这为我们保证了顺序。</p>
<p>3、轻量的：WatchedEvent是zk整个Watcher通知机制的最小通知单元，只有三部分组成：通知状态、时间类型、节点路径。也就是说，具体发生了什么变化，是需要客户端自己去查询的。</p>
<p>— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —<br>— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —<br>3、可以用exists方法：exists(path,true)来添加watch事件，当下次操作path会出发watch事件</p>
<p>例如：</p>
<pre><code>    zk.exists(path,true);//给path添加watch事件

    zk.writeData(path,&quot;newValue&quot;);//触发watch事件 EventType-&gt;nodeDataChenage



    zk.exists(path,true);//给path添加watch事件

    zk.create(path,&quot;newValue&quot;,Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);//触发watch事件 EventType-&gt;nodeCreated



    zk.exists(path,true);//给path添加watch事件

    zk.delete(path,-1);//触发watch事件 EventType-&gt;nodeDeleted
</code></pre>
<p>4、getChildren(path,neeWatch) &#x2F;&#x2F;给path添加watch事件，监控子节点变化</p>
<pre><code>    如果path新增或者删除节点会触发watch事件 EventType-&gt;nodechildrenChanged
</code></pre>
<p>— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —<br>— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —<br>如果客户端启动多个zk, new ZooKeeper(), 对象结构是怎样的? 哪些是线程共用的? 哪些是线程私有的? 哪些是线程安全的?</p>
<p>— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —<br>— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —</p>
<p>Etcd 与 ZK 区别?</p>
<p>— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —<br>— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — </p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>code-snippets</tag>
        <tag>java</tag>
        <tag>nio</tag>
        <tag>zk-client</tag>
        <tag>zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>2022 年度书单</title>
    <url>//2021-12-31-booklist-for-2022/</url>
    <content><![CDATA[<h1 id="BookList"><a href="#BookList" class="headerlink" title="BookList"></a>BookList</h1><hr>
<h2 id="必读"><a href="#必读" class="headerlink" title="必读"></a>必读</h2><ul>
<li><a href="https://book.douban.com/subject/25897245/">Netty权威指南</a> -20220315 done</li>
<li><a href="https://book.douban.com/subject/30244461/">规模：复杂世界的简单法则</a> -20220724 done</li>
<li>Google 4篇论文复习 GFS MapReduce BigTable Dapper</li>
<li><a href="https://book.douban.com/subject/26643785/">深度探索嵌入式操作系统：从零开始设计、架构和开发</a></li>
<li><a href="https://book.douban.com/subject/10750155/">数学之美</a> -done</li>
<li><a href="https://book.douban.com/subject/33429491/">昆仑</a> -20221228 done</li>
<li><a href="https://edu.51cto.com/center/course/lesson/index?id=118666">开源虚拟化KVM入门（KVM架构+KVM基本管理）视频课程</a></li>
<li><a href="https://book.douban.com/subject/25985021/">人类简史</a> -20220215 done</li>
<li><a href="https://book.douban.com/subject/3998926/">系统分析师考试全程指导</a></li>
<li><a href="https://baike.baidu.com/item/%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E5%B8%88%E6%95%99%E7%A8%8B/8182174">系统分析师教程</a></li>
<li><a href="https://book.douban.com/subject/3229243/">Linux内核完全剖析</a></li>
<li><a href="https://abseil.io/resources/swe_at_google.2.pdf">Software Engineering at Google</a></li>
<li><a href="https://yeasy.gitbook.io/docker_practice/underly/arch">Docker从入门到实践</a> -20220328 done</li>
<li><a href="http://product.dangdang.com/25336322.html">深度思考： 不断逼近问题的本质</a> -20220504 done</li>
<li><a href="https://book.douban.com/subject/26943161/">未来简史</a></li>
<li><a href="https://book.douban.com/subject/30259720/">今日简史</a> -20230131 done</li>
<li><a href="https://book.douban.com/subject/3596861/">从产品到服务:企业向服务经济转型指南</a></li>
<li><a href="https://book.douban.com/subject/35424872/">深入剖析Kubernetes</a> -20220612 done</li>
<li><a href="https://book.douban.com/subject/30348776/">筚路蓝缕-世纪工程决策建设记述</a> -20220820 done</li>
<li><a href="https://book.douban.com/subject/1062991/">北京法源寺</a> -20220717 done</li>
<li><a href="https://book.douban.com/subject/1322455/">遥远的救世主</a> -20220725 done</li>
<li><a href="https://book.douban.com/subject/1322455/">天幕红尘</a> -20220806 done</li>
<li><a href="https://book.douban.com/subject/30155731/">算法之美</a> -20221206 done</li>
<li><a href="https://book.douban.com/subject/11530329/">30天自制操作系统</a></li>
<li><a href="https://book.douban.com/subject/27091064/">云原生应用架构实践——从单体到服务化架构演进</a></li>
<li><a href="https://book.douban.com/subject/27032786/">天局</a> -20220818 done</li>
<li><a href="https://book.douban.com/subject/1578545/">背叛</a> -20220821 done</li>
<li><a href="https://book.douban.com/subject/20257955/">丰乳肥臀</a> -20220909 done</li>
<li><a href="https://book.douban.com/subject/26745030/">陌生女人的来信</a> -20221022 done </li>
<li><a href="https://book.douban.com/subject/26641288/">1984</a> -20221023 done </li>
<li><a href="https://book.douban.com/subject/35100567/">乞力马扎罗的雪</a> -20221024 done </li>
<li><a href="https://book.douban.com/subject/35026475/">山月记</a> </li>
<li><a href="https://book.douban.com/subject/35669245/">乾隆: 政治, 爱情与性格</a> -20221029 done</li>
<li><a href="https://book.douban.com/subject/26768309/">查令十字街84号</a> -20221031 done</li>
<li><a href="https://zhuanlan.zhihu.com/p/479978458">The Basic Principles of Computers for Everyone</a> -20221111 done</li>
<li><a href="https://book.douban.com/subject/35731316/">文件系统技术内幕</a> <a href="https://www.bilibili.com/video/av889477532/">B站视频</a></li>
</ul>
<h2 id="选读"><a href="#选读" class="headerlink" title="选读"></a>选读</h2><ul>
<li><a href="https://book.douban.com/subject/35922722/">深入理解Linux网络： 修炼底层内功，掌握高性能原理</a></li>
</ul>
<h1 id="ReadList"><a href="#ReadList" class="headerlink" title="ReadList"></a>ReadList</h1><hr>
<ul>
<li><a href="https://cloud.tencent.com/developer/article/1587433">有赞 Bond 分布式锁</a></li>
<li><a href="https://www.cl.cam.ac.uk/research/srg/netos/camsas/blog/2016-03-09-scheduler-architectures.html">scheduler-architectures</a></li>
<li><a href="https://blog.paessler.com/disabling-icmp-and-snmp-wont-increase-security-but-will-impact-network-monitoring">ICMP</a></li>
<li><a href="https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html">美团的Thread Monitor方案</a></li>
<li><a href="https://www.infoq.cn/article/xkJNoczVDHARLkKjvDOm">深度揭秘阿里云 Serverless Kubernetes</a></li>
<li><a href="https://manybutfinite.com/post/what-does-an-idle-cpu-do/">site for curious people</a></li>
<li><a href="https://plantegg.github.io/2021/07/19/CPU%E6%80%A7%E8%83%BD%E5%92%8CCACHE/">CPU性能和CACHE</a></li>
<li><a href="https://www.realworldtech.com/transistor-count-flawed-metric/">Transistor Count: A Flawed Metric</a></li>
</ul>
<h1 id="MovieList"><a href="#MovieList" class="headerlink" title="MovieList"></a>MovieList</h1><hr>
<ul>
<li><a href="https://movie.douban.com/subject/35207856/">人世间</a></li>
<li><a href="https://movie.douban.com/subject/26766214/">风起陇西</a></li>
<li><a href="https://movie.douban.com/subject/26889177/">异物志</a></li>
<li><a href="https://movie.douban.com/subject/2210001/">大明王朝: 1566</a></li>
<li>Yes, Minister</li>
<li>Yes, Prime Minister</li>
<li><a href="https://movie.douban.com/subject/30314848/">瞬息全宇宙</a></li>
<li><a href="https://movie.douban.com/subject/35436582/?ivk_sa=1024320u">爱，死亡和机器人 第三季</a></li>
<li><a href="https://movie.douban.com/subject/26564735/">武庚纪</a></li>
<li><a href="https://movie.douban.com/subject/35231822/">梦华录</a></li>
<li><a href="https://book.douban.com/subject/35494904/">山海情</a></li>
<li><a href="https://book.douban.com/subject/34864748/">平凡岁月</a></li>
<li><a href="https://movie.douban.com/subject/2347485/">天道</a></li>
<li><a href="https://movie.douban.com/subject/35118256/">赛博朋克：边缘行者</a></li>
<li><a href="https://movie.douban.com/subject/1424406/">星际牛仔</a></li>
<li><a href="https://movie.douban.com/subject/30198955/">边缘世界</a></li>
<li><a href="https://movie.douban.com/subject/30285826/">风骚律师-第五季</a></li>
<li><a href="https://movie.douban.com/subject/10748120/">真探-第一季</a></li>
<li><a href="https://movie.douban.com/subject/26637615/">猎魔人-第一季、第二季</a></li>
<li><a href="https://movie.douban.com/subject/35314632/?_dtcc=1">黑暗荣耀</a></li>
<li><a href="https://movie.douban.com/subject/35300122/">弥留之国的爱丽丝第二季</a></li>
<li><a href="https://movie.douban.com/subject/35725021/">一人之下第五季</a></li>
</ul>
<h1 id="Games"><a href="#Games" class="headerlink" title="Games"></a>Games</h1><hr>
<ul>
<li><a href="https://zh.wikipedia.org/zh-sg/%E7%91%AA%E5%88%A9%E6%AD%90%E8%88%87%E8%B7%AF%E6%98%93%E5%90%89RPG4_%E5%A4%A2%E5%A2%83%E5%86%92%E9%9A%AA">马力欧与路易吉RPG4 梦境冒险</a></li>
<li><a href="https://www.douban.com/game/25890885/">逆转裁判123</a></li>
<li><a href="https://www.douban.com/game/26382626/">火影忍者：究极忍者风暴4</a></li>
<li><a href="https://www.douban.com/game/25931998/">赛博朋克2077</a></li>
<li><a href="https://www.douban.com/game/27185974/">对马岛之魂</a></li>
<li><a href="https://www.douban.com/game/10744839/">暴雨</a></li>
</ul>
<h1 id="Certificates"><a href="#Certificates" class="headerlink" title="Certificates"></a>Certificates</h1><hr>
<ul>
<li><a href="https://ke.qq.com/webcourse/index.html#cid=3200525&term_id=103327984&taid=10932152060401165&vid=5285890803968219215">CCNA</a></li>
<li>CKA</li>
<li>IELTS</li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>书单</category>
      </categories>
      <tags>
        <tag>books</tag>
        <tag>2022</tag>
      </tags>
  </entry>
  <entry>
    <title>2021 年度总结</title>
    <url>//2021-12-31-summary-for-2021/</url>
    <content><![CDATA[<p>2021年马上就要过去了, 是时候回顾一年的得失, 展望下未来了:</p>
<h1 id="0x00-工作总结"><a href="#0x00-工作总结" class="headerlink" title="0x00 工作总结"></a>0x00 工作总结</h1><p>一个字: “稳”</p>
<ul>
<li><p>稳定性上识别到了很多风险, perf tunning 等, 做的还不错. 全年无故障.<br>但”稳”另一方面, 也代表着没有惊喜, 没有突破. 这也是很头疼的点, 只能守着自己的一亩三分地, 找不到突破的方向.<br>个人认为瓶颈可能并不在技术侧. </p>
</li>
<li><p>不能妄自菲薄: 对比友商(aws), 相似的问题其实也一直都存在, 做的可能还没有我们好.</p>
</li>
<li><p>但也不能妄自尊大: 毕竟规模比我们大那么多, 与二方产品融合得也很好, 与我们简直是天壤之别.<br>不过技术上业务上确实有一些不错的创新点, 专利要开始申请起来. </p>
</li>
<li><p>除此之外, 技术上也发现并解决了一些有意思的问题. 后边需要陆续整理下.</p>
</li>
</ul>
<h1 id="0x01-学习成长总结"><a href="#0x01-学习成长总结" class="headerlink" title="0x01 学习成长总结"></a>0x01 学习成长总结</h1><p>一个字: “杂”,</p>
<ul>
<li>“杂”, 绝不是一个好词. 代表着啥都感兴趣, 啥知道一点儿, 但啥都不精通. 从书单里就可以看出来.</li>
</ul>
<h2 id="技术上"><a href="#技术上" class="headerlink" title="技术上"></a>技术上</h2><ul>
<li>这点导致真的很慌. 担心后边一事无成. 不过杂归杂, 也还是总结下吧: </li>
<li>研究了 <a href="https://github.com/DavyJones2010/kubernetes/tree/feature/20210830_code_review">kube-scheduler</a> &amp; vk的源代码与实现原理, 基本也算是把这些代码翻了个底儿朝天了. <ul>
<li>原理研究方面: 但整体对k8s的具体内部实现细节(细节太多啦), 以及扩展方式等.</li>
<li>动手实践方面: 对于k8s整体的使用运维, 实际运维经验太少.</li>
<li>语言层面: 对于go仍然不能说很熟练地使用, 只能说能看懂代码了. 这点也需要加强.</li>
</ul>
</li>
<li>了解了: 模拟电路, 数字电路, 以及底层门电路的构成, 门电路如何构成加法器. 感谢 <a href="https://www.bilibili.com/video/BV1wi4y157D3">ELE实验室</a> 满足了自己极大的好奇心.</li>
<li>了解了: CPU的生产, 现代计算机的架构. 真心感谢 <a href="https://zhuanlan.zhihu.com/p/35786702">老狼</a> <ul>
<li>从而明确知道了各种cpu的参数, 也基本能看懂 intel cpu 的架构图了</li>
<li>从而对numa node有了更清晰的认识.</li>
<li>等等很多很多的疑问(例如为啥现在都用串口, 并口速度不是更快么? 内存的通道是啥意思? 多核是啥意思? 超线程是啥意思? ), 对很多指标(例如晶体管数量, cacheline大小, 工艺)有了定量的认识.</li>
</ul>
</li>
<li>了解了: 各种计算机接口参数指标, 以及悠久的发展历史.</li>
<li>由于对操作系统硬件的更深一层理解, 从而更加能理解Java NIO的编程模型.</li>
<li>深入研究了zkclient的连接以及传输机制.</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li>对历史也萌生了极大的兴趣. 因为看历史, 就是在看现在, 就是在看未来. <ul>
<li>&lt;明朝那些事儿&gt; </li>
<li>袁腾飞</li>
<li>&lt;大明王朝1566&gt;</li>
</ul>
</li>
</ul>
<blockquote>
<p>“夏天过完了，好像什么事也没有做。” 　　</p>
<p>“是啊，我们就只是跑来跑去，什么都没有做。”</p>
<p>-《蓝色大门》</p>
</blockquote>
<h1 id="0x02-生活总结"><a href="#0x02-生活总结" class="headerlink" title="0x02 生活总结"></a>0x02 生活总结</h1><p>一个字: “喜”</p>
<ul>
<li>意外的惊喜很多. </li>
<li>其一, 老婆终于怀孕了, 想到即将拥有自己的baby, 心里就会有一种喜悦, 但同时也多了一份责任感. 为人父, 亦为人表. 时刻督促我变成更优秀的自己.</li>
<li>其二, 终于明年6月份公司要搬到家附近了. 终于可以结束为期两年的周末夫妻生活了, 到时候孩子应该也快诞生了.</li>
</ul>
<h1 id="0x03-总体反思-amp-回顾"><a href="#0x03-总体反思-amp-回顾" class="headerlink" title="0x03 总体反思&amp;回顾"></a>0x03 总体反思&amp;回顾</h1><p>总体来说今年的思想成熟很多, 写代码做业务研究技术, 也更加有方法论:  </p>
<ul>
<li>技术方案的设计更加完善: <ul>
<li>能充分考虑到问题的复杂性与潜在的坑, 以及可能的解决方案以及优先级. 而不是一过来需求没考虑到就开始编码, 上线之后, 发现出现了问题而手忙脚乱地进行打补丁修复.</li>
</ul>
</li>
<li>认知提升: <ul>
<li>对于”重要但不紧急”的事情, 抛弃了过去没动力做, 想磨洋工, 靠别人给deadline的想法. 能充分认识到这些事情的重要性必要性. 哪怕没人肯定, 但只要是重要的, 该做的还是会坚持做下去.</li>
</ul>
</li>
<li>更加积极乐观了.<ul>
<li>更能””<br>有时候做技术跟业务, 就是要有一种坚守. </li>
<li>坚持相信自己做的事情是有价值的, 并能确实创造价值.</li>
<li>用准确无误的数字, 说服那些质疑的人, 这些事情的价值.</li>
</ul>
</li>
</ul>
<h1 id="0x04-工作规划"><a href="#0x04-工作规划" class="headerlink" title="0x04 工作规划"></a>0x04 工作规划</h1><ul>
<li>把价格策略合理自动制定完成. </li>
<li>一定要在容器调度层面有所突破. 无论是客户端, 还是服务端.<ul>
<li>本身自己是在做调度, 所以深刻地理解, 调度是有很多事情要解决的. </li>
<li>立下一个flag, 明年一定要成为kube-scheduler的committer!!!</li>
</ul>
</li>
</ul>
<h1 id="0x05-学习规划"><a href="#0x05-学习规划" class="headerlink" title="0x05 学习规划"></a>0x05 学习规划</h1><p>这里限制下自己明年的范围吧, 省得到时候又是杂乱无章, 一事无成:  </p>
<ul>
<li>向下钻研: 仍然需要在硬件层面, 在操作系统底层, 在汇编语言, C语言层面深入了解学习. <ul>
<li>以书单里: &lt;深度探索嵌入式操作系统：从零开始设计、架构和开发&gt; 为索引</li>
</ul>
</li>
<li>以Java NIO为契机基础:<ul>
<li>向下, 把底层C的实现, 操作系统层面的实现研究下.</li>
<li>向上, 把Netty再深入研究下吧. 写出来一个高性能nio server&#x2F;client, 绝对不是一件容易的事情.</li>
<li>向上, 把AsyncHttpClient也研究下吧, 深入理解这里的http connection pool到底是啥? </li>
<li>向上, 把Curator的重连机制研究下, 同时与自己直接通过zkClient做, 优缺点深入研究比较下.</li>
</ul>
</li>
<li>最好同时能把sr-iov这些虚拟化技术也研究了解下</li>
</ul>
<h1 id="0x06-生活规划"><a href="#0x06-生活规划" class="headerlink" title="0x06 生活规划"></a>0x06 生活规划</h1><ul>
<li>花更多时间在锻炼上, 不论是游泳, 划船, 还是乒乓球. 培养一个运动的爱好吧.</li>
<li>身材管理: 一定要减肥, 再也忍受不了自己油腻的样子了. 今年已经戒断了吃夜宵的恶习, 有了一个好的开始, 明年继续加油, 体检一定要有个好结果!</li>
<li>是时候重拾起吉他了.</li>
<li>更加认真地对待生活, 博客长期认真地维护起来.</li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>年度总结</category>
      </categories>
      <tags>
        <tag>2021</tag>
        <tag>year-in-review</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty权威指南笔记</title>
    <url>//2022-01-03-netty/</url>
    <content><![CDATA[<h2 id="TCP黏包拆包问题"><a href="#TCP黏包拆包问题" class="headerlink" title="TCP黏包拆包问题"></a>TCP黏包拆包问题</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>黏包:<br>    1. 一次从缓冲区, 读取到了多个完整数据包, 需要将这几个数据包分别解析.<br>拆包:<br>    1. 一次从缓冲区, 读到了一个数据包的部分(可能由于服务端TCP接收滑窗非常小), 需要多次读取才能构建完整的数据包<br>黏包+拆包:<br>    1. 一次从缓冲区, 读取到一个数据包+另一个数据包的部分</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol>
<li>消息定长, 例如每个报文大小固定xx个字节, 如果不够, 则用空格补充<ol>
<li>FixedLengthFrameDecoder</li>
</ol>
</li>
<li>在包尾设定分隔符: 例如FTP协议用回车+换行分隔<ol>
<li>LineBasedFrameDecoder</li>
<li>DelimiterBasedFrameDecoder</li>
</ol>
</li>
<li>消息设置为消息头+消息体: 消息头中用int32字段代表消息的总长度</li>
<li>更复杂的应用层协议</li>
</ol>
<h3 id="LineBasedFrameDecoder原理"><a href="#LineBasedFrameDecoder原理" class="headerlink" title="LineBasedFrameDecoder原理"></a>LineBasedFrameDecoder原理</h3><p>&#x2F;&#x2F; todo</p>
<h2 id="Netty编解码"><a href="#Netty编解码" class="headerlink" title="Netty编解码"></a>Netty编解码</h2><h3 id="现有序列化方案"><a href="#现有序列化方案" class="headerlink" title="现有序列化方案"></a>现有序列化方案</h3><h4 id="Java默认序列化"><a href="#Java默认序列化" class="headerlink" title="Java默认序列化"></a>Java默认序列化</h4><p>缺点:</p>
<ul>
<li>无法跨语言</li>
<li>序列化后码流太大</li>
<li>序列化性能太差<br>几乎没有主流的RPC采用</li>
</ul>
<h4 id="Protobuf"><a href="#Protobuf" class="headerlink" title="Protobuf"></a>Protobuf</h4><ul>
<li>语言无关, 平台无关, 扩展性好</li>
<li>性能好</li>
</ul>
<h4 id="XML-x2F-Json"><a href="#XML-x2F-Json" class="headerlink" title="XML&#x2F;Json"></a>XML&#x2F;Json</h4><p>解析时间开销, 空间开销都太大; 不适合做高性能的通信协议</p>
<h3 id="Netty中对Java序列化支持"><a href="#Netty中对Java序列化支持" class="headerlink" title="Netty中对Java序列化支持"></a>Netty中对Java序列化支持</h3><p>ObjectEncoder<br>ObjectDecoder</p>
<h3 id="Netty中对Protobuf序列化支持"><a href="#Netty中对Protobuf序列化支持" class="headerlink" title="Netty中对Protobuf序列化支持"></a>Netty中对Protobuf序列化支持</h3><p>ProtobufVarint32FrameDecoder: 用于半包处理<br>ProtobufDecoder: 仅负责解码, 不支持读半包, 因此需要使用: ProtobufVarint32FrameDecoder<br>ProtobufVarint32LengthFieldPrepender<br>ProtobufEncoder</p>
<h2 id="Netty-HTTP协议开发"><a href="#Netty-HTTP协议开发" class="headerlink" title="Netty HTTP协议开发"></a>Netty HTTP协议开发</h2><h3 id="链路关闭场景"><a href="#链路关闭场景" class="headerlink" title="链路关闭场景"></a>链路关闭场景</h3><ul>
<li>对方宕机或者重启, 会主动关闭链路:<ul>
<li>另一方会读取到操作系统层的通知信号, 得知对方REST链路, 需要关闭连接, 释放自身的句柄资源.</li>
<li>是否有主动停机, 优雅关闭 类似 kill -3 ?</li>
</ul>
</li>
<li>消息读写过程, 发生了IO异常, 需要主动关闭</li>
<li>心跳读写过程, 发生了IO异常, 需要主动关闭</li>
<li>心跳超时, 需要主动关闭</li>
<li>编解码等不可恢复错误时, 需要主动关闭</li>
</ul>
<h3 id="可靠性设计"><a href="#可靠性设计" class="headerlink" title="可靠性设计"></a>可靠性设计</h3><h4 id="心跳机制"><a href="#心跳机制" class="headerlink" title="心跳机制"></a>心跳机制</h4><ul>
<li><p>网络空闲持续时间达到T(连续周期T没有读写消息)时, 客户端主动发送Ping心跳给服务端(这个与zkClient机制很相似)</p>
</li>
<li><p>如果在下一个周期T到来时, 客户端没有收到对方发送的Pong心跳应答消息, 或者读取到服务端发送的其他业务消息, 则心跳失败计数器+1</p>
</li>
<li><p>每当客户端接受到服务端的业务消息或者Pong应答消息, 则将心跳失败计数器清零.</p>
</li>
<li><p>当连续N次没有接受到服务端的Pong消息或者业务消息, 则主动关闭链路. 间隔INTERVAL之后, 发起重连操作.</p>
</li>
<li><p>服务端网络空闲持续时间达到T后, 服务端心跳失败计数器+1; 只要接收到客户端的Ping消息或者其他业务消息, 计数器清零</p>
</li>
<li><p>服务端连续N次没有接收到客户端的Ping消息或者其他业务消息, 则关闭链路, 释放资源, 等待客户端重连(这点与客户端机制不同).</p>
</li>
<li><p>需要防止: 由于一方短时间内繁忙没有及时返回应答消息导致的误判, 所以需要连续N个心跳检测都失败, 才能认定链路已经断连, 需要关闭并重建.</p>
</li>
<li><p>如果读写心跳发生IO异常, 说明链路已经中断, 此时就立刻关闭链路:</p>
<ul>
<li>如果客户端, 则需要重新发起连接.</li>
<li>如果是服务端, 则需要清空缓存的半包信息, 等待客户端重连.</li>
</ul>
</li>
</ul>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 如下代表啥意思:</span>
<span class="token class-name">Unpooled</span><span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>lenght<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Unpooled</span><span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span>currentTime<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 根据操作系统获取换行符, 例如Linux下是\n, Windows下是\r\n(\r回车, 即把打字机针头放到行首; \n换行, 即把纸向下移动一行), Mac下是\r</span>
<span class="token comment">// Unix/Mac系统下的文件在Windows里打开的话，所有文字会变成一行; </span>
<span class="token comment">// 而Windows里的文件在Unix/Mac下打开的话，在每行的结尾可能会多出一个^M符号</span>
<span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"line.separator"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>


<h2 id="Java应用中常用4种跨节点通信方案"><a href="#Java应用中常用4种跨节点通信方案" class="headerlink" title="Java应用中常用4种跨节点通信方案"></a>Java应用中常用4种跨节点通信方案</h2><ul>
<li>RMI</li>
<li>Socket + Java序列化</li>
<li>开源RPC框架, dubbo, thrift, avro</li>
<li>公有协议: HTTP+XML, RESTful + JSON 或者 WebService</li>
</ul>
<h2 id="Java跨节点通信私有协议"><a href="#Java跨节点通信私有协议" class="headerlink" title="Java跨节点通信私有协议"></a>Java跨节点通信私有协议</h2><ul>
<li>请求响应消息编解码定义</li>
<li>控制和管理类指令<ul>
<li>链路建立的握手请求和响应消息</li>
<li>链路检测的心跳消息</li>
</ul>
</li>
</ul>
<h2 id="UpStream-amp-DownStream的理解"><a href="#UpStream-amp-DownStream的理解" class="headerlink" title="UpStream&amp;DownStream的理解"></a>UpStream&amp;DownStream的理解</h2><ul>
<li><a href="https://blog.csdn.net/hills/article/details/46766665">对Netty服务端的 UpStream和DownStream的浅识</a></li>
<li><a href="https://stackoverflow.com/questions/9374284/how-does-upstream-and-downstream-handlers-work-in-netty">9374284&#x2F;how-does-upstream-and-downstream-handlers-work-in-netty</a></li>
</ul>
<ul>
<li>UpStreamHandler, 即消息是从TCP&#x2F;IP协议栈的下层往上层传输, 即从 物理层(网卡) -&gt; 传输层(TCP) -&gt; 应用层(Netty代码处理), 即Inbound</li>
<li>DownStreamHandler, 即消息是从TCP&#x2F;IP协议栈的上层往下层传输, 即从 应用层(Netty代码处理) -&gt; 传输层(TCP) -&gt; 物理层(网卡), 即Outbound</li>
</ul>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208071208885.png"><br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208071206397.png"><br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208071207489.png"></p>
<h2 id="ChannelHandler线程安全的理解"><a href="#ChannelHandler线程安全的理解" class="headerlink" title="ChannelHandler线程安全的理解"></a>ChannelHandler线程安全的理解</h2><ul>
<li><a href="https://netty.io/3.8/guide/#architecture.8.5">Do I need to synchronize my handler code given that events can happen at the same time?</a></li>
</ul>
<p>前提: OneHandler per Channel</p>
<ul>
<li>UpStreamHandler是不必担心线程安全性问题的:<ul>
<li>单个TimeServerHandler内部, 不必担心i++共享导致的问题. </li>
<li>两个TimeServerHandler会串行执行.</li>
</ul>
</li>
</ul>
<blockquote>
<p>ChannelUpstreamHandler will be invoked sequentially by the same thread</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// socketChannel.pipeline().addLast(new TimeServerHandler()).addLast(new TimeServerHandler());</span>
<span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">TimeServerHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInboundHandlerAdapter</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelActive</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">channelActive</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Object</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>- </p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>books</tag>
        <tag>2022</tag>
        <tag>Netty</tag>
        <tag>Java</tag>
        <tag>Nio</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次由于使用jetty-monitor导致的内存泄露问题</title>
    <url>//2022-01-31-jetty-monitor-oom-bug/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>learn-from-failure</tag>
        <tag>jetty-monitor</tag>
        <tag>jetty oom</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次Maven传递依赖失效问题排查</title>
    <url>//2022-02-01-maven-deps-failure/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在test-scheduler项目中, 代码按照maven模块(module)组织, 如下:</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">- test-scheduler
---- shared-common
---- resource-manage
---- persistence<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中<br>resource-manage模块在pom中依赖了shared-common模块</p>
<h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><h2 id="错误信息是怎样的"><a href="#错误信息是怎样的" class="headerlink" title="错误信息是怎样的?"></a>错误信息是怎样的?</h2><p>在运行resource-manage模块的ut时, 报错信息如下:</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Caused</span> by<span class="token operator">:</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>NoClassDefFoundError</span><span class="token operator">:</span> com<span class="token operator">/</span>xxx<span class="token operator">/</span>xxx<span class="token operator">/</span>manager<span class="token operator">/</span><span class="token class-name">ManagerListener</span>
	at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span>MetaPushConsumer</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">MetaPushConsumer</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">338</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span></span>CommonMetaPushConsumer</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">CommonMetaPushConsumer</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span>NativeMethodAccessorImpl</span><span class="token punctuation">.</span><span class="token function">invoke0</span><span class="token punctuation">(</span><span class="token class-name">Native</span> <span class="token class-name">Method</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span>NativeMethodAccessorImpl</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">NativeMethodAccessorImpl</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">62</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span>DelegatingMethodAccessorImpl</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">DelegatingMethodAccessorImpl</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">43</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span>Method</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Method</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">498</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span>AbstractAutowireCapableBeanFactory</span><span class="token punctuation">.</span><span class="token function">invokeCustomInitMethod</span><span class="token punctuation">(</span><span class="token class-name">AbstractAutowireCapableBeanFactory</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1930</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span>AbstractAutowireCapableBeanFactory</span><span class="token punctuation">.</span><span class="token function">invokeInitMethods</span><span class="token punctuation">(</span><span class="token class-name">AbstractAutowireCapableBeanFactory</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1872</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span>AbstractAutowireCapableBeanFactory</span><span class="token punctuation">.</span><span class="token function">initializeBean</span><span class="token punctuation">(</span><span class="token class-name">AbstractAutowireCapableBeanFactory</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1800</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">42</span> more
<span class="token class-name">Caused</span> by<span class="token operator">:</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>ClassNotFoundException</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>manager<span class="token punctuation">.</span></span>ManagerListener</span>
	at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>URLClassLoader</span><span class="token punctuation">.</span><span class="token function">findClass</span><span class="token punctuation">(</span><span class="token class-name">URLClassLoader</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">382</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>ClassLoader</span><span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">418</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span>Launcher</span>$<span class="token class-name">AppClassLoader</span><span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token class-name">Launcher</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">355</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>ClassLoader</span><span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">351</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">51</span> more<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="丢失的类是在哪里的"><a href="#丢失的类是在哪里的" class="headerlink" title="丢失的类是在哪里的?"></a>丢失的类是在哪里的?</h2><p>经分析, com.xxx.xxx.manager.ManagerListener 类是在如下GAV中引入:<br><dependency><br><groupId>com.xxx.xxx</groupId><br><artifactId>diamond-client</artifactId><br><version>3.9.2</version><br></dependency></p>
<h2 id="理论上传递依赖是怎样的"><a href="#理论上传递依赖是怎样的" class="headerlink" title="理论上传递依赖是怎样的?"></a>理论上传递依赖是怎样的?</h2><p>经分析, diamond-client 是由 shared-common 模块直接依赖的.<br>由于maven有传递依赖的特性, 因此依赖图如下:</p>
<pre class="line-numbers language-none"><code class="language-none">resource-manage --依赖--&gt; shared-common --依赖--&gt; diamond-client<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>因此resource-manage应该依赖到了diamond-client, 但实际在intellij里查看依赖图, 发现并没有传递依赖进来!</p>
<h2 id="为什么传递依赖没有生效"><a href="#为什么传递依赖没有生效" class="headerlink" title="为什么传递依赖没有生效?"></a>为什么传递依赖没有生效?</h2><p>经分析发现, 在 test-scheduler 的pom里, 对 shared-common 的依赖进行了裁剪, 将 diamond-client exclude 出去了.</p>
<p>而 resource-manage 等模块, 都是继承了 test-scheduler 的父pom. 因此resource-manange声明依赖了全量的 shared-common 模块如下:</p>
<p>但实际生效的仍是 test-scheduler pom中声明的 shared-common 依赖, 即排除掉了 diamond-client 依赖.</p>
<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>至此解决问题就很简单了. 在 test-scheduler 的pom中, 对 shared-common 依赖的声明, 删除掉如下片段即可:<br><exclusion><br><artifactId>diamond-client</artifactId><br><groupId>com.xxx.diamond</groupId><br></exclusion><br>这样就解决问题了</p>
<h1 id="扩展研究"><a href="#扩展研究" class="headerlink" title="扩展研究"></a>扩展研究</h1><h2 id="传递依赖失效的其他场景"><a href="#传递依赖失效的其他场景" class="headerlink" title="传递依赖失效的其他场景"></a>传递依赖失效的其他场景</h2><h3 id="scope问题"><a href="#scope问题" class="headerlink" title="scope问题"></a>scope问题</h3><ol>
<li>由于本问题中是在UT运行时发生的CNFE(ClassNotFoundException), 因此基本可以排除由于scope的原因. </li>
<li>但如果是在运行时发生了CNFE, 则需要看下是否使用了<scope>test&#x2F;provided&#x2F;system</scope>等标签</li>
</ol>
<h3 id="optional问题"><a href="#optional问题" class="headerlink" title="optional问题"></a>optional问题</h3><ul>
<li><p>如果optional为false, 则代表引用该pom的项目, 不会间接依赖到该GAV</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>net.biancheng.www<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>X<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token comment">&lt;!--设置可选依赖  --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>关于 optional 元素及可选依赖说明如下：</p>
</li>
</ul>
<ol>
<li>可选依赖用来控制当前依赖是否向下传递成为间接依赖；</li>
<li>optional 默认值为 false，表示可以向下传递称为间接依赖；</li>
<li>若 optional 元素取值为 true，则表示当前依赖不能向下传递成为间接依赖。</li>
<li>仅适用于 项目的单纯依赖关系，不适合 父子工程。假设A工程是 parent，那么A工程即便加上了 optinal，子项目也将继承父工程的所有依赖关系。</li>
</ol>
<ul>
<li>在什么场景下, 会把<optional>true</optional>设置为true?<br>假设一个关于数据库持久化的项目(Project C), 为了适配更多类型的数据库持久化设计，比如 Mysql 持久化设计(Project A) 和 Oracle 持久化设计(Project B)，</li>
<li>当我们的项目(Project D) 要用的 Project C 的持久化设计，不可能既引入 mysql 驱动又引入 oracle 驱动吧，所以我们要显式指定一个，就是这个道理了</li>
</ul>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h1><ul>
<li><a href="https://www.cnblogs.com/cy0628/p/15034450.html#:~:text=Maven%20%E7%9A%84%E4%BE%9D%E8%B5%96%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6,%E4%B8%8A%E7%AE%80%E5%8C%96POM%20%E7%9A%84%E9%85%8D%E7%BD%AE%E3%80%82">Maven依赖传递,排除依赖和可选依赖</a></li>
<li><a href="https://juejin.cn/post/6844903987322290189">Maven optional关键字透彻图解</a></li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>learn-from-failure</tag>
        <tag>maven</tag>
        <tag>transitive dependency</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot+Maven多模块项目测试最佳实践</title>
    <url>//2022-02-13-maven-multi-module-test/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>项目中为了整体代码的高内聚与可移植性, 按照maven-module的方式对代码进行了拆分, 样例如下: </p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> root<span class="token punctuation">-</span>module
  <span class="token punctuation">-</span> shared<span class="token punctuation">-</span>common<span class="token punctuation">-</span>module
  <span class="token punctuation">-</span> middleware<span class="token punctuation">-</span>module
    <span class="token punctuation">-</span> cache<span class="token punctuation">-</span>module
      <span class="token punctuation">-</span> cache<span class="token punctuation">-</span>api
      <span class="token punctuation">-</span> cache<span class="token punctuation">-</span>local<span class="token punctuation">-</span>impl
      <span class="token punctuation">-</span> cache<span class="token punctuation">-</span>redis<span class="token punctuation">-</span>impl
    <span class="token punctuation">-</span> persistence<span class="token punctuation">-</span>module
      <span class="token punctuation">-</span> persistence<span class="token punctuation">-</span>api
      <span class="token punctuation">-</span> persistence<span class="token punctuation">-</span>mysql
      <span class="token punctuation">-</span> persistence<span class="token punctuation">-</span>oracle
  <span class="token punctuation">-</span> biz<span class="token punctuation">-</span>module
    <span class="token punctuation">-</span> controller<span class="token punctuation">-</span>module
    <span class="token punctuation">-</span> service<span class="token punctuation">-</span>module<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="基本规范"><a href="#基本规范" class="headerlink" title="基本规范"></a>基本规范</h1><h2 id="root-module-pom文件有两个作用"><a href="#root-module-pom文件有两个作用" class="headerlink" title="root-module pom文件有两个作用:"></a>root-module pom文件有两个作用:</h2><ol>
<li>作为parent module, 管理各个子模块, 便于resolve自身各个模块之间的依赖关系. 如下, biz_module依赖(GAV)middleware-module + shared-common-module; middleware-module依赖(GAV)shared-common-module:</li>
</ol>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>shared-common-module<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>middleware-module<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>biz-module<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="2">
<li>作为parent pom, 统一管理各个子模块的Maven依赖, 同时默认引入通用的maven依赖(例如apache-commons, guava等), 而无需子模块重复引入.</li>
</ol>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="子模块之间依赖关系"><a href="#子模块之间依赖关系" class="headerlink" title="子模块之间依赖关系"></a>子模块之间依赖关系</h2><p>依赖关系如下: </p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">controller<span class="token punctuation">-</span>module <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span> service<span class="token punctuation">-</span>module <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span> cache<span class="token punctuation">-</span>api                              <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span> shared<span class="token punctuation">-</span>common
                                     <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span> cache<span class="token punctuation">-</span>redis<span class="token punctuation">-</span>impl/cache<span class="token punctuation">-</span>local<span class="token punctuation">-</span>impl      <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span> shared<span class="token punctuation">-</span>common
                                     <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span> persistence<span class="token punctuation">-</span>api                        <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span> shared<span class="token punctuation">-</span>common
                                     <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span> persistence<span class="token punctuation">-</span>mysql                      <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span> shared<span class="token punctuation">-</span>common<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>


<h1 id="问题说明"><a href="#问题说明" class="headerlink" title="问题说明"></a>问题说明</h1><p>上述多模块导致的问题, 在SpringBoot场景下, 由于默认的Application是放在最外层的controller-module.<br>根据依赖关系, middleware-module, shared-common-module等无法依赖controller-module(否则会导致循环依赖)<br>所以由于找不到Application入口, 无法by模块地启动spring容器, 进行集成测试.</p>
<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ol>
<li>每个模块能做到高内聚, 即模块相关的配置项都放在模块内部. 例如 <ol>
<li>persistence-mysql相关的datasource的配置, 放在persistence-mysql模块的resources&#x2F;xxx.properties里</li>
<li>cache-redis-impl相关的redis配置, 放在cache-redis-impl模块的resources&#x2F;xxx.properties里</li>
</ol>
</li>
<li>各个模块的测试态&#x2F;运行态配置项是自说明的, 能便于依赖方进行集成测试, 而无需依赖方再重新配置一份. 例如: <ol>
<li>service-module依赖了 persistence-mysql , cache-redis-impl 两个模块, service-module需要在UT里启动Spring容器, 测试具体service方法. </li>
<li>无需把 persistence-mysql里的测试datasource配置, cache-redis-impl里的测试redis配置都在自己的 application.properties 里写一份. </li>
<li>可以直接引入对应模块提供的测试properties.</li>
<li>如果可以实现, 尤其是在模块依赖层次很深很复杂的时候, 使用简便性会更好. 例如 controller-module 层测试, 只需要配置controller层自己的配置就好, 无需关心到底依赖到的是哪些module, 这些module里到底需要哪些配置项.</li>
</ol>
</li>
<li>能够by模块&#x2F;分层地启动Spring容器进行测试<ol>
<li>方案1: JMockit<ul>
<li>通常的一种做法是使用JMockIt, 但带来的问题是, 例如要测试的方法内部实现是调用某个OpenAPI, 可能一开始并不知道结果的结构是怎样的(尤其是在api文档缺失或者不全的情况下), 也不清楚性能怎样. </li>
<li>这样ut的准确度与可靠性以及后续性能压测的能力都不具备.</li>
</ul>
</li>
<li>方案2: 参见本文后续.</li>
</ol>
</li>
</ol>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="一-通用能力放到shared-common里"><a href="#一-通用能力放到shared-common里" class="headerlink" title="一: 通用能力放到shared-common里"></a>一: 通用能力放到shared-common里</h2><p>尤其是log4j.xml等配置, 由于各个模块都需要, 因此需要放入到share-common里.  </p>
<h2 id="二-模块化的配置能力"><a href="#二-模块化的配置能力" class="headerlink" title="二: 模块化的配置能力"></a>二: 模块化的配置能力</h2><h3 id="第一步-模块配置文件按照-通用-测试-x2F-生产-x2F-等环境相关-两类进行拆分"><a href="#第一步-模块配置文件按照-通用-测试-x2F-生产-x2F-等环境相关-两类进行拆分" class="headerlink" title="第一步: 模块配置文件按照 通用+测试&#x2F;生产&#x2F;等环境相关 两类进行拆分"></a>第一步: 模块配置文件按照 通用+测试&#x2F;生产&#x2F;等环境相关 两类进行拆分</h3><p>例如persistence-mysql模块的配置项拆分为如下几个: </p>
<ul>
<li>persistence-mysql-common.properties –&gt; common, 环境无关的配置, 如下:</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">spring.datasource.driver.driver-class-name&#x3D;com.mysql.jdbc.Driver
spring.datasource.driver.type&#x3D;com.xxx.druid.pool.DruidDataSource
spring.datasource.driver.maxActive&#x3D;300
spring.datasource.driver.initialSize&#x3D;20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>persistence-mysql-test.properties –&gt; for ut , 如下:</li>
</ul>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">spring.datasource.jdbc-url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://xxx:3306/test?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull&amp;allowMultiQueries=true</span>
<span class="token key attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token value attr-value">usr</span>
<span class="token key attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token value attr-value">pwd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>persistence-mysql-dev.properties  –&gt; for dev env</li>
<li>persistence-mysql-prod.properties –&gt; for prod env</li>
</ul>
<p>注意:<br>这些<code>*.properties</code>文件一定都要放在 src&#x2F;main&#x2F;resources&#x2F; 目录下, 注意尤其不能把  persistence-mysql-test.properties 放到 src&#x2F;test&#x2F;resources&#x2F; 目录下.<br>因为如果放到 src&#x2F;test&#x2F;resources&#x2F; 下, 虽然当前模块自身的UT能加载到 <code>persistence-mysql-test.properties</code> 文件<br>但其他依赖到该模块的UT就无法加载到 <code>persistence-mysql-test.properties</code> 文件了.</p>
<h3 id="第二步-使用-spring-profiles-active-对-common-env相关的配置文件-进行加载"><a href="#第二步-使用-spring-profiles-active-对-common-env相关的配置文件-进行加载" class="headerlink" title="第二步: 使用 spring.profiles.active 对 common + env相关的配置文件 进行加载"></a>第二步: 使用 spring.profiles.active 对 common + env相关的配置文件 进行加载</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"classpath:persistence-mysql-common.properties"</span><span class="token punctuation">,</span> <span class="token string">"classpath:persistence-mysql-$&#123;spring.profiles.active&#125;.properties"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceConfig</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="第三步-配置-spring-profiles-active-环境变量"><a href="#第三步-配置-spring-profiles-active-环境变量" class="headerlink" title="第三步: 配置 spring.profiles.active 环境变量"></a>第三步: 配置 spring.profiles.active 环境变量</h3><ul>
<li><p>方案1: 在UT代码里显式设置环境变量</p>
</li>
<li><p>方案2: 通过springboot的默认机制设置环境变量:<br>在对应模块的 <code>src/test/resources/</code> 目录下新建 <code>application.properties</code> 文件, 内容如下:  </p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">spring.profiles.active</span><span class="token punctuation">=</span><span class="token value attr-value">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>UT启动时会优先加载 <code>src/test/resources/application.properties</code> 文件, 这样就把环境变量设置好了.</p>
</li>
</ul>
<h3 id="第四步-UT"><a href="#第四步-UT" class="headerlink" title="第四步: UT"></a>第四步: UT</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token annotation punctuation">@ActiveProfiles</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultServiceTest</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">DefaultService</span> ds<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="三-模块化的Spring容器测试能力"><a href="#三-模块化的Spring容器测试能力" class="headerlink" title="三: 模块化的Spring容器测试能力"></a>三: 模块化的Spring容器测试能力</h2><p>由于各个模块没有Application.java类的入口, 而SpringBootTest需要有个Application入口.<br>因此当前的解决方案是 在各个模块的<code>src/test/java</code>代码里, 都加入TestApplication.java文件, 作为测试的context入口: </p>
<ol>
<li>在父包路径下创建该类, 则无需指定入口类, springboot默认会从 DefaultServiceTest测试类的包路径, 向上查找.</li>
<li>在兄弟路径下设置该类, 则需要指定该入口类名称如下: <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">TestApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ActiveProfiles</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultServiceTest</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">DefaultService</span> ds<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>其实整体与SpringBoot的分层测试思路很像.</p>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h1><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>maven</tag>
        <tag>springboot</tag>
        <tag>maven-module</tag>
        <tag>maven test</tag>
      </tags>
  </entry>
  <entry>
    <title>一些日常踩的小坑笔记</title>
    <url>//2022-02-22-java-minor-bugs/</url>
    <content><![CDATA[<h1 id="Java-SPI机制未生效-ServiceLoader获取不到实现类"><a href="#Java-SPI机制未生效-ServiceLoader获取不到实现类" class="headerlink" title="Java SPI机制未生效, ServiceLoader获取不到实现类"></a>Java SPI机制未生效, ServiceLoader获取不到实现类</h1><hr>
<p>最终定位到原因, 是因为接口实现的文件需要放在 <code>main/resources/META-INF/services/MyInterface</code> 中<br>而实际文件放到了: <code>main/resources/META-INF.services/MyInterface</code> 中了.</p>
<p>这里比较坑的一点是, 在IntelliJ IDEA中, 会默认flatten package, 即将目录路径层级用<code>.</code>连接, 因此<br><code>main/resources/META-INF/services/MyInterface</code> 与 <code>main/resources/META-INF.services/MyInterface</code><br>两个目录看起来是一样的, 如下(根本分不清楚到底是文件夹名字叫<code>codecontest.bloomfilter</code>还是文件夹是<code>codecontest/bloomfilter</code>):<br><img data-src="/../_assets/2022-02-23-java-minor-bugs/2022-02-23-java-minor-bugs-idea-path.png" alt="2022-02-23-java-minor-bugs-idea-path.png"></p>
<p>随便搜了下, 发现大家踩同样坑的也不少, 目前看貌似没有好的办法避免, 记住有这个坑, 后续引以为戒吧!</p>
<ul>
<li><a href="https://blog.csdn.net/tszxlzc/article/details/65938891">intellij idea包路径和文件夹目录的坑</a></li>
</ul>
<h1 id="Java-SPI机制创建的实例无法被SpringContext管理问题"><a href="#Java-SPI机制创建的实例无法被SpringContext管理问题" class="headerlink" title="Java SPI机制创建的实例无法被SpringContext管理问题"></a>Java SPI机制创建的实例无法被SpringContext管理问题</h1><hr>
<h2 id="问题代码样例"><a href="#问题代码样例" class="headerlink" title="问题代码样例:"></a>问题代码样例:</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 加载实现
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServiceLoader</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ServiceLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyInterface</span><span class="token punctuation">></span></span> interfaces <span class="token operator">=</span> <span class="token class-name">ServiceLoader</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">MyInterface</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MyInterface</span> anInterface <span class="token operator">:</span> interfaces<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            anInterface<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 实现类
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyImpl</span> <span class="token keyword">implements</span> <span class="token class-name">MyInterface</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">MyService</span> myService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        myService<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>发现在<code>MyImpl#sayHello</code>会抛出NPE, 即<code>myService</code>对象为null.<br>很显而易见, 因为 <code>MyImpl</code> 实例是从ServiceLoader中new出来的, 而不是由Spring容器创建的, 因此自身就脱离了SpringContext的管理.<br>因此<code>@Component</code>这个annotation本质是不生效的, <code>myService</code> 也不会被Spring自动注入进去. </p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方案1-手动注入"><a href="#方案1-手动注入" class="headerlink" title="方案1: 手动注入"></a>方案1: 手动注入</h3><p>手动获取Context, 手动注入: </p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 实现类
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyImpl</span> <span class="token keyword">implements</span> <span class="token class-name">MyInterface</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// SpringBeanTool代码参见 https://www.jianshu.com/p/7fc4358b4e36</span>
    <span class="token class-name">MyService</span> myService <span class="token operator">=</span> <span class="token class-name">SpringBeanTool</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">MyService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        myService<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="方案1的问题思考"><a href="#方案1的问题思考" class="headerlink" title="方案1的问题思考:"></a>方案1的问题思考:</h3><p>但一个疑问是如果MyImpl类中<code>myService</code>属性的初始化早于SpringContext的初始化<br>那么 <code>SpringBeanTool.getBean(MyService.class);</code> 必然返回的是null(因为SpringContext尚未初始化完成).<br>实际运行测试, 发现不会返回null. 那么实际的先后顺序是怎样的? 是否有可能返回null?</p>
<h3 id="方案2-使用SpringBoot的SPI"><a href="#方案2-使用SpringBoot的SPI" class="headerlink" title="方案2: 使用SpringBoot的SPI??"></a>方案2: 使用SpringBoot的SPI??</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// TODO: 这个先留个坑, 待后续研究. </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h2><ul>
<li><a href="https://www.jianshu.com/p/7fc4358b4e36">Spring Boot 获取上下文环境</a></li>
<li><a href="https://juejin.cn/post/6844903890173837326">springboot-starter中的SPI 机制</a></li>
</ul>
<h1 id="底层cache从Tair切换到Redis遇到的坑"><a href="#底层cache从Tair切换到Redis遇到的坑" class="headerlink" title="底层cache从Tair切换到Redis遇到的坑"></a>底层cache从Tair切换到Redis遇到的坑</h1><hr>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.12.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.12.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Jackson序列化方式-针对匿名内部类-可以序列化成功-但是反序列化失败"><a href="#Jackson序列化方式-针对匿名内部类-可以序列化成功-但是反序列化失败" class="headerlink" title="Jackson序列化方式, 针对匿名内部类, 可以序列化成功, 但是反序列化失败"></a>Jackson序列化方式, 针对匿名内部类, 可以序列化成功, 但是反序列化失败</h2><p>本质上是由于 <code>@Cachable</code> 默认使用了Jackson序列化方式, 会默认把类型信息放到json里, 而cache中的对象是匿名内部类, 从而反序列化失败.</p>
<blockquote>
<p>内部类实例需要其外部类实例对象来进行实例化，而Jackson在反序列化时无法创建其外部类实例对象</p>
</blockquote>
<h2 id="Jackson序列化方式-针对java-lang-Long类型-可以序列化成功-但是反序列化出来就变成了Integer类型-从而引发CCE"><a href="#Jackson序列化方式-针对java-lang-Long类型-可以序列化成功-但是反序列化出来就变成了Integer类型-从而引发CCE" class="headerlink" title="Jackson序列化方式, 针对java.lang.Long类型, 可以序列化成功, 但是反序列化出来就变成了Integer类型, 从而引发CCE"></a>Jackson序列化方式, 针对java.lang.Long类型, 可以序列化成功, 但是反序列化出来就变成了Integer类型, 从而引发CCE</h2><ul>
<li>代码样例如下, SpringCache框架默认使用了无类型的反序列化形式.</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JacksonSerializeTest</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">GenericJackson2JsonRedisSerializer</span> serializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 原始是Long类型</span>
        <span class="token class-name">Long</span> str <span class="token operator">=</span> <span class="token number">123L</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> serialize <span class="token operator">=</span> serializer<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> deserialize <span class="token operator">=</span> serializer<span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>serialize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Jackson反序列化之后, 丢失了类型信息, 被默认为了Integer类型</span>
        <span class="token function">assertTrue</span><span class="token punctuation">(</span>deserialize <span class="token keyword">instanceof</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Integer</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertFalse</span><span class="token punctuation">(</span>deserialize <span class="token keyword">instanceof</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Long</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Long</span> deserialize1 <span class="token operator">=</span> serializer<span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>serialize<span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Jackson反序列化时指定了类型信息, 则会按照类型来</span>
        <span class="token function">assertTrue</span><span class="token punctuation">(</span>deserialize1 <span class="token keyword">instanceof</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Long</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="扩展思考"><a href="#扩展思考" class="headerlink" title="扩展思考"></a>扩展思考</h2><p>如果使用FastJson进行序列化&#x2F;反序列, JSON里边同样不包含类型信息, 针对匿名内部类, 针对Long类型, 怎么防止上述问题?</p>
<h3 id="FastJson-AnonymousInnerClass"><a href="#FastJson-AnonymousInnerClass" class="headerlink" title="FastJson AnonymousInnerClass"></a>FastJson AnonymousInnerClass</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JacksonSerializeTest2</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jacksonTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">GenericJackson2JsonRedisSerializer</span> serializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 原始是AnonymousInnerClass</span>
        <span class="token class-name">MyClass</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> serialize <span class="token operator">=</span> serializer<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 序列化的JSON里, 包含了类的信息</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"&#123;\"@class\":\"edu.xmu.test.javax.jackson.JacksonSerializeTest2$1\",\"name\":\"Hello\"&#125;"</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>serialize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 下边反序列代码抛出异常, Cannot deserialize Class edu.xmu.test.javax.jackson.JacksonSerializeTest2$1 (of type</span>
        <span class="token comment">// local/anonymous) as a Bean</span>
        serializer<span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>serialize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> name<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fastjsonTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 原始是AnonymousInnerClass</span>
        <span class="token class-name">MyClass</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token comment">//String s = JSON.toJSONString(c, new SerializerFeature[] &#123;SerializerFeature.WriteClassName&#125;);</span>
        <span class="token class-name">String</span> s <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> parse <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>parse<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"JSONObject"</span><span class="token punctuation">,</span> parse<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">MyClass</span> c2 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fastjsonTest2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 原始是AnonymousInnerClass</span>
        <span class="token class-name">MyClass</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> s <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SerializerFeature</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token class-name">SerializerFeature<span class="token punctuation">.</span>WriteClassName</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"&#123;\"@type\":\"edu.xmu.test.javax.jackson.JacksonSerializeTest2$3\",\"name\":\"Hello\"&#125;"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 由于序列化的s里边包含了类型信息, 下边会报错, 信息如下:</span>
        <span class="token comment">/*
         * com.alibaba.fastjson.JSONException: default constructor not found. class edu.xmu.test.javax.jackson
         * .JacksonSerializeTest2$3
         */</span>
        <span class="token class-name">Object</span> parse <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="FastJson-Long"><a href="#FastJson-Long" class="headerlink" title="FastJson Long"></a>FastJson Long</h3><p>代码样例如下, 反序列化时需要提供类型信息.</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fastJsonTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Long</span> str <span class="token operator">=</span> <span class="token number">123L</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> s <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Long</span> str2 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// FastJson反序列化时指定了类型信息, 则会按照类型来</span>
    <span class="token function">assertTrue</span><span class="token punctuation">(</span>str <span class="token keyword">instanceof</span> <span class="token class-name">Long</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Object</span> parse <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// FastJson反序列化之后, 丢失了类型信息, 被默认为了Integer类型</span>
    <span class="token function">assertTrue</span><span class="token punctuation">(</span>parse <span class="token keyword">instanceof</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Integer</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span>parse <span class="token keyword">instanceof</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Long</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h2 id="Refs-1"><a href="#Refs-1" class="headerlink" title="Refs"></a>Refs</h2><ul>
<li><a href="https://juejin.cn/post/6844904170403659784">一次反序列化内部类导致的问题排查过程</a></li>
</ul>
<h1 id="k8s-java-client遇到的joda-time序列化问题"><a href="#k8s-java-client遇到的joda-time序列化问题" class="headerlink" title="k8s java client遇到的joda.time序列化问题"></a>k8s java client遇到的joda.time序列化问题</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>两个系统间通过dubbo进行RPC调用, 都引用了k8s-java-client, dubbo接口说明如下:</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>kubernetes<span class="token punctuation">.</span>client<span class="token punctuation">.</span>openapi<span class="token punctuation">.</span>models<span class="token punctuation">.</span></span><span class="token class-name">V1Pod</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">K8sService</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token class-name">V1Pod</span> podSpec<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h2><ul>
<li>使用的k8s-java-client版本如下:</li>
</ul>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.kubernetes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>client-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>10.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息"></a>错误信息</h2><ol>
<li>场景1, 系统调用</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Caused</span> by<span class="token operator">:</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>RuntimeException</span><span class="token operator">:</span> <span class="token class-name">Serialized</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">io<span class="token punctuation">.</span>kubernetes<span class="token punctuation">.</span>client<span class="token punctuation">.</span>openapi<span class="token punctuation">.</span>models<span class="token punctuation">.</span></span>V1Pod</span> must implement <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="2">
<li>场景2, 在provider机器上, 登录dubbo控制台, 手动invoke, 错误信息如下:</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Failed</span> <span class="token keyword">to</span> <span class="token namespace">invoke</span> method normalizeCpuMem<span class="token punctuation">,</span> cause<span class="token operator">:</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>RuntimeException</span><span class="token operator">:</span> <span class="token class-name">Failed</span> <span class="token keyword">to</span> <span class="token namespace">set</span> pojo <span class="token class-name">V1ObjectMeta</span> property deletionTimestamp value <span class="token number">2022</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">28</span>T18<span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">24.000</span><span class="token operator">+</span><span class="token number">08</span><span class="token operator">:</span><span class="token function">00</span><span class="token punctuation">(</span><span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cause<span class="token operator">:</span> argument type mismatch
<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>RuntimeException</span><span class="token operator">:</span> <span class="token class-name">Failed</span> <span class="token keyword">to</span> <span class="token namespace">set</span> pojo <span class="token class-name">V1ObjectMeta</span> property deletionTimestamp value <span class="token number">2022</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">28</span>T18<span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">24.000</span><span class="token operator">+</span><span class="token number">08</span><span class="token operator">:</span><span class="token function">00</span><span class="token punctuation">(</span><span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cause<span class="token operator">:</span> argument type mismatch
  at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span>PojoUtils</span><span class="token punctuation">.</span><span class="token function">realize0</span><span class="token punctuation">(</span><span class="token class-name">PojoUtils</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">450</span><span class="token punctuation">)</span>
  at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span>PojoUtils</span><span class="token punctuation">.</span><span class="token function">realize0</span><span class="token punctuation">(</span><span class="token class-name">PojoUtils</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">445</span><span class="token punctuation">)</span>
  at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span>PojoUtils</span><span class="token punctuation">.</span><span class="token function">realize0</span><span class="token punctuation">(</span><span class="token class-name">PojoUtils</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">372</span><span class="token punctuation">)</span>
  at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span>PojoUtils</span><span class="token punctuation">.</span><span class="token function">realize0</span><span class="token punctuation">(</span><span class="token class-name">PojoUtils</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">445</span><span class="token punctuation">)</span>
  at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span>PojoUtils</span><span class="token punctuation">.</span><span class="token function">realize0</span><span class="token punctuation">(</span><span class="token class-name">PojoUtils</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">445</span><span class="token punctuation">)</span>
  at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span>PojoUtils</span><span class="token punctuation">.</span><span class="token function">realize</span><span class="token punctuation">(</span><span class="token class-name">PojoUtils</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">200</span><span class="token punctuation">)</span>
  at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span>PojoUtils</span><span class="token punctuation">.</span><span class="token function">realize</span><span class="token punctuation">(</span><span class="token class-name">PojoUtils</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">79</span><span class="token punctuation">)</span>
  at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>rpc<span class="token punctuation">.</span>protocol<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>telnet<span class="token punctuation">.</span></span>InvokeTelnetHandler</span><span class="token punctuation">.</span><span class="token function">telnet</span><span class="token punctuation">(</span><span class="token class-name">InvokeTelnetHandler</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">95</span><span class="token punctuation">)</span>
  at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>remoting<span class="token punctuation">.</span>telnet<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span>TelnetHandlerAdapter</span><span class="token punctuation">.</span><span class="token function">telnet</span><span class="token punctuation">(</span><span class="token class-name">TelnetHandlerAdapter</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">54</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="原因分析-1"><a href="#原因分析-1" class="headerlink" title="原因分析"></a>原因分析</h2><p>至此, 可以基本知道是由于序列化问题导致. 尤其是 <code>V1ObjectMeta</code> 里的 <code>deletionTimestamp</code> 字段, 是 <code>org.joda.time.DateTime</code> 类型.<br>经搜索得知, 已经有人在dubbo社区提出这个问题: <a href="https://github.com/apache/dubbo/issues/9676">使用hessian2无法反序列化jodatime</a><br>但该bug仍然处于Open状态.</p>
<h2 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h2><p>当前临时的解决方案是: </p>
<ol>
<li>第一步: 修改接口签名如下, 使用序列化后的JsonString.</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">K8sService</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token class-name">String</span> podSpec<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>第二步: Provider&amp;Consumer都使用同样的<code>toJson(V1Pod)</code>逻辑.<br>参见开源实现: <a href="https://github.com/gkopff/gson-jodatime-serialisers">gson-jodatime-serialisers</a></li>
</ol>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>learn-from-failure</tag>
        <tag>java</tag>
        <tag>mdc</tag>
        <tag>npe</tag>
      </tags>
  </entry>
  <entry>
    <title>RAM的基础概念与实践</title>
    <url>//2022-02-28-aliyun-ram-openapi/</url>
    <content><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念:"></a>重要概念:</h2><p>RAM用户:</p>
<ul>
<li>主账号</li>
<li>子账号</li>
</ul>
<p>用户组: </p>
<ul>
<li>与传统RBAC里的角色对应.</li>
</ul>
<p>RAM角色: </p>
<ul>
<li>RAM里的角色与普通RBAC里的角色是不一样的, 这里的角色相当于是一个虚拟实体(虚拟用户), 没有ak&#x2F;sk, 因此不能被直接使用. </li>
<li>但可以被ram用户(子账号或主账号或者云产品云服务等)扮演(assume), 一旦扮演完成, 即可拥有该角色上的所有权限.</li>
</ul>
<h2 id="重要属性"><a href="#重要属性" class="headerlink" title="重要属性"></a>重要属性</h2><ul>
<li>权限管理: 用来设置该角色拥有哪些权限.</li>
<li>信任策略管理: 用来管理哪些RAM用户&#x2F;服务能够扮演(assume)该角色</li>
</ul>
<h2 id="角色分类"><a href="#角色分类" class="headerlink" title="角色分类"></a>角色分类</h2><h3 id="普通角色"><a href="#普通角色" class="headerlink" title="普通角色"></a>普通角色</h3><ul>
<li>用户可以自己创建角色, 并设置”信任策略管理”</li>
<li>也可以由用户开通云服务时, 授权云服务来为用户创建该角色, 并把云服务加入到”信任策略”里. 从而云服务可以扮演该角色.</li>
</ul>
<h3 id="SLR-ServiceLinkedRole-服务关联角色"><a href="#SLR-ServiceLinkedRole-服务关联角色" class="headerlink" title="SLR(ServiceLinkedRole, 服务关联角色)"></a>SLR(ServiceLinkedRole, 服务关联角色)</h3><p>相当于普通角色的升级版, 主要是给云服务使用.<br>与普通角色的区别是: SLR一旦创建成功, 用户不能再添加&#x2F;修改SLR的 “权限管理” 以及 “信任策略管理”. 只能删除.<br>优点是防止用户误修改权限&#x2F;信任策略, 导致云服务无法正常扮演, 提供服务.<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207042218061.png"></p>
<h1 id="基本API使用"><a href="#基本API使用" class="headerlink" title="基本API使用"></a>基本API使用</h1><h2 id="方式1-直接使用AK-x2F-SK"><a href="#方式1-直接使用AK-x2F-SK" class="headerlink" title="方式1: 直接使用AK&#x2F;SK"></a>方式1: 直接使用AK&#x2F;SK</h2><h3 id="使用样例"><a href="#使用样例" class="headerlink" title="使用样例:"></a>使用样例:</h3><ul>
<li>使用主账号的AK&#x2F;SK</li>
<li>使用子账号的AK&#x2F;SK</li>
</ul>
<pre class="mermaid">sequenceDiagram
      participant UserServer
      participant AliyunPop
      UserServer->>UserServer: Stores(AK/SK)
   UserServer->>UserServer: PrepareRequest(AK/SK)
   UserServer ->> +AliyunPop: RunInstances(AK, Sign)
   AliyunPop->>AliyunPop: checkSign(AK, Sign)
   AliyunPop -->> -UserServer: OK</pre>

<h3 id="适用场景分析"><a href="#适用场景分析" class="headerlink" title="适用场景分析"></a>适用场景分析</h3><p>直接用ak&#x2F;sk, 是非常常见的方案. 但带来的问题: </p>
<ol>
<li>SK泄露安全问题: 由于SK是不变的, 因此如果SK泄露, 相当于密码泄露, 即永久地拥有了该账号所有的权限.</li>
<li>SK永久有效问题: 主账号的SK是永久有效的, 无法类似stsToken一样设置有效期, 到期之后需要重新续期.</li>
</ol>
<h2 id="方式2-扮演RAM角色-使用RAM角色的STSToken"><a href="#方式2-扮演RAM角色-使用RAM角色的STSToken" class="headerlink" title="方式2: 扮演RAM角色, 使用RAM角色的STSToken"></a>方式2: 扮演RAM角色, 使用RAM角色的STSToken</h2><h3 id="使用样例-1"><a href="#使用样例-1" class="headerlink" title="使用样例"></a>使用样例</h3><pre class="mermaid">sequenceDiagram
      participant UserServer
      participant AliyunPop
   par assumeRole
      UserServer->>UserServer: Stores(AK/SK)
   UserServer->>UserServer: PrepareRequest(AK/SK)
   UserServer ->> +AliyunPop: AssumeRole(AK, Sign)
   AliyunPop->>AliyunPop: checkSign(AK, Sign)
   AliyunPop -->> -UserServer: (stsAK, stsSK, stsToken, Expiration)
   UserServer ->> UserServer: store(stsAK, stsSK, Expiration)
   end

   par runInstances
   UserServer->>UserServer: checkExpiration(stsAK, stsSK, Expiration)
   UserServer->>UserServer: PrepareRequest(stsAK, stsSK, stsToken)
   UserServer ->> +AliyunPop: RunInstances(stsAK, Sign)
   AliyunPop->>AliyunPop: checkSign(stsAK, Sign)
   AliyunPop -->> -UserServer: OK
   end</pre>

<h3 id="使用场景分析"><a href="#使用场景分析" class="headerlink" title="使用场景分析"></a>使用场景分析</h3><p>由于stsToken有效期用户是可以设置的, 因此风险有限.</p>
<h2 id="方式3-内部调用使用innerAPI"><a href="#方式3-内部调用使用innerAPI" class="headerlink" title="方式3: 内部调用使用innerAPI"></a>方式3: 内部调用使用innerAPI</h2><h3 id="使用场景分析-1"><a href="#使用场景分析-1" class="headerlink" title="使用场景分析"></a>使用场景分析</h3><p>为二方&#x2F;云产品颁发一个授信的AK&#x2F;SK, 在调用API时, 可以传入 (ak, sk, realUserId) 来代理用户执行操作</p>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>安全要求高: <ul>
<li>链路安全需要保障: 一定要保障API链路是走的安全链路或者内网通道, 不要开放在公网.</li>
<li>云产品ak&#x2F;sk需要保障: 不要放在客户端, 一定要放在服务端. API只能<code>服务端-服务端</code>调用</li>
</ul>
</li>
<li>流控方式: 需要按照&lt;api, realUserId, channel&gt;为粒度进行流控.<ul>
<li>如果按照&lt;api, 云产品UID&gt;进行流控, 云产品如果代理的realUserId数量增加, 会很容易到达限流瓶颈. </li>
<li>如果按照&lt;api, realUserId&gt;进行流控, 在云产品错误调用量很大时, 会导致影响用户正常的api调用</li>
</ul>
</li>
</ul>
<h1 id="其他思考"><a href="#其他思考" class="headerlink" title="其他思考"></a>其他思考</h1><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol>
<li>一定要用子账号的ak&#x2F;sk, 不能用主账号. 子账号ak&#x2F;sk泄露, 可以通过主账号进行禁用等. 一旦主账号sk泄露, 就彻底没有了防线.</li>
<li>作为第三方服务开发者, 一定要使用SLR来请求进行授权, 而不能直接索要用户的ak&#x2F;sk, 或者请求用户添加子账号之类.</li>
</ol>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h1><ul>
<li><a href="https://next.api.aliyun.com/document/Rds/2014-08-15/CreateServiceLinkedRole">CreateServiceLinkedRole</a></li>
<li><a href="https://developer.aliyun.com/ask/213942?spm=5176.21213303.J_6704733920.26.5c103eda7AvbNH&scm=20140722.S_community@@%E9%97%AE%E7%AD%94@@213942._.ID_community@@%E9%97%AE%E7%AD%94@@213942-RL_sts%20token-LOC_main-OR_ser-V_2-P0_6">Java SDK：使用STS Token进行访问</a></li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>java</tag>
        <tag>ram</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot+MyBatis使用XML配置方案</title>
    <url>//2022-03-03-springboot-mybatis-xml/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>项目代码之前是基于ibatis, 而且SQL语句是基于sqlmap.xml文件的.<br>现在升级到mybatis 3.4.2, 但mybatis的默认方案是基于annotation的.<br>个人非常不习惯annotation的方式, 每次排查问题拼接SQL, 以及后续修改SQL, 极其麻烦, 不直观.<br>因此想要使用xml的方式配置. 在这个过程中踩了很多坑, 现在记录下来.</p>
<h1 id="annotation-sql的问题"><a href="#annotation-sql的问题" class="headerlink" title="annotation sql的问题"></a>annotation sql的问题</h1><p>无论是下边的方式1, 还是方式2, SQL字符串都会自动换行, 然后用<code>+</code>以及<code>&quot;</code>等符号连接. </p>
<ol>
<li>从而如果线上出现问题, 需要手动重建SQL时, 很难直接拷贝出来替换参数找到目标SQL. 尤其是在SQL长度很长, 从而被换行成为N行场景下, 重建SQL简直就是灾难:</li>
<li>另外修改SQL, 也非常不方便, 不直观.</li>
</ol>
<h2 id="方式1-SQL直接在annotation上"><a href="#方式1-SQL直接在annotation上" class="headerlink" title="方式1: SQL直接在annotation上"></a>方式1: SQL直接在annotation上</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IUserDAO</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO user(userName,userAge,userAddress) VALUES(#&#123;userName&#125;,"</span>
            <span class="token operator">+</span> <span class="token string">"#&#123;userAge&#125;,#&#123;userAddress&#125;)"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addNewUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="方式2-SQL单独用String定义"><a href="#方式2-SQL单独用String定义" class="headerlink" title="方式2: SQL单独用String定义"></a>方式2: SQL单独用String定义</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IUserDAO</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> addNewUserSql <span class="token operator">=</span> 
            <span class="token string">"INSERT INTO user(userName,userAge,userAddress) VALUES(#&#123;userName&#125;,"</span>
            <span class="token operator">+</span> <span class="token string">"#&#123;userAge&#125;,#&#123;userAddress&#125;)"</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span>addNewUserSql<span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addNewUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="xml-sql的优势"><a href="#xml-sql的优势" class="headerlink" title="xml sql的优势"></a>xml sql的优势</h1><p>由于sql是放在xml里, 因此: </p>
<ol>
<li>重建SQL时, 可以直接把SQL拷贝出来, 人肉替换参数即可.</li>
<li>修改SQL时, 易读性要好很多.</li>
<li>另外一个优势, <a href="http://www.mybatis.cn/archives/695.html">XML文件的SQL片段的复用极为好用</a>.</li>
</ol>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span> <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>
    <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>edu.xmu.mybatis.somemapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUserId<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        SELECT id
        FROM `user`
        WHERE user_name = #&#123;userName&#125;
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h1 id="xml-sql的配置"><a href="#xml-sql的配置" class="headerlink" title="xml sql的配置"></a>xml sql的配置</h1><h2 id="第一步-mapper-interface定义"><a href="#第一步-mapper-interface定义" class="headerlink" title="第一步: mapper interface定义"></a>第一步: mapper interface定义</h2><ul>
<li>注意一定要使用 <code>@Repository</code> 注释 <code>UserMapper</code>, 否则该Mapper无法被Spring容器管理</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">edu<span class="token punctuation">.</span>xmu<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>somemapper</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Param</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Repository</span></span><span class="token punctuation">;</span>

<span class="token comment">/**
 * SQLMap文件参见: &#123;@linkplain UserMapper.xml&#125;
 *
 * @author kunlun.ykl
 */</span>
<span class="token annotation punctuation">@Repository</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/**
     * 根据userName获取userId
     *
     * @param userName
     * @return
     */</span>
    <span class="token class-name">Integer</span> <span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> userName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="第二步-mapper-xml文件"><a href="#第二步-mapper-xml文件" class="headerlink" title="第二步: mapper xml文件"></a>第二步: mapper xml文件</h2><ul>
<li>注意mapper文件一定要放在 <code>src/main/resources/edu/xmu/mybatis/somemapper/</code> 目录下</li>
<li>且mapper文件名一定要与interface的名称一样, 即本例中 <code>UserMapper.xml</code></li>
</ul>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span> <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>
    <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>edu.xmu.mybatis.somemapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUserId<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        SELECT id
        FROM `user`
        WHERE user_name = #&#123;userName&#125;
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>springboot</tag>
        <tag>mybatis</tag>
        <tag>xml</tag>
      </tags>
  </entry>
  <entry>
    <title>异步HttpClient使用Netty作为SocketChannel的Provider</title>
    <url>//2022-03-14-http-client-netty/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>com<span class="token punctuation">.</span>ning<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>async<span class="token operator">-</span>http<span class="token operator">-</span>client<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">1.9</span><span class="token number">.40</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
<span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>io<span class="token punctuation">.</span>netty<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>netty<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">3.10</span><span class="token number">.6</span><span class="token punctuation">.</span>Final<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="AsyncHttpClient-重要参数与使用指南"><a href="#AsyncHttpClient-重要参数与使用指南" class="headerlink" title="AsyncHttpClient 重要参数与使用指南"></a>AsyncHttpClient 重要参数与使用指南</h1><h2 id="重要参数"><a href="#重要参数" class="headerlink" title="重要参数"></a>重要参数</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">allowPoolingConnections<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="使用指南"><a href="#使用指南" class="headerlink" title="使用指南"></a>使用指南</h2><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="IO线程池最好不要用CachedThreadPool–-gt-此处存疑-暂时无法复现任务被Rejected场景"><a href="#IO线程池最好不要用CachedThreadPool–-gt-此处存疑-暂时无法复现任务被Rejected场景" class="headerlink" title="IO线程池最好不要用CachedThreadPool–&gt;此处存疑, 暂时无法复现任务被Rejected场景"></a>IO线程池最好不要用CachedThreadPool–&gt;此处存疑, 暂时无法复现任务被Rejected场景</h3><ul>
<li>如下样例, ioThread线程池只有10, 并发的请求有100, 由于<code>Executors.newCachedThreadPool</code>内部使用<code>SynchronousQueue</code>, 从而导致突发的请求会被Reject掉.</li>
<li>如果要用也要评估好容量, size一定要大于, 防止Reject请求??</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ExecutorService</span> ioThreadPool<span class="token operator">=</span><span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DefaultThreadFactory</span><span class="token punctuation">(</span>workerThreadPoolName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span><span class="token function">setExecutorService</span><span class="token punctuation">(</span>ioThreadPool<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// boss</span>
        <span class="token class-name">String</span> bossThreadPoolName<span class="token operator">=</span><span class="token string">"AsyncHttpClient-Dispatcher"</span><span class="token punctuation">;</span>
        <span class="token class-name">ExecutorService</span> bossThreadPool<span class="token operator">=</span><span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultThreadFactory</span><span class="token punctuation">(</span>bossThreadPoolName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">NioClientSocketChannelFactory</span> socketChannelFactory<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">NioClientSocketChannelFactory</span><span class="token punctuation">(</span>
        bossThreadPool<span class="token punctuation">,</span>ioThreadPool<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>
    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"http://www.baidu.com/"</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">doAsyncGet</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="单独定义Worker线程池-与IO线程池分开"><a href="#单独定义Worker线程池-与IO线程池分开" class="headerlink" title="单独定义Worker线程池, 与IO线程池分开"></a>单独定义Worker线程池, 与IO线程池分开</h3><p>如下, 在<code>onCompleted()</code>里执行时, 本质上还是在IO线程里执行, 此时TCP连接仍然是ESTABLISHED状态.<br>只有当<code>onCompleted()</code>方法执行完成, 底层的TCP连接才会或者放回连接池中(allowPoolingConnections&#x3D;true, 以便其他请求复用), 或者关闭(allowPoolingConnections&#x3D;false)<br>如果在<code>onCompleted()</code>里执行很耗时的操作, 就会</p>
<ol>
<li>占用着TCP连接无法复用&#x2F;关闭, 造成资源浪费.</li>
<li>占用IO线程, 导致其他IO任务等待.<br>由于此时http response已经完全读取完毕, 因此可以将response丢进worker线程池中, 执行耗时的业务操作. 从而把TCP连接复用&#x2F;关闭.<br>如下样例, 导致100个TCP连接一直处于ESTABLISHED状态</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CommonCallback</span> <span class="token keyword">extends</span> <span class="token class-name">AsyncCompletionHandler</span> <span class="token punctuation">&#123;</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token class-name">Response</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTimeInMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 此时TCP连接仍然是ESTABLISHED状态</span>
    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> response<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207042218576.png"></p>
<h3 id="当设置了maxConnectionsPerHost时-allowPoolingConnections最好设置为true-并且请求最好不要瞬时并发"><a href="#当设置了maxConnectionsPerHost时-allowPoolingConnections最好设置为true-并且请求最好不要瞬时并发" class="headerlink" title="当设置了maxConnectionsPerHost时, allowPoolingConnections最好设置为true, 并且请求最好不要瞬时并发"></a>当设置了maxConnectionsPerHost时, allowPoolingConnections最好设置为true, 并且请求最好不要瞬时并发</h3><p>否则如下例子, 请求就不会排队了, TCP连接也无法重用, 直接进入了Handler的<code>onThrowable()</code>方法里</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">doAsyncGet</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 这里最好根据平均处理时长, 设置一个sleep时长, 便于TCP连接回收回池子里, 从而不超过maxConnectionsPerHost阈值</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="AsyncHttpClient-参数适用场景"><a href="#AsyncHttpClient-参数适用场景" class="headerlink" title="AsyncHttpClient 参数适用场景"></a>AsyncHttpClient 参数适用场景</h1><h2 id="场景1-与较少数量的Server-通信频繁或者有大量数据要传输-需要维持TCP长连接"><a href="#场景1-与较少数量的Server-通信频繁或者有大量数据要传输-需要维持TCP长连接" class="headerlink" title="场景1: 与较少数量的Server, 通信频繁或者有大量数据要传输, 需要维持TCP长连接"></a>场景1: 与较少数量的Server, 通信频繁或者有大量数据要传输, 需要维持TCP长连接</h2><ul>
<li>本质上来说就是<ul>
<li>当建立&#x2F;维持TCP连接的成本高于传输成本时, 可以选择长连. 不论是TCP长连接, 还是HttpClient基于TCP的连接复用.</li>
<li>需要服务端需要不定期向客户端推送数据.</li>
</ul>
</li>
<li>实际场景: <ul>
<li>大文件的下载(基于HTTP&#x2F;TCP协议)</li>
<li>HTTP&#x2F;1.1, 即访问某个网站时, 短时间内需要往该Host发送N多HTTP请求.</li>
<li>K8S Watch机制, 使用的是HTTP Streaming机制或者WebSocket机制, 本质上还是TCP长连接.</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">allowPoolingConnections <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
pooledConnectionIdleTimeout <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span> <span class="token comment">// 设定池子里空闲TCP连接的保持时间, 大于该时长, 则TCP连接被关闭, 从连接池中移除</span>
<span class="token comment">// maxConnectionsPerHost = 100; // 设定往每个HOST的最大可以连接数量, 大于该连接的请求, 会进入到Handler的onThrowable里 (这里HOST是&#123;HOST_IP, PORT&#125; 还是 HOST_IP? 待验证)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="场景2-与较多数量的Server-每个Server传输较少的数据-可以不用连接复用-使用TCP短连接"><a href="#场景2-与较多数量的Server-每个Server传输较少的数据-可以不用连接复用-使用TCP短连接" class="headerlink" title="场景2: 与较多数量的Server, 每个Server传输较少的数据, 可以不用连接复用, 使用TCP短连接"></a>场景2: 与较多数量的Server, 每个Server传输较少的数据, 可以不用连接复用, 使用TCP短连接</h2><ul>
<li>实际场景: <ul>
<li>爬虫, 需要爬取N多个Server的标题&#x2F;概要信息, 构成网站地图, 每个Server&#x2F;Host的内容量较少. (当然如果是单个Server有N多内容要爬取, 也可以使用长连接)</li>
</ul>
</li>
<li>实际参数:</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">allowPoolingConnections <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 没必要把TCP连接放进池子里, 因为后续短期大概率就不会再跟该Host建立TCP连接</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h1 id="AsyncHttpClient-amp-Netty"><a href="#AsyncHttpClient-amp-Netty" class="headerlink" title="AsyncHttpClient &amp; Netty"></a>AsyncHttpClient &amp; Netty</h1><h1 id="AsyncHttpClient-amp-其他Provider"><a href="#AsyncHttpClient-amp-其他Provider" class="headerlink" title="AsyncHttpClient &amp; 其他Provider"></a>AsyncHttpClient &amp; 其他Provider</h1><h2 id="AsyncHttpClient-amp-JDK"><a href="#AsyncHttpClient-amp-JDK" class="headerlink" title="AsyncHttpClient &amp; JDK"></a>AsyncHttpClient &amp; JDK</h2><h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h1><ul>
<li>详细的测试样例: <a href="https://gitee.com/null_894_2517/test-core/blob/d504b14564ef7d6e2ee4a2b3a8379f62cdf894ee/src/test/java/edu/xmu/test/javaweb/httpclient/HttpAsyncClientTest.java">HttpAsyncClientTest.java</a></li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>httpclient</tag>
        <tag>asynchttpclient</tag>
        <tag>netty</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker的一些总结</title>
    <url>//2022-03-18-docker-summary/</url>
    <content><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li><p>在Linux上的Docker, 本质上是使用了</p>
<ol>
<li><code>cgroups</code>: 本质上是Linux内核提供的资源Quota约束机制, 包括cpu&#x2F;mem&#x2F;io等</li>
<li><code>namespace</code>: <a href="https://yeasy.gitbook.io/docker_practice/underly/namespace">命名空间</a>, 包括pid, net, ipc, mnt(文件目录root), uts, user(即username, group等)  </li>
<li><code>UnionFS</code>: 是 Docker 镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</li>
<li>操作系统等, 本质是共享内核, 所以不需要操作系统进行虚拟化. 可以认为每个Docker容器只是一个很轻量的文件目录&amp;资源隔离</li>
<li>只能创建linux类docker</li>
<li>每个Docker容器, 在Linux上就是一个进程. 但如果Docker容器内部, 本身启动了多个进程, 例如Nginx容器启动3个进程, 那么在Host上表现为啥?<blockquote>
<p>It is generally recommended that you separate areas of concern by using one service per container.<br>That service may fork into multiple processes (for example, Apache web server starts multiple worker processes).<br>It’s ok to have multiple processes, but to get the most benefit out of Docker, avoid one container being responsible for multiple aspects of your overall application.<br>You can connect multiple containers using user-defined networks and shared volumes.</p>
</blockquote>
</li>
</ol>
</li>
<li><p>在Mac上的Docker </p>
<ol>
<li>同样用虚拟化技术xhyve或者virtualbox来实现, 不共享mac os内核。update 2022, mac上的Docker使用 <a href="https://github.com/moby/hyperkit">hyperkit VM</a> 作为核心组件.</li>
<li>只能创建linux类docker，不能创建Mac OSX的docker. update 2022, <a href="https://github.com/sickcodes/Docker-OSX">Docker-OSX</a> 项目可以了. 但本质上也是使用了KVM虚拟机.</li>
</ol>
</li>
<li><p>Windows的Docker</p>
<ol>
<li>不能在Linux机器上使用windows的docker镜像. 参见: <a href="https://stackoverflow.com/questions/42158596/can-windows-containers-be-hosted-on-linux">can-windows-containers-be-hosted-on-linux</a><ol>
<li>因为docker在Linux上本质是使用了Linux HostOS的 <code>cgroups</code> <code>namespace</code> 等. 而Windows</li>
</ol>
</li>
<li>可以在Windows机器上使用Linux的docker镜像, 例如可以创建<code>alpine</code> <code>busybox</code> 等<ol>
<li>因为本质上是在Windows机器上创建了一个Linux的虚拟机, 而Linux的Docker全都是基于该虚拟机的.</li>
</ol>
</li>
</ol>
</li>
<li><p>Running&#x2F;Stopped的容器, 其镜像是不能被删除的(除非强制删除). 启动容器的时候, 需要重新使用镜像作为模板.</p>
</li>
<li><p>Docker vs. VM</p>
<blockquote>
<p>前台执行和后台执行的问题：<br>Docker 不是虚拟机，容器中的应用都应该以前台执行，而不是像虚拟机、物理机里面那样，用 start &#x2F; systemctl 去启动后台服务，容器内没有后台服务的概念。<br>比如：如果我们将CMD 写成这样：<br>CMD service nginx start<br>然后会发现容器执行后就立刻退出了，甚至在容器内使用systemctl 命令结果却发现根本执行不了。这就是因为没有搞明白前台、后台的概念，没有区分容器和虚拟机的差异，依旧在以传统虚拟机的角度去理解容器<br>对于容器而言，其启动程序就是容器应用进程，容器就是为了主进程而存在的，主进程退出，容器就失去了存在的意义，从而退出，其它辅助进程不是它需要关心的东西。<br>而使用 service nginx start 命令，则是希望 start 来已后台守护进程形式启动nginx服务。而 CMD service nginx start 会被理解为 CMD [“sh”, “-c”, “service nginx start”]，因此主进程实际上是sh， 那么当service nginx start 命令结束后，sh 也就结束了， sh 作为主进程退出了，自然就会令容器退出。<br>正确的做法是直接执行 nginx 可执行文件，并且要求以前台形式。如：<br>CMD [“nginx”, “-g”,” daemon off;”]</p>
</blockquote>
</li>
</ol>
<h1 id="疑问与思考"><a href="#疑问与思考" class="headerlink" title="疑问与思考"></a>疑问与思考</h1><ol>
<li>Docker容器中的多个进程, <a href="">在Host上看起来是怎样的</a>? </li>
<li>Docker镜像在Host上存放的路径是哪里?<ol>
<li>MacOS: <code>~/Library/Containers/com.docker.docker/Data/vms/0/</code></li>
</ol>
</li>
<li>Docker容器的生命周期是怎样的? 为啥Stop之后还需要Remove掉? 如果不Remove, 会怎样?</li>
<li>该选用哪个&#x2F;哪种镜像作为基础系统镜像? 参见: <a href="http://crunchtools.com/comparison-linux-container-images/">comparison-linux-container-images</a></li>
</ol>
<h1 id="深入机制探讨与研究"><a href="#深入机制探讨与研究" class="headerlink" title="深入机制探讨与研究"></a>深入机制探讨与研究</h1><h2 id="镜像Cache机制"><a href="#镜像Cache机制" class="headerlink" title="镜像Cache机制"></a>镜像Cache机制</h2><p>看了Docker官方文档关于 <a href="https://docs.docker.com/get-started/09_image_best/#layer-caching">layer-caching</a> 的介绍, 不太理解具体怎么判断是否需要使用缓存.<br>还好 <a href="http://open.daocloud.io/docker-build-de-cache-ji-zhi/">docker build 的 cache 机制</a> 文章很清晰地解释了这个疑问. 这里自己总结下: </p>
<h3 id="原始的Dockerfile如下"><a href="#原始的Dockerfile如下" class="headerlink" title="原始的Dockerfile如下"></a>原始的Dockerfile如下</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">FROM node:12-alpine
<span class="token comment"># Adding build tools to make yarn install work on Apple silicon / arm64 machines</span>
WORKDIR /app
COPY <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span>
RUN <span class="token function">yarn</span> <span class="token function">install</span> --production
CMD <span class="token punctuation">[</span><span class="token string">"node"</span>, <span class="token string">"src/index.js"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>存在的问题:</p>
<ol>
<li>由于第二层是 <code>COPY . .</code> 因此根据如下原则<blockquote>
<p>判断 ADD 命令或者 COPY 命令后紧接的文件是否发生变化，则成为是否延用 cache 的重要依据。<br>Docker 采取的策略是：获取 Dockerfile 下内容（包括文件的部分 inode 信息），<br>计算出一个唯一的 hash 值，若 hash 值未发生变化，则可以认为文件内容没有发生变化，可以使用 cache 机制；反之亦然。</p>
</blockquote>
</li>
<li>即使我们只修改了应用的某个static&#x2F;js文件, 没有修改node的依赖(即package.json), 第二层<code>COPY . .</code>是不会命中缓存的</li>
<li>因此根据如下原则,第三层<code>RUN yarn install --production</code>也不会命中缓存, 需要重新进行依赖的安装, 从而构建出新的镜像层次(Image Layer), 而这个是很耗时的操作.<blockquote>
<p>Once a layer changes, all downstream layers have to be recreated as well</p>
</blockquote>
</li>
</ol>
<h3 id="改进的Dockerfile如下"><a href="#改进的Dockerfile如下" class="headerlink" title="改进的Dockerfile如下:"></a>改进的Dockerfile如下:</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">FROM node:12-alpine
WORKDIR /app
COPY package.json yarn.lock ./
RUN <span class="token function">yarn</span> <span class="token function">install</span> --production
COPY <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span>
CMD <span class="token punctuation">[</span><span class="token string">"node"</span>, <span class="token string">"src/index.js"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>好处分析: </p>
<ol>
<li>如果<code>package.json</code>文件修改, 那么由于文件hash值变化, 因此第二层<code>COPY package.json yarn.lock ./</code>必然失效, 从而第三层也失效, 进入耗时的<code>yarn install</code>阶段, 符合预期.</li>
<li>如果<code>package.json</code>文件未修改, 只是修改了应用的某个static&#x2F;js文件, 那么第二层<code>COPY package.json yarn.lock ./</code>必然不会失效, 从而第三层也不会失效, 从而跳过了耗时的<code>yarn install</code>阶段, 最大化地利用了缓存.</li>
</ol>
<h3 id="RUN-命令存在外部依赖"><a href="#RUN-命令存在外部依赖" class="headerlink" title="RUN 命令存在外部依赖"></a>RUN 命令存在外部依赖</h3><p>如果RUN命令存在外部依赖, 如<br><code>RUN apt-get update</code><br><code>RUN git clone -q https://github.com/docker-in-practice/todo.git</code><br>等.<br>那么随着时间的推移, </p>
<ul>
<li>一年的 apt-get update 和一年后的 apt-get update, 由于软件源软件的更新, 从而导致产生的镜像理论上应该不同. </li>
<li><code>todo.git</code>代码库进行了更新push<br>如果继续使用 cache 机制, 将存在不满足用户需求的情况.<br>在这种情况下, 在构建镜像时可以强制不使用缓存, 这样每层构建时均不使用缓存:  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> build --no-cache -t getting-started <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul>
<h2 id="多阶段构建"><a href="#多阶段构建" class="headerlink" title="多阶段构建"></a><a href="https://yeasy.gitbook.io/docker_practice/image/multistage-builds">多阶段构建</a></h2><p>Dockerfile 多阶段构建</p>
<h2 id="镜像构建缓存利用的最佳实践"><a href="#镜像构建缓存利用的最佳实践" class="headerlink" title="镜像构建缓存利用的最佳实践"></a>镜像构建缓存利用的最佳实践</h2><ul>
<li><p>应该将更多静态的安装&amp;配置命令尽可能地放在 Dockerfile 的较前位置, 如: </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">FROM node:12-alpine
WORKDIR /app
COPY package.json yarn.lock ./
RUN <span class="token function">yarn</span> <span class="token function">install</span> --production
COPY <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span>
CMD <span class="token punctuation">[</span><span class="token string">"node"</span>, <span class="token string">"src/index.js"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p><a href="https://www.cnblogs.com/yanjieli/p/10246117.html">尽量将RUN命令在一行中执行</a>以减少镜像的层次, 如</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">FROM centos
<span class="token comment">#RUN yum install -y gcc make cmake</span>
<span class="token comment">#RUN wget -O redis.tar.gz "http://download.redis.io/releases/redis-3.2.5.tar.gz" </span>
<span class="token comment">#RUN mkdir -p /usr/src/redis</span>
<span class="token comment">#RUN tar xf redis.tar.gz -C /usr/src/redis --stript-components=1</span>
<span class="token comment">#RUN cd /usr/src/redis</span>
<span class="token comment">#RUN make</span>
<span class="token comment">#RUN make install</span>
<span class="token comment">#替换成一行:</span>
RUN yum <span class="token function">install</span> -y gcc <span class="token function">make</span> cmake <span class="token punctuation">\</span>
    <span class="token operator">&amp;&amp;</span> <span class="token function">wget</span> -O redis.tar.gz <span class="token string">"http://download.redis.io/releases/redi s-3.2.5.tar.gz"</span>  <span class="token punctuation">\</span>
    <span class="token operator">&amp;&amp;</span> <span class="token function">mkdir</span> -p /usr/src/redis <span class="token punctuation">\</span>
    <span class="token operator">&amp;&amp;</span> <span class="token function">tar</span> xf redis.tar.gz -C /usr/src/redis --stript-components<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">\</span>
    <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> /usr/src/redis <span class="token punctuation">\</span>
    <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token punctuation">\</span>
    <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>尽可能的使用 COPY，因为 COPY 的语义很明确，就是复制文件而已，而 ADD 则包含了更复杂的功能，其行为也不一定很清晰。</p>
<blockquote>
<p>比如 &lt;源路径&gt; 可以是一个 URL，这种情况下，Docker 引擎会试图去下载这个链接的文件放到 &lt;目标路径&gt; 去。<br>下载后的文件权限自动设置为 600，如果这并不是想要的权限，那么还需要增加额外的一层 RUN 进行权限调整，<br>另外，如果下载的是个压缩包，需要解压缩，也一样还需要额外的一层 RUN 指令进行解压缩。<br>所以不如直接使用 RUN 指令，然后使用 wget 或者 curl 工具下载，处理权限、解压缩、然后清理无用文件更合理。<br>因此，这个功能其实并不实用，而且不推荐使用。</p>
</blockquote>
</li>
<li><p>尽可能使用<a href="https://yeasy.gitbook.io/docker_practice/image/multistage-builds">多阶段构建</a></p>
</li>
<li><p>尽可能减少镜像层次</p>
</li>
<li><p><a href="https://yeasy.gitbook.io/docker_practice/image/commit#shen-yong-docker-commit">慎用 docker commit</a>, 否则会形成黑箱镜像</p>
</li>
</ul>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><h2 id="容器生命周期"><a href="#容器生命周期" class="headerlink" title="容器生命周期"></a>容器生命周期</h2><p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202206122132089.png"></p>
<h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><ul>
<li><p>使用镜像创建容器, v: 挂载volume</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> create -p <span class="token number">3000</span>:3000 --name <span class="token operator">&lt;</span>the-container-id<span class="token operator">></span> <span class="token operator">&lt;</span>the-image-id<span class="token operator">></span>
<span class="token function">docker</span> create -p <span class="token number">3000</span>:3000 -v <span class="token operator">&lt;</span>the-volume-id<span class="token operator">></span>:<span class="token operator">&lt;</span>mount-point<span class="token operator">></span> --name <span class="token operator">&lt;</span>the-container-id<span class="token operator">></span> <span class="token operator">&lt;</span>the-image-id<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>查看运行的容器</p>
</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">ps</span>
CONTAINER ID   IMAGE                    COMMAND                  CREATED         STATUS         PORTS                                       NAMES
d2c016a1e2ab   getting-started          <span class="token string">"docker-entrypoint.s…"</span>   <span class="token number">2</span> minutes ago   Up <span class="token number">2</span> minutes   <span class="token number">0.0</span>.0.0:3000-<span class="token operator">></span><span class="token number">3000</span>/tcp, :::3000-<span class="token operator">></span><span class="token number">3000</span>/tcp   confident_bouman<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>查看所有容器(包括Stopped)</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">ps</span> -a
<span class="token function">docker</span> container <span class="token function">ls</span> -a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>查看容器Command完整列表</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">ps</span> --no-trunc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>查看容器详情</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> inspect <span class="token operator">&lt;</span>the-container-id<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>登录容器<ul>
<li>-i, –interactive 保持STDIN打开，即使没有连接</li>
<li>-t, –tty 分配一个pseudo-TTY</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it <span class="token operator">&lt;</span>the-container-id<span class="token operator">></span> /bin/sh
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it <span class="token operator">&lt;</span>the-container-id<span class="token operator">></span> /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>


<ul>
<li>启动容器</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> start <span class="token operator">&lt;</span>the-container-id<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


<ul>
<li>使用镜像创建&amp;启动容器<ul>
<li>-d - run the container in detached mode (in the background)</li>
<li>-p 80:80 - map port 80 of the host to port 80 in the container</li>
<li>-t Allocate a pseudo-TTY</li>
<li>-i interactive mode</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -dp <span class="token number">3000</span>:3000 <span class="token operator">&lt;</span>the-image-id<span class="token operator">></span>
<span class="token function">docker</span> run -it busybox<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>停止容器</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> stop <span class="token operator">&lt;</span>the-container-id<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>删除容器</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">rm</span> <span class="token operator">&lt;</span>the-container-id<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>使用容器创建快照&#x2F;镜像</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> commit <span class="token operator">&lt;</span>the-container-id<span class="token operator">></span> <span class="token operator">&lt;</span>the-image-id<span class="token operator">></span>
<span class="token function">docker</span> commit <span class="token operator">&lt;</span>the-container-id<span class="token operator">></span> <span class="token operator">&lt;</span>your-docker-namespace<span class="token operator">></span>/<span class="token operator">&lt;</span>the-image-id<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>为什么不能在start容器时, 修改port binding?</li>
</ul>
<p>如上所述, 容器与Host的port binding, 只能在构建镜像时(create, run)指定, 为啥不能在容器stop之后, 重新start的时候修改呢?<br>例如 nginx 的本地镜像, 创建时 -p 80:80 (即把容器的80端口映射到主机的80端口), 创建出nginx-1容器, 发现由于主机的80端口已经被占用, 因此容器启动失败. 将nginx-1容器停止之后, 想要修改成 -p 8080:80, 却发现docker start命令根本没法指定port binding.</p>
<p>初学者估计都会有这样的疑问, 看<a href="https://forums.docker.com/t/solved-edit-container-details-ports-and-restarts-etc/64699">官方论坛也有无数人问过这个问题</a>. 这个就是虚拟机思维与容器思维的差异啦. </p>
<blockquote>
<p>因为docker默认容器是无状态的. 因此启动的关键配置都已经固化在镜像里了. 假设可以在启动时修改port binding, 假设容器崩溃, 或者增加副本数量, 在新的host上使用镜像重新创建新的容器时, 该使用 -p 8080:80 还是该使用 -p 80:80 呢? </p>
</blockquote>
<ul>
<li><strong>真的没办法在start时修改么?</strong> 实际是可以的. 根据stackoverflow的建议, 有几个方案:</li>
</ul>
<ol>
<li>hack方式: <a href="https://forums.docker.com/t/solved-edit-container-details-ports-and-restarts-etc/64699">ports and restarts</a> 本质是修改该容器在host上的配置文件, 而不修改镜像. 但非常不建议这么做! 理由如上.</li>
<li>修改镜像方式: 把变更commit到镜像里(不推荐, 造成黑箱镜像), 或者重新构建新的镜像(推荐, 所有配置都明确在dockerfile里), 使用新镜像重建容器.<br>建议使用方式2.</li>
</ol>
<h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><ul>
<li><p>通过源文件Dockerfile构建镜像</p>
<ul>
<li>-t: tag image</li>
<li>. : tells that Docker should look for the Dockerfile in the current directory<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> build -t getting-started <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul>
</li>
<li><p>查看镜像列表</p>
</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> image <span class="token function">ls</span>
REPOSITORY               TAG       IMAGE ID       CREATED       SIZE
getting-started          latest    79b4eb26b9f4   <span class="token number">4</span> hours ago   404MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p>把镜像push到hub</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> tag <span class="token operator">&lt;</span>the-image-id<span class="token operator">></span> <span class="token operator">&lt;</span>your-docker-namespace<span class="token operator">></span>/<span class="token operator">&lt;</span>the-image-id<span class="token operator">></span>
<span class="token function">docker</span> push <span class="token operator">&lt;</span>your-docker-namespace<span class="token operator">></span>/<span class="token operator">&lt;</span>the-image-id<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>删除镜像</p>
</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> rmi <span class="token operator">&lt;</span>the-image-id<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


<ul>
<li><p>通过源文件Dockerfile构建镜像</p>
</li>
<li><p>检查镜像内容</p>
</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> inspect <span class="token operator">&lt;</span>the-image-id<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>查看镜像继承关系</li>
<li>查看镜像历史版本</li>
</ul>
<h2 id="volume"><a href="#volume" class="headerlink" title="volume"></a>volume</h2><ul>
<li><p>创建</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> volume create <span class="token operator">&lt;</span>volume-name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>查看列表</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> volume <span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>查看详情 </p>
<ul>
<li>Mountpoint: 代表在Host上的实际路径, 但实际在mac上由于是虚拟机, 因此并不准确<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> volume inspect <span class="token operator">&lt;</span>volume-name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul>
</li>
</ul>
<h2 id="Dockerfile文件"><a href="#Dockerfile文件" class="headerlink" title="Dockerfile文件"></a>Dockerfile文件</h2><h3 id="exec模式与shell模式"><a href="#exec模式与shell模式" class="headerlink" title="exec模式与shell模式"></a>exec模式与shell模式</h3><ul>
<li>exec模式: 容器中的任务进程就是容器内的1号进程, 如下看到的1号进程是top<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">FROM alpine
CMD <span class="token punctuation">[</span><span class="token string">"top"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ul>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208071217750.png"><br>exec 模式的特点是不会通过 shell 执行相关的命令，所以像 $HOME 这样的环境变量是取不到的：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">FROM alpine
CMD <span class="token punctuation">[</span><span class="token string">"echo"</span>, <span class="token string">"<span class="token environment constant">$HOME</span>"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>可以修改成: (这样本质上bash进程就是1号进程了, 跟shell模式一样了)</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">FROM alpine
CMD <span class="token punctuation">[</span><span class="token string">"sh"</span>, <span class="token string">"-c"</span>, <span class="token string">"echo <span class="token environment constant">$HOME</span>"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>shell模式: 容器中的1号进程是bash进程<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">FROM alpine
CMD <span class="token function">top</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
本质上是翻译成了: <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">FROM alpine
CMD <span class="token punctuation">[</span><span class="token string">"sh"</span>, <span class="token string">"-c"</span>, <span class="token string">"top"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208071217114.png"></li>
</ul>
<h3 id="CMD模式与ENTRYPOINT模式"><a href="#CMD模式与ENTRYPOINT模式" class="headerlink" title="CMD模式与ENTRYPOINT模式"></a>CMD模式与ENTRYPOINT模式</h3><h4 id="CMD模式"><a href="#CMD模式" class="headerlink" title="CMD模式"></a>CMD模式</h4><p>CMD 指令的目的是：为容器提供默认的执行命令。<br>CMD 指令有三种使用方式，</p>
<ol>
<li>为 ENTRYPOINT 提供默认的参数：</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">CMD <span class="token punctuation">[</span><span class="token string">"param1"</span>,<span class="token string">"param2"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="2">
<li>exec 模式</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">CMD <span class="token punctuation">[</span><span class="token string">"executable"</span>,<span class="token string">"param1"</span>,<span class="token string">"param2"</span><span class="token punctuation">]</span>    // 这是 <span class="token builtin class-name">exec</span> 模式的写法, 注意需要使用双引号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="3">
<li>shell 模式：</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">CMD <span class="token builtin class-name">command</span> param1 param2                  // 这是 shell 模式的写法<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="ENTRYPOINT模式"><a href="#ENTRYPOINT模式" class="headerlink" title="ENTRYPOINT模式"></a>ENTRYPOINT模式</h4><p>ENTRYPOINT 指令有两种使用方式: </p>
<ul>
<li>exec 模式</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ENTRYPOINT <span class="token punctuation">[</span><span class="token string">"executable"</span>, <span class="token string">"param1"</span>, <span class="token string">"param2"</span><span class="token punctuation">]</span>   // 这是 <span class="token builtin class-name">exec</span> 模式的写法, 注意需要使用双引号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>shell 模式</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ENTRYPOINT <span class="token builtin class-name">command</span> param1 param2                   // 这是 shell 模式的写法<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>指定 ENTRYPOINT  指令为 exec 模式时，命令行上指定的参数会作为参数添加到 ENTRYPOINT 指定命令的参数列表中</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">FROM alpine
ENTRYPOINT <span class="token punctuation">[</span> <span class="token string">"top"</span>, <span class="token string">"-b"</span> <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run --rm test1 -c
// 最终结果是 <span class="token function">top</span> -b -c, 即-c被append为了新的参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<blockquote>
<p>由 CMD 指令指定默认的可选参数</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">FROM alpine
ENTRYPOINT <span class="token punctuation">[</span> <span class="token string">"top"</span>, <span class="token string">"-b"</span> <span class="token punctuation">]</span>
CMD <span class="token punctuation">[</span> <span class="token string">"-c"</span> <span class="token punctuation">]</span> // 默认参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run --rm test1
// 最终结果是 <span class="token function">top</span> -b -c, 即-c被append为了新的参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>


<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">FROM alpine
ENTRYPOINT <span class="token punctuation">[</span> <span class="token string">"top"</span>, <span class="token string">"-b"</span> <span class="token punctuation">]</span>
CMD <span class="token punctuation">[</span> <span class="token string">"-c"</span> <span class="token punctuation">]</span> // 默认参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run --rm test1 -n <span class="token number">1</span>
// 最终结果是 <span class="token function">top</span> -b -n <span class="token number">1</span>, 即由CMD中指定的默认参数被命令行中的参数替换掉了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<blockquote>
<p>指定 ENTRYPOINT  指令为 shell 模式时，会完全忽略命令行参数</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">FROM alpine
ENTRYPOINT <span class="token builtin class-name">echo</span> <span class="token environment constant">$HOME</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run --rm test1 <span class="token function">ls</span>
// <span class="token function">ls</span> 命令没有执行, 被忽略掉了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<blockquote>
<p>覆盖默认的 ENTRYPOINT 指令</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">FROM alpine
ENTRYPOINT <span class="token builtin class-name">echo</span> <span class="token environment constant">$HOME</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run --rm --entrypoint <span class="token function">ls</span> test1
// ls执行了, 覆盖掉了原始dockerfile中的entrypoint<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>


<h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>对于 CMD 和 ENTRYPOINT 的设计而言，多数情况下它们应该是单独使用的。当然，有一个例外是 CMD 为 ENTRYPOINT 提供默认的可选参数。<br>我们大概可以总结出下面几条规律：<br>• 如果 ENTRYPOINT 使用了 shell 模式，CMD 指令会被忽略。<br>• 如果 ENTRYPOINT 使用了 exec 模式，CMD 指定的内容被追加为 ENTRYPOINT 指定命令的参数。<br>• 如果 ENTRYPOINT 使用了 exec 模式，CMD 也应该使用 exec 模式。</p>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h1><ul>
<li><a href="https://www.jianshu.com/p/052e3d5792ee">容器核心:cgroups</a></li>
<li><a href="https://yeasy.gitbook.io/docker_practice/underly/ufs">Docker-从入门到实践</a></li>
<li><a href="https://moelove.info/2021/03/14/%E4%B8%87%E5%AD%97%E9%95%BF%E6%96%87%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA/">万字长文：彻底搞懂容器镜像构建</a></li>
<li><a href="https://www.cnblogs.com/sparkdev/p/8461576.html">Dockerfile 中的 CMD 与 ENTRYPOINT</a></li>
<li><a href="https://segmentfault.com/a/1190000016137548">https://segmentfault.com/a/1190000016137548</a></li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>k8s</tag>
        <tag>docker</tag>
        <tag>container</tag>
      </tags>
  </entry>
  <entry>
    <title>一些有意思的记录-3</title>
    <url>//2022-03-24-random-snippets/</url>
    <content><![CDATA[<h1 id="如何查看本机的公网IP"><a href="#如何查看本机的公网IP" class="headerlink" title="如何查看本机的公网IP"></a>如何查看本机的公网IP</h1><h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> myip.ipip.net
<span class="token function">curl</span> cip.cc
<span class="token function">curl</span> ip.sb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h2><p><a href="https://www.ipip.net/">https://www.ipip.net/</a><br><a href="https://ip.taobao.com/ipSearch">https://ip.taobao.com/ipSearch</a></p>
<h1 id="sh-c-是啥意思"><a href="#sh-c-是啥意思" class="headerlink" title="sh -c 是啥意思?"></a>sh -c 是啥意思?</h1><p>在Docker中经常看到</p>
<ol>
<li>启动命令 <code>sh -c &quot;ls -ltrh&quot;</code> 如下:<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208071203655.png"></li>
<li>Dockerfile如下:<br><code>-c</code>: string, 命令从-c后的字符串读取<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208071204728.png"></li>
</ol>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>net-tools</tag>
      </tags>
  </entry>
  <entry>
    <title>容器生态的一些研究与对比</title>
    <url>//2022-03-27-container-ecosystem/</url>
    <content><![CDATA[<h1 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h1><table>
<thead>
<tr>
<th>功能</th>
<th>阿里云云产品</th>
<th>aws云产品</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>容器服务</td>
<td>ECI(Elastic Container Instance)</td>
<td>ECS(Elastic Container Service)</td>
<td>提供单纯的容器服务, 不涉及容器的编排等</td>
</tr>
<tr>
<td>K8S集群管控服务</td>
<td><a href="https://www.aliyun.com/product/kubernetes">Dedicated ACK</a></td>
<td>EKS</td>
<td>可以基于各自的虚拟机实例, 作为Node, 在Node之上生产Pod</td>
</tr>
<tr>
<td>Serverless</td>
<td><a href="https://www.aliyun.com/product/cs/ask">ASK</a></td>
<td>Fargate</td>
<td>在客户侧看到的是一个VirtualKubelet, kube-system空间下的管控组件也都是不可见的</td>
</tr>
<tr>
<td>函数计算服务</td>
<td>Lambda</td>
<td>Function Compute</td>
<td></td>
</tr>
<tr>
<td>混合云扩容方案(虚拟机)</td>
<td>ACK Anywhere</td>
<td>EKS Anywhere</td>
<td>本质都是通过可以扩展使用云上虚拟机作为Node</td>
</tr>
<tr>
<td>混合云扩容方案(容器)</td>
<td>Virtual Kubelet</td>
<td>Virtual Kubelet</td>
<td>本质都是通过VirtualKubelet集成在现有k8s集群中</td>
</tr>
</tbody></table>
<h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><h2 id="常见的几种方式"><a href="#常见的几种方式" class="headerlink" title="常见的几种方式"></a>常见的几种方式</h2><ol>
<li>多租户全托管方式(Serverless)</li>
</ol>
<ul>
<li>例如: 搭建了一个统一的redis&#x2F;HBase集群, 为不同租户设定不同的namespace, quota等</li>
<li>优势: 用户侧接入简单方便, 但定制化的需求满足度与响应度可能不会很好. </li>
<li>缺点: 系统侧运维复杂能力要求较高, 横向扩展能力有可能成为瓶颈.</li>
<li>计费方式: 一般都是按量计费, 例如存储的使用量, API的调用量等</li>
<li>典型例子: <ul>
<li>大数据场景: <ul>
<li><a href="https://help.aliyun.com/document_detail/27800.html">MaxCompute</a></li>
<li><a href="https://help.aliyun.com/document_detail/187556.html">Lindorm Serverless型</a></li>
</ul>
</li>
<li>容器场景: <a href="https://www.aliyun.com/product/cs/ask">ASK</a>, 控制平面的组件是多租户共享的.</li>
</ul>
</li>
</ul>
<ol start="2">
<li>多租户半托管方式(Hosted)</li>
</ol>
<ul>
<li>例如: 在阿里云上购买RDS, 选好规格之后, RDS就创建好了, 直接拿到url就能jdbc连接上去了.</li>
<li>优势: 搭建成本低, 云产品会提供各种工具方便运维. 例如SQL审计工具, 白屏化的慢SQL查询与优化工具等.</li>
<li>缺点: 仍然需要用户感知实例的存在, 需要部分介入运维(例如实例宕机的数据备份恢复等).</li>
<li>典型例子: <ul>
<li>数据库场景: <a href="https://www.aliyun.com/product/rds/mysql">rds</a></li>
<li>大数据场景: <a href="https://help.aliyun.com/document_detail/187556.html">Lindorm 普通型</a></li>
<li>容器场景: <a href="https://www.aliyun.com/product/kubernetes">ack</a></li>
</ul>
</li>
</ul>
<ol start="3">
<li>单用户完全自建方式(SelfManaged)</li>
</ol>
<ul>
<li>例如: 自己基于2个ECS, 每个上边都安装了mysql, 搭建了一个主备的mysql集群.</li>
<li>优势: 用户侧可管控度极高</li>
<li>缺点: 自建初期与后续成本高, 运维成本极高</li>
<li>典型例子: <ul>
<li>基于ZK的jar包构建zk集群</li>
<li>基于CDH创建Hadoop集群</li>
<li>等</li>
</ul>
</li>
</ul>
<p>个人理解, 所有能自建的服务都可以以 <code>多租户半托管</code>, <code>多租户全托管</code> 方式进行. 但前提是要做好: </p>
<ol>
<li>ACL鉴权等安全准入机制</li>
<li>多租户的隔离: 数据, 服务QoS, 等</li>
<li>统一运维与版本升级方案</li>
<li>周边系统的支撑:<ol>
<li>管控</li>
<li>计量计费</li>
</ol>
</li>
</ol>
<p>例如:</p>
<ul>
<li>自建ZK集群, 是否可以改造后支持多租户的接入, 每个用户拿到属于自己的zk地址, 通过zkclient连接上去?</li>
</ul>
<h2 id="自建K8S集群与云上托管K8S集群-例如ACK-有啥区别"><a href="#自建K8S集群与云上托管K8S集群-例如ACK-有啥区别" class="headerlink" title="自建K8S集群与云上托管K8S集群(例如ACK)有啥区别?"></a>自建K8S集群与云上托管K8S集群(例如ACK)有啥区别?</h2><p>而 自建的k8s集群 与 云上托管的k8s集群, 正如同 多租户半托管 与 单用户完全自建</p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>k8s</tag>
        <tag>container</tag>
        <tag>aliyun</tag>
        <tag>aws</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s statefulset的研究与实践</title>
    <url>//2022-03-27-k8s-stateful-set/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>一直很感兴趣, k8s针对statefulset, 是如何支持的? </p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><h3 id="网络特性"><a href="#网络特性" class="headerlink" title="网络特性"></a>网络特性</h3><p>依赖HeadlessService, 来为每个Pod分配:</p>
<ul>
<li>一个稳定的, 有序的hostname, hostname命名规则: ${StatefulSetName}-${idx}, ${idx}从0开始</li>
<li>一条A记录, 从 ${hostname}.default.svc.cluster.local 到podIp的DNS解析</li>
<li>如果是非HeadlessService, 则会生成一条 ${SvcName}.default.svc.cluster.local 到 clusterIp 的DNS解析记录</li>
</ul>
<p>这样就保证了Pod销毁重建之后: </p>
<ul>
<li>虽然podIp变化了, 但hostname能跟之前保持一致</li>
<li>A记录会自动更新, 这样k8s集群内部其他pod通过 ${hostname}.default.svc.cluster.local 仍然能够访问到该pod</li>
</ul>
<h3 id="存储特性"><a href="#存储特性" class="headerlink" title="存储特性:"></a>存储特性:</h3><p>是statefulset的特性:     </p>
<ul>
<li>为每个pod创建单独的pvc, 命名规则 ${PvcName}-${StatefulSetName}-${idx}, 并绑定单独的pv, 而不是像deployment为所有pod创建(一个?还是多个?pvc)并绑定同一份pv</li>
<li>pod销毁重建之后, 由于hostname稳定, 所以还能关联到之前的pv</li>
</ul>
<h3 id="其他顺序化的部署特性"><a href="#其他顺序化的部署特性" class="headerlink" title="其他顺序化的部署特性:"></a>其他顺序化的部署特性:</h3><ul>
<li>Ordered Pod Creation: Pod创建是有序的, 即pod-0先创建, 只有pod-0成功后, pod-1才会创建</li>
<li>scale-down时, 会按照index倒序删除pod</li>
<li>滚动升级(Rolling Update)时, 会按照index倒序删除&amp;重建pod</li>
</ul>
<h2 id="statefulset的设计原理模型"><a href="#statefulset的设计原理模型" class="headerlink" title="statefulset的设计原理模型"></a>statefulset的设计原理模型</h2><ul>
<li>拓扑状态: 应用的多个实例之间不是完全对等的关系, 这个应用实例的启动必须按照某些顺序启动. 比如应用的主节点A要先于从节点B启动. 而如果你把A和B两个Pod删除掉, 他们再次被创建出来是也必须严格按照这个顺序才行. 并且, 新创建出来的Pod, 必须和原来的Pod的网络标识一样, 这样原先的访问者才能使用同样的方法, 访问到这个新的Pod.</li>
<li>存储状态: 应用的多个实例分别绑定了不同的存储数据. 对于这些应用实例来说, Pod A第一次读取到的数据, 和隔了十分钟之后再次读取到的数据, 应该是同一份, 哪怕在此期间Pod A被重新创建过. 一个数据库应用的多个存储实例.</li>
</ul>
<h1 id="ZK-on-K8S"><a href="#ZK-on-K8S" class="headerlink" title="ZK on K8S"></a>ZK on K8S</h1><h2 id="背景-1"><a href="#背景-1" class="headerlink" title="背景"></a>背景</h2><p>为啥 <a href="https://kubernetes.io/docs/tutorials/stateful-application/zookeeper/">zookeeper</a> 通过k8s的statefulset创建zk服务, 看yaml文件里,</p>
<ol>
<li>没有创建myid文件</li>
<li>没有在conf里配置 server.$i&#x3D;$NAME-$((i-1)).$DOMAIN:$SERVER_PORT:$ELECTION_PORT 这种</li>
</ol>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>原因: 因为启动zk的脚本是start-zookeeper, 不是start.sh<br>所以是因为docker镜像里边对zk进行了封装, 对k8s环境变量进行了适配. 具体查看脚本:<br><a href="https://github.com/kow3ns/kubernetes-zookeeper/blob/master/docker/scripts/start-zookeeper">start-zookeeper</a></p>
<h3 id="如何生成myid文件"><a href="#如何生成myid文件" class="headerlink" title="如何生成myid文件?"></a>如何生成myid文件?</h3><ul>
<li>依赖statefulset的hostname全局有序且保持稳定的特性</li>
<li>在pod内部执行”hostname”命令, 读取hostname, 参见上边hostname命名规则, 读取到${idx}值, myid&#x3D;${idx}+1</li>
</ul>
<h3 id="如何生成conf文件中的-server-1-x3D-xxxxxx-port1-port2-这种peer的记录"><a href="#如何生成conf文件中的-server-1-x3D-xxxxxx-port1-port2-这种peer的记录" class="headerlink" title="如何生成conf文件中的 server.1&#x3D;xxxxxx:port1:port2 这种peer的记录?"></a>如何生成conf文件中的 server.1&#x3D;xxxxxx:port1:port2 这种peer的记录?</h3><ul>
<li>server.$i&#x3D;$NAME-$((i-1)).$DOMAIN:$SERVER_PORT:$ELECTION_PORT</li>
<li>$NAME: 从hostname读取到 ${StatefulSetName}</li>
<li>$DOMAIN: 从 ‘hostname -d’ 命令中读取到domain信息</li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>k8s</tag>
        <tag>stateful-set</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenAPI设计之ClientToken</title>
    <url>//2022-03-28-openapi-clienttoken/</url>
    <content><![CDATA[<h1 id="ClientToken作用"><a href="#ClientToken作用" class="headerlink" title="ClientToken作用"></a>ClientToken作用</h1><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>learn-from-failure</tag>
        <tag>java</tag>
        <tag>client-token</tag>
        <tag>openapi</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenAPI设计之NextToken</title>
    <url>//2022-03-28-openapi-nexttoken/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景:"></a>背景:</h1><p>在API设计时, 如果是<code>list</code>接口, 通常需要对返回的结果进行分页.</p>
<h1 id="为啥需要分页"><a href="#为啥需要分页" class="headerlink" title="为啥需要分页?"></a>为啥需要分页?</h1><ol>
<li>数据库层面: 防止由于没有limit, 导致从数据库中一次查询数据太多, 导致形成慢SQL: <ol>
<li>导致mysql需要把结果放在内存, 从而导致整体MySQL内存占用增加, 甚至oom</li>
<li>导致通过tcp数据库连接, 往client端传输耗时过久. 例如10MB的数据, 在100Mbps的带宽下需要几乎1秒</li>
</ol>
</li>
<li>应用层面: 如果没有分页, 也很容易造成应用内存占用过多, 如果是Java应用很可能触发FGC等.</li>
<li>前端: 如果不分页, 导致浏览器无法缓存大量数据, 卡死.<br>所以一般对于非宽表, 以500~2000作为pageSize较为合适.</li>
</ol>
<h1 id="方案1-pageNo-pageSize-方式"><a href="#方案1-pageNo-pageSize-方式" class="headerlink" title="方案1: pageNo+pageSize 方式"></a>方案1: pageNo+pageSize 方式</h1><h2 id="典型常规的分页写法"><a href="#典型常规的分页写法" class="headerlink" title="典型常规的分页写法"></a>典型常规的分页写法</h2><ul>
<li>当页数少时, 如下第1页, 耗时0ms:</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees  <span class="token keyword">order</span> <span class="token keyword">by</span> emp_no <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">--------+------------+------------+-----------+--------+------------+</span>
<span class="token operator">|</span> emp_no <span class="token operator">|</span> birth_date <span class="token operator">|</span> first_name <span class="token operator">|</span> last_name <span class="token operator">|</span> gender <span class="token operator">|</span> hire_date  <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">--------+------------+------------+-----------+--------+------------+</span>
<span class="token operator">|</span> <span class="token number">499999</span> <span class="token operator">|</span> <span class="token number">1958</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">01</span> <span class="token operator">|</span> Sachin     <span class="token operator">|</span> Tsukuda   <span class="token operator">|</span> M      <span class="token operator">|</span> <span class="token number">1997</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">30</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">499998</span> <span class="token operator">|</span> <span class="token number">1956</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">05</span> <span class="token operator">|</span> Patricia   <span class="token operator">|</span> Breugel   <span class="token operator">|</span> M      <span class="token operator">|</span> <span class="token number">1993</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">13</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">499997</span> <span class="token operator">|</span> <span class="token number">1961</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">03</span> <span class="token operator">|</span> Berhard    <span class="token operator">|</span> Lenart    <span class="token operator">|</span> M      <span class="token operator">|</span> <span class="token number">1986</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">21</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">--------+------------+------------+-----------+--------+------------+</span>
<span class="token number">3</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>– 当页数多时, 如下到第300000&#x2F;3&#x3D;10w页, 耗时110ms: </p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span>  <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees  <span class="token keyword">order</span> <span class="token keyword">by</span> emp_no <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">300000</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">--------+------------+------------+------------+--------+------------+</span>
<span class="token operator">|</span> emp_no <span class="token operator">|</span> birth_date <span class="token operator">|</span> first_name <span class="token operator">|</span> last_name  <span class="token operator">|</span> gender <span class="token operator">|</span> hire_date  <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">--------+------------+------------+------------+--------+------------+</span>
<span class="token operator">|</span>  <span class="token number">10024</span> <span class="token operator">|</span> <span class="token number">1958</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">05</span> <span class="token operator">|</span> Suzette    <span class="token operator">|</span> Pettey     <span class="token operator">|</span> F      <span class="token operator">|</span> <span class="token number">1997</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">19</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">10023</span> <span class="token operator">|</span> <span class="token number">1953</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">29</span> <span class="token operator">|</span> Bojan      <span class="token operator">|</span> Montemayor <span class="token operator">|</span> F      <span class="token operator">|</span> <span class="token number">1989</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">17</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">10022</span> <span class="token operator">|</span> <span class="token number">1952</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">08</span> <span class="token operator">|</span> Shahaf     <span class="token operator">|</span> Famili     <span class="token operator">|</span> M      <span class="token operator">|</span> <span class="token number">1995</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">22</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">--------+------------+------------+------------+--------+------------+</span>
<span class="token number">3</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.11</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>如上, 随着翻页的继续, 当 <code>limit 1000000, 100</code> 的时候, 性能会急剧下降.</p>
<h2 id="问题原因分析"><a href="#问题原因分析" class="headerlink" title="问题原因分析"></a>问题原因分析</h2><p>具体原因参见: <a href="https://mp.weixin.qq.com/s/Wtg9acg6M5q5kkSH4M3qXQ">MySQL 用 limit 为什么会影响性能？</a><br>这里进行个概述, 在执行SQL时, innodb会做如下两步:  </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">第一步: 查询到索引叶子节点数据
第二步: 根据叶子节点上的主键值去聚簇索引上查询需要的全部字段值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><img data-src="/source/_posts/learn-from-failure/img.png" alt="img.png"></p>
<blockquote>
<p>像上面这样，需要查询1000000次索引节点，查询1000100次聚簇索引的数据，最后再将结果过滤掉前1000000条，取出最后100条。<br>MySQL耗费了大量随机I&#x2F;O在查询聚簇索引的数据上，而有1000000次随机I&#x2F;O查询到的数据是不会出现在结果集当中的。<br>加载了很多热点不是很高的数据页到buffer pool，会造成buffer pool的污染，占用buffer pool的空间。</p>
</blockquote>
<h1 id="方案2-改进的-pageNo-pageSize-方式"><a href="#方案2-改进的-pageNo-pageSize-方式" class="headerlink" title="方案2: 改进的 pageNo+pageSize 方式"></a>方案2: 改进的 pageNo+pageSize 方式</h1><p>本质<code>方案1</code>是由于回表耗时, 那么可以先将主键筛选&amp;查询出来, 然后直接根据筛选之后的主键去回表.</p>
<h2 id="改进的分页写法"><a href="#改进的分页写法" class="headerlink" title="改进的分页写法"></a>改进的分页写法</h2><p>如下, </p>
<ul>
<li>从 110ms-&gt;70ms. 性能有一定提升, 但由于数据集不太好, 数据量太小. 后边试试airport数据集.</li>
<li>内层SQL本质是直接在通过主键索引将3个主键查询出来, 外层SQL根据3个主键回表查询对应行的全部信息.</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> aa<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> employees aa <span class="token keyword">join</span> <span class="token punctuation">(</span><span class="token keyword">select</span> emp_no <span class="token keyword">from</span> employees  <span class="token keyword">order</span> <span class="token keyword">by</span> emp_no <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">300000</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> bb <span class="token keyword">on</span> aa<span class="token punctuation">.</span>emp_no<span class="token operator">=</span>bb<span class="token punctuation">.</span>emp_no<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">--------+------------+------------+------------+--------+------------+</span>
<span class="token operator">|</span> emp_no <span class="token operator">|</span> birth_date <span class="token operator">|</span> first_name <span class="token operator">|</span> last_name  <span class="token operator">|</span> gender <span class="token operator">|</span> hire_date  <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">--------+------------+------------+------------+--------+------------+</span>
<span class="token operator">|</span>  <span class="token number">10024</span> <span class="token operator">|</span> <span class="token number">1958</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">05</span> <span class="token operator">|</span> Suzette    <span class="token operator">|</span> Pettey     <span class="token operator">|</span> F      <span class="token operator">|</span> <span class="token number">1997</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">19</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">10023</span> <span class="token operator">|</span> <span class="token number">1953</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">29</span> <span class="token operator">|</span> Bojan      <span class="token operator">|</span> Montemayor <span class="token operator">|</span> F      <span class="token operator">|</span> <span class="token number">1989</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">17</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">10022</span> <span class="token operator">|</span> <span class="token number">1952</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">08</span> <span class="token operator">|</span> Shahaf     <span class="token operator">|</span> Famili     <span class="token operator">|</span> M      <span class="token operator">|</span> <span class="token number">1995</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">22</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">--------+------------+------------+------------+--------+------------+</span>
<span class="token number">3</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.07</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="方案3-nextToken-maxResults-方式"><a href="#方案3-nextToken-maxResults-方式" class="headerlink" title="方案3: nextToken+maxResults 方式"></a>方案3: nextToken+maxResults 方式</h1><ul>
<li>nextToken本质上就是按照查询条件, 上一次结果集中最后一条记录的数据库主键ID值.</li>
<li>因此直接走主键索引.</li>
</ul>
<h2 id="写法"><a href="#写法" class="headerlink" title="写法"></a>写法</h2><ul>
<li>当第一页时, 由于没有nextToken, 因此直接获取(可以看到与pageSize写法的limit 0, 3结果是一样的):</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token keyword">order</span> <span class="token keyword">by</span> emp_no <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">--------+------------+------------+-----------+--------+------------+</span>
<span class="token operator">|</span> emp_no <span class="token operator">|</span> birth_date <span class="token operator">|</span> first_name <span class="token operator">|</span> last_name <span class="token operator">|</span> gender <span class="token operator">|</span> hire_date  <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">--------+------------+------------+-----------+--------+------------+</span>
<span class="token operator">|</span> <span class="token number">499999</span> <span class="token operator">|</span> <span class="token number">1958</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">01</span> <span class="token operator">|</span> Sachin     <span class="token operator">|</span> Tsukuda   <span class="token operator">|</span> M      <span class="token operator">|</span> <span class="token number">1997</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">30</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">499998</span> <span class="token operator">|</span> <span class="token number">1956</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">05</span> <span class="token operator">|</span> Patricia   <span class="token operator">|</span> Breugel   <span class="token operator">|</span> M      <span class="token operator">|</span> <span class="token number">1993</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">13</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">499997</span> <span class="token operator">|</span> <span class="token number">1961</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">03</span> <span class="token operator">|</span> Berhard    <span class="token operator">|</span> Lenart    <span class="token operator">|</span> M      <span class="token operator">|</span> <span class="token number">1986</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">21</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">--------+------------+------------+-----------+--------+------------+</span>
<span class="token number">3</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>当第10w页时, 有了上一次的nextToken, 因此如下:</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token keyword">where</span> emp_no<span class="token operator">&lt;</span><span class="token number">10025</span> <span class="token keyword">order</span> <span class="token keyword">by</span> emp_no <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">--------+------------+------------+------------+--------+------------+</span>
<span class="token operator">|</span> emp_no <span class="token operator">|</span> birth_date <span class="token operator">|</span> first_name <span class="token operator">|</span> last_name  <span class="token operator">|</span> gender <span class="token operator">|</span> hire_date  <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">--------+------------+------------+------------+--------+------------+</span>
<span class="token operator">|</span>  <span class="token number">10024</span> <span class="token operator">|</span> <span class="token number">1958</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">05</span> <span class="token operator">|</span> Suzette    <span class="token operator">|</span> Pettey     <span class="token operator">|</span> F      <span class="token operator">|</span> <span class="token number">1997</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">19</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">10023</span> <span class="token operator">|</span> <span class="token number">1953</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">29</span> <span class="token operator">|</span> Bojan      <span class="token operator">|</span> Montemayor <span class="token operator">|</span> F      <span class="token operator">|</span> <span class="token number">1989</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">17</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">10022</span> <span class="token operator">|</span> <span class="token number">1952</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">08</span> <span class="token operator">|</span> Shahaf     <span class="token operator">|</span> Famili     <span class="token operator">|</span> M      <span class="token operator">|</span> <span class="token number">1995</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">22</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">--------+------------+------------+------------+--------+------------+</span>
<span class="token number">3</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>可以看到, nextToken方式, 随着页数的增加, 结果与<code>pageSize</code>方式是完全等价的, 但时间消耗完全是稳定的.</p>
<h1 id="优缺点比较与思考"><a href="#优缺点比较与思考" class="headerlink" title="优缺点比较与思考"></a>优缺点比较与思考</h1><p>nextToken方式</p>
<ul>
<li>优点: <ul>
<li>不会随着页数的增加, 导致时间消耗线性增长. 而是直接走主键索引, 时间消耗稳定.</li>
</ul>
</li>
<li>缺点: <ul>
<li>由于nextToken只有一个值, 翻页之后, nextToken就被覆盖掉了. 只能顺序向前翻页, 而很难再退回上一页. (但实际调用端可以保存下来, )</li>
<li>nextToken值本身由于是数据库主键, 因此需要进行加密, 防止外部窥探到数据条数等敏感信息. 但加解密带了了额外的CPU消耗.</li>
</ul>
</li>
</ul>
<h1 id="一些NextToken-MaxResults的实践"><a href="#一些NextToken-MaxResults的实践" class="headerlink" title="一些NextToken+MaxResults的实践"></a>一些NextToken+MaxResults的实践</h1><ul>
<li><p>AWS的<a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html">DescribeInstances</a></p>
</li>
<li><p>AWS的<a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Query.Pagination.html">LastEvaluatedKey</a>, 本质与NextToken是一样的</p>
<blockquote>
<p>the LastEvaluatedKey from a Query response should be used as the ExclusiveStartKey for the next Query request</p>
</blockquote>
</li>
<li><p>Aliyun的<a href="https://help.aliyun.com/document_detail/25506.html">DescribeInstances</a></p>
</li>
</ul>
<h1 id="其他记录"><a href="#其他记录" class="headerlink" title="其他记录"></a>其他记录</h1><h2 id="MySQL查看BufferPool"><a href="#MySQL查看BufferPool" class="headerlink" title="MySQL查看BufferPool"></a>MySQL查看BufferPool</h2><p>如下, </p>
<ul>
<li>PRIMARY: 代表bufferpool中数据页数.</li>
<li>val: 代表bufferpool中索引页.</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> TABLE_NAME<span class="token punctuation">,</span> index_name<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>INNODB_BUFFER_PAGE <span class="token keyword">where</span> INDEX_NAME <span class="token operator">in</span><span class="token punctuation">(</span><span class="token string">'val'</span><span class="token punctuation">,</span><span class="token string">'primary'</span><span class="token punctuation">)</span> <span class="token operator">and</span> TABLE_NAME <span class="token operator">like</span> <span class="token string">'%employees%'</span> <span class="token keyword">group</span> <span class="token keyword">by</span> TABLE_NAME<span class="token punctuation">,</span> index_name<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">-------------------------+------------+----------+</span>
<span class="token operator">|</span> TABLE_NAME              <span class="token operator">|</span> index_name <span class="token operator">|</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------------------------+------------+----------+</span>
<span class="token operator">|</span> <span class="token identifier"><span class="token punctuation">`</span>employees<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>salaries<span class="token punctuation">`</span></span>  <span class="token operator">|</span> <span class="token keyword">PRIMARY</span>    <span class="token operator">|</span>     <span class="token number">4486</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token identifier"><span class="token punctuation">`</span>employees<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>employees<span class="token punctuation">`</span></span> <span class="token operator">|</span> <span class="token keyword">PRIMARY</span>    <span class="token operator">|</span>      <span class="token number">887</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token identifier"><span class="token punctuation">`</span>employees<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>employees<span class="token punctuation">`</span></span> <span class="token operator">|</span> val        <span class="token operator">|</span>       <span class="token number">11</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token identifier"><span class="token punctuation">`</span>employees<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>dept_emp<span class="token punctuation">`</span></span>  <span class="token operator">|</span> <span class="token keyword">PRIMARY</span>    <span class="token operator">|</span>      <span class="token number">728</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------------------------+------------+----------+</span>
<span class="token number">4</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.05</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="MySQL中-rowid的使用"><a href="#MySQL中-rowid的使用" class="headerlink" title="MySQL中_rowid的使用"></a>MySQL中_rowid的使用</h2><h3 id="限制条件"><a href="#限制条件" class="headerlink" title="限制条件"></a>限制条件</h3><p>适用版本: <code>MySQL 5.7</code> ~ <code>MySQL 8.0.26</code><br>参见文档: <a href="http://blog.itpub.net/26736162/viewspace-2734341/">MySQL中的_rowid</a></p>
<p>_rowid不存在的情况:</p>
<ul>
<li><code>主键列</code>或者<code>非空唯一列</code>的类型不是<code>数字类型</code></li>
<li>主键是联合主键</li>
<li>唯一列不是非空的</li>
</ul>
<p>_rowid只存在于以下情况：</p>
<ul>
<li>当表中存在一个 <code>数字类型的单列主键</code>时， _rowid其实就是指的是这个主键列</li>
<li>当表中 不存在主键但存在一个 <code>数字类型的非空唯一索引</code>时, _rowid其实就是指的是对应<code>非空唯一列</code></li>
</ul>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="主键列不是数字类型-不会有-rowid"><a href="#主键列不是数字类型-不会有-rowid" class="headerlink" title="主键列不是数字类型, 不会有_rowid"></a>主键列不是数字类型, 不会有_rowid</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">desc</span> departments<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">-----------+-------------+------+-----+---------+-------+</span>
<span class="token operator">|</span> Field     <span class="token operator">|</span> <span class="token keyword">Type</span>        <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-----------+-------------+------+-----+---------+-------+</span>
<span class="token operator">|</span> dept_no   <span class="token operator">|</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>     <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">|</span> dept_name <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> UNI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-----------+-------------+------+-----+---------+-------+</span>
<span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
mysql<span class="token operator">></span> <span class="token keyword">select</span> _rowid <span class="token keyword">from</span> departments <span class="token keyword">limit</span> <span class="token number">2</span><span class="token punctuation">;</span>
ERROR <span class="token number">1054</span> <span class="token punctuation">(</span><span class="token number">42</span>S22<span class="token punctuation">)</span>: Unknown <span class="token keyword">column</span> <span class="token string">'_rowid'</span> <span class="token operator">in</span> <span class="token string">'field list'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="联合主键-不会有-rowid"><a href="#联合主键-不会有-rowid" class="headerlink" title="联合主键, 不会有_rowid"></a>联合主键, 不会有_rowid</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> salaries<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">----------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span>
<span class="token operator">|</span> <span class="token keyword">Table</span>    <span class="token operator">|</span> <span class="token keyword">Create</span> <span class="token keyword">Table</span>                                                                                                                                                                                                                                                                                                                                           <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span>
<span class="token operator">|</span> salaries <span class="token operator">|</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>salaries<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>salary<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>from_date<span class="token punctuation">`</span></span> <span class="token keyword">date</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>to_date<span class="token punctuation">`</span></span> <span class="token keyword">date</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>from_date<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">CONSTRAINT</span> <span class="token identifier"><span class="token punctuation">`</span>salaries_ibfk_1<span class="token punctuation">`</span></span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token identifier"><span class="token punctuation">`</span>employees<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">CASCADE</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8mb4_0900_ai_ci <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">></span> <span class="token keyword">select</span> _rowid <span class="token keyword">from</span> salaries <span class="token keyword">limit</span> <span class="token number">10</span><span class="token punctuation">;</span>
ERROR <span class="token number">1054</span> <span class="token punctuation">(</span><span class="token number">42</span>S22<span class="token punctuation">)</span>: Unknown <span class="token keyword">column</span> <span class="token string">'_rowid'</span> <span class="token operator">in</span> <span class="token string">'field list'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>感觉_rowid很鸡肋, 如果乱用很容易出错.</p>
<h2 id="MySQL公共大数据集"><a href="#MySQL公共大数据集" class="headerlink" title="MySQL公共大数据集"></a>MySQL公共大数据集</h2><blockquote>
<p>为了测试大数据集nextToken与pageNo方式, 找了很多测试大数据集, 总结如下</p>
</blockquote>
<ul>
<li>MySQL官方的<a href="https://github.com/datacharmer/test_db">test_db</a><ul>
<li>优点: 使用起来非常简单, 按照github中的步骤, 很快就完成了数据的导入.</li>
<li>缺点: <ul>
<li>总体数据量不太多, 最大的<code>salaries</code>表也只有200w行左右数据, 针对翻页极端情况,</li>
<li><code>salaries</code>表没有primary_key, 不符合第二范式, 即数据表每一个实例或者行必须被唯一标识, 导致不好验证next_token</li>
</ul>
</li>
</ul>
</li>
<li>MySQL官方的<a href="https://dev.mysql.com/doc/airportdb/en/airportdb-introduction.html">airportdb</a><ul>
<li>优点: 数据量大, <code>bookings</code>表有5000w数据, 且符合第二范式, 可以进行nextToken验证.</li>
<li>缺点: <ul>
<li>导入数据需要单独安装<a href="https://dev.mysql.com/doc/mysql-shell/8.0/en/mysql-shell-install-macos-quick.html">MySQL Shell</a></li>
<li>数据集600MB, 下载速度实在是捉急.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="MySQL-Shell"><a href="#MySQL-Shell" class="headerlink" title="MySQL Shell"></a>MySQL Shell</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>参照文档: <a href="https://dev.mysql.com/doc/mysql-shell/8.0/en/mysql-shell-install-macos-quick.html">MySQL Shell</a><br>mac上直接下载dmg安装就好</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul>
<li>使用 <code>mysqlsh</code> 命令进入到shell里</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">davywalkerdeMacBook-Pro:~ davywalker$ mysqlsh
MySQL Shell <span class="token number">8.0</span>.28

Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">2016</span>, <span class="token number">2022</span>, Oracle and/or its affiliates.
Oracle is a registered trademark of Oracle Corporation and/or its affiliates.
Other names may be trademarks of their respective owners.

Type <span class="token string">'\help'</span> or <span class="token string">'\?'</span> <span class="token keyword">for</span> <span class="token builtin class-name">help</span><span class="token punctuation">;</span> <span class="token string">'\quit'</span> to exit.
 MySQL  JS <span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>使用 <code>\connect</code> 命令连接数据库</li>
</ul>
<p>否则会报 <code>Util.loadDump: An open session is required to perform this operation. (RuntimeError)</code> 错误</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> MySQL  JS <span class="token operator">></span> <span class="token punctuation">\</span>connect root@localhost:3306
Creating a session to <span class="token string">'root@localhost:3306'</span>
Please provide the password <span class="token keyword">for</span> <span class="token string">'root@localhost:3306'</span><span class="token builtin class-name">:</span>
Your MySQL connection <span class="token function">id</span> is <span class="token number">31</span>
Server version: <span class="token number">8.0</span>.26 MySQL Community Server - GPL
No default schema selected<span class="token punctuation">;</span> <span class="token builtin class-name">type</span> <span class="token punctuation">\</span>use <span class="token operator">&lt;</span>schema<span class="token operator">></span> to <span class="token builtin class-name">set</span> one.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>enable <code>local_infile</code></li>
</ul>
<p>否则会报如下错误</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ERROR: The <span class="token string">'local_infile'</span> global system variable must be <span class="token builtin class-name">set</span> to ON <span class="token keyword">in</span> the target server, after the server is verified to be trusted.
Util.loadDump: local_infile disabled <span class="token keyword">in</span> server <span class="token punctuation">(</span>RuntimeError<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql<span class="token operator">></span> <span class="token builtin class-name">set</span> global <span class="token assign-left variable">local_infile</span><span class="token operator">=</span>ON<span class="token punctuation">;</span>
Query OK, <span class="token number">0</span> rows affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>使用<code>util.loadDump</code>命令导入dump文件</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> MySQL  localhost:3306 ssl  JS <span class="token operator">></span> util.loadDump<span class="token punctuation">(</span><span class="token string">"/Users/davywalker/Downloads/airport-db"</span>, <span class="token punctuation">&#123;</span>threads: <span class="token number">16</span>, deferTableIndexes: <span class="token string">"all"</span>, ignoreVersion: true<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
Loading DDL and Data from <span class="token string">'/Users/davywalker/Downloads/airport-db'</span> using <span class="token number">16</span> threads.
Opening dump<span class="token punctuation">..</span>.
NOTE: Dump <span class="token function">format</span> has version <span class="token number">1.0</span>.2 and was created by an older version of MySQL Shell. If you experience problems loading it, please recreate the dump using the current version of MySQL Shell and try again.
Target is MySQL <span class="token number">8.0</span>.26. Dump was produced from MySQL <span class="token number">8.0</span>.26-cloud<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>learn-from-failure</tag>
        <tag>java</tag>
        <tag>openapi</tag>
        <tag>next-token</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一些有趣的产品设计</title>
    <url>//2022-04-04-good-design/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>代码, 架构, 逻辑, 产品, 设计等, 不应该是枯燥乏味的, 不应该是痛苦复杂的, 而应该是有趣的, 简单的, 应该是geek的, 应该是美的.<br>这里记录下自己的点滴发现, 希望能走出CRUD与纷杂的业务逻辑, 逐渐提高一点审美与品味.<br>甚至觉得在软件产品的世界里，不应该由呆板无味的程序员主导，应该由产品经理，由用研，由UX等负责。<br>用户是知道什么好用，什么不好用的。知道哪些有趣，哪些无趣。<br>Mac字体最开始也是因为Steve Jobs在大学选修了这门课。<br>越来越意识到，软件的设计，<mark>需要的是克制</mark>，减少对用户的打扰，而不是一味增加与堆砌功能，影响体验，后边会附上自己识别到的bad design，引以为戒。</p>
<h1 id="changelog优雅的格式"><a href="#changelog优雅的格式" class="headerlink" title="changelog优雅的格式"></a>changelog优雅的格式</h1><ul>
<li><a href="https://gettaurus.org/docs/Changelog2020/#1-15-1sup-30-Oct-2020-sup">taurus</a><br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208071142374.png"></li>
</ul>
<h1 id="引导用户付费阅读"><a href="#引导用户付费阅读" class="headerlink" title="引导用户付费阅读"></a>引导用户付费阅读</h1><ul>
<li>manning的<a href="https://livebook.manning.com/book/docker-in-practice-second-edition/chapter-4/13">docker-in-practice-second-edition</a>, 不会强制用户点击付费才能看见付费内容, 而是用很巧妙的方法, 对内容进行模糊化</li>
<li>可以付出不同的价格, 来解锁 代码区域-&gt;小章节-&gt;大章节-&gt;整本书<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208071143420.png"><br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208071143350.png"></li>
</ul>
<h1 id="输入密码"><a href="#输入密码" class="headerlink" title="输入密码"></a>输入密码</h1><ul>
<li><p>输入用户名时, 睁开眼睛<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208071144071.png"></p>
</li>
<li><p>输入密码时, 闭上眼睛<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208071144365.png"></p>
</li>
</ul>
<h1 id="Github不同的页面风格"><a href="#Github不同的页面风格" class="headerlink" title="Github不同的页面风格"></a>Github不同的页面风格</h1><ul>
<li>可以选择不同的filter, 虽然没啥卵用, 但感觉非常geek, 很有意思<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208071145971.png"></li>
</ul>
<h1 id="RGB颜色的中文名称"><a href="#RGB颜色的中文名称" class="headerlink" title="RGB颜色的中文名称"></a>RGB颜色的中文名称</h1><p>发现Mac上截图软件 <a href="https://apps.apple.com/us/app/ishot-screenshot-recording-ocr/id1485844094?mt=12">iShot</a> 会识别到截取图中鼠标当前位置的RGB值，然后给出很好的中文<br>中文各种颜色的翻译很有诗意, 例如:   </p>
<ul>
<li>蓝色: 蔚蓝, 碧蓝, 天蓝, 鼠尾草蓝, 矢车菊蓝, 灰丁宁蓝, 土耳其蓝, 绿松石色, 灰蓝, 军服蓝, 暗岩蓝, 品蓝, 齐马蓝, 爱丽丝蓝</li>
<li>紫色: 锦葵紫, 蓝紫, 暗蓝紫, 紫水晶色, 木槿紫, 紫丁香色, 薰衣草紫, 淡紫丁香色, 蓟紫</li>
</ul>
<p>个人找到的能对应到的RGB名称映射: <a href="https://www.sojson.com/rgb.html">RGB颜色参考</a> ,遗憾的是:</p>
<ol>
<li>只有英文, 没有对应中文的名称, 诗意很难体现出来.  </li>
<li>英文也不是很贴切, 例如 VioletRed1(#FF3E96), VioletRed2(#EE3A8C), VioletRed3(#CD3278), VioletRed4(#8B2252), 分别对应中文的 “暖粉红”, “山茶红”, “樱桃红”, “褐色”</li>
</ol>
<h1 id="Emoji的灵活运用"><a href="#Emoji的灵活运用" class="headerlink" title="Emoji的灵活运用"></a>Emoji的灵活运用</h1><p>灵活运用Emoji, 让信息更加直观友好好玩儿. Life is short, why so serious?</p>
<ul>
<li><p>例如 <a href="https://minikube.sigs.k8s.io/docs/start/">minikube</a> 的启动console界面:<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202211012118263.png"></p>
</li>
<li><p>例如 <a href="https://github.com/jenkinsci/ec2-plugin/releases">EC2-Jenkins的ReleaseNotes</a>:<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202211012117440.png"></p>
</li>
</ul>
<h1 id="优秀产品分析"><a href="#优秀产品分析" class="headerlink" title="优秀产品分析"></a>优秀产品分析</h1><h2 id="draw-io"><a href="#draw-io" class="headerlink" title="draw.io"></a><a href="https://www.drawio.com/">draw.io</a></h2><ol>
<li><p>好用的产品, 界面风格简洁, 审美在线, 体验良好, 入门到进阶, 学习曲线平滑.<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202305152245183.png"></p>
</li>
<li><p>清晰美观的<a href="https://drawio-app.com/tutorials/">文档</a></p>
</li>
</ol>
<ul>
<li>内容完善: 目前自已遇到的几乎所有问题, 都可以在文档上找到答案. 条理清晰, 既不臃肿重复, 也不丢三落四. <mark><font color='red'>永久链接很重要!</font></mark></li>
<li>内容简洁: Video Tutorials 围绕一个主题, 几乎都是1min以内, 简明扼要.</li>
<li>审美在线: 风格很统一. 无论是字体, 还是插图.<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202305152244906.png"></li>
</ul>
<ol start="3">
<li>持续更新的<a href="https://drawio-app.com/blog/">有用的技术博客</a>, 而不是无用的, 宣传的, 吹嘘的, 主要分如下几类:</li>
</ol>
<ul>
<li>最佳实践: 一些使用的小技巧.</li>
<li>new feature: 新功能的介绍.</li>
<li>case study: 用户案例.</li>
<li>event: 线下&#x2F;线上的技术活动介绍.</li>
<li>竞品比对: 例如与Gliffy,StarUML等.</li>
<li>持久更新: 从2016年4月建立到2023年5月, 几乎保持每月1到2次更新. 长期做对的事情, 这份坚持令人感动. <a href="https://www.youtube.com/@drawioapp/videos">YouTuBe频道</a>内容丰富.</li>
</ul>
<ol start="4">
<li><a href="https://drawio-app.com/pricing/">合理的定价</a>, 普通用户想支持下, 竟然找不到付费入口.</li>
<li>技术氛围: <a href="https://drawio-app.com/blog/smart-templates-an-exclusive-new-feature-from-draw-io/">Las Vegas Atlassian Team ’23</a>  <blockquote>
<p>We are excited for users to get their hands on Smart Templates, and we’ll be demoing the feature at our booth next week at Atlassian Team ’23. Will you be in Las Vegas for the event? Be sure to stop by our booth, located near the Expo Hall entrance, to get a first-hand look.</p>
</blockquote>
</li>
</ol>
<p>总体来说, 感觉draw.io真的很克制, 围绕着核心能力, 精心了打磨功能与体验. 越深入了解, 越令我情不自禁爱上他们的产品, 爱上他们的团队, 爱上Diagramming~</p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>product-design</tag>
        <tag>good-design</tag>
      </tags>
  </entry>
  <entry>
    <title>云计算笔记--aws的DefaultVpc实现调研</title>
    <url>//2022-04-05-aws-default-vpc/</url>
    <content><![CDATA[<p><a href="https://docs.aws.amazon.com/vpc/latest/userguide/default-vpc.html">AWS Default VPCs</a></p>
<ol>
<li>默认每个账号下, 每个地域下, AWS都会自动创建 172.31.0.0&#x2F;16  CIDR的VPC</li>
<li>会在账号下Default VPC内, 每个可用区都创建一个VSW, 范围是:<br>a. VSW网段范围: [172.31.00000000.0&#x2F;20, 172.31.11110000.0&#x2F;20] 共16个VSW<br>b. 每个VSW内, IP数量: 2^12&#x3D;4096 个</li>
<li>新的可用区上线之后, 等待几天, AWS就会自动创建对应可用区的Default VSW.</li>
<li>只要对默认VPC进行了配置修改, 那么新的可用区上线之后, 就不会为之自动创建DefaultVSW了.</li>
</ol>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>aws</tag>
        <tag>cloud</tag>
        <tag>iaas</tag>
        <tag>default-vpc</tag>
        <tag>vpc</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s基础架构笔记--一些必知的基础数据</title>
    <url>//2022-04-05-k8s-common-sense/</url>
    <content><![CDATA[<h1 id="内存空间占用"><a href="#内存空间占用" class="headerlink" title="内存空间占用"></a>内存空间占用</h1><ul>
<li>一个node数据对象的json格式大小约为28KB</li>
<li>一个pod的数据对象的json格式大小约为40KB</li>
</ul>
<h1 id="规模"><a href="#规模" class="headerlink" title="规模"></a>规模</h1><p>瓶颈主要在watch&amp;list导致apiserver压力巨大上.</p>
<ul>
<li>单cluster 5000个Node, 25000个Pod</li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>k8s</tag>
        <tag>k8s-architect</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s基础架构笔记--kube-proxy原理</title>
    <url>//2022-04-05-k8s-kube-proxy/</url>
    <content><![CDATA[<h1 id="k8s网络模型"><a href="#k8s网络模型" class="headerlink" title="k8s网络模型"></a>k8s网络模型</h1><p>如下三点是基础要求: </p>
<pre class="line-numbers language-none"><code class="language-none">1. 容器之间要求不需要任何NAT能直接通信
2. 容器与Node之间要求不需要任何NAT能直接通信
3. 容器看到自身的IP和外面看到它的IP必须是一样的, 即不存在IP转化的问题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h1 id="k8s三类IP"><a href="#k8s三类IP" class="headerlink" title="k8s三类IP"></a>k8s三类IP</h1><p>Kubernetes 集群内部存在三类 IP，分别是：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Node IP：宿主机的 IP 地址
Pod IP：使用网络插件创建的 IP（如 flannel），使跨主机的 Pod 可以互通
Cluster IP：虚拟 IP，通过 iptables 规则访问服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>安装 node 节点的时候，节点上的进程是按照 flannel -&gt; docker -&gt; kubelet -&gt; kube-proxy 的顺序启动</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>看了这么多文章, 终于理解了kube-proxy的深入原理以及发展历史:</p>
<ol>
<li>本质上是运行在每个host上的proxy流量转发服务. 从集群内部发起时流量转发规则生效.</li>
<li>注意不是网关!!! 即不能处理k8s集群外部curl serviceip:port&#x2F;xxx 的请求, 只能路由&amp;处理集群内部的请求, 例如从host节点curl, 或者从pod内部curl. 是从AHost转发到BHost的. 这点是一直搞混的~</li>
<li>历史总结下来:<ol>
<li>数据面: 核心的转发功能<ol>
<li>基于iptables+用户空间转发</li>
<li>基于iptables 即纯内核空间的路由规则</li>
<li>可以基于ipvs&#x2F;lvs进行路由转发.</li>
</ol>
</li>
<li>控制面: 主要做的是watch apiserver, 随时更新转发规则.</li>
</ol>
</li>
</ol>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208071218047.png"><br>因此也明白了官方kube-proxy原理这张图里, 为啥Client始终在Host上.<br>因为client必须在k8s集群里, 而集群里每个node都部署了kube-proxy. 因此client必然在node上, 跟本node的kube-proxy在一起.</p>
<p>解释清楚了, 为啥要用kube-proxy实现service, 而不是用DNS A记录来实现</p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>k8s</tag>
        <tag>k8s-architect</tag>
        <tag>kube-proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>常用的KubeCtl命令</title>
    <url>//2022-04-05-k8s-kubectl-cmd/</url>
    <content><![CDATA[<h1 id="个人习惯"><a href="#个人习惯" class="headerlink" title="个人习惯"></a>个人习惯</h1><p>在<code>~/.bash_profile</code>里增加alias: </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">alias</span> <span class="token assign-left variable">k</span><span class="token operator">=</span><span class="token string">'kubectl'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h1 id="资源相关命令"><a href="#资源相关命令" class="headerlink" title="资源相关命令"></a>资源相关命令</h1><h2 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h2><h3 id="创建pod"><a href="#创建pod" class="headerlink" title="创建pod"></a>创建pod</h3><ul>
<li><p>快速创建pod</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">k run mytest --image<span class="token operator">=</span>k8s.gcr.io/pause:2.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>根据yaml创建pod</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">k apply -f my-pause.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul>
<h3 id="列出pod-包含所在的node"><a href="#列出pod-包含所在的node" class="headerlink" title="列出pod(包含所在的node)"></a>列出pod(包含所在的node)</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">k get pod -n kube-system -o wide<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="查看pod详情-包含所在的node"><a href="#查看pod详情-包含所在的node" class="headerlink" title="查看pod详情(包含所在的node)"></a>查看pod详情(包含所在的node)</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">k describe pod nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>包含如下重要信息:</p>
<ul>
<li>Pod对应的clusterIp</li>
<li>Pod所在的nodeName</li>
<li>Pod所属的replicaSet <code>Controlled By xxx</code></li>
<li>Pod的事件 <code>Events</code></li>
<li>Pod里container的定义, Volumes的定义, Labels &amp; Annotations</li>
</ul>
<h3 id="登录pod"><a href="#登录pod" class="headerlink" title="登录pod"></a>登录pod</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">k <span class="token builtin class-name">exec</span> -ti <span class="token operator">&lt;</span>your-pod-name<span class="token operator">></span> -n <span class="token operator">&lt;</span>your-namespace<span class="token operator">></span>  -- /bin/sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="查看pod事件"><a href="#查看pod事件" class="headerlink" title="查看pod事件"></a>查看pod事件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@iZ2ze8h8q419hf1fze66dkZ ~<span class="token punctuation">]</span><span class="token comment"># k get events --sort-by=.metadata.creationTimestamp</span>
LAST SEEN   TYPE      REASON    OBJECT              MESSAGE
3m17s       Normal    BackOff   pod/no-annotation   Back-off pulling image <span class="token string">"k8s.gcr.io/pause:2.0"</span>
23m         Warning   Failed    pod/no-annotation   Error: ImagePullBackOff
28m         Warning   Failed    pod/no-annotation   Error: ErrImagePull<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="查看pod日志"><a href="#查看pod日志" class="headerlink" title="查看pod日志"></a>查看pod日志</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">k logs <span class="token operator">&lt;</span>your-pod-name<span class="token operator">></span> -n <span class="token operator">&lt;</span>your-namespace<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="删除pod"><a href="#删除pod" class="headerlink" title="删除pod"></a>删除pod</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">k delete pod <span class="token operator">&lt;</span>your-pod-name<span class="token operator">></span> -n <span class="token operator">&lt;</span>your-namespace<span class="token operator">></span>
k delete -f <span class="token operator">&lt;</span>your-pod.yaml<span class="token operator">></span> -n <span class="token operator">&lt;</span>your-namespace<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>注意, <a href="https://linuxhint.com/kubectl-stop-pod/"><mark>k8s里没有停止Pod的概念, 只有删除(delete)</mark></a></p>
<blockquote>
<p>Kubernetes does not allow you to stop or pause a pod’s present state and resume it later. No. It is not feasible to pause a pod and restart it at a later time.</p>
</blockquote>
<p>这里可以思考下, pod与vm的区别, 为啥vm可以stop, delete的概念? </p>
<h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><h3 id="获取nodes列表"><a href="#获取nodes列表" class="headerlink" title="获取nodes列表"></a>获取nodes列表</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">k get no/node/nodes -o wide<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>注意, <mark>node没有namespace的概念</mark></p>
<h3 id="查看node详情"><a href="#查看node详情" class="headerlink" title="查看node详情"></a>查看node详情</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">k describe <span class="token function">node</span> <span class="token operator">&lt;</span>your-node-name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>包含如下重要信息</p>
<ul>
<li><code>Non-terminated Pods</code>: 即所有在当前Node上的pod</li>
<li><code>Capacity</code>: cpu, mem等, 代表Node整体的.</li>
<li><code>Allocatable</code>: cpu, mem等, 代表Node去除给kubeproxy&#x2F;kubelet等系统关键组件预留的资源之后, 可以分配给pod的</li>
<li><code>Allocated resources</code>: 已经分配出去的cpu, mem等. 按照所有pod的request进行叠加的.</li>
</ul>
<h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><h3 id="获取service列表"><a href="#获取service列表" class="headerlink" title="获取service列表"></a>获取service列表</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@iZ2ze8h8q419hf1fze66dkZ ~<span class="token punctuation">]</span><span class="token comment"># k get svc -o wide</span>
NAME            TYPE        CLUSTER-IP        EXTERNAL-IP   PORT<span class="token punctuation">(</span>S<span class="token punctuation">)</span>   AGE    SELECTOR
kubernetes      ClusterIP   <span class="token number">192.168</span>.0.1       <span class="token operator">&lt;</span>none<span class="token operator">></span>        <span class="token number">443</span>/TCP   258d   <span class="token operator">&lt;</span>none<span class="token operator">></span>
nginx-service   ClusterIP   <span class="token number">192.168</span>.198.117   <span class="token operator">&lt;</span>none<span class="token operator">></span>        <span class="token number">80</span>/TCP    5d8h   app.kubernetes.io/name<span class="token operator">=</span>proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意: 这里的<code>kubernetes</code>就是apiserver的clusterIp地址了</p>
<h3 id="查看svc详情"><a href="#查看svc详情" class="headerlink" title="查看svc详情"></a>查看svc详情</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@iZ2ze8h8q419hf1fze66dkZ ~<span class="token punctuation">]</span><span class="token comment"># k describe svc nginx-service</span>
Name:              nginx-service
Namespace:         default
Labels:            <span class="token operator">&lt;</span>none<span class="token operator">></span>
Annotations:       <span class="token operator">&lt;</span>none<span class="token operator">></span>
Selector:          app.kubernetes.io/name<span class="token operator">=</span>proxy
Type:              ClusterIP
IP Families:       <span class="token operator">&lt;</span>none<span class="token operator">></span>
IP:                <span class="token number">192.168</span>.198.117
IPs:               <span class="token number">192.168</span>.198.117
Port:              name-of-service-port  <span class="token number">80</span>/TCP
TargetPort:        http-web-svc/TCP
Endpoints:         <span class="token number">172.24</span>.241.16:80,172.24.241.17:80,172.24.241.18:80 + <span class="token number">1</span> more<span class="token punctuation">..</span>.
Session Affinity:  None
Events:            <span class="token operator">&lt;</span>none<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="查看对应的endpoints"><a href="#查看对应的endpoints" class="headerlink" title="查看对应的endpoints"></a>查看对应的endpoints</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@iZ2ze8h8q419hf1fze66dkZ ~<span class="token punctuation">]</span><span class="token comment"># k get ep</span>
NAME            ENDPOINTS                                                        AGE
kubernetes      <span class="token number">10.10</span>.0.162:6443,10.11.0.33:6443,10.9.0.58:6443                  258d
nginx-service   <span class="token number">172.24</span>.241.16:80,172.24.241.17:80,172.24.241.18:80 + <span class="token number">1</span> more<span class="token punctuation">..</span>.   5d8h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意: 这里的<code>kubernetes</code>就是apiserver的pod地址了</p>
<h3 id="查看endpoints详情"><a href="#查看endpoints详情" class="headerlink" title="查看endpoints详情"></a>查看endpoints详情</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@iZ2ze8h8q419hf1fze66dkZ ~<span class="token punctuation">]</span><span class="token comment"># k describe ep nginx-service</span>
Name:         nginx-service
Namespace:    default
Labels:       <span class="token operator">&lt;</span>none<span class="token operator">></span>
Annotations:  endpoints.kubernetes.io/last-change-trigger-time: <span class="token number">2022</span>-04-01T15:22:45+08:00
Subsets:
  Addresses:          <span class="token number">172.24</span>.241.16,172.24.241.17,172.24.241.18,172.24.241.19
  NotReadyAddresses:  <span class="token operator">&lt;</span>none<span class="token operator">></span>
  Ports:
    Name                  Port  Protocol
    ----                  ----  --------
    name-of-service-port  <span class="token number">80</span>    TCP

Events:  <span class="token operator">&lt;</span>none<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="快速创建deploy"><a href="#快速创建deploy" class="headerlink" title="快速创建deploy"></a>快速创建deploy</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">k run redis --image<span class="token operator">=</span>reids<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="获取deployments列表"><a href="#获取deployments列表" class="headerlink" title="获取deployments列表"></a>获取deployments列表</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">k get deploy/deployment/deployments -n <span class="token operator">&lt;</span>your-namesapce<span class="token operator">></span> -o wide<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="查看deployments详细信息"><a href="#查看deployments详细信息" class="headerlink" title="查看deployments详细信息"></a>查看deployments详细信息</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">k describe deploy/deployment <span class="token operator">&lt;</span>your-deploy-name<span class="token operator">></span> -n <span class="token operator">&lt;</span>your-namesapce<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>包含如下关键信息</p>
<ul>
<li><code>Replicas</code>: 副本个数情况</li>
<li><code>Pod Template</code>: Pod模板的详细信息, 例如label, image等</li>
<li><code>NewReplicaSet</code>: 对应的rs name信息</li>
</ul>
<h3 id="查看rs列表与详细信息"><a href="#查看rs列表与详细信息" class="headerlink" title="查看rs列表与详细信息"></a>查看rs列表与详细信息</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">k get rs
k describe rs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="查看cluster详细信息"><a href="#查看cluster详细信息" class="headerlink" title="查看cluster详细信息"></a>查看cluster详细信息</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">k cluster-info
k cluster-info dump<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="快捷修改deploy-x2F-pod等配置"><a href="#快捷修改deploy-x2F-pod等配置" class="headerlink" title="快捷修改deploy&#x2F;pod等配置"></a>快捷修改deploy&#x2F;pod等配置</h3><p>如下, 修改完成自动生效:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">k edit deploy nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>code-snippets</tag>
        <tag>kubectl</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s基础架构笔记--list&amp;watch机制</title>
    <url>//2022-04-05-k8s-list-watch/</url>
    <content><![CDATA[<p>本质上:  </p>
<ul>
<li>list: 就是一个GET的HTTP操作, 请求到apiserver, 是个短连接. list结束, 连接就关闭.</li>
<li>watch: 是一个基于<code>Transfer-Encoding: chunked</code>的<a href="https://imququ.com/post/transfer-encoding-header-in-http.html">HTTP长连接</a>, apiserver作为http server, kube-proxy&#x2F;kubelet&#x2F;kube-scheduler等作为http client.</li>
</ul>
<p>这样: </p>
<ul>
<li>list: 来实现kube-proxy, kubelet, kube-scheduler等角色启动初始化时, 存量数据的一次拉取.</li>
<li>watch: 来实现后续各种资源的增量更新</li>
</ul>
<p>扩展: </p>
<ul>
<li>watch: <ul>
<li>k8s java client中watch机制, 是基于OkHttpClient. &#x2F;&#x2F; TODO: 补上具体实现例子</li>
<li>watch机制也可以基于websocket来实现</li>
</ul>
</li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>k8s</tag>
        <tag>k8s-architect</tag>
        <tag>list-watch</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中Log4j的最佳实践</title>
    <url>//2022-04-18-java-log4j-bestpractice/</url>
    <content><![CDATA[<h2 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h2><ul>
<li>把ThreadName, RequestId放到MDC, 加到pattern里.</li>
</ul>
<h2 id="异步日志"><a href="#异步日志" class="headerlink" title="异步日志"></a>异步日志</h2><p>使用 <a href="https://logging.apache.org/log4j/2.x/manual/async.html#Location">log4j2 asyncLogger</a> 来异步打印</p>
<ul>
<li>不要在pattern里增加location相关信息, 例如class, file, location, line, method等, 因为这些底层需要<a href="https://logging.apache.org/log4j/2.x/manual/async.html#Location">打印堆栈</a>, 然后遍历, 性能较差. 尤其是需要使用asyncLogger的场景下</li>
<li><a href="https://issues.apache.org/jira/browse/LOG4J2-2031">异步日志底层实现原理</a>: 本质是一个RingBuffer, 默认size大约是21w条, 需要注意不要使用DiscardPolicy;</li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>java</tag>
        <tag>log4j</tag>
        <tag>logging</tag>
        <tag>best-practice</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s virtual-kubelet的实现原理研究</title>
    <url>//2022-04-18-k8s-virtual-kubelet/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>一直很感兴趣, vk的实现原理, 看官方的文档, 太偏向用户视角,<br>研究了源代码, 工作机制先大概说下: </p>
<ol>
<li>使用apiserver的admission插入点机制, vk启动了一个webserver, 当匹配到vk时, 会将请求路由到vk的webserver</li>
<li>vk的webserver做简单的一件事: 将pod的nodename修改成自己的</li>
<li>由于以及有了nodename, 因此跳过sheduler过程, bind请求直接发到对应的kubelet.</li>
<li>这里的kubelet就是vk启动的虚拟kubelet. </li>
<li>vk收到bind请求, 调用云厂商的OpenAPI, 创建pod.</li>
</ol>
<p>vk本质上是以pod形式运行在用户自己的k8s集群上.</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>所以vk做了几件事: </p>
<ol>
<li>负责维护pod的生命周期, 例如pod的创建与销毁.</li>
</ol>
<p>其他思考:</p>
<ol>
<li>pod的心跳检查与事件上报链路是怎样的?</li>
<li>pod的configmap, secret等信息更新, 如何推送到pod上?<ol>
<li>是vk推送? </li>
<li>or pod上安装agent主动pull?</li>
</ol>
</li>
</ol>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>k8s</tag>
        <tag>virtual-kubelet</tag>
        <tag>vk</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s DNS的研究与实践</title>
    <url>//2022-04-19-k8s-dns/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>一直对于k8s的dns机制不甚了解, 借此机会彻底搞懂.<br>主要参照文章 <a href="https://zhuanlan.zhihu.com/p/80141656">KubeDNS 和 CoreDNS</a> 进行个人消化.</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="容器内部DNS配置"><a href="#容器内部DNS配置" class="headerlink" title="容器内部DNS配置"></a>容器内部DNS配置</h2><p>明白了容器内部<code>/etc/resolv.conf</code>的含义: </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> /etc/resolv.conf
search default.svc.cluster.local svc.cluster.local cluster.local
nameserver <span class="token number">192.168</span>.0.10
options ndots:5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>本质上会: </p>
<ol>
<li>根据传入的域名</li>
<li>当查询的域名中包含的 . 的数量少于 options.ndots 的值时，会依次拼接search列表中的每个值</li>
<li>逐个尝试拼接后缀</li>
<li>向nameserver发送解析请求</li>
<li>如果 search 走完了都没有找到, 那么就会使用原域名进行查找</li>
</ol>
<p>例如</p>
<ol>
<li>同个namesapce下:</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-- 在host上执行, 看到有如下svc
<span class="token punctuation">[</span>root@iZ2ze8h8q419hf1fze66dkZ ~<span class="token punctuation">]</span>$ k get svc
NAME            TYPE        CLUSTER-IP        EXTERNAL-IP   PORT<span class="token punctuation">(</span>S<span class="token punctuation">)</span>             AGE
nginx-service   ClusterIP   <span class="token number">192.168</span>.198.117   <span class="token operator">&lt;</span>none<span class="token operator">></span>        <span class="token number">80</span>/TCP              19d
-- 登录default namespace上某个pod内部执行如下命令, 
-- <span class="token number">1</span>. 直接通过clusterIP访问, 则不经过DNS, 可以访问通
$ <span class="token function">curl</span> <span class="token number">192.168</span>.198.117:80
<span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span>
<span class="token operator">&lt;</span>html<span class="token operator">></span>
<span class="token operator">&lt;</span>/html<span class="token operator">></span>

-- <span class="token number">2</span>. 通过svc name访问, 则经过DNS, 可以访问通, 底层其实经过一次拼接, 完整域名是: nginx-service.default.svc.cluster.local
$ <span class="token function">curl</span> nginx-service:80
<span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span>
<span class="token operator">&lt;</span>html<span class="token operator">></span>
<span class="token operator">&lt;</span>/html<span class="token operator">></span>

-- <span class="token number">3</span>. 通过svc 完整访问, 则经过DNS, 可以访问通, 底层不经过拼接, 完整域名是: nginx-service.default.svc.cluster.local
$ <span class="token function">curl</span> nginx-service.default.svc.cluster.local:80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>跨namesapce:</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-- 在host上执行, 查看 kube-system namespace下的svc
<span class="token punctuation">[</span>root@iZ2ze8h8q419hf1fze66dkZ ~<span class="token punctuation">]</span>$ k get svc -n kube-system
NAME                                 TYPE           CLUSTER-IP        EXTERNAL-IP     PORT<span class="token punctuation">(</span>S<span class="token punctuation">)</span>                      AGE
heapster                             ClusterIP      <span class="token number">192.168</span>.32.77     <span class="token operator">&lt;</span>none<span class="token operator">></span>          <span class="token number">80</span>/TCP                       272d
-- 登录default namespace上某个pod内部执行如下命令, 
-- <span class="token number">1</span>. 直接通过clusterIP访问, 则不经过DNS, 可以访问通
$ <span class="token function">curl</span> <span class="token number">192.168</span>.32.77:80
<span class="token number">404</span> page not found

-- <span class="token number">2</span>. 通过svc不带namespace的name访问, 则经过DNS, 访问不通, 底层其实经过一次拼接, 完整域名是: heapster.default.svc.cluster.local 访问不通
$ <span class="token function">curl</span> heapster:80
curl: <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> Could not resolve host: heapster

-- <span class="token number">3</span>. 通过svc带namespace的name访问, 则经过DNS, 访问通, 底层其实经过2次拼接, heapster.kube-system.default.svc.cluster.local 访问不通, heapster.kube-system.svc.cluster.local 访问通了
$ <span class="token function">curl</span> heapster.kube-system:80
<span class="token number">404</span> page not found

-- <span class="token number">4</span>. 通过svc带namespace的完整域名访问, 则经过DNS, 访问通, 底层不经过拼接
$ <span class="token function">curl</span> heapster.kube-system.svc.cluster.local:80
<span class="token number">404</span> page not found<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h2 id="容器内部DNS配置的生成"><a href="#容器内部DNS配置的生成" class="headerlink" title="容器内部DNS配置的生成"></a>容器内部DNS配置的生成</h2><p>容器内部<code>/etc/resolv.conf</code>:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> /etc/resolv.conf
search default.svc.cluster.local svc.cluster.local cluster.local
nameserver <span class="token number">192.168</span>.0.10
options ndots:5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>nameserver 192.168.0.10</code> 记录是如何生成的? </li>
<li>本质上 <code>192.168.0.10</code> 是dnssvc的clusterIp:</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@iZ2ze8h8q419hf1fze66dkZ ~<span class="token punctuation">]</span>$ k get svc -n kube-system
NAME                                 TYPE           CLUSTER-IP        EXTERNAL-IP     PORT<span class="token punctuation">(</span>S<span class="token punctuation">)</span>                      AGE
kube-dns                             ClusterIP      <span class="token number">192.168</span>.0.10      <span class="token operator">&lt;</span>none<span class="token operator">></span>          <span class="token number">53</span>/UDP,53/TCP,9153/TCP       272d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>nameserver 192.168.0.10</code> 记录是何时生成的?</li>
<li>是在创建pod时, 由kubelet注入pod内部</li>
</ul>
<p>&#x2F;&#x2F; TODO: 是如何注入pod内部的?<br>&#x2F;&#x2F; TODO: pod内部访问公网, 是如何实现的? 如何禁止pod内部访问公网? </p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>k8s</tag>
        <tag>dns</tag>
        <tag>coredns</tag>
        <tag>kube-dns</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一些自认为不好的产品设计</title>
    <url>//2022-04-29-bad-design/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>记录一些自己明显感觉退步，不适的设计。引以为戒。</p>
<h1 id="过多的打扰"><a href="#过多的打扰" class="headerlink" title="过多的打扰"></a>过多的打扰</h1><h2 id="技术文档选中弹框"><a href="#技术文档选中弹框" class="headerlink" title="技术文档选中弹框"></a>技术文档选中弹框</h2><ul>
<li>阿里云官网技术文档，选中文字之后，会自动弹出“文档反馈”说明，本意是好的，希望得到用户的反馈。但在开发者实际阅读过程中，尤其是大段的技术文档，经常会习惯性地鼠标点选，此时弹出弹框，非常分散注意力。<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208071159766.png"></li>
<li>反观海外的云厂商，都非常克制甚至朴素。<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208071200696.png"></li>
</ul>
<h2 id="页面过多堆砌"><a href="#页面过多堆砌" class="headerlink" title="页面过多堆砌"></a>页面过多堆砌</h2><ul>
<li>阿里云官方技术文档，右上角是一堆营销计划“参与星火赢现金”，“分享助力好礼”；右下角是“销售咨询”，“会员专享”，“文档反馈”。跟牛皮藓一样。<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208071200169.png"></li>
<li>反观aws，几乎没有过多打扰。<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208071201046.png"></li>
</ul>
<h1 id="不一的风格"><a href="#不一的风格" class="headerlink" title="不一的风格"></a>不一的风格</h1><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>product-design</tag>
        <tag>good-design</tag>
        <tag>bad-design</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu初始化配置</title>
    <url>//2022-04-29-ubuntu-init/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在内网淘了一个 ThinkPad X1 Carbon Gen4 的老古董，<br>默认是无系统的，也不太想安装毫无设计感，相当丑陋的Windows。<br>还好家里有Ubuntu的安装U盘，就直接拿来装上去了。<br>之前整体对Ubuntu的体验还是不错的，无论是从UI与字体设计上，使用流畅度上，软件齐全度上。<br>本身自己惯用Mac，切换到Ubuntu应该也是无缝的。<br>实际配置下来，发现软件齐全度比6年前自己使用时要多太多太多了，很开心。<br>在上边玩儿docker就更方便了，更好地理解并且折腾清楚原理啦。<br>注意，以下都是基于 Ubuntu 20.04.4 LTS 版本(Focal Fossa)说明的。</p>
<h1 id="必要熟悉命令"><a href="#必要熟悉命令" class="headerlink" title="必要熟悉命令"></a>必要熟悉命令</h1><h2 id="apt软件包管理"><a href="#apt软件包管理" class="headerlink" title="apt软件包管理"></a>apt软件包管理</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 搜索软件</span>
<span class="token function">sudo</span> <span class="token function">apt-cache</span> search jdk
<span class="token comment"># 安装软件</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> openjdk-8-jdk
<span class="token comment"># 查看软件安装状态</span>
<span class="token function">sudo</span> dpkg -l <span class="token operator">|</span> <span class="token function">fgrep</span> openjdk-8-jdk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="deb软件包管理"><a href="#deb软件包管理" class="headerlink" title="deb软件包管理"></a>deb软件包管理</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装.deb软件包</span>
<span class="token function">sudo</span> dpkg -i xxx.deb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>


<h1 id="必装软件"><a href="#必装软件" class="headerlink" title="必装软件"></a>必装软件</h1><h2 id="开发软件"><a href="#开发软件" class="headerlink" title="开发软件"></a>开发软件</h2><ul>
<li>SSH-Server</li>
</ul>
<p>安装命令参见 <a href="https://davyjones2010.github.io/2022-06-25-linux-network-scripts/#Ubuntu">常用的Linux命令之网络相关命令</a></p>
<ul>
<li><p>JDK</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> add-apt-repository ppa:openjdk-r/ppa
<span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> openjdk-8-jdk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>Maven</p>
</li>
<li><p>MySQL</p>
</li>
<li><p>Git</p>
</li>
<li><p>SourceTree -&gt; GitKraken</p>
</li>
<li><p>IntelliJ IDEA</p>
</li>
<li><p>nettools</p>
</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> net-tools <span class="token function">traceroute</span>
<span class="token comment"># 安装之后就可以执行 route -n 命令查看路由表信息，执行 traceroute 追踪实际路由信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>Docker<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -sSL https://get.daocloud.io/docker <span class="token operator">|</span> <span class="token function">sh</span>
<span class="token function">sudo</span> apt-key adv --keyserver keyserver.ubuntu.com --recv-keys xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li>Vim</li>
<li>Sublime</li>
<li>Postman</li>
<li>KubeCtl</li>
<li>Go</li>
</ul>
<h2 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h2><ul>
<li>修改apt软件源</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># vim /etc/apt/sources.list</span>
deb http://mirrors.163.com/ubuntu/ focal main restricted universe multiverse
deb http://mirrors.163.com/ubuntu/ focal-security main restricted universe multiverse
deb http://mirrors.163.com/ubuntu/ focal-updates main restricted universe multiverse
deb http://mirrors.163.com/ubuntu/ focal-proposed main restricted universe multiverse
deb http://mirrors.163.com/ubuntu/ focal-backports main restricted universe multiverse
deb-src http://mirrors.163.com/ubuntu/ focal main restricted universe multiverse
deb-src http://mirrors.163.com/ubuntu/ focal-security main restricted universe multiverse
deb-src http://mirrors.163.com/ubuntu/ focal-updates main restricted universe multiverse
deb-src http://mirrors.163.com/ubuntu/ focal-proposed main restricted universe multiverse
deb-src http://mirrors.163.com/ubuntu/ focal-backports main restricted universe multiverse
deb http://ftp.sjtu.edu.cn/ubuntu/ focal main universe restricted multiverse<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p>XMind</p>
</li>
<li><p>Gliffy Diagrams</p>
</li>
<li><p><a href="https://gnomepomodoro.org/">gnomepomodoro</a></p>
</li>
<li><p>ClashX –&gt; QV2Ray</p>
</li>
<li><p><a href="https://www.jianguoyun.com/s/downloads/linux">坚果云</a></p>
</li>
<li><p>截图</p>
</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none"># 保存到 ~&#x2F;Pictures&#x2F; 目录下
Alt + PrintScreen # 截取选中的窗口
Shift + PrintScreen # 自由选取

# 保存到剪贴板
Ctrl + Alt + PrintScreen # 截取选中的窗口
Shift + Ctrl + PrintScreen # 自由选取<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="必要配置"><a href="#必要配置" class="headerlink" title="必要配置"></a>必要配置</h1><h3 id="最大化最小化关闭按钮放到左上角"><a href="#最大化最小化关闭按钮放到左上角" class="headerlink" title="最大化最小化关闭按钮放到左上角"></a>最大化最小化关闭按钮放到左上角</h3><p>想要跟Mac习惯保持一致</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gsettings <span class="token builtin class-name">set</span> org.gnome.desktop.wm.preferences button-layout <span class="token string">"close,maximize,minimize:"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>恢复到右上角：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gsettings <span class="token builtin class-name">set</span> org.gnome.desktop.wm.preferences button-layout <span class="token string">":close,maximize,minimize"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>先写到这儿吧. 后边有啥再补充.</p>
<h1 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h1><h2 id="Maven设置阿里云镜像"><a href="#Maven设置阿里云镜像" class="headerlink" title="Maven设置阿里云镜像"></a>Maven设置阿里云镜像</h2><p>Copy From <a href="https://zhuanlan.zhihu.com/p/71998219">将maven源改为国内阿里云镜像</a></p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.0.0<span class="token punctuation">"</span></span>
  <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.0.0
                      http://maven.apache.org/xsd/settings-1.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localRepository</span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>interactiveMode</span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>usePluginRegistry</span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>offline</span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginGroups</span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servers</span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrors</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>aliyunmaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>阿里云公共仓库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://maven.aliyun.com/repository/central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>repo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>central repo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://repo1.maven.org/maven2/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>aliyunmaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>apache snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>阿里云阿帕奇仓库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://maven.aliyun.com/repository/apache-snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>proxies</span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeProfiles</span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>  
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">></span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>aliyunmaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>aliyunmaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://maven.aliyun.com/repository/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releases</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releases</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>MavenCentral<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://repo1.maven.org/maven2/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>aliyunmavenApache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://maven.aliyun.com/repository/apache-snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">></span></span>             
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h1 id="系统恢复软件"><a href="#系统恢复软件" class="headerlink" title="系统恢复软件"></a>系统恢复软件</h1><p>越来越希望能做个类似Windows的Ghost系统，即把现在的系统以及软件以及配置都打包成一个系统镜像，这样后续换电脑，<br>也能很方便地初始化自己的系统。省得重复安装与配置这么多东西。这个后续研究下吧。<br><a href="https://blog.csdn.net/leaf6094189/article/details/6009924">https://blog.csdn.net/leaf6094189/article/details/6009924</a></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>ubuntu</tag>
        <tag>system-init</tag>
        <tag>system-config</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次由于remoteCache类型不兼容修改导致的异常问题</title>
    <url>//2022-04-30-cache-incompatible/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>进行Redis缓存升级改造, 缓存访问层统一进行了修改:<br>修改前代码如下, 按照Java原生序列化方式: </p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 写缓存, Long类型</span>
cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span> <span class="token number">123L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 读缓存, Long类型</span>
<span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">)</span>cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>修改后代码如下, 统一按照String类型进行序列化&#x2F;反序列化:</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 写缓存, 转成String类型</span>
cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 读缓存, 获取String类型</span>
<span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>线上发布过程中报出异常, <code>ClassCastException</code>, Long类型无法被cast成String类型.<br>经分析, 由于是集群的环境, 发布过程中, 针对同一个”key”, </p>
<ul>
<li>未布机器写入的还是Long类型</li>
<li>已发布的机器读取该”key”对应的value, 尝试强转成String,<br>反之亦然, 也会有 String类型无法被cast成Long类型的报错.</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在分布式环境下, 对remote cache的修改, 一定要注意兼容性:</p>
<ul>
<li>不止新版本旧版本的兼容性</li>
<li>更要考虑到发布过程中新老机器, 针对同一个key的类型的兼容性.</li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>learn-from-failure</tag>
        <tag>java</tag>
        <tag>cache</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次由于JVM优化导致异常堆栈丢失的问题</title>
    <url>//2022-04-30-java-exception-stack-trace-missing/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>线上某次故障排查, 发现线上有异常, 但无堆栈信息.<br>实际查看打印异常的地方, 确实是会打印出堆栈的. 那么堆栈信息为啥会丢呢? </p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>ClassCastException</span><span class="token operator">:</span> <span class="token keyword">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h1 id="原因排查"><a href="#原因排查" class="headerlink" title="原因排查"></a>原因排查</h1><p>JVM默认会优化掉相同堆栈的信息:<br><a href="https://stackoverflow.com/questions/40502576/java-lang-classcastexception-with-null-message-and-cause">java.lang.ClassCastException with null message and cause</a></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>如 <a href="https://blog.csdn.net/lisheng19870305/article/details/106361875">“java.lang.ClassCastException: null”原因解决</a>, 针对如下类型的异常, JVM默认都会优化: <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">NullPointerException</span>
<span class="token class-name">ArrayIndexOutOfBoundsException</span>
<span class="token class-name">ClassCastException</span>
<span class="token class-name">ArrayIndexOutOfBoundsException</span>
<span class="token class-name">ArrayStoreException</span>
<span class="token class-name">ArithmeticException</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>以后错误日志最好保留时间长一点, 这样才能定位出异常首次出现的位置, 才能看到完整的堆栈信息. </li>
<li>或者可以增加: <code>-XX:-OmitStackTraceInFastThrow</code> 参数来防止JVM优化.</li>
</ol>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>learn-from-failure</tag>
        <tag>java</tag>
        <tag>stacktrace</tag>
      </tags>
  </entry>
  <entry>
    <title>深度思考：不断逼近问题的本质 读后感</title>
    <url>//2022-05-03-Beyond-the-Label/</url>
    <content><![CDATA[<p>总体来说，鸡汤不少，但没啥干货，说的都是一些虚无缥缈且人尽皆知的大道理。</p>
<hr>
<p>读的过程，也感觉很鸡肋，感觉像是有些自恋的人的自传，愈发读不下去，但又为了完整读完一本书，硬着头皮读了下去，期待着后边说不定会由有不同的收获。<br>但结果令人失望，甚至都不想做笔记。<br>首先，书名非常具有迷惑性，实在没看出跟深度思考，以及探究问题的本质有任何关系。直到看了英文名称，才恍然大悟。<br>《Beyond the Label: Women, Leadership, and Success on Our Own Terms》，<br>直译过来就是：《拒绝标签：女性，领导力与成功》，压根跟深度思考没任何关系，也不知道书名的中文翻译人员咋想的。<br>如果早看了英文名，尤其是几个雷区词“Women”，“Leadership”，“Success”等这些，就一定不会读的。</p>
<p>其次，内容更像是作者自己的经历自传。最开始当个推销员，莫名奇妙就推销成功了，然后还获得了贵人的帮助。<br>如果说是因为真诚，那么我相信世界上比她真诚的人要多得多，为什么其他人没有？<br>莫名其妙就结婚了，莫名其妙被派到香港，莫名其妙又掌管了GAP，把old navy做了起来，然后GAP莫名其妙就不行了，莫名其妙就成了香奈儿的CEO了。<br>最后由莫名其妙离婚，还美其名曰“打破规则”。<br>总体来说这些转变读者我是一头雾水。<br>我相信成为一个优秀的CEO，把一个公司与品牌做起来，需要的绝对不仅是书中她提到的这些软素质，还有巨大的一块，应该就是硬素质。<br>如何理解管理，毕竟也是一门工程与科学；如何理解财务报表，处理财务危机；如何品牌营销与形象树立？<br>等等。<br>文中提到的这些软素质，都太普通了，太没有专业门槛了。</p>
<p>最后就是讲到的一些关于女性职场特有的问题，例如“当人们只注意你的外貌而非工作时，该怎么办？”，并无法引发丝毫我这位直男癌患者的共鸣。</p>
<p>吸取几点教训吧：</p>
<ol>
<li>看英文翻译书之前，一定要看下原先的英文名称是啥，千万不能被忽悠了。</li>
<li>相信自己的判断，一旦看不下去，觉得没意思没价值没收获，就果断弃坑，不要为了完成读书而读书，否则沉没成本太高。</li>
</ol>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>books</tag>
        <tag>2022</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu kvm虚拟化配置</title>
    <url>//2022-05-07-ubuntu-kvm-init/</url>
    <content><![CDATA[<h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><ul>
<li>OS: Ubuntu 20.04.4 LTS </li>
<li>OS Type： 64-bit</li>
<li>硬件： ThinkPad-X1-Carbon-4th</li>
<li>CPU：Intel® Core™ i5-6200U CPU @ 2.30GHz × 4</li>
<li>MEM：</li>
<li>Graphics：Mesa Intel® HD Graphics 520 (SKL GT2)</li>
<li>Disk：</li>
</ul>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="1-BIOS开启CPU虚拟化"><a href="#1-BIOS开启CPU虚拟化" class="headerlink" title="1. BIOS开启CPU虚拟化"></a>1. BIOS开启CPU虚拟化</h2><h3 id="开启"><a href="#开启" class="headerlink" title="开启"></a>开启</h3><ul>
<li>开机之后按下F1键</li>
<li>进入Security选项</li>
<li>进入Virtualization子选项</li>
<li>Intel(R) Virtualization Technology 选项修改成 Enable</li>
<li>Intel(R) VT-d Feature 选项修改成 Enable</li>
</ul>
<h3 id="确认"><a href="#确认" class="headerlink" title="确认"></a>确认</h3><h4 id="方案一："><a href="#方案一：" class="headerlink" title="方案一："></a>方案一：</h4><p>执行如下命令，查找到 <code>Virtualization:                  VT-x</code> 项目即证明已经开启</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">davywalker@davywalker-ThinkPad-X1-Carbon-4th:~/Downloads/Clash-Linux$ lscpu
Architecture:                    x86_64
CPU op-mode<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:                  <span class="token number">32</span>-bit, <span class="token number">64</span>-bit
Byte Order:                      Little Endian
Address sizes:                   <span class="token number">39</span> bits physical, <span class="token number">48</span> bits virtual
CPU<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:                          <span class="token number">4</span>
On-line CPU<span class="token punctuation">(</span>s<span class="token punctuation">)</span> list:             <span class="token number">0</span>-3
Thread<span class="token punctuation">(</span>s<span class="token punctuation">)</span> per core:              <span class="token number">2</span>
Core<span class="token punctuation">(</span>s<span class="token punctuation">)</span> per socket:              <span class="token number">2</span>
Socket<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:                       <span class="token number">1</span>
NUMA node<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:                    <span class="token number">1</span>
Vendor ID:                       GenuineIntel
CPU family:                      <span class="token number">6</span>
Model:                           <span class="token number">78</span>
Model name:                      Intel<span class="token punctuation">(</span>R<span class="token punctuation">)</span> Core<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> i5-6200U CPU @ <span class="token number">2</span>.30GHz
Stepping:                        <span class="token number">3</span>
CPU MHz:                         <span class="token number">499.999</span>
CPU max MHz:                     <span class="token number">2800.0000</span>
CPU min MHz:                     <span class="token number">400.0000</span>
BogoMIPS:                        <span class="token number">4800.00</span>
Virtualization:                  VT-x
L1d cache:                       <span class="token number">64</span> KiB
L1i cache:                       <span class="token number">64</span> KiB
L2 cache:                        <span class="token number">512</span> KiB
L3 cache:                        <span class="token number">3</span> MiB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h4><p>执行 <code>egrep -o &#39;(vmx|svm)&#39; /proc/cpuinfo</code> 由如下值则为成功</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">davywalker@davywalker-ThinkPad-X1-Carbon-4th:~$ <span class="token function">egrep</span> -o <span class="token string">'(vmx|svm)'</span> /proc/cpuinfo 
vmx
vmx
vmx
vmx
vmx
vmx
vmx
vmx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="2-KVM安装"><a href="#2-KVM安装" class="headerlink" title="2. KVM安装"></a>2. KVM安装</h2><p>其中 <code>libvirt-bin</code> 为非必要依赖</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">davywalker@davywalker-ThinkPad-X1-Carbon-4th:~$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> qemu-kvm qemu libvirt-bin virt-manager virt-viewer bridge-utils<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">davywalker@davywalker-ThinkPad-X1-Carbon-4th:~$ <span class="token function">sudo</span> kvm-ok
INFO: /dev/kvm exists
KVM acceleration can be used<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="3-确认环境"><a href="#3-确认环境" class="headerlink" title="3. 确认环境"></a>3. 确认环境</h2><h1 id="Trouble-Shootings"><a href="#Trouble-Shootings" class="headerlink" title="Trouble Shootings"></a>Trouble Shootings</h1><h2 id="Your-CPU-does-not-support-KVM-extensions"><a href="#Your-CPU-does-not-support-KVM-extensions" class="headerlink" title="Your CPU does not support KVM extensions"></a>Your CPU does not support KVM extensions</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">davywalker@davywalker-ThinkPad-X1-Carbon-4th:~$ <span class="token function">sudo</span> kvm-ok
Your CPU does not support KVM extensions<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>


<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h1><ul>
<li><a href="https://edu.51cto.com/center/course/lesson/index?id=118662">开源虚拟化KVM入门（KVM架构+KVM基本管理）视频课程</a></li>
<li><a href="https://blog.csdn.net/ZHOU_VIP/article/details/116767782">ThinkPad机型BIOS开启VT虚拟化技术</a></li>
<li><a href="https://blog.csdn.net/weixin_45761101/article/details/114524806">ubuntu安装kvm</a></li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>ubuntu</tag>
        <tag>system-init</tag>
        <tag>system-config</tag>
        <tag>kvm</tag>
        <tag>virtualization</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中配置文件占位符替换的几种模式探讨与分析</title>
    <url>//2022-05-13-java-property-config/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在Java&#x2F;Maven项目中, 经常会有配置文件中配置项, 需要根据环境进行不同的参数变量替换, 如果搞不清楚, 经常会混淆.<br>当前有如下几种方式: </p>
<ul>
<li>编译期替换<ul>
<li>Maven Profile</li>
<li><a href="https://juejin.cn/post/6844903962240352263">autoconfig</a></li>
</ul>
</li>
<li>运行期替换<ul>
<li>SpringBoot Profile</li>
</ul>
</li>
<li>其他替换<ul>
<li>Docker Java应用启动参数</li>
</ul>
</li>
</ul>
<p>各有优缺点. </p>
<h1 id="1-编译期替换"><a href="#1-编译期替换" class="headerlink" title="1. 编译期替换"></a>1. 编译期替换</h1><h2 id="1-1-Maven-Profile"><a href="#1-1-Maven-Profile" class="headerlink" title="1.1 Maven Profile"></a>1.1 Maven Profile</h2><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><ul>
<li>参见<a href="https://www.cnblogs.com/davenkin/p/advanced-maven-use-profile.html">Maven Profile使用方式</a></li>
</ul>
<h4 id="方式1-默认激活"><a href="#方式1-默认激活" class="headerlink" title="方式1: 默认激活"></a>方式1: 默认激活</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>apple<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fruit</span><span class="token punctuation">></span></span>APPLE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fruit</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>banana<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fruit</span><span class="token punctuation">></span></span>BANANA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fruit</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mvn initialize
mvn clean compile -DskipTests<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="方式2-指定profile激活"><a href="#方式2-指定profile激活" class="headerlink" title="方式2: 指定profile激活"></a>方式2: 指定profile激活</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mvn initialize -Pbanana
mvn clean compile -DskipTests -Pbanana<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="方式3-自动激活Profile"><a href="#方式3-自动激活Profile" class="headerlink" title="方式3: 自动激活Profile"></a>方式3: 自动激活Profile</h4><p>如下根据maven内置的系统变量进行, <a href="https://maven.apache.org/enforcer/enforcer-rules/requireOS.html">更多系统变量</a></p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>mac<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>os</span><span class="token punctuation">></span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>family</span><span class="token punctuation">></span></span>mac<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>family</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>os</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>database.driverClassName</span><span class="token punctuation">></span></span>org.postgresql.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>database.driverClassName</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>database.url</span><span class="token punctuation">></span></span>jdbc:postgresql://localhost/database<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>database.url</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>database.user</span><span class="token punctuation">></span></span>username<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>database.user</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>database.password</span><span class="token punctuation">></span></span>password<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>database.password</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>unix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>os</span><span class="token punctuation">></span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>family</span><span class="token punctuation">></span></span>unix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>family</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>os</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>database.driverClassName</span><span class="token punctuation">></span></span>com.mysql.jdbc.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>database.driverClassName</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>database.url</span><span class="token punctuation">></span></span>jdbc:mysql://localhost:3306/database<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>database.url</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>database.user</span><span class="token punctuation">></span></span>username<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>database.user</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>database.password</span><span class="token punctuation">></span></span>password<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>database.password</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="配置文件变量替换"><a href="#配置文件变量替换" class="headerlink" title="配置文件变量替换"></a>配置文件变量替换</h3><p>如下, 根据Maven Profile来选择不同的filter文件, 根据不同的filter文件, 编译期将 <code>src/main/resources/*</code> 中的变量都替换掉. </p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span><span class="token punctuation">></span></span>
...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filters</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>src/main/filters-$&#123;active.profile&#125;.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filters</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>dev<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>active.profile</span><span class="token punctuation">></span></span>dev<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>active.profile</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>
        <span class="token comment">&lt;!-- 把当前profile设置为默认profile，可以同时这是多个为默认--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>active.profile</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>active.profile</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>product<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>active.profile</span><span class="token punctuation">></span></span>product<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>active.profile</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>
...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="1-2-autoconfig"><a href="#1-2-autoconfig" class="headerlink" title="1.2 autoconfig"></a>1.2 autoconfig</h2><p>本质其实与maven filter类似. 不做过多解释. 参见: <a href="https://juejin.cn/post/6844903962240352263">Webx使用Autoconfig总结</a></p>
<h1 id="2-运行期替换"><a href="#2-运行期替换" class="headerlink" title="2. 运行期替换"></a>2. 运行期替换</h1><h2 id="2-1-SpringBoot-Profile"><a href="#2-1-SpringBoot-Profile" class="headerlink" title="2.1 SpringBoot Profile"></a>2.1 SpringBoot Profile</h2><p>初步使用方式参见: <a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1282388483112993">使用Profiles</a><br>具体多模块化多层次配置参见: <a href="https://davyjones2010.github.io/2022-02-14-maven-multi-module-test/#%E7%AC%AC%E4%B8%80%E6%AD%A5-%E6%A8%A1%E5%9D%97%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%8C%89%E7%85%A7-%E9%80%9A%E7%94%A8%E6%B5%8B%E8%AF%95%E7%94%9F%E4%BA%A7%E7%AD%89%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3-%E4%B8%A4%E7%B1%BB%E8%BF%9B%E8%A1%8C%E6%8B%86%E5%88%86">SpringBoot+Maven多模块项目测试最佳实践</a><br>优点: 无需重新编译打包, 直接指定不同的运行参数即可. </p>
<h1 id="3-其他形式替换"><a href="#3-其他形式替换" class="headerlink" title="3. 其他形式替换"></a>3. 其他形式替换</h1><p>如上, Maven Profile方案, 如果需要dev&#x2F;pre&#x2F;prod不同环境打出来不同的包, 需要在maven编译时手动指定 <code>-Pdev</code>.<br>但在实际CI&#x2F;CD中, 不可能手动敲命令来打包&#x2F;指定参数. 因此都需要与CI&#x2F;CD框架进行结合, 从而感知到不同环境参数. </p>
<h2 id="3-1-自定义部署脚本"><a href="#3-1-自定义部署脚本" class="headerlink" title="3.1 自定义部署脚本"></a>3.1 自定义部署脚本</h2><p>这个依赖于CI&#x2F;CD框架本身. </p>
<ul>
<li>在Jenkins里, 可以手动为不同的pipeline(环境), 指定不同的命令. dev pipeline指定<code>-Pdev</code></li>
<li>在其他框架里, 手动编写启动脚本等, 识别CI&#x2F;CD框架的环境变量来指定<code>-Pdev</code>等参数</li>
</ul>
<h2 id="3-2-Docker-Java应用启动参数"><a href="#3-2-Docker-Java应用启动参数" class="headerlink" title="3.2 Docker Java应用启动参数"></a>3.2 Docker Java应用启动参数</h2><p>本质还是在Dockerfile中, 与CI&#x2F;CD框架结合. </p>
<h3 id="3-2-1-Dockerfile里指定环境变量-直接在-Spring-Properties文件里使用"><a href="#3-2-1-Dockerfile里指定环境变量-直接在-Spring-Properties文件里使用" class="headerlink" title="3.2.1 Dockerfile里指定环境变量, 直接在 Spring Properties文件里使用"></a>3.2.1 Dockerfile里指定环境变量, 直接在 Spring Properties文件里使用</h3><p>例如: <a href="https://charith.xyz/docker/dockerfile-environment-variables/">Dockerfile: Environment Variables</a></p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token value attr-value">$&#123;DB_USERNAME&#125;</span>
<span class="token key attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token value attr-value">$&#123;DB_PASSWORD&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">FROM maven:3.6.3-openjdk-16-slim AS build
ENV <span class="token assign-left variable">DB_HOST</span><span class="token operator">=</span>db <span class="token punctuation">\</span>
     <span class="token assign-left variable">DB_USERNAME</span><span class="token operator">=</span>username <span class="token punctuation">\</span>
     <span class="token assign-left variable">DB_PASSWORD</span><span class="token operator">=</span>password
COPY ./mobile-app-ws /usr/local/mobile-app-ws
WORKDIR /usr/local/mobile-app-ws/
RUN mvn -Dmaven.test.skip<span class="token operator">=</span>true clean package

FROM tomcat:8
COPY --from<span class="token operator">=</span>build /usr/local/mobile-app-ws/target/mobile-app-ws-0.0.1-SNAPSHOT.war /usr/local/tomcat/webapps/mobile-app-ws.war
EXPOSE <span class="token number">8080</span>
CMD <span class="token punctuation">[</span><span class="token string">"catalina.sh"</span>, <span class="token string">"run"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>基于不同的参数启动镜像: (注意ENV变量不在构建镜像时生效) </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -d --name ws-myappv3 <span class="token punctuation">\</span>
   -e <span class="token assign-left variable">DB_HOST</span><span class="token operator">=</span>db-myapp <span class="token punctuation">\</span>
   -e <span class="token assign-left variable">DB_USERNAME</span><span class="token operator">=</span>charith <span class="token punctuation">\</span>
   -e <span class="token assign-left variable">DB_PASSWORD</span><span class="token operator">=</span>charith <span class="token punctuation">\</span>
   -p <span class="token number">38083</span>:8080 <span class="token punctuation">\</span>
   --network<span class="token operator">=</span>myapp <span class="token punctuation">\</span>
   myapp:v3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>





<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>java</tag>
        <tag>best-practice</tag>
        <tag>config</tag>
        <tag>properties</tag>
      </tags>
  </entry>
  <entry>
    <title>一个通用数据巡检框架的设计</title>
    <url>//2022-05-15-cruise-framework-design/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在实际项目中, 有许多业务场景, 会存在多张表数据不一致或者脏数据残留的问题,<br>需要定期执行一些SQL来进行数据一致性的巡检与订正, 以实现数据的最终一致性.<br>例如下表, 需要定期查询&amp;统计出’deleted’状态的用户数量, 报警, 并清理这些数据.</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- user表</span>
user_id<span class="token operator">|</span> age<span class="token operator">|</span> <span class="token keyword">status</span><span class="token operator">|</span>
<span class="token number">1</span><span class="token operator">|</span> <span class="token number">18</span><span class="token operator">|</span> deleted<span class="token operator">|</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>


<h1 id="初步方案"><a href="#初步方案" class="headerlink" title="初步方案:"></a>初步方案:</h1><p>方案1: 可以针对每个需求, 单独写SQL-&gt;DAO-&gt;Service等, 但带来的问题是: </p>
<ol>
<li>开发量大, 每次新的需求, 都需要撸一遍, 重复工作量大.</li>
<li>SQL-&gt;Service整体功能分散, 不便于维护.<br>方案2: 可以基于此, 抽象出一个面向SQL的通用巡检框架, 便于统一接入与维护.</li>
</ol>
<h1 id="架构设计思考"><a href="#架构设计思考" class="headerlink" title="架构设计思考"></a>架构设计思考</h1><p>从用户角度, 可以:<br>定时任务框架: </p>
<ol>
<li>创建巡检任务, 与输入自定义的SQL绑定</li>
<li>定义巡检周期</li>
<li>手动触发运行(便于首次配置之后调试)</li>
<li>查看运行记录(便于)</li>
</ol>
<p>报警与订正框架: </p>
<ol>
<li>定义任务结果筛选与报警条件</li>
<li>定义任务结果执行的订正Action</li>
</ol>
<h2 id="第一部分-定时任务框架"><a href="#第一部分-定时任务框架" class="headerlink" title="第一部分: 定时任务框架"></a>第一部分: 定时任务框架</h2><p>核心就是一个面向SQL的分布式定时任务框架, 调研现有的任务框架实现(例如Quartz): </p>
<ul>
<li>任务核心: <ul>
<li>任务描述与定义(即数据源支持哪些? SQL支持哪些?)</li>
<li>定时任务的调度与执行</li>
<li>历史任务运行情况<ul>
<li>耗时</li>
<li>WorkerIp</li>
<li>执行状态</li>
</ul>
</li>
</ul>
</li>
<li>运维后台: <ul>
<li>手工触发<ul>
<li>指定</li>
</ul>
</li>
<li>任务</li>
</ul>
</li>
</ul>
<h2 id="第二部分-数据订正报警框架"><a href="#第二部分-数据订正报警框架" class="headerlink" title="第二部分: 数据订正报警框架"></a>第二部分: 数据订正报警框架</h2><h1 id="详细设计"><a href="#详细设计" class="headerlink" title="详细设计"></a>详细设计</h1><p>任务分为 “全量巡检” 与 “增量巡检” 两类.<br>全量巡检: 即每次执行SQL, 对报警结果全量输出.<br>增量巡检: 即每次执行SQL, 只输出与上次执行有差异的(新增的)数据报警.</p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>java</tag>
        <tag>best-practice</tag>
        <tag>software-engineering</tag>
        <tag>cruiser</tag>
        <tag>software-design</tag>
        <tag>arch</tag>
      </tags>
  </entry>
  <entry>
    <title>软件工程中的一些最佳实践沉淀</title>
    <url>//2022-05-15-software-enginnering-best-practice/</url>
    <content><![CDATA[<h1 id="jar-x2F-maven版本号定义"><a href="#jar-x2F-maven版本号定义" class="headerlink" title="jar&#x2F;maven版本号定义"></a>jar&#x2F;maven版本号定义</h1><p>一般推荐使用 <a href="https://chronver.org/">chronVer</a></p>
<h2 id="semVer"><a href="#semVer" class="headerlink" title="semVer"></a><a href="https://semver.org/">semVer</a></h2><ul>
<li>格式: MAJOR.MINOR.PATCH</li>
<li>语义: <ul>
<li>MAJOR version when you make incompatible API changes</li>
<li>MINOR version when you add functionality in a backwards compatible manner</li>
<li>PATCH version when you make backwards compatible bug fixes.</li>
</ul>
</li>
<li>优缺点: <ul>
<li>优点: 较为简单, 也是大家常用的方式.</li>
<li>缺点: 不直观</li>
</ul>
</li>
</ul>
<h2 id="chronVer"><a href="#chronVer" class="headerlink" title="chronVer"></a><a href="https://chronver.org/">chronVer</a></h2><ul>
<li>格式: YEAR.MONTH.DAY.CHANGESET_IDENTIFIER</li>
<li>语义: CHANGESET_IDENTIFIER</li>
<li>优缺点:<ul>
<li>优点: 直接用时间戳来标识, 较为直观. 适用较为频繁发版的系统. </li>
<li>缺点: 比较难以标识版本之间的兼容情况.</li>
</ul>
</li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>java</tag>
        <tag>best-practice</tag>
        <tag>software-engineering</tag>
      </tags>
  </entry>
  <entry>
    <title>RPC调用异常行为与处理方案总结</title>
    <url>//2022-05-18-rpc-exception-handling/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在使用IAcsClient或者dubbo进行rpc调用时, 异常情况总是不可避免的.<br>这里总结下各种异常, 以及对应的表现形式与处理方式.</p>
<h1 id="异常总结"><a href="#异常总结" class="headerlink" title="异常总结"></a>异常总结</h1><table>
<thead>
<tr>
<th>错误分类</th>
<th>错误细分</th>
<th>IAcsClient</th>
<th>Dubbo</th>
</tr>
</thead>
<tbody><tr>
<td>客户端异常</td>
<td>客户端网络无连接, 闪断等</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>IAcsClient 抛出ClientException异常<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>aliyuncs<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span></span>ClientException</span><span class="token operator">:</span> <span class="token class-name">SDK<span class="token punctuation">.</span>ServerUnreachable</span> <span class="token operator">:</span> <span class="token class-name">Server</span> unreachable<span class="token operator">:</span> connection<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
| </li>
<li>抛出RpcException异常:</li>
</ul>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207122208285.png"> |<br>|  | SDK参数缺失错误等 |</p>
<ul>
<li>IAcsClient 抛出ClientException异常<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>aliyuncs<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span></span>ClientException</span><span class="token operator">:</span> <span class="token class-name">SDK<span class="token punctuation">.</span>InvalidProfile</span> <span class="token operator">:</span> <span class="token class-name">No</span> active profile found<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
| </li>
<li>不会有该场景, 因为dubbo调用没有SDK<br>|<br>| 服务端异常 | 服务端限流, 处理超时 | </li>
<li>IAcsClient 抛出ServerException异常<br>|  |<br>|  | 业务异常, 例如请求参数错误, SPOT价格设置过低等 |</li>
<li>IAcsClient 抛出ClientException异常</li>
<li>注意ServerException是ClientException的子类<br>|</li>
<li>不抛异常, 返回 PlainResult<Object> isSuccess&#x3D;false; data&#x3D;null; message !&#x3D; null</li>
</ul>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207122209444.png"> |<br>|  | 服务端未提供该服务 |</p>
<ul>
<li>IAcsClient抛出ClientException异常<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>aliyuncs<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span></span>ClientException</span><span class="token operator">:</span> <span class="token class-name">InvalidVersion</span> <span class="token operator">:</span> <span class="token class-name">Specified</span> parameter <span class="token class-name">Version</span> is not <span class="token class-name"><span class="token namespace">valid<span class="token punctuation">.</span></span>
RequestId</span> <span class="token operator">:</span> xxx

<span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>aliyuncs<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span></span>ClientException</span><span class="token operator">:</span> <span class="token class-name">InvalidAction<span class="token punctuation">.</span>NotFound</span> <span class="token operator">:</span> <span class="token class-name">Specified</span> api is not found<span class="token punctuation">,</span> please check your url and <span class="token class-name"><span class="token namespace">method<span class="token punctuation">.</span></span>
RequestId</span> <span class="token operator">:</span> xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
| </li>
<li>抛出RpcException异常: <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>rpc<span class="token punctuation">.</span></span>RpcException</span><span class="token operator">:</span> <span class="token class-name">Failed</span> <span class="token keyword">to</span> <span class="token namespace">invoke</span> the method xxx in the service <span class="token class-name"><span class="token namespace">xxx<span class="token punctuation">.</span></span> No</span> provider available <span class="token keyword">for</span> the service xxx from registry xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
|<br>| 其他异常 |  | IAcsClient正常返回. 返回对象里:<br>AcsResponse有requestId, 但返回结果为空, success&#x3D;false<br>啥时候会有这种异常?  |  |</li>
</ul>
<h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><h2 id="IAcsClient异常处理"><a href="#IAcsClient异常处理" class="headerlink" title="IAcsClient异常处理"></a>IAcsClient异常处理</h2><p>所以针对IAcsClient, 可以按照如下方式进行异常处理:</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
    ecsInnerClient<span class="token punctuation">.</span><span class="token function">getAcsResponse</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ServerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     <span class="token comment">// client调用超时, 被服务端限流等, 都会抛出异常, 走到这里, 需要后续降级到库存缓存实现.</span>
     listResourceResponse<span class="token punctuation">.</span><span class="token function">setSuccess</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span>FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span>
     log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"DescribeResourceAllocation ServerException. request: &#123;&#125;"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClientException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     <span class="token comment">// SPOT价格不满足, 客户端传入参数有错误, 等业务异常, 走到这里, 无需后续降级到库存缓存实现.</span>
     listResourceResponse<span class="token punctuation">.</span><span class="token function">setSuccess</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>
     log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"DescribeResourceAllocation ClientException. request: &#123;&#125;"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>learn-from-failure</tag>
        <tag>java</tag>
        <tag>rpc</tag>
        <tag>exception</tag>
      </tags>
  </entry>
  <entry>
    <title>记SpringBootCache使用的问题总结</title>
    <url>//2022-05-18-springboot-cache/</url>
    <content><![CDATA[<h1 id="Cacheable-无参方法"><a href="#Cacheable-无参方法" class="headerlink" title="@Cacheable 无参方法"></a>@Cacheable 无参方法</h1><p>有些无参方法, 也需要被SpringBoot @Cacheable 进行cache, 如下代码样例:  </p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Cachable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"my_cache"</span><span class="token punctuation">,</span> unless<span class="token operator">=</span><span class="token string">"#result == null || #result.size() &lt;= 0"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">listAllUids</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>有如下需要注意的点:</p>
<ul>
<li>可以不写 <code>key=xxx</code>, 这样默认的key就是<code>SimpleType []</code></li>
<li>SpringBoot官方建议<a href="https://docs.spring.io/spring/docs/3.1.x/spring-framework-reference/html/cache.html">使用方法名作为key</a>, 如下:</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Cachable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"my_cache"</span><span class="token punctuation">,</span> unless<span class="token operator">=</span><span class="token string">"#result == null || #result.size() &lt;= 0"</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">"#root.method.name"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>也可以hardcode一个key, 这样更易于查找, 如下:</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Cachable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"my_cache"</span><span class="token punctuation">,</span> unless<span class="token operator">=</span><span class="token string">"#result == null || #result.size() &lt;= 0"</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token string">"'my_key'"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>要注意key里的常量, <font color='red'>一定要用单引号括起来</font>, 否则会<a href="https://stackoverflow.com/questions/33383366/cacheble-annotation-on-no-parameter-method">报错如下</a>: <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>expression<span class="token punctuation">.</span>spel<span class="token punctuation">.</span></span>SpelEvaluationException</span><span class="token operator">:</span> EL1008E<span class="token operator">:</span><span class="token punctuation">(</span>pos <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token class-name">Property</span> or field my_key cannot be found on object of type '<span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span></span>CacheExpressionRootObject</span>' <span class="token operator">-</span> maybe not <span class="token keyword">public</span><span class="token operator">?</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>learn-from-failure</tag>
        <tag>java</tag>
        <tag>springboot</tag>
        <tag>spring-cache</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s生态中promethus的架构与原理研究</title>
    <url>//2022-05-22-k8s-promethus/</url>
    <content><![CDATA[<h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><p><a href="https://prometheus.io/docs/introduction/faq/">https://prometheus.io/docs/introduction/faq/</a></p>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207122209641.png"></p>
<p>本质上是类似alimonitor的系统.</p>
<h1 id="几个细节"><a href="#几个细节" class="headerlink" title="几个细节:"></a>几个细节:</h1><ul>
<li><p>使用pull模式, 而不是push模式. 即promethus server主动去各个业务方捞取数据, 而不是各个业务方主动往promethus server推送数据.</p>
<ul>
<li>为啥使用pull模式? <a href="https://prometheus.io/docs/introduction/faq/#why-do-you-pull-rather-than-push">https://prometheus.io/docs/introduction/faq/#why-do-you-pull-rather-than-push</a><ul>
<li>You can run your monitoring on your laptop when developing changes.</li>
<li>You can more easily tell if a target is down.</li>
<li>You can manually go to a target and inspect its health with a web browser.</li>
</ul>
</li>
<li>针对现存的已经有的push模式, 提供了pushgateway方案来兼容. (可以参见上图架构)<ul>
<li><a href="https://prometheus.io/docs/instrumenting/pushing/">https://prometheus.io/docs/instrumenting/pushing/</a></li>
<li>pushgateway类似于</li>
</ul>
</li>
</ul>
</li>
<li><p>由于使用了pull模式, 因此会有各种<a href="https://prometheus.io/docs/instrumenting/exporters/">exporter组件</a>, 来适配各个常用监控源, 例如 casandra exporter, ECS Exporter等. 本质上这种exporter是类似一个http服务器, 可以让promethus server来捞取数据.</p>
</li>
<li><p>服务发现: 由于使用的是pull模式, 因此promethus需要知道要从哪里捞取各个业务方的metrics, 因此需要一个服务发现机制. 有如下两种:</p>
<ul>
<li>静态文件配置(File-Based SD): ip:port</li>
<li>DNS: nameserver:port <a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/#dns_sd_config">https://prometheus.io/docs/prometheus/latest/configuration/configuration/#dns_sd_config</a></li>
<li>HTTP_SD:</li>
</ul>
</li>
<li><p>存储:</p>
<ul>
<li>存储介质:<ul>
<li>默认使用的localstorage, 本地存储</li>
<li>可以支持remote storage, 但由于各个remote storage的接口&amp;对原生的promethus SQL支持度的不同, 分为read&amp;write能力<ul>
<li><a href="https://prometheus.io/docs/operating/integrations/#remote-endpoints-and-storage">remote storage支持列表</a></li>
</ul>
</li>
</ul>
</li>
<li>数据格式:<ul>
<li>自定义的, 支持压缩的本地存储格式.</li>
</ul>
</li>
</ul>
</li>
<li><p>HA:</p>
<ul>
<li>服务HA:<ul>
<li><a href="https://www.robustperception.io/scaling-and-federating-prometheus">https://www.robustperception.io/scaling-and-federating-prometheus</a></li>
<li>默认: 单台server足以支撑1000台server的metrics量.</li>
<li>方案1: Initial Deployment<ul>
<li>2个global Prometheus , N个local Promethus, global负责汇聚local数据</li>
<li>保持2个global, 防止单台宕机.</li>
</ul>
</li>
<li>方案2: Splitting By Use, 按用途垂直拆分<ul>
<li>promethus前后端分离部署</li>
<li>按业务域分别部署, 例如为Cassandra服务单独部署一套, 为MySQL服务单独部署一套</li>
</ul>
</li>
<li>方案3: Horizontal Sharding, 水平拆分<ul>
<li>不推荐多机器部署,</li>
</ul>
</li>
</ul>
</li>
<li>数据HA:<ul>
<li>localstorage: 无法HA, 因此promethus是推荐使用RAID, 或者定期打快照.</li>
</ul>
</li>
</ul>
</li>
<li><p>限制:</p>
<ul>
<li>不要用promethus来进行tracing&#x2F;logging, 只能用来做metrics</li>
</ul>
</li>
</ul>
<h1 id="核心术语-x2F-指标"><a href="#核心术语-x2F-指标" class="headerlink" title="核心术语&#x2F;指标"></a>核心术语&#x2F;指标</h1><p>定义了很好的几种通用指标, 来覆盖metrics各个方面:</p>
<ol>
<li><p>counter: <a href="https://www.robustperception.io/how-does-a-prometheus-counter-work">https://www.robustperception.io/how-does-a-prometheus-counter-work</a></p>
<ol>
<li>rate</li>
</ol>
</li>
<li><p>gauge</p>
</li>
<li><p>histogram, 如下, 按照le&#x3D;”xxx”, le即”less than”, 将latency分成了10个bucket</p>
<pre class="line-numbers language-none"><code class="language-none">prometheus_http_request_duration_seconds_bucket&#123;handler&#x3D;&quot;&#x2F;&quot;,le&#x3D;&quot;0.1&quot;&#125; 25547
prometheus_http_request_duration_seconds_bucket&#123;handler&#x3D;&quot;&#x2F;&quot;,le&#x3D;&quot;0.2&quot;&#125; 26688
prometheus_http_request_duration_seconds_bucket&#123;handler&#x3D;&quot;&#x2F;&quot;,le&#x3D;&quot;0.4&quot;&#125; 27760
prometheus_http_request_duration_seconds_bucket&#123;handler&#x3D;&quot;&#x2F;&quot;,le&#x3D;&quot;1&quot;&#125; 28641
prometheus_http_request_duration_seconds_bucket&#123;handler&#x3D;&quot;&#x2F;&quot;,le&#x3D;&quot;3&quot;&#125; 28782
prometheus_http_request_duration_seconds_bucket&#123;handler&#x3D;&quot;&#x2F;&quot;,le&#x3D;&quot;8&quot;&#125; 28844
prometheus_http_request_duration_seconds_bucket&#123;handler&#x3D;&quot;&#x2F;&quot;,le&#x3D;&quot;20&quot;&#125; 28855
prometheus_http_request_duration_seconds_bucket&#123;handler&#x3D;&quot;&#x2F;&quot;,le&#x3D;&quot;60&quot;&#125; 28860
prometheus_http_request_duration_seconds_bucket&#123;handler&#x3D;&quot;&#x2F;&quot;,le&#x3D;&quot;120&quot;&#125; 28860
prometheus_http_request_duration_seconds_bucket&#123;handler&#x3D;&quot;&#x2F;&quot;,le&#x3D;&quot;+Inf&quot;&#125; 28860<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>summary</p>
</li>
</ol>
<h1 id="核心组件研究"><a href="#核心组件研究" class="headerlink" title="核心组件研究"></a>核心组件研究</h1><h2 id="pushgateway"><a href="#pushgateway" class="headerlink" title="pushgateway"></a>pushgateway</h2><p><a href="https://prometheus.io/docs/practices/pushing/">https://prometheus.io/docs/practices/pushing/</a><br><a href="https://github.com/prometheus/pushgateway">https://github.com/prometheus/pushgateway</a></p>
<h2 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h2><p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207122209523.png"></p>
<h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><p>Observability的三大部分:</p>
<table>
<thead>
<tr>
<th>Metrics</th>
<th>Promethus + Grafana(前端dashboard)</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>Tracing</td>
<td>ELK</td>
<td></td>
</tr>
<tr>
<td>Logging</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207122210006.png"><br>**</p>
<ul>
<li><p>Metrics比较好理解, 核心可以分为如下几层: <a href="https://codeascraft.com/2011/02/15/measure-anything-measure-everything/">https://codeascraft.com/2011/02/15/measure-anything-measure-everything/</a> metrics are structured by default</p>
<ul>
<li>network</li>
<li>machine: 现成的node exporter, <a href="https://github.com/prometheus/node_exporter">https://github.com/prometheus/node_exporter</a><ul>
<li>disk&#x2F;io</li>
<li>cpu&#x2F;mem&#x2F;threads&#x2F;load…</li>
<li>status, …</li>
</ul>
</li>
<li>application (而通常应用的metrics是最为复杂的), 典型的应用, 已经有promethus的exporter了<ul>
<li>DB</li>
<li></li>
</ul>
</li>
</ul>
</li>
<li><p>Logging:</p>
</li>
<li><h2 id="Tracing-类似鹰眼-根据traceId查看"><a href="#Tracing-类似鹰眼-根据traceId查看" class="headerlink" title="Tracing: 类似鹰眼, 根据traceId查看"></a>Tracing: 类似鹰眼, 根据traceId查看</h2></li>
</ul>
<h1 id="一些有意思的思考"><a href="#一些有意思的思考" class="headerlink" title="一些有意思的思考"></a>一些有意思的思考</h1><p><a href="https://www.splunk.com/en_us/data-insider/what-is-observability.html">https://www.splunk.com/en_us&#x2F;data-insider&#x2F;what-is-observability.html</a></p>
<ol>
<li>monitoring与observability的关系是啥?<ol>
<li>Monitoring is an action you perform to increase the observability of your system.</li>
<li>Observability is a property of that system.</li>
</ol>
</li>
<li>Apdex指标: <a href="https://en.wikipedia.org/wiki/Apdex">https://en.wikipedia.org/wiki/Apdex</a></li>
<li>EKL: Elasticsearch, Logstash, and Kibana</li>
</ol>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>k8s</tag>
        <tag>promethus</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中常用的数据库连接池以及事务框架的原理探究</title>
    <url>//2022-05-23-java-db-connection-transaction/</url>
    <content><![CDATA[<h1 id="思考1-Spring里各种事务隔离级别-本质上是如何实现的"><a href="#思考1-Spring里各种事务隔离级别-本质上是如何实现的" class="headerlink" title="思考1: Spring里各种事务隔离级别, 本质上是如何实现的?"></a>思考1: Spring里各种事务隔离级别, 本质上是如何实现的?</h1><p>很有意思的一个问题. 单个connection或者DB原生是无法实现的, 本质上是通过不同的connection来实现的.</p>
<p><a href="https://stackoverflow.com/questions/19526604/how-does-transaction-suspension-work-in-spring">https://stackoverflow.com/questions/19526604/how-does-transaction-suspension-work-in-spring</a></p>
<blockquote>
<p>The point of suspending a transaction is to change the current transaction for a thread to a new one. This would NOT line up with the semantics of nested transactions because the new and suspended transactions are completely independent of each other. There is no connection-level API to support suspending transactions so this has to be done by using a different connection. If you are using JTA with Spring, this is done by the JTA transaction manager. If you are using DataSourceTransactionManager, you can look in the code and see that it will be saving off the current connection as a “suspended resource” and grabbing a new connection from the data source for the new transaction.</p>
</blockquote>
<ul>
<li><a href="https://wiyi.org/physical-and-logical-transactions.html">https://wiyi.org/physical-and-logical-transactions.html</a></li>
<li><a href="https://wiyi.org/how-does-transaction-suspension-in-spring.html">https://wiyi.org/how-does-transaction-suspension-in-spring.html</a></li>
</ul>
<h2 id="简化后的样例"><a href="#简化后的样例" class="headerlink" title="简化后的样例"></a>简化后的样例</h2><h3 id="REQUIRES-NEW"><a href="#REQUIRES-NEW" class="headerlink" title="REQUIRES_NEW"></a>REQUIRES_NEW</h3><ul>
<li>新建事务，如果当前存在事务，则把当前事务挂起</li>
<li>这个方法会独立提交事务，不受调用者的事务影响，父级异常，它也是正常提交</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 假定为REQUIRE_NEW传播类型
&#x2F;&#x2F; 1. 外部事务执行
Connection conn &#x3D; getConnection(); &#x2F;&#x2F; 这里是新建connection
Statement stmt &#x3D; conn.createStatement();
stmt.execute(&quot;update xxx set xxx &#x3D; xxx&quot;);

&#x2F;&#x2F; 2. 到这里, 内部事务开始, 需要执行方法2, REQUIRE_NEW传播级别, 那本质上是新建了个connection. 在Spring里, 其实就是suspend(), 即将上一个conn从ThreadLocal里移除; 然后把conn2放入ThreadLocal里.
Connection conn2 &#x3D; getConnection(); &#x2F;&#x2F; 这个conn2与上边的conn是不同的连接
Statement stmt2 &#x3D; conn.createStatement();
stmt2.execute(&quot;update xxx set xxx &#x3D; xxx&quot;);
conn2.commit(); &#x2F;&#x2F; 这里内部事务执行commit();
stmt2.close();
conn2.close();

&#x2F;&#x2F; 3. 外部事务继续执行
stmt.execute(&quot;update xxx set xxx&#x3D;xxx&quot;);
conn.commit();  &#x2F;&#x2F; 这里外部事务执行commit();
stmt.close();
conn.close();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="PROPAGATION-REQUIRED"><a href="#PROPAGATION-REQUIRED" class="headerlink" title="PROPAGATION_REQUIRED"></a>PROPAGATION_REQUIRED</h3><ul>
<li>支持当前事务，如果当前没有事务，则新建事务</li>
<li>如果当前存在事务，则加入当前事务，合并成一个事务</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 假定为PROPAGATION_REQUIRED传播类型: 
&#x2F;&#x2F; 1. 支持当前事务，如果当前没有事务，则新建事务
&#x2F;&#x2F; 2. 如果当前存在事务，则加入当前事务，合并成一个事务

&#x2F;&#x2F; 1. 外部事务执行
Connection conn &#x3D; getConnection(); &#x2F;&#x2F; 这里是新建connection
Statement stmt &#x3D; conn.createStatement();
stmt.execute(&quot;update xxx set xxx &#x3D; xxx&quot;);

&#x2F;&#x2F; 2. 到这里, 内部事务开始, 需要执行方法2, PROPAGATION_MANDATORY 传播级别, 那本质上是复用了上一个连接.
Connection conn2 &#x3D; conn; &#x2F;&#x2F; 这个conn2与上边的conn是相同的连接
Statement stmt2 &#x3D; conn.createStatement();
stmt2.execute(&quot;update xxx set xxx &#x3D; xxx&quot;);
&#x2F;&#x2F; conn2.commit(); &#x2F;&#x2F; 这里无法做到子事务单独提交, 因为跟父事务已经合并成了一个事务.

&#x2F;&#x2F; 3. 外部事务继续执行
stmt.execute(&quot;update xxx set xxx&#x3D;xxx&quot;);
conn.commit();  &#x2F;&#x2F; 这里整体事务执行commit();
stmt.close();
conn.close();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="NESTED"><a href="#NESTED" class="headerlink" title="NESTED"></a>NESTED</h3><ul>
<li>如果当前存在事务，它将会成为父级事务的一个子事务，方法结束后并没有提交，只有等父事务结束才提交</li>
<li>如果当前没有事务，则新建事务</li>
<li>如果它异常，父级可以捕获它的异常而不进行回滚，正常提交</li>
<li>但如果父级异常，它必然回滚，这就是和 <code>REQUIRES_NEW</code> 的区别</li>
</ul>
<h1 id="思考2-Druid连接池-如何知道池中哪些connection在用-哪些connection没在用"><a href="#思考2-Druid连接池-如何知道池中哪些connection在用-哪些connection没在用" class="headerlink" title="思考2: Druid连接池: 如何知道池中哪些connection在用, 哪些connection没在用?"></a>思考2: Druid连接池: 如何知道池中哪些connection在用, 哪些connection没在用?</h1><h2 id="Druid实现"><a href="#Druid实现" class="headerlink" title="Druid实现:"></a>Druid实现:</h2><p>通常我们使用标准的对象池, 会有如下方法:</p>
<ol>
<li>Object borrow(): 即从池中借用对象, 从而该对象从池中移除, 不能再借给他人.</li>
<li>return(Object obj): 即把对象归还给池子, 以便该对象能被其他人复用.</li>
</ol>
<p>但看标准的JDBC定义, 以及druid的实现, 发现只有如下定义, 即获取连接的定义.</p>
<pre class="line-numbers language-none"><code class="language-none">public interface DataSource &#123;
  Connection getConnection();
  Connection getConnection(String username, String password);
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>看Druid连接池的实现</p>
<ol>
<li>getConnection(): 是从连接池中获取到一个可用的连接, 参见: com.alibaba.druid.pool.DruidDataSource#getConnectionInternal</li>
<li><strong>但为什么没有归还方法呢? 如果没有归还方法, 那连接池就没有意义了呀!!</strong><ol>
<li>解惑: getConnection()拿到的是: DruidPooledConnection</li>
<li>在 DruidPooledConnection.close() 的时候, 其实本质上不是将连接关闭, 而是将连接归还回了连接池!!<ol>
<li>这个设计还是挺巧妙的.</li>
</ol>
</li>
</ol>
</li>
<li>那么真正销毁连接是在什么时候呢?<ol>
<li>即整个连接池销毁的时候. DruidDataSource.close()</li>
</ol>
</li>
</ol>
<h2 id="扩展-DBCP的数据库连接池是如何实现的"><a href="#扩展-DBCP的数据库连接池是如何实现的" class="headerlink" title="扩展: DBCP的数据库连接池是如何实现的?"></a>扩展: DBCP的数据库连接池是如何实现的?</h2><p>核心代码参见: org.apache.commons.dbcp.BasicDataSource</p>
<ol>
<li>使用了工厂模式 </li>
<li>依赖apache的commons.pool 架构整体比较优秀</li>
</ol>
<h3 id="从池中获取连接"><a href="#从池中获取连接" class="headerlink" title="从池中获取连接"></a>从池中获取连接</h3><pre class="line-numbers language-none"><code class="language-none">org.apache.commons.dbcp.BasicDataSource#createDataSource &#123;
	createConnectionPool(); &#x2F;&#x2F; 1. 创建 GenericObjectPool 实例, 
  createPoolableConnectionFactory(); &#x2F;&#x2F; 2. 创建ConnectionFactory, (这里用了工厂模式), Factory用来创建connection
  &#x2F;&#x2F; 底层使用 org.apache.commons.dbcp.PoolableConnectionFactory#makeObject 来新建物理连接
  createDataSourceInstance(); &#x2F;&#x2F; 3. 创建DbcpDataSource对象, 即该connectionpool
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="将连接归还回池子"><a href="#将连接归还回池子" class="headerlink" title="将连接归还回池子"></a>将连接归还回池子</h3><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 1. 实际在池子里的connection是: 
org.apache.commons.dbcp.PoolableConnection#PoolableConnection

&#x2F;&#x2F; 2. 也是在connection.close的时候将connection归还回池子:
public synchronized void close() throws SQLException &#123;
	if (!isUnderlyingConectionClosed) &#123;
	&#x2F;&#x2F; Normal close: underlying connection is still open, so we
	&#x2F;&#x2F; simply need to return this proxy to the pool
	try &#123;
		_pool.returnObject(this); &#x2F;&#x2F; XXX should be guarded to happen at most once
	&#125;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h1 id="思考3-CustomTransaction实现"><a href="#思考3-CustomTransaction实现" class="headerlink" title="思考3: CustomTransaction实现"></a>思考3: CustomTransaction实现</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>为了防止单个大事务, 导致锁表问题. 因此需要把大事务拆分成多个子事务.</p>
<h1 id="思考4-TBTransactionImpl-实现"><a href="#思考4-TBTransactionImpl-实现" class="headerlink" title="思考4: TBTransactionImpl 实现"></a>思考4: TBTransactionImpl 实现</h1><h2 id="背景-1"><a href="#背景-1" class="headerlink" title="背景"></a>背景</h2><ol>
<li>为了解决多个DataSource, 多数据源事务问题.<ol>
<li>例如 DB1 (sql1), DB2 (sql2); 希望这俩数据库的SQL执行, 要不同时成功,  要不同时失败.</li>
</ol>
</li>
<li>Best Efforts 1PC (One Phase Commit)<ol>
<li>本质是采用的是1阶段提交方式.</li>
</ol>
</li>
<li>优缺点:<ol>
<li>优点: 实现&amp;使用简单.</li>
<li>缺点: 无法彻底保证一致性. 例如db1已经commit, db2 commit失败, 则整体回滚会失败掉!</li>
</ol>
</li>
<li>代码实现:</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>
     <span class="token keyword">boolean</span> var11 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

     <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
         var11 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
         <span class="token class-name">TBConnection</span> conn<span class="token punctuation">;</span>
         <span class="token class-name">Iterator</span> i$<span class="token punctuation">;</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>m_conn<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
             i$ <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>m_conn<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

             <span class="token keyword">while</span><span class="token punctuation">(</span>i$<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                 conn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TBConnection</span><span class="token punctuation">)</span>i$<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                 conn<span class="token punctuation">.</span><span class="token function">judgeConnAvailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token punctuation">&#125;</span>
         <span class="token punctuation">&#125;</span>

         i$ <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>m_conn<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 将db1, db2的connection都进行提交</span>
         <span class="token keyword">while</span><span class="token punctuation">(</span>i$<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
             conn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TBConnection</span><span class="token punctuation">)</span>i$<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             conn<span class="token punctuation">.</span><span class="token function">realCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             conn<span class="token punctuation">.</span><span class="token function">realClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">&#125;</span>

         var11 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
     <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var13<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">// 将db1, db2的connection都进行回滚</span>
         <span class="token keyword">this</span><span class="token punctuation">.</span>m_isCommitError <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
         <span class="token class-name">Iterator</span> i$ <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>m_conn<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

         <span class="token keyword">while</span><span class="token punctuation">(</span>i$<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
             <span class="token class-name">TBConnection</span> conn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TBConnection</span><span class="token punctuation">)</span>i$<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                 conn<span class="token punctuation">.</span><span class="token function">realRollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                 conn<span class="token punctuation">.</span><span class="token function">realClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var12<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                 log<span class="token punctuation">.</span><span class="token function">fatal</span><span class="token punctuation">(</span><span class="token string">"Rollback ERROR:"</span> <span class="token operator">+</span> var12<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> var12<span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token punctuation">&#125;</span>
         <span class="token punctuation">&#125;</span>

         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SQLException</span><span class="token punctuation">(</span>var13<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span>var11<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
             <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>m_startHoldConnectionTime <span class="token operator">></span> <span class="token number">0L</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                 <span class="token keyword">long</span> spendtime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>m_startHoldConnectionTime<span class="token punctuation">;</span>
                 <span class="token keyword">if</span> <span class="token punctuation">(</span>spendtime <span class="token operator">>=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>warnTime<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                     log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"事务持续时间过长:"</span> <span class="token operator">+</span> spendtime<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>m_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
                 <span class="token punctuation">&#125;</span>
             <span class="token punctuation">&#125;</span>

             <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">&#125;</span>
     <span class="token punctuation">&#125;</span>

     <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>java</tag>
        <tag>spring</tag>
        <tag>spring-jdbc</tag>
        <tag>database</tag>
        <tag>connection</tag>
        <tag>transaction</tag>
      </tags>
  </entry>
  <entry>
    <title>资源调度API设计的思考</title>
    <url>//2022-05-23-scheduler-api-design/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>记录下调度API实际设计与应用场景中, 一些有意义的思考与沉淀.</p>
<h1 id="批量调度"><a href="#批量调度" class="headerlink" title="批量调度"></a>批量调度</h1><h2 id="amount-amp-minAmount-模式"><a href="#amount-amp-minAmount-模式" class="headerlink" title="amount &amp; minAmount 模式:"></a>amount &amp; minAmount 模式:</h2><h3 id="模式解释"><a href="#模式解释" class="headerlink" title="模式解释"></a>模式解释</h3><p>样例请求如下:</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">BatchParam</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Integer</span> minAmount<span class="token punctuation">;</span>
    <span class="token class-name">Integer</span> amount<span class="token punctuation">;</span>    
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>语义解释: </p>
<ul>
<li>minAmount: 代表请求方需求的最小的资源量. </li>
<li>amount: 代表请求方需要的最大资源量.</li>
</ul>
<p>有点儿抽象, 我们站在scheduler的角度看.<br>批量调度资源, 资源不一定总会满足用户需求的资源, 此时就需要做个妥协,<br>如果能调度出来的资源量(realAmount)范围:</p>
<ul>
<li>[0, minAmount), 则代表无法满足用户最小需求量, 直接返回失败, 不扣减任何资源.</li>
<li>[minAmount, amount), 则代表满足用户最小需求量, 则返回部分成功, 扣减realAmount的资源量, 并把realAmount透出给调用方.</li>
<li>&#x3D;&#x3D;amount, 则代表可以完全满足用户资源需求, 则返回成功, 扣减realAmount&#x3D;amount的资源量.</li>
</ul>
<h3 id="模式样例"><a href="#模式样例" class="headerlink" title="模式样例"></a>模式样例</h3><p>这种双参数的方案, 本质是单参数 <code>amount</code> 的超集. 更加灵活.</p>
<ul>
<li>allOrNothing模式: 严格要求必须是amount, 则参数中 minAmount &#x3D; amount 即可实现.</li>
<li>tryBest模式: 能创建几个是几个, 但最好能创建出amount数量. 则参数中, minAmount &#x3D; 0 即可实现.</li>
</ul>
<p>而实际应用上, 阿里云的API <a href="https://help.aliyun.com/document_detail/63440.html">RunInstances</a> 也是如此设计的.</p>
<h2 id="tryBest-amp-allOrNothing-模式"><a href="#tryBest-amp-allOrNothing-模式" class="headerlink" title="tryBest &amp; allOrNothing 模式:"></a>tryBest &amp; allOrNothing 模式:</h2><p>本质上可以用上边的 <code>minAmount, amount</code> 两个参数进行描述, 更加优雅与灵活.</p>
<h2 id="批量调度性能优化的思考"><a href="#批量调度性能优化的思考" class="headerlink" title="批量调度性能优化的思考"></a>批量调度性能优化的思考</h2><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>scheduler-design</tag>
        <tag>api-design</tag>
        <tag>scheduler-api</tag>
      </tags>
  </entry>
  <entry>
    <title>Java与Spring中SPI机制的探讨与思考</title>
    <url>//2022-05-24-java-spring-spi/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>项目中用到了SPI机制, 使用过程也走了一些弯路. 这里记录下来. </p>
<h2 id="几种SPI方式"><a href="#几种SPI方式" class="headerlink" title="几种SPI方式"></a>几种SPI方式</h2><h2 id="Java中SPI机制"><a href="#Java中SPI机制" class="headerlink" title="Java中SPI机制"></a>Java中SPI机制</h2><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><h3 id="实际应用场景"><a href="#实际应用场景" class="headerlink" title="实际应用场景"></a>实际应用场景</h3><ul>
<li>jdbc驱动, 例如mysql-connector-java.jar中, 就在META-INF&#x2F;services&#x2F;java.sql.Driver</li>
</ul>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>比较严重的一个问题是, 这些SPI的Bean游离于Spring容器外.<br>SPI中引入的对象(Bean)没有被Spring容器管理起来.<br>从而这些Bean如果依赖到了Spring容器中其他Bean, 就只能手动从Spring容器中拿出来复制, 即手动注入.<br>太麻烦了. </p>
<h2 id="Service-Loader-Spring-integration"><a href="#Service-Loader-Spring-integration" class="headerlink" title="Service Loader Spring integration"></a>Service Loader Spring integration</h2><h2 id="Spring-Factories-Loader"><a href="#Spring-Factories-Loader" class="headerlink" title="Spring Factories Loader"></a>Spring Factories Loader</h2><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><h2 id="在什么时候需要用到ServiceLoader-x2F-SPI-SPI优点具体是啥"><a href="#在什么时候需要用到ServiceLoader-x2F-SPI-SPI优点具体是啥" class="headerlink" title="在什么时候需要用到ServiceLoader&#x2F;SPI? SPI优点具体是啥?"></a>在什么时候需要用到ServiceLoader&#x2F;SPI? SPI优点具体是啥?</h2><p>个人理解, 最大的优点是编译期与实现类&#x2F;包解耦. </p>
<h2 id="Spring-Factories-Loader在Starter的应用场景-优势是啥"><a href="#Spring-Factories-Loader在Starter的应用场景-优势是啥" class="headerlink" title="Spring Factories Loader在Starter的应用场景, 优势是啥?"></a>Spring Factories Loader在Starter的应用场景, 优势是啥?</h2><h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h1><p><a href="https://dzone.com/articles/java-service-loader-vs-spring-factories-loader">Java Service Loader vs. Spring Factories Loader</a></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>java</tag>
        <tag>spring</tag>
        <tag>spi</tag>
        <tag>service-loader</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次黑名单方案设计引发的设计思考</title>
    <url>//2022-05-31-blacklist-or-attribute/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>接到需求: 某些ECS规格族天然不具备宕机迁移的能力, 例如某些软件License与硬件ID绑定, 或者加密信息与硬件绑定, 宕机迁移会导致License失效或者加密信息无法解密.<br>而在正常宕机迁移流程里默认所有规格族都会无差别执行.<br>因此需要代码改造下, 识别这些规格族, 然后跳过执行流程. </p>
<h1 id="解决方案1-黑名单模式"><a href="#解决方案1-黑名单模式" class="headerlink" title="解决方案1: 黑名单模式"></a>解决方案1: 黑名单模式</h1><p>即在配置项里维护一个黑名单List, 伪代码如下: </p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">blackList <span class="token operator">=</span> <span class="token function">getFromConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>flavorFamily in blackList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">down_migration_execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>优点: 开发起来简便, 灵活. 也是第一反应想到的方案.</li>
<li>缺点: 使用该方案, 后续发现问题很多: <ul>
<li>代码容易踩坑: <ul>
<li>如果配置项是用数据库字段存储, 那么一定要注意字段的类型&amp;size, 如果太小会导致后续如果名单扩容, 字段溢出, 从而无法实现效果.</li>
</ul>
</li>
<li>运维成本过高: <ul>
<li>因为黑名单与实例规格族本身属性是分散开来的. </li>
<li>如果后续新增规格族, 需要有个地方来通知产品的同学, <code>规格族需要有是否宕机迁移这个属性</code>, 然后需要他们跑到另外一个地方去维护下这个黑名单. </li>
<li>尤其是在不同类别的规格族由不同产品同学负责且人员流动性大时, 没办法通知到每位同学. </li>
<li>但一旦遗漏, 可能会导致线上问题.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="解决方案2-属性模式"><a href="#解决方案2-属性模式" class="headerlink" title="解决方案2: 属性模式"></a>解决方案2: 属性模式</h1><p>即</p>
<ol>
<li>是否宕机迁移作为一个天然属性&#x2F;字段, 添加在规格族&#x2F;规格表上.</li>
<li>该属性作为必填属性, 在新规格族上线时, 对应产品在填写其他属性时(例如cpu&#x2F;mem配比等), 该属性也需要一并填写.</li>
</ol>
<p>伪代码如下:</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">flavorDef <span class="token operator">=</span> <span class="token function">getFlavorDef</span><span class="token punctuation">(</span>flavor<span class="token punctuation">)</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flavorDef<span class="token punctuation">.</span>canDownMigration<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">down_migration_execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>优点: <ul>
<li>后续运维成本极低, 新规格族&#x2F;规格上线时, 该字段与其他属性类似, 作为一个必填选项, 让产品同学统一维护.</li>
<li>代码整体也更面向对象一些, 即更加高内聚, 低耦合.</li>
</ul>
</li>
<li>缺点: <ul>
<li>前期改造量&amp;风险较大: <ul>
<li>表里需要增加字段, 尤其是针对大表且访问频发的表, 有可能锁表, 导致线上问题.</li>
<li>如果有存量大量的规格族数据, 需要进行一波批量订正.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="适用场景探讨"><a href="#适用场景探讨" class="headerlink" title="适用场景探讨"></a>适用场景探讨</h1><p>总的来说, </p>
<ul>
<li>黑白名单只适合作为一个短期内临时的方案&#x2F;开关, 且在不久之后, 黑白名单需要全部清空.<ul>
<li>例如上述例子中, 某些规格需要 <font color='red'>临时</font> 禁止宕机迁移, 但一周之后, 这些规格需要重新enable. </li>
<li>这个时候临时使用黑白名单机制凑合下还行.</li>
</ul>
</li>
<li>而属性方案, 就更适合作为一个常态化的机制.<ul>
<li>例如上述例子中, 某些规格需要的<code>是否禁止宕机迁移</code>是天然的一个属性, 规格一旦设定为 <code>禁止宕机迁移</code> 就不会再修改了.</li>
</ul>
</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>更加推荐使用”属性模式”, 这也是一次之前自己错误设计的反思, 也吃到了很大的苦果.<br><strong>后续在使用”黑&#x2F;白名单”作为方案前, 一定要再想下是否是临时方案, 如果不是, 那么尽量能作为实体上的一个属性来维护.</strong><br>虽然属性方案, 前期改造量可能较大, 但长期来看, 优点是远远大于缺点的.</p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>learn-from-failure</tag>
        <tag>java</tag>
        <tag>good-design</tag>
        <tag>bad-design</tag>
        <tag>black-list</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot基于Interface的Annotation在AOP中如何生效</title>
    <url>//2022-06-02-spring-annotation-on-interface/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>SpringBoot项目代码里, 新增了一个 <code>@Perf</code> 的annotation, 希望增加该annotation的方法, 能自动打印出方法的执行耗时.<br>实际代码结构中, 使用了FilterChain模式, 会有多个Filter(例如10+个)实现同一个接口.<br>因此想着把 <code>@Perf</code> 打在接口层面, 希望所有实现类都能继承该annotation, 从而不用在每个子类的Filter方法里重复打上annotation.<br>但发现实际没有生效.</p>
<h1 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h1><p>在stackoverflow里, 类似的问题也是一堆,<br>总结下来原因是如下两个:  </p>
<ol>
<li>method 上的 annotation 没有被继承下来. 参见如下继承原则详解. </li>
<li>spring 在对类&#x2F;对象进行进行增强(weaving)时, 校验bean是否需要被增强 <code>@Around(&quot;@annotation(Perf)&quot;)</code>, 只会校验bean对应的class上的annotation, 而不会向上回溯父类&#x2F;接口上是否被打了该annotation.</li>
</ol>
<h2 id="1-Java-Annotation的继承原则"><a href="#1-Java-Annotation的继承原则" class="headerlink" title="1. Java Annotation的继承原则"></a>1. Java Annotation的继承原则</h2><h3 id="1-1-Annotation继承原则"><a href="#1-1-Annotation继承原则" class="headerlink" title="1.1 Annotation继承原则:"></a>1.1 Annotation继承原则:</h3><blockquote>
<p>Java中作用在方法层面的annotation不能被继承<br>Java中作用在interface层面的annotation不能被继承<br>Java中打在class层面的annotation默认不能被继承, 但如果annotation被打上@Inherited标签, 则可以被子类继承</p>
</blockquote>
<ul>
<li>原则参见: <a href="http://www.eclipse.org/aspectj/doc/released/adk15notebook/annotations.html#annotation-inheritance">annotation-inheritance</a></li>
<li>详细演示测试代码参见: <a href="https://github.com/DavyJones2010/head-first-spring/blob/feature/20220603_annotation_on_interface/src/test/java/edu/xmu/kunlun/headfirst/spring/annotation/AnnotationTest.java">edu.xmu.kunlun.headfirst.spring.annotation.AnnotationTest</a></li>
</ul>
<h3 id="1-2-为啥会有这种继承原则"><a href="#1-2-为啥会有这种继承原则" class="headerlink" title="1.2 为啥会有这种继承原则?"></a>1.2 为啥会有这种继承原则?</h3><p>上述原则看起来比较复杂, 且不可思议. 如果死记硬背, 效率太低. 需要从设计者角度来考虑下为啥不直接都能继承就好?<br>想清楚原因, 这些原则自然就明白了. 自己查询了stackoverflow, 根本原因是<font color='red'>为了避免歧义</font>. 详细场景分析如下: </p>
<ol>
<li><p>为啥作用在方法层面的annotation不能被继承?<br>因为java interface是多继承的<br>原因样例参见: <a href="https://github.com/DavyJones2010/head-first-spring/blob/feature/20220603_annotation_on_interface/src/main/java/edu/xmu/kunlun/headfirst/spring/annotation2/Sub2.java">edu.xmu.kunlun.headfirst.spring.annotation2.Sub2</a> </p>
</li>
<li><p>为啥作用在interface层面的annotation不能被继承?<br>因为java interface是多实现的.<br>如果class同时实现了多个interface, 每个interface都实现同一个annotation(但对应annotation的参数不同), 那么当前class使用的该是哪个annotation(with参数)?<br>这种场景下, 在OOP中术语叫做 <a href="https://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem">diamond inheritance</a></p>
</li>
<li><p>为啥作用在class层面的annotation可以被继承?<br>因为java class是单继承的. 所以不会有interface的问题.</p>
</li>
</ol>
<h3 id="1-3-问题总结"><a href="#1-3-问题总结" class="headerlink" title="1.3 问题总结"></a>1.3 问题总结</h3><p>因此可以得知, Filter接口的 filter() 方法上的 annotation 没有被继承下来.</p>
<h2 id="2-Spring-AOP-增强原理与原则"><a href="#2-Spring-AOP-增强原理与原则" class="headerlink" title="2. Spring AOP 增强原理与原则"></a>2. Spring AOP 增强原理与原则</h2><h3 id="2-1-Spring-AOP-中几个重要概念"><a href="#2-1-Spring-AOP-中几个重要概念" class="headerlink" title="2.1 Spring AOP 中几个重要概念"></a>2.1 Spring AOP 中几个重要概念</h3><ul>
<li>AOP proxy: an object created by the AOP framework in order to implement the aspect contracts (advise method executions and so on). In the Spring Framework, an AOP proxy will be a JDK dynamic proxy or a CGLIB proxy.</li>
<li>Weaving: linking aspects with other application types or objects to create an advised object. This can be done at compile time (using the AspectJ compiler, for example), load time, or at runtime. Spring AOP, like other pure Java AOP frameworks, performs weaving at runtime.<br>所以, 最关键问题是由于 Spring Boot Weaving 时根据annotation没有weave上去, 而跟使用何种类型的 AOP Proxy 无关!</li>
</ul>
<h3 id="2-2-Spring-AOP-Weaving-核心代码"><a href="#2-2-Spring-AOP-Weaving-核心代码" class="headerlink" title="2.2 Spring AOP Weaving 核心代码"></a>2.2 Spring AOP Weaving 核心代码</h3><p>weaving的几种类型:</p>
<ul>
<li>compile time weaving: 在编译期生成增强类, 例如使用 AspectJ compiler  </li>
<li>run time (or load time) weaving: 在运行期, 实时地校验是否符合条件,</li>
</ul>
<h3 id="2-3-Spring-AOP-Weaving-核心逻辑"><a href="#2-3-Spring-AOP-Weaving-核心逻辑" class="headerlink" title="2.3 Spring AOP Weaving 核心逻辑"></a>2.3 Spring AOP Weaving 核心逻辑</h3><p>Spring AOP Weaving是load time weaving, 即在Spring容器构建完所有的bean之后, 完成容器启动前执行的, 使用的是aspectj weaver</p>
<ul>
<li><p>核心代码参见: <code>org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator#getAdvicesAndAdvisorsForBean</code></p>
</li>
<li><p>而针对该问题, 即判断该Aspect能否应用在该类型上, 核心逻辑如下:<br><code>org.springframework.aop.support.AopUtils#canApply(org.springframework.aop.Pointcut, java.lang.Class&lt;?&gt;, boolean)</code><br>即判断 <code>@Perf</code> 能否应用在 <code>edu.xmu.kunlun.headfirst.spring.service.impl.FilterA</code> 对象上:<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202206051422714.png"><br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202206051424707.png"></p>
</li>
<li><p>而看实际实现如下, 是直接根据targetClass来判断, 确实没有向上继续寻找父类&#x2F;接口层面是否有声明 <code>@Perf</code>, 因此返回是false:<br><code>org.springframework.aop.aspectj.AspectJExpressionPointcut#matches(java.lang.reflect.Method, java.lang.Class&lt;?&gt;, boolean)</code><br> <img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202206051438400.png"></p>
</li>
<li><p>再来思考下, 为啥不向上继续寻找? 这个就又回到了 第一个问题, Java Annotation的继承原则; 如果向上寻找, 有可能在同一层次找到多个同样的annotation, 但with不同的参数. 在这种情况下, Spring根本就不知道该以哪个为准了! 如下述例子:</p>
</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Perf</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">boolean</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token annotation punctuation">@Perf</span><span class="token punctuation">(</span>print <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Filter</span> <span class="token punctuation">&#123;</span>
    
<span class="token punctuation">&#125;</span>

<span class="token annotation punctuation">@Perf</span><span class="token punctuation">(</span>print <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AnotherFilter</span> <span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">// 如果Spring Weaving会向上(父类/接口)寻找, 那么到底以哪个为准? print=false or print=true??</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterA</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span><span class="token punctuation">,</span> <span class="token class-name">AnotherFilter</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>再回到最初的问题, 如何能解决该问题?</p>
<h2 id="方案1-打在子类方法上"><a href="#方案1-打在子类方法上" class="headerlink" title="方案1: 打在子类方法上"></a>方案1: 打在子类方法上</h2><p>将<code>@Perf</code>打在各个子类的实现里, 缺点是: 非常麻烦, 后续有其他子类, 都需要记得打上annotation.</p>
<h2 id="方案2-修改pointcut条件"><a href="#方案2-修改pointcut条件" class="headerlink" title="方案2: 修改pointcut条件"></a>方案2: 修改pointcut条件</h2><p>不使用annotation作为pointcut的匹配条件, 而采用如下表达式:<br><code>@Around(&quot;execution(public * edu.xmu.kunlun.headfirst.spring.service.Filter+.doFilter(..))&quot;)</code></p>
<ul>
<li>优点: <code>edu.xmu.kunlun.headfirst.spring.service.Filter</code>的所有子类的<code>doFilter</code>都会被自动增强.</li>
<li>缺点: 如果有其他接口例如<code>edu.xmu.kunlun.headfirst.spring.service.Weighter</code>的所有实现需要被增强, 则需要修改pointcut表达式, 不方便. </li>
<li><a href="https://github.com/DavyJones2010/head-first-spring/blob/feature/20220603_annotation_on_interface/src/main/java/edu/xmu/kunlun/headfirst/spring/aspect/PerfAspect2.java">代码样例 edu.xmu.kunlun.headfirst.spring.aspect.PerfAspect2</a></li>
</ul>
<h2 id="方案3-自定义实现pointcut"><a href="#方案3-自定义实现pointcut" class="headerlink" title="方案3: 自定义实现pointcut"></a>方案3: 自定义实现pointcut</h2><p>参照Spring Transactional能力, 自己实现新的Advisor, 其中最主要是修改pointcut</p>
<ul>
<li>第一步: 创建自定义pointcut: <a href="https://github.com/DavyJones2010/head-first-spring/blob/feature/20220603_annotation_on_interface/src/main/java/edu/xmu/kunlun/headfirst/spring/aspect2/PerfAdvisor.java">edu.xmu.kunlun.headfirst.spring.aspect2.PerfAdvisor#pointcut</a></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">StaticMethodMatcherPointcut</span> pointcut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StaticMethodMatcherPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> targetClass<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 直接使用spring工具包，来获取method上的注解（会找父类上的注解）</span>
        <span class="token keyword">return</span> <span class="token class-name">AnnotatedElementUtils</span><span class="token punctuation">.</span><span class="token function">hasAnnotation</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> <span class="token class-name">Perf2</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>第二步: 创建自定义advice: <a href="https://github.com/DavyJones2010/head-first-spring/blob/feature/20220603_annotation_on_interface/src/main/java/edu/xmu/kunlun/headfirst/spring/aspect2/PerfInterceptor.java">edu.xmu.kunlun.headfirst.spring.aspect2.PerfInterceptor</a></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PerfInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">MethodInvocation</span> invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> className <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">getThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> methodName <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>className <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">" start on PerfInterceptor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> o <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            o <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>className <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">" on PerfInterceptor"</span> <span class="token operator">+</span> <span class="token string">" finished cost: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> o<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>第三步: 创建自定义advisor, 并且以bean形式暴露给Spring容器: <a href="https://github.com/DavyJones2010/head-first-spring/blob/feature/20220603_annotation_on_interface/src/main/java/edu/xmu/kunlun/headfirst/spring/aspect2/PerfAdvisor.java">edu.xmu.kunlun.headfirst.spring.aspect2.PerfAdvisor</a></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PerfAdvisor</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractBeanFactoryPointcutAdvisor</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">StaticMethodMatcherPointcut</span> pointcut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StaticMethodMatcherPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> targetClass<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 直接使用spring工具包，来获取method上的注解（会找父类上的注解）</span>
            <span class="token keyword">return</span> <span class="token class-name">AnnotatedElementUtils</span><span class="token punctuation">.</span><span class="token function">hasAnnotation</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> <span class="token class-name">Perf2</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Advice</span> advice <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PerfInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Pointcut</span> <span class="token function">getPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> pointcut<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Advice</span> <span class="token function">getAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> advice<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<ul>
<li>第四步: 测试: <a href="https://github.com/DavyJones2010/head-first-spring/blob/feature/20220603_annotation_on_interface/src/test/java/edu/xmu/kunlun/headfirst/spring/aspect2/Perf2Test.java">edu.xmu.kunlun.headfirst.spring.aspect2.Perf2Test</a></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Perf2Test</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">FilterChain</span> chain<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        chain<span class="token punctuation">.</span><span class="token function">filterAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h2 id="最终方案"><a href="#最终方案" class="headerlink" title="最终方案:"></a>最终方案:</h2><p>如上分析Spring AOP相关源码</p>
<ul>
<li><code>方案3: 自定义实现pointcut</code> 虽然可以满足要求, 但存在两个问题: <ul>
<li>性能问题: 核心使用的<code>AnnotatedElementUtils.hasAnnotation(method, Perf2.class);</code>, 性能可能不佳</li>
<li>逻辑问题: 针对<code>Diamond Inheritance</code>场景, 结果会很奇怪, 不符合预期</li>
</ul>
</li>
<li>这也是避免后续踩坑的最佳实践了. </li>
<li>个人使用 <code>方案1</code> 作为了最终方案.</li>
</ul>
<h1 id="扩展思考"><a href="#扩展思考" class="headerlink" title="扩展思考"></a>扩展思考</h1><h2 id="Spring接口层面支持的-Transactional-annotation"><a href="#Spring接口层面支持的-Transactional-annotation" class="headerlink" title="Spring接口层面支持的 @Transactional annotation"></a>Spring接口层面支持的 @Transactional annotation</h2><p>如<a href="https://cloud.tencent.com/developer/article/1832305">接口上注解 AOP 拦截不到场景兼容实例演示</a> 文中所言:<br>Spring本身支持的 <code>@Transactional</code> annotation, 是可以打在interface上, 然后子类就自动实现了transaction相关增强的功能.<br>那么Spring具体是怎么实现的呢?</p>
<ul>
<li>Spring官方的解答如下:</li>
</ul>
<blockquote>
<p>The Spring team recommends that you annotate only concrete classes (and methods of concrete classes) with the @Transactional annotation, as opposed to annotating interfaces.<br>You certainly can place the @Transactional annotation on an interface (or an interface method),<br>but this works only as you would expect it to if you use interface-based proxies.<br>The fact that Java annotations are not inherited from interfaces means that,<br>if you use class-based proxies (proxy-target-class&#x3D;”true”) or the weaving-based aspect (mode&#x3D;”aspectj”),<br>the transaction settings are not recognized by the proxying and weaving infrastructure,<br>and the object is not wrapped in a transactional proxy.</p>
</blockquote>
<p>实际上, 也引发了很多讨论: </p>
<ul>
<li><a href="https://stackoverflow.com/questions/3120143/where-should-i-put-transactional-annotation-at-an-interface-definition-or-at-a">Where should I put @Transactional annotation: at an interface definition or at an implementing class?</a></li>
<li>文中推荐或者说Spring团队推荐 <code>@Transactional</code> 最好要打在<code>concrete classes</code>上, 而不要打在interface上.</li>
<li>因为 <mark><font color='red'>如果使用的如果不是JDK Based Proxy(or interface-based proxy), 则该annotation是不生效的!!!</font></mark></li>
<li>所以<mark>如果要用在interface上, 一定要知道当前使用的proxy是哪种.</mark> </li>
<li>而在实际上, 本身Spring&#x2F;SpringBoot的默认proxy方式一直在变, 我们很难弄明确清楚(或者要弄清楚需要费很大劲儿). 下文会详细说明.</li>
</ul>
<h2 id="SpringBoot中默认代理方式"><a href="#SpringBoot中默认代理方式" class="headerlink" title="SpringBoot中默认代理方式"></a>SpringBoot中默认代理方式</h2><p>根据 <a href="https://www.springcloud.io/post/2022-01/springboot-aop/#gsc.tab=0">AOP in Spring Boot, is it a JDK dynamic proxy or a Cglib dynamic proxy?</a> 文中说明,<br>Spring默认的AOP Proxy与SpringBoot默认的是有区别的 </p>
<h3 id="Spring默认AOP-Proxy"><a href="#Spring默认AOP-Proxy" class="headerlink" title="Spring默认AOP Proxy"></a>Spring默认AOP Proxy</h3><ul>
<li>If the proxy object implements the interface, then use the JDK dynamic proxy, otherwise it is the Cglib dynamic proxy.</li>
<li>If the proxy object does not implement an interface, then it is a direct Cglib dynamic proxy.</li>
</ul>
<h3 id="SpringBoot默认AOP-Proxy"><a href="#SpringBoot默认AOP-Proxy" class="headerlink" title="SpringBoot默认AOP Proxy"></a>SpringBoot默认AOP Proxy</h3><p>又根据SpringBoot 1.0 与 SpringBoot 2.0 版本有所区分: </p>
<ul>
<li><p>SpringBoot 1.0 AOP Proxy原则: 默认用 JDK proxy</p>
<blockquote>
<p>If the developer has set spring.aop.proxy-target-class to false, then the JDK proxy is used.<br>If the developer has spring.aop.proxy-target-class set to true, then the Cglib proxy is used.<br>If the developer did not configure the spring.aop.proxy-target-class property in the first place, then the JDK proxy is used.</p>
</blockquote>
</li>
<li><p>SpringBoot 2.0 AOP Proxy原则: 默认用 Cglib</p>
<blockquote>
<p>If the developer has set spring.aop.proxy-target-class to false, then the JDK proxy is used.<br>If the developer has spring.aop.proxy-target-class set to true, then the Cglib proxy is used.<br>If the developer did not configure the spring.aop.proxy-target-class property in the first place, then the Cglib proxy is used.</p>
</blockquote>
</li>
</ul>
<h3 id="其他好玩儿的"><a href="#其他好玩儿的" class="headerlink" title="其他好玩儿的"></a>其他好玩儿的</h3><ul>
<li>之前线上也有过一次故障, 如下<code>nestedHystrixWrappedGetCurrentThreadId</code>方法调用, 调用到的 <code>hystrixWrappedGetCurrentThreadId</code> 则实际没有被增强.</li>
<li>是因为调用 <code>hystrixWrappedGetCurrentThreadId</code> 实际是由 被代理对象(target) 调用的, 而不是由 代理对象(proxy) 调用的. 具体样例参见: <a href="https://github.com/DavyJones2010/head-first-spring/blob/feature/20220603_annotation_on_interface/src/test/java/edu/xmu/kunlun/headfirst/spring/service/impl/UserSvcTest.java">edu.xmu.kunlun.headfirst.spring.service.impl.UserSvcTest</a></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@HystrixWrapper</span><span class="token punctuation">(</span>commandGroupKey <span class="token operator">=</span> <span class="token string">"blog"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">hystrixWrappedGetCurrentThreadId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">getCurrentThreadId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
 
<span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">nestedHystrixWrappedGetCurrentThreadId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">hystrixWrappedGetCurrentThreadId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ul>
<li><code>@Transactional</code> <mark>不要打在接口上, 一定要打在实现类上!!</mark></li>
<li>显式声明<code>spring.aop.proxy-target-class=true</code>, <mark>让Spring&#x2F;SpringBoot项目统一都用cglib作为proxy方式. </mark> <code>As a reminder, to always use CGLIB, just set the “spring.aop.proxy-target-class” property to true.</code></li>
</ul>
<blockquote>
<p>Before using CGLIB,<br>ensure your codebase always uses pre-existing AOP annotations (such as @Transactional) on concrete classes<br>instead of only on interfaces.<br>Interface-only AOP annotations will be ignored when CGLIB is enabled.<br>Changing when @Transactional aspects are triggered could lead to items not being saved to the database,<br>or poor performance due to transactional boundary shifting.</p>
</blockquote>
<h1 id="Code-Samples"><a href="#Code-Samples" class="headerlink" title="Code Samples"></a>Code Samples</h1><ul>
<li>后续尽量会在每个知识点里, 都增加对应的完整可运行的code sample, 便于各位学习研究.</li>
<li>随着该问题的深入研究, 搞明白了asm, cglib, jdk dynamic proxy, aspectj等的关系, 愈发觉得还是得多搜索英文资料.</li>
<li><a href="https://github.com/DavyJones2010/head-first-spring/tree/feature/20220603_annotation_on_interface">本篇博文里完整的spring aop code sample</a></li>
</ul>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h1><ul>
<li><a href="https://www.credera.com/insights/aspect-oriented-programming-in-spring-boot-part-2-spring-jdk-proxies-vs-cglib-vs-aspectj">Aspect-Oriented Programming in Spring Boot Part 2: Spring JDK Proxies vs CGLIB vs AspectJ</a></li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>java</tag>
        <tag>spring</tag>
        <tag>spring-boot</tag>
        <tag>aop</tag>
        <tag>interface</tag>
      </tags>
  </entry>
  <entry>
    <title>爱死机第三季观后感</title>
    <url>//2022-06-04-love-death-robots/</url>
    <content><![CDATA[<p>在这个阴雨连绵的端午, Netflix的爱死机第三季, 如期而至, 惊喜万分.<br>不需要任何PPT大话, 这个NETFLIX的Logo在我心中就意味着 <mark>奈飞出品, 必属竞品</mark></p>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202206051149708.png"></p>
<hr>
<p>第一集, 例行的机器人来到已经荒废的地球, 参观了各个阶层人群在末日时刻的,<br>例行地以局外人的角度幽默吐槽.<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202206051150581.png"><br><img data-src="https://s2.loli.net/2022/06/05/7g9AGjZH4t132ve.png" alt="1-1"><br><img data-src="https://s2.loli.net/2022/06/05/9XMwt2LFOshYeWp.png" alt="1-2"><br><img data-src="https://s2.loli.net/2022/06/05/wYeOh4a3FDqpIoE.png" alt="1-3"><br><img data-src="https://s2.loli.net/2022/06/05/QoUclBknD3W59wP.png" alt="1-4"><br><img data-src="https://s2.loli.net/2022/06/05/zp3IlVw6Ai79fYv.png" alt="1-5"></p>
<hr>
<p>最负盛誉的第九集, Jibaro</p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>2022</tag>
        <tag>movie</tag>
        <tag>movie-list</tag>
        <tag>love-death-robots</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL连接池重要参数配置原理研究</title>
    <url>//2022-06-05-mysql-conn-params/</url>
    <content><![CDATA[<h1 id="重要参数"><a href="#重要参数" class="headerlink" title="重要参数"></a>重要参数</h1><ul>
<li>initialSize: 初始化时connection数量, 每个connection实际是一条与DB的TCP连接</li>
<li>maxActive: 最大连接池数量, 对应于maxPoolSize</li>
<li>minIdle: 最小连接池数量, 对应与minPoolSize</li>
<li>maxWait: 获取连接等待超时的时间, 具体详解参见: <a href="#maxwait%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3">maxWait参数详解</a></li>
<li>timeBetweenEvictionRunsMillis: 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</li>
<li>minEvictableIdleTimeMillis: 配置一个连接在池中最小生存的时间，单位是毫秒</li>
<li>maxEvictableIdleTimeMillis:  配置一个连接在池中最大生存的时间，单位是毫秒</li>
<li>maxPoolPreparedStatementPerConnectionSize: PS Cache.暂时不管</li>
</ul>
<h2 id="maxWait参数详解"><a href="#maxWait参数详解" class="headerlink" title="maxWait参数详解"></a>maxWait参数详解</h2><ul>
<li>参数释义: <a href="https://www.jianshu.com/p/1ff2bd62dd45">https://www.jianshu.com/p/1ff2bd62dd45</a></li>
</ul>
<ol>
<li>即客户端从连接池中获取connection的最大等待时长</li>
<li>如果不配置, 默认为-1, 即客户端会一直等待. 这样显然是不合适的.</li>
<li>client从连接池中获取connection等待超时, 错误信息如下:<pre class="line-numbers language-none"><code class="language-none">Caused by: com.alibaba.druid.pool.GetConnectionTimeoutException: wait millis 3000, active 4, maxActive 4, creating 0
    at com.alibaba.druid.pool.DruidDataSource.getConnectionInternal(DruidDataSource.java:1722)
    at com.alibaba.druid.pool.DruidDataSource.getConnectionDirect(DruidDataSource.java:1402)
    at com.alibaba.druid.filter.FilterChainImpl.dataSource_connect(FilterChainImpl.java:5059)
    at com.alibaba.druid.filter.logging.LogFilter.dataSource_getConnection(LogFilter.java:886)
    at com.alibaba.druid.filter.FilterChainImpl.dataSource_connect(FilterChainImpl.java:5055)
    at com.alibaba.druid.filter.FilterAdapter.dataSource_getConnection(FilterAdapter.java:2756)
    at com.alibaba.druid.filter.FilterChainImpl.dataSource_connect(FilterChainImpl.java:5055)
    at com.alibaba.druid.filter.stat.StatFilter.dataSource_getConnection(StatFilter.java:680)
    at com.alibaba.druid.filter.FilterChainImpl.dataSource_connect(FilterChainImpl.java:5055)
    at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:1380)
    at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:1372)
    at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:109)
    at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:262)
    ... 11 more<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<ul>
<li>maxWait参数的坑: <a href="https://tech.youzan.com/shu-ju-ku-lian-jie-chi-pei-zhi/">https://tech.youzan.com/shu-ju-ku-lian-jie-chi-pei-zhi/</a></li>
<li>扩展阅读: Druid锁的公平模式, <a href="https://github.com/alibaba/druid/wiki/Druid%E9%94%81%E7%9A%84%E5%85%AC%E5%B9%B3%E6%A8%A1%E5%BC%8F%E9%97%AE%E9%A2%98">https://github.com/alibaba/druid/wiki/Druid%E9%94%81%E7%9A%84%E5%85%AC%E5%B9%B3%E6%A8%A1%E5%BC%8F%E9%97%AE%E9%A2%98</a></li>
</ul>
<h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><h2 id="项目1配置样例"><a href="#项目1配置样例" class="headerlink" title="项目1配置样例"></a>项目1配置样例</h2><ul>
<li>initialSize: 100</li>
<li>maxActive: 200</li>
<li>minIdle: 100</li>
<li>maxWait: 6000</li>
</ul>
<p>注意, 这个是单机的连接配置, 考虑到分布式环境:</p>
<ul>
<li>初始化情况下, db承受的连接数是 initialSize<em>nodeCount &#x3D; 100</em>81 &#x3D; 8100</li>
<li>压力最大情况下, db承受的连接数是 initialSize<em>nodeCount &#x3D; 200</em>81 &#x3D; 16200</li>
</ul>
<h2 id="项目2配置项"><a href="#项目2配置项" class="headerlink" title="项目2配置项"></a>项目2配置项</h2><ul>
<li>initialSize: 未配置</li>
<li>maxActive: 300</li>
<li>minIdle: 30</li>
<li>maxWait: 60000</li>
</ul>
<h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><ol>
<li>当客户端并发度超过最大连接数时, 会怎样?<ol>
<li>连接池中连接数, 从min –&gt; max 的增长策略是怎样的?</li>
<li>当增长到max之后, 请求线程会等待maxWait, 如果还是获取不到, 则抛错.</li>
</ol>
</li>
<li>当MySQL服务端连接数超过机器能承受的最大连接数时, 会怎样?</li>
<li>MySQL服务端一般能支持的最大连接数是多少?<ol>
<li>取决于物理机&#x2F;虚拟机的配置.</li>
</ol>
</li>
<li>什么是MySQL的session? 与connection是啥关系?<ol>
<li><a href="https://www.zhihu.com/question/30325800">https://www.zhihu.com/question/30325800</a></li>
<li>和网站的一个session差不多吧，只不过session是把key放在cookie里面，数据库连接是把key放在客户端的library的内存里（比如.Net Sql Client)。对MS SQL来说，这个连接的协议叫TDS，底下可以走多种传输层协议，比如tcpip，也可以named pipe。而MySQL就又有自己的协议。</li>
<li>com.taobao.pamirs.transaction.TBConnection#queryDBSessionID 只有oracle有sessionId.</li>
</ol>
</li>
</ol>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>java</tag>
        <tag>mysql</tag>
        <tag>database</tag>
        <tag>connection-pool</tag>
        <tag>druid</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot Transactional AOP 实现原理研究</title>
    <url>//2022-06-06-spring-tx-annonation/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>书接上回 <a href="https://davyjones2010.github.io/2022-06-03-spring-annotation-on-interface/">SpringBoot基于Interface的Annotation在AOP中如何生效I</a>,<br>里边只是简略地说明了Spring中 @Transactional 只能在jdk proxy场景下生效, 在cglib场景下不生效, 但没有研究具体代码实现.<br>本文详细探究下.</p>
<h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><h2 id="0-Spring-AOP整体流程"><a href="#0-Spring-AOP整体流程" class="headerlink" title="0. Spring AOP整体流程"></a>0. Spring AOP整体流程</h2><p>Spring把所有Bean初始化完成, 容器启动前, 会遍历容器中的每个bean, 执行方法, 尝试找到可用的advisor, 生成新的增强bean, 方法入口: <code>org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator#findEligibleAdvisors</code><br>详细步骤: </p>
<ol>
<li>从Spring Context里找到所有Advisors: <code>org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator#findCandidateAdvisors</code></li>
<li>根据Advisors里的PointCuts&#x2F;JoinPoints定义, 判断该bean是否可以被该Advisor增强. <code>org.springframework.aop.support.AopUtils#canApply(org.springframework.aop.Advisor, java.lang.Class&lt;?&gt;, boolean)</code></li>
<li>获取到该bean可以被增强的advisors列表</li>
<li>根据配置<code>spring.aop.proxy-target-class=true/false</code>, 使用Cglib或者JDK生成代理bean. <code>org.springframework.aop.framework.DefaultAopProxyFactory#createAopProxy</code></li>
<li>之后从Spring容器中获取bean(getBean或者通过@Autowired等自动注入), 实际上获取到的是代理bean.</li>
</ol>
<h2 id="1-Transactional-的JoinPoint-x2F-PointCut定义"><a href="#1-Transactional-的JoinPoint-x2F-PointCut定义" class="headerlink" title="1. @Transactional 的JoinPoint&#x2F;PointCut定义"></a>1. @Transactional 的JoinPoint&#x2F;PointCut定义</h2><ul>
<li>JoinPoint or PointCut, 在AOP里即是类似SQL中where的条件, 即哪些符合条件的class&#x2F;bean&#x2F;method需要被增强.</li>
<li>JoinPoint标准接口定义如下: 核心是<code>matches</code>方法.</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">StaticMethodMatcher</span> <span class="token keyword">implements</span> <span class="token class-name">MethodMatcher</span> <span class="token punctuation">&#123;</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> targetClass<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// should never be invoked because isRuntime() returns false</span>
		<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"Illegal MethodMatcher usage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>@Transactional</code> 使用的是: <code>org.springframework.transaction.interceptor.TransactionAttributeSourcePointcut</code>, 而<mark>该pointcut, 会按照类继承关系向上寻找, 找到接口层面定义的annotation.</mark> </li>
<li>详细测试代码参见: <a href="https://github.com/DavyJones2010/head-first-spring/blob/feature/20220603_annotation_on_interface/src/test/java/edu/xmu/kunlun/headfirst/spring/tx/aop/BeanFactoryTransactionAttributeSourceAdvisorTest.java">edu.xmu.kunlun.headfirst.spring.tx.aop.BeanFactoryTransactionAttributeSourceAdvisorTest#matchesTest</a></li>
</ul>
<h2 id="2-Transactional-的Advice定义"><a href="#2-Transactional-的Advice定义" class="headerlink" title="2. @Transactional 的Advice定义"></a>2. @Transactional 的Advice定义</h2><ul>
<li>Advice, 在AOP里即是类似SQL中聚合函数, 即需要对符合条件的class&#x2F;bean&#x2F;method做什么处理.</li>
<li>Advice标准接口详细定义如下:</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MethodInterceptor</span> <span class="token keyword">extends</span> <span class="token class-name">Interceptor</span> <span class="token punctuation">&#123;</span>
	<span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nonnull</span> <span class="token class-name">MethodInvocation</span> invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>@Transactional</code> 使用的是: <code>org.springframework.transaction.interceptor.TransactionInterceptor</code>, 即会在<code>invocation.proceed();</code>前后分别开启与提交事务.</li>
</ul>
<h2 id="3-Transactional-的Advisor定义"><a href="#3-Transactional-的Advisor定义" class="headerlink" title="3. @Transactional 的Advisor定义"></a>3. @Transactional 的Advisor定义</h2><ul>
<li>Advisor or Aspect, 就是 JoinPoint + Advice, 同时需要作为bean注册在Spring中, 方便Spring容器启动时, 执行<code>从Spring Context里找到所有Advisors</code>步骤.</li>
<li><code>@Transactional</code> 使用的是: <code>org.springframework.transaction.interceptor.BeanFactoryTransactionAttributeSourceAdvisor</code></li>
<li>所以我们一般都会在 Aspect 上打上 @Aspect + @Component 的标签</li>
</ul>
<h2 id="4-Transactional-的AdvisorBean初始化-amp-组装"><a href="#4-Transactional-的AdvisorBean初始化-amp-组装" class="headerlink" title="4. @Transactional 的AdvisorBean初始化&amp;组装"></a>4. @Transactional 的AdvisorBean初始化&amp;组装</h2><ul>
<li>代码位置: <code>org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration#transactionAdvisor</code></li>
<li>本质是在 <code>@Configuration</code> 里通过 <code>@Bean</code> new出Bean<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202206072232406.png"></li>
</ul>
<h2 id="完整样例"><a href="#完整样例" class="headerlink" title="完整样例"></a>完整样例</h2><ul>
<li>如下样例:</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span> <span class="token comment">// 向Spring容器说明是个Aspect/Advisor</span>
<span class="token annotation punctuation">@Component</span> <span class="token comment">// 向Spring容器注册, 方便找到该bean</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PerfAspect</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"@annotation(Perf)"</span><span class="token punctuation">)</span> <span class="token comment">// 作为PointCut定义</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">perf</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span> <span class="token comment">//方法体作为Advice</span>
        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>methodName <span class="token operator">+</span> <span class="token string">" start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> o <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            o <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>methodName <span class="token operator">+</span> <span class="token string">" finished cost: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> o<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="实际验证"><a href="#实际验证" class="headerlink" title="实际验证"></a>实际验证</h1><h2 id="强制使用cglib-接口上的-Transactional-能否被正常增强"><a href="#强制使用cglib-接口上的-Transactional-能否被正常增强" class="headerlink" title="强制使用cglib, 接口上的 @Transactional 能否被正常增强?"></a>强制使用cglib, 接口上的 @Transactional 能否被正常增强?</h2><ul>
<li>在springboot配置里, <code>spring.aop.proxy-target-class=true</code></li>
<li><a href="https://github.com/DavyJones2010/head-first-spring/blob/feature/20220603_annotation_on_interface/src/test/java/edu/xmu/kunlun/headfirst/spring/tx/TransApiTest.java">TransApiTest#updateTest代码样例</a></li>
<li>如下发现<code>TransApi</code>是被cglib正常增强, 类名: <code>class edu.xmu.kunlun.headfirst.spring.tx.TransApiImpl$$EnhancerBySpringCGLIB$$2586b9e2</code>, 事务能被正常启动</li>
</ul>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202206062333446.png"></p>
<h2 id="强制使用jdk-proxy-接口上的-Transactional-能否被正常增强"><a href="#强制使用jdk-proxy-接口上的-Transactional-能否被正常增强" class="headerlink" title="强制使用jdk proxy, 接口上的 @Transactional 能否被正常增强?"></a>强制使用jdk proxy, 接口上的 @Transactional 能否被正常增强?</h2><ul>
<li>在springboot配置里, <code>spring.aop.proxy-target-class=false</code></li>
<li><a href="https://github.com/DavyJones2010/head-first-spring/blob/feature/20220603_annotation_on_interface/src/test/java/edu/xmu/kunlun/headfirst/spring/tx/TransApiTest.java">TransApiTest#updateTest代码样例</a></li>
<li>如下发现<code>TransApi</code>是被jdk正常增强, 类名: <code>class com.sun.proxy.$Proxy56</code>, 事务能被正常启动</li>
</ul>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202206062335278.png"></p>
<ul>
<li>httodo: 这里与spring官方文档说明有所不同. 根据上述代码分析, 其实到底能不能增强, 与到底使用cglib还是使用jdk-proxy没啥关系, 只与JoinPoint&#x2F;PointCut的实现有关系. 待最终探究确认.</li>
</ul>
<h1 id="Code-Samples"><a href="#Code-Samples" class="headerlink" title="Code Samples"></a>Code Samples</h1><ul>
<li><a href="https://github.com/DavyJones2010/head-first-spring/tree/feature/20220603_annotation_on_interface">本篇博文里完整的spring aop code sample</a></li>
</ul>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h1><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>java</tag>
        <tag>spring</tag>
        <tag>spring-boot</tag>
        <tag>aop</tag>
        <tag>interface</tag>
        <tag>spring-tx</tag>
      </tags>
  </entry>
  <entry>
    <title>asciinema使用笔记</title>
    <url>//2022-06-10-asciinema/</url>
    <content><![CDATA[<h1 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h1><ul>
<li><a href="https://github.com/asciinema/asciinema">asciinema</a></li>
<li><a href="https://github.com/marionebl/svg-term-cli">svg-term-cli</a></li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> nodejs
<span class="token function">npm</span> <span class="token function">install</span> -g svg-term-cli<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>


<h1 id="生成录屏文件-cast"><a href="#生成录屏文件-cast" class="headerlink" title="生成录屏文件.cast"></a>生成录屏文件.cast</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">asciinema rec a.cast<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><code>Ctrl + D 结束录屏</code></p>
<h1 id="本地播放录屏文件"><a href="#本地播放录屏文件" class="headerlink" title="本地播放录屏文件"></a>本地播放录屏文件</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">asciinema play a.cast<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h1 id="cast文件转成-svg文件"><a href="#cast文件转成-svg文件" class="headerlink" title=".cast文件转成.svg文件"></a>.cast文件转成.svg文件</h1><p>需要先安装 <a href="https://github.com/marionebl/svg-term-cli">svg-term-cli</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> a.cast <span class="token operator">|</span> svg-term --out a.svg --term iterm2 --profile mymatrix<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p><a href="https://asciinema.org/docs/config">$HOME&#x2F;.config&#x2F;asciinema&#x2F;config</a></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>mac</tag>
        <tag>tools</tag>
        <tag>asciinema</tag>
        <tag>svg</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker的一些总结II</title>
    <url>//2022-06-11-docker-summary-2/</url>
    <content><![CDATA[<h1 id="exec到容器的原理"><a href="#exec到容器的原理" class="headerlink" title="exec到容器的原理"></a>exec到容器的原理</h1><p>本质是在host上新创建一个进程, 加入到已存在的docker容器的Linux Namespace中.</p>
<h2 id="1-查看已有docker容器的namespace信息"><a href="#1-查看已有docker容器的namespace信息" class="headerlink" title="1. 查看已有docker容器的namespace信息"></a>1. 查看已有docker容器的namespace信息</h2><p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202206122047763.svg"></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">ps</span>
<span class="token function">docker</span> inspect --format <span class="token string">'&#123;&#123; .State.Pid &#125;&#125;'</span> dockerContainerId
<span class="token function">sudo</span> <span class="token function">ls</span> -l /proc/<span class="token variable">$pid</span>/ns<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="2-通过setns-系统调用-将新进程加入到已有docker容器的namespace中"><a href="#2-通过setns-系统调用-将新进程加入到已有docker容器的namespace中" class="headerlink" title="2. 通过setns()系统调用, 将新进程加入到已有docker容器的namespace中"></a>2. 通过setns()系统调用, 将新进程加入到已有docker容器的namespace中</h2><p>核心代码如下: </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">int main<span class="token punctuation">(</span>int argc, char *argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	int fd<span class="token punctuation">;</span>
	fd <span class="token operator">=</span> open<span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>, O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>
	if<span class="token punctuation">(</span>setns<span class="token punctuation">(</span>fd, <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">==</span>-1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		errExit<span class="token punctuation">(</span><span class="token string">"setns"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	execvp<span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>, <span class="token operator">&amp;</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	errExit<span class="token punctuation">(</span><span class="token string">"execvp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./set_ns /proc/<span class="token variable">$pid</span>/ns/net /bin/sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>argv[1]: 即当前新进程要加入的Namesapce文件路径</li>
<li>argv[2]: 即新进程要在Namesapce里运行的程序</li>
</ul>
<h2 id="3-验证"><a href="#3-验证" class="headerlink" title="3. 验证"></a>3. 验证</h2><p>如下样例, 通过exec进入容器, 在容器内编写并运行了一个<code>tmp.sh</code>脚本.<br>可以看到, <mark>实际上是在host上新建了一个进程, 且该进程与docker容器共享同一份namespace.</mark></p>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202206122112834.svg"></p>
<h1 id="volume的原理"><a href="#volume的原理" class="headerlink" title="volume的原理"></a>volume的原理</h1><ul>
<li>允许将宿主机上指定的目录或者文件挂载到容器中读取和修改</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -v /test myimageid
<span class="token function">docker</span> run -v /home:/test myimageid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>第一种方式, 没有显式声明宿主机目录, Docker默认在宿主机上创建一个临时目录<code>/var/lib/docker/volumes/[volume_id]/_data</code>, 然后把它挂载到容器的<code>/test</code>目录</li>
<li>第二种方式, 把宿主机的<code>/home</code>目录挂载到Docker的<code>/test</code>目录下</li>
</ul>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202206122150473.svg"></p>
<ul>
<li>这里用到的挂载技术, 就是<font color='red'>Linux的绑定挂载(bind mount)机制</font>. <mark>允许将一个目录或者文件, 而不是整个设备挂载到指定目录上.</mark></li>
<li>并且在挂载点上进行的任何操作, 只是发生在被挂载的目录或者文件上, 而原挂载点的内容会被隐藏起来, 且不受影响.</li>
</ul>
<h2 id="bind-mount-样例"><a href="#bind-mount-样例" class="headerlink" title="bind mount 样例"></a>bind mount 样例</h2><ul>
<li>将 <code>test2/</code> 目录挂载到 <code>test/</code> 目录(挂载点)下, 之后所有在<code>test/</code>下的修改在<code>test2/</code>下都能看到, 反之亦然.</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mount</span> --bind test2 <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>将 <code>test2/</code> 从 <code>test/</code> 目录(挂载点) 卸载掉, 之后<code>test/</code>维持一个空的挂载点, 所有变更都落到了<code>test2/</code>下</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">umount</span> <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202206122208304.svg"></p>
<h1 id="单机容器网络原理"><a href="#单机容器网络原理" class="headerlink" title="单机容器网络原理"></a>单机容器网络原理</h1><h2 id="原理概述"><a href="#原理概述" class="headerlink" title="原理概述"></a>原理概述</h2><blockquote>
<p>本质是通过 docker0网桥 + VethPair 实现单机间多个docker容器互联</p>
</blockquote>
<ul>
<li>docker0网桥 工作在数据链路层. 类似一个虚拟交换机. 维护 CAM表(交换机通过MAC地址学习维护的 端口与MAC地址的对应表)</li>
<li>各个容器通过 VethPair 与docker0网桥连接</li>
<li>从host-&gt;container, 路由规则, 需要通过 docker0 网桥; docker0网桥查询CAM表, 直接把请求转发到相应端口即可.</li>
<li>从container -&gt; container, 通过 veth pair 到达 docker0 网桥; docker0网桥查询CAM表, 直接把请求转发到相应端口即可.</li>
</ul>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul>
<li>查看网桥信息</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brctl show<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>查看路由表</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">route<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


<h2 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h2><p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202206122305851.png"><br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202206122305137.png"><br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202206122305508.png"><br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202206122305564.png"></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>k8s</tag>
        <tag>docker</tag>
        <tag>container</tag>
      </tags>
  </entry>
  <entry>
    <title>深入剖析Kubernetes笔记</title>
    <url>//2022-06-11-k8s-deep-dive/</url>
    <content><![CDATA[<p>很久没有看到这么一本书了, 虽然刚拿到手感觉很薄, 只有不到400页, 价格也贵, 99元.<br>比起<a href="https://book.douban.com/subject/33444476/">k8s权威指南</a>这种大部头, 略显单薄.<br>但实际翻看前两章之后, 欣喜万分. 越往后看, 愈发觉得鞭辟入里.<br>从底层原理出发, 没有废话, 深入且细致地讲解出docker&#x2F;k8s实现的各种细节.<br>有效地解释了自己心中的诸多疑惑. 物有所值. </p>
<hr>
<h1 id="一些疑惑解释"><a href="#一些疑惑解释" class="headerlink" title="一些疑惑解释"></a>一些疑惑解释</h1><h2 id="多进程-x2F-富容器"><a href="#多进程-x2F-富容器" class="headerlink" title="多进程&#x2F;富容器"></a>多进程&#x2F;富容器</h2><ul>
<li>Q: 如果docker中起了多个进程, 那么在宿主机上是怎样的? 是多个进程 or docker进程中的多个线程?</li>
<li>A: 在宿主机上是多个进程. 本质上是通过新建进程, 将新进程加入到已经存在的Namespace中实现.</li>
</ul>
<hr>
<ul>
<li>Q: 富容器是如何实现的?</li>
<li>A:</li>
</ul>
<hr>
<ul>
<li><p>Q: docker exec 到容器中执行命令, 理论上容器也新开了个进程执行该命令(也就类似富容器了), 是如何实现的? </p>
</li>
<li><p>A: </p>
</li>
<li><p>Q: 富容器模式有什么缺点? 为啥不推荐使用富容器? </p>
<ul>
<li>A:</li>
</ul>
</li>
</ul>
<h2 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h2><h2 id=""><a href="#" class="headerlink" title=""></a></h2><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>books</tag>
        <tag>k8s</tag>
        <tag>2022</tag>
        <tag>docker</tag>
        <tag>container</tag>
      </tags>
  </entry>
  <entry>
    <title>大学对我的影响</title>
    <url>//2022-06-17-university-summary/</url>
    <content><![CDATA[<p>一年一度如火如荼的高考季结束. 蓦然回首, 自己已然高中毕业13年, 大学也毕业9年了.<br>9年时间, 改变了很多, 足以把一个鲜衣怒马, 意气风发, 唇红齿白的少年, 变成而今房贷和车贷缠身, 视力与体力俱下, 惶惶不可终日的油腻中年.</p>
<p>但最近也一直在酝酿与反思, 这短短四年的大学生活, 究竟带给了我什么?<br>当我在收到外卖, 外卖员说都怪自己没上大学, 才落得今天下苦力.<br>当我在坐网约车, 司机说要不是自己没上大学, 也不至于现在每天被公司压榨.</p>
<p>四年的生活, 有什么样的魔力, 真的足以把人群完成阶级划分么?<br>现在把杂乱的思绪总结成文, 聊以慰藉.</p>
<h1 id="一-让我看到了一个更大的世界"><a href="#一-让我看到了一个更大的世界" class="headerlink" title="一: 让我看到了一个更大的世界"></a>一: 让我看到了一个更大的世界</h1><hr>
<p>这个话说得可能有点儿大, 有点儿虚, 但确实上大学, 让我这个小镇青年, 有机会第一次离开了那个只有60万人口的小城市,<br>进入到一个二三线城市, 看到了一个更大的世界.</p>
<h2 id="地理上的冲击"><a href="#地理上的冲击" class="headerlink" title="地理上的冲击"></a>地理上的冲击</h2><p>家乡处于豫西北一个不起眼的角落, 三面环山的盆地, 剩余一面被黄河阻隔.<br>伟大的太行山与王屋山交汇于此. <br>而我从小生活在太行山脚下, 听着愚公移山的故事长大. <br>18岁前从来没有离开过那片大山. <br>年少的我一直很好奇山的后边是什么? 会不会是一片蔚蓝色的大海呢? 会不会是一个喧嚣繁华, 高楼林立, 霓虹闪烁的都市呢?<br>曾经跟随奶奶上坟, 翻越了眼前那座大山, 发现在山的后边, 仍然是山, 是无穷无尽绵延不绝的山, 是目之所及毫无颓势的山脉.<br>沮丧至极.  </p>
<blockquote>
<p>没有人知道为什么<br>太阳总下到山的那一边<br>没有人能够告诉我<br>山里面有没有住着神仙<br>多少的日子里总是<br>一个人面对着天空发呆<br>就这么好奇就这么幻想<br>这么孤单的童年</p>
</blockquote>
<p>而上大学给了我一次机会,<br>能光明正大理直气壮地彻底逃离这片群山,<br>毅然决然地选择离家2000公里外的厦门.</p>
<p>我来自大山, <br>我要奔赴向大海. </p>
<p>第一次到海边, 第一次吃到芒果荔枝肯德基麦当劳, </p>
<blockquote>
<p>父母在, 不远游.<br>游必有方.</p>
</blockquote>
<h2 id="文化上的冲击"><a href="#文化上的冲击" class="headerlink" title="文化上的冲击"></a>文化上的冲击</h2><p>同学都来自五湖四海, </p>
<h2 id="思想上的冲击"><a href="#思想上的冲击" class="headerlink" title="思想上的冲击"></a>思想上的冲击</h2><p>很快就体会到了贫富差距与阶级差异.<br>当我还在省吃俭用只为买个100多元的<code>蓝魔MP3</code>, 甚至兴奋地睡不着时, 隔壁宿舍的同学就已经开始用<code>iPod touch</code>通过陀螺仪玩赛车游戏了.<br>当我还在用<code>小灵通</code>的时候, 室友就已经开始用<code>iPhone 3Gs</code>了. 当第一次试用, 彻底颠覆了我的想象, 才知道原来手机可以是这样的. </p>
<blockquote>
<p>每次室友手机解锁时, 经典的”咔哒”声音, 令我羡慕, 至今仍在我耳边回响, 是我永远逾越不了的鸿沟.</p>
</blockquote>
<p>当我为了省钱, 选择花费120元, 硬座坐43小时火车跨越四千里回家, 腰酸背痛, 双腿浮肿时; 室友与爸妈选择坐飞机, 去香港购物度假.<br>当我知道室友原来竟然没有参加高考, 直接通过竞赛保送到大学; 而我却几乎拼出了半条命, 才得以在当年100万考生中杀出了一条血路.<br>当看到室友的班级通讯录里, 前四五十都是清一色的清北浙交; 我们河南的同伴</p>
<p>很庆幸自己没有因为这些差异导致走向消极与虚无, 走向愤怒与反抗, 而是接受这些冲击, 这就是生活.<br>然后一点一点地再努力一些, </p>
<p>当然, 外卖员, 网约车司机可能也是一样, 借由来城市打工.</p>
<h1 id="二-让我拥有了独立思考与探索知识的能力"><a href="#二-让我拥有了独立思考与探索知识的能力" class="headerlink" title="二: 让我拥有了独立思考与探索知识的能力"></a>二: 让我拥有了独立思考与探索知识的能力</h1><hr>
<p>第一次在同学宿舍, 看到了墙外的世界.<br>批判型思维.<br>成长型思维.</p>
<h1 id="三-让我拥有了破除任何神话人物的信心与勇气"><a href="#三-让我拥有了破除任何神话人物的信心与勇气" class="headerlink" title="三: 让我拥有了破除任何神话人物的信心与勇气"></a>三: 让我拥有了破除任何神话人物的信心与勇气</h1><hr>
<p>正是因为接受了思想上的冲击, 所以至今我心底里从不会崇拜或者神话任何一个人.<br>相信自己</p>
<h1 id="遗憾"><a href="#遗憾" class="headerlink" title="遗憾"></a>遗憾</h1><hr>
<p>最近也在看&lt;规模&gt;这本书, 城市, 真的会让生活更美好么? </p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>weekend</tag>
        <tag>diary</tag>
        <tag>books</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux虚拟网络与网络设备</title>
    <url>//2022-06-19-linux-virtual-network/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>使用VMWare或者KVM设置VM网络时, 通常会有几种网络模式: </p>
<ul>
<li>网桥模式(Bridge模式)</li>
<li>NAT模式</li>
</ul>
<p>之前一直比较迷惑, 不是特别清楚区别, 最近研究终于搞懂了, 总结如下: </p>
<h1 id="网桥模式"><a href="#网桥模式" class="headerlink" title="网桥模式"></a>网桥模式</h1><h2 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h2><ol>
<li>本质上把Linux网桥看做一个二层的交换机.</li>
<li>VM连接到该网桥, 获取访问外网能力.</li>
</ol>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202206202216042.png" alt="linux-bridge"></p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>因此</p>
<ol>
<li>VM的IP与Host的IP是在同一个网段上的</li>
<li>VM在网络中的位置与Host是并列的</li>
</ol>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202206202214199.png" alt="VM"><br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202206202215507.png" alt="Host"><br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202206202216645.png" alt="VM Route Table"></p>
<h2 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h2><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul>
<li><p>网桥操作</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brctl show<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>安装工具</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> net-tools -y
yum <span class="token function">install</span> bridge-utils -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>配置</p>
</li>
</ul>
<h1 id="NAT模式"><a href="#NAT模式" class="headerlink" title="NAT模式"></a>NAT模式</h1><h2 id="本质-1"><a href="#本质-1" class="headerlink" title="本质"></a>本质</h2><ol>
<li>本质上是Host看做一个NAT设备</li>
<li>VM连接到该NAT设备上, 获取访问外网能力.</li>
</ol>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202206202212554.png"></p>
<h2 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h2><p>因此</p>
<ol>
<li>VM的IP与Host的IP不在同一个网段</li>
<li>VM在网络中的位置是从属于Host</li>
</ol>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202206202159960.png" alt="VM在192.168.230.0/24网段"><br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202206202200319.png" alt="Host在192.168.3.0/24网段"></p>
<h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>&#x2F;&#x2F; TODO:</p>
<h2 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h2><p>这里 VM的网桥模式 与 docker的网桥&#x2F;Bridge模式 是有很大区别的。</p>
<ul>
<li>VM 网桥&#x2F;桥接模式: VM与HOST在同一个网段。</li>
<li>Docker Bridge模式： Docker容器与HOST不在同一个网段。<blockquote>
<p>Bridge 是 docker 默认的网络模式。<br>原理跟 vmware 的 NAT 模式相同。<br>安装 docker 时，会给宿主机创建一个 docker0 网卡，该网卡会与一个虚拟交换机相连，<br>当容器以 Bridge 模式创建启动时，会给容器创建一个虚拟网卡，该网卡分配的 IP 与宿主机的 docker0 所在同一个局域网内 (一般是 172.16.0.0)。<br>然后过程就和 vmware 的 NAT 模式完全相同。</p>
</blockquote>
</li>
</ul>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h1><ul>
<li><a href="https://learnku.com/docs/go-micro-build/1.0/explain-the-network-mode-of-vmware-and-docker/8879"> Vmware和Docker的网络模式讲解</a></li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>linux</tag>
        <tag>iaas</tag>
        <tag>network</tag>
        <tag>cloud-computing</tag>
        <tag>nat</tag>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>NAT之端口映射(PAT)原理总结&amp;实践</title>
    <url>//2022-06-22-linux-network-nat/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>经常在家用路由器中, 看到有端口映射(PAT)选项, 但不明所以.<br>最近刚好在研究NAT, 知道了<mark>PAT本质是NAT的一种实现方式, 更确切地说是DNAT的一种实现方式</mark>.<br>因此借此机会好好研究下.</p>
<h1 id="DNAT总结"><a href="#DNAT总结" class="headerlink" title="DNAT总结"></a>DNAT总结</h1><h2 id="PAT作用概述"><a href="#PAT作用概述" class="headerlink" title="PAT作用概述"></a>PAT作用概述</h2><p>家用路由器中配置PAT, 本质上还是一种<code>内网穿透</code>的实现方式，或者DNAT的一种方式。<br>即需要把家里内网某台主机的某个服务, 暴露到公网上, 以便能在公网环境下访问该服务.<br>例如</p>
<ul>
<li>家庭内网网段是<code>192.168.3.0/24</code></li>
<li>家用路由器, 电信运营商分配的对外公网IP是<code>115.192.71.187</code></li>
<li>某台主机IP是<code>192.168.3.213</code>: <ul>
<li>暴露了8080的某个tomcat服务, 想要把这个服务暴露在公网上, 以便其他人能够访问.</li>
<li>暴露了远程桌面RDP端口服务, 以便在公司或者咖啡厅, 能访问到该远程桌面.</li>
<li>等等</li>
</ul>
</li>
<li>此时可以在路由器上开启端口映射(PAT), 将路由器上某个端口(如8888)与内网主机的端口(如8080)如进行映射, 所有访问{路由器IP, 8888端口}的请求, 就会被自动路由到{内网IP, 8080端口}上:</li>
</ul>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202206232339615.png"></p>
<p>&#x2F;&#x2F; TODO: 这里挖个坑, 内网穿透除了PAT外, 还有其他方案, 例如 <code>花生壳</code>, 后边新开篇章讲下原理.</p>
<h2 id="原理概述"><a href="#原理概述" class="headerlink" title="原理概述"></a>原理概述</h2><p>本质上是家用路由器保存了这么一张NAT表:<br><code>&#123;publicIp, publicPort&#125;</code> —映射到—&gt; <code>&#123;localIp, localPort&#125;</code></p>
<h2 id="PAT路由流程"><a href="#PAT路由流程" class="headerlink" title="PAT路由流程"></a>PAT路由流程</h2><h3 id="0X00-外部用户-–-gt-路由器"><a href="#0X00-外部用户-–-gt-路由器" class="headerlink" title="0X00: 外部用户 –&gt; 路由器"></a>0X00: 外部用户 –&gt; 路由器</h3><ol>
<li>二层帧: <code>&#123;remoteMac, remoteIp, remotePort&#125;, &#123;publicMac, publicIp, publicPort&#125;</code></li>
</ol>
<h3 id="0X01-路由器-–-gt-内网Server"><a href="#0X01-路由器-–-gt-内网Server" class="headerlink" title="0X01: 路由器 –&gt; 内网Server:"></a>0X01: 路由器 –&gt; 内网Server:</h3><ol>
<li>目标 publicMac &#x3D;&#x3D; router’s publicMac，网卡接收，解析三层IP包</li>
<li>进入prerouting阶段：(DNAT作用在preroute阶段)<ol>
<li>查NAT表（DNAT条目）: <code>&#123;publicIp, publicPort&#125;</code> –&gt; <code>&#123;localIp, localPort&#125;</code></li>
<li>修改三层IP包 <code>&#123;remoteIp, remotePort&#125;</code> –&gt; <code>&#123;localIp, localPort&#125;</code></li>
</ol>
</li>
<li>由于此时targetIp是 localIp, !&#x3D; publicIp，因此不会走入INPUT流程，因此也就不会把数据包交给上层应用。</li>
<li>进入FORWARD&#x2F;ROUTE阶段：<ol>
<li>如果没有开启ip_forwarding，则流程到此结束。直接把IP包丢弃掉。</li>
<li>查看路由表，<code>route -n</code>，找到往localIp网段发送数据包，应该使用的网卡与网卡对应的Mac地址（例如 gatewayMac）</li>
</ol>
</li>
<li>封装二层帧<ol>
<li>发ARP广播: what’s localIp’s mac addr, tell publicMac</li>
<li>获取ARP缓存表项: {localIp} –&gt; {localMac}</li>
<li>修改帧内容为: <code>&#123;gatewayMac, remoteIp, remotePort&#125;, &#123;localMac, localIp, localPort&#125;</code></li>
</ol>
</li>
<li>通过对应的网卡发出二层帧。</li>
</ol>
<p><img data-src="https://p.k8s.li/iptables.png"></p>
<h3 id="0X02-Server端处理"><a href="#0X02-Server端处理" class="headerlink" title="0X02: Server端处理:"></a>0X02: Server端处理:</h3><ol>
<li>接收如下IP帧<br><code>&#123;gatewayMac, remoteIp, remotePort&#125;, &#123;localMac, localIp, localPort&#125;</code></li>
<li>目标 localMac &#x3D;&#x3D; Server localMac, 网卡接收(无需开启混杂模式), 否则丢弃</li>
<li>目标 localIp &#x3D;&#x3D; Server localIp, TCP&#x2F;IP协议栈接收. <ol>
<li>是否有可能IP不匹配? 如何处理? –&gt; 是否开启了ip_forwarding？ 具体参见</li>
</ol>
</li>
<li>server端将TCP数据包转给对应应用层程序处理</li>
</ol>
<h3 id="0X03-Server-–回包–-gt-路由器"><a href="#0X03-Server-–回包–-gt-路由器" class="headerlink" title="0X03: Server –回包–&gt; 路由器:"></a>0X03: Server –回包–&gt; 路由器:</h3><ol>
<li>Server处理完毕, 生成回包, 由于remoteIp不在网段:<br><code>&#123;localIp, localPort&#125;, &#123;remoteIp, remotePort&#125;</code></li>
<li>Server发送ARP广播, 查找默认网关(server端事先配置好了网关的IP)的MAC地址 {gatewayIp} –&gt; {gatewayMac}</li>
<li>Server封装二层帧, 发送给路由器:<br><code>&#123;localMac, localIp, localPort&#125;, &#123;gatewayMac, remoteIp, remotePort&#125;</code></li>
</ol>
<h3 id="0X04-路由器PAT处理回包"><a href="#0X04-路由器PAT处理回包" class="headerlink" title="0X04: 路由器PAT处理回包"></a>0X04: 路由器PAT处理回包</h3><p>后经查证，<mark> 针对回包，不会再过iptables</mark>，进行如下NAT反向查表了。<br>实际看了下，确实没有同时创建出如下反向的iptables规则。<br>而是<mark>由kernel模块conntrack进行维护完成{mac, ip, port}的替换。<mark></p>
<ol>
<li><del>收到二层帧:<br><code>&#123;localMac, localIp, localPort&#125;, &#123;gatewayMac, remoteIp, remotePort&#125;</code></del></li>
<li><del>反向查找NAT表:<br><code>&#123;localIp, localPort&#125; --&gt; &#123;publicIp, publicPort&#125;</code></del></li>
<li><del>修改三层包(替换掉localIp, localPort):<br><code>&#123;publicIp, publicPort&#125;, &#123;remoteIp, remotePort&#125;</code></del></li>
<li><del>二层帧修改(修改掉localMac, gatewayMac):<br><code>&#123;publicMac, publicIp, publicPort&#125;, &#123;remoteMac, remoteIp, remotePort&#125;</code></del></li>
</ol>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h3><p>路由器本身是有多个网卡的, 内网中是 {gatewayMac, gatewayIp}, 对应的公网是 {publicMac, publicIp}</p>
<h1 id="SNAT总结"><a href="#SNAT总结" class="headerlink" title="SNAT总结"></a>SNAT总结</h1><p>&#x2F;&#x2F; TODO: 如何作用在postrouting阶段？</p>
<h1 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h1><p>核心是路由器怎么创建NAT表? 使用iptables么? 怎么操作iptables能实现相同功能? </p>
<h1 id="实践-amp-验证"><a href="#实践-amp-验证" class="headerlink" title="实践&amp;验证"></a>实践&amp;验证</h1><p>&#x2F;&#x2F; TODO: </p>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h1><ul>
<li><a href="https://blog.k8s.li/linux-net-and-iptables.html#%E5%85%B3%E7%B3%BB">Linux 网络和 iptables 运行原理</a></li>
</ul>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>最近研究关于网络, 有一堆的概念, 一堆的坑要填, 这里先列出来: </p>
<ul>
<li>几张表, 作用是啥? 分别如何查看表项? <ul>
<li>cam表</li>
<li>arp缓存表</li>
<li>nat表</li>
<li>dns缓存表</li>
</ul>
</li>
<li>几种设备: <ul>
<li>三层交换机与二层交换机区别?</li>
<li>Linux网桥与交换机有啥区别?</li>
</ul>
</li>
<li>几个技术细节<ul>
<li>网卡混杂模式? 啥时候下开启? 应用场景是啥?</li>
<li>会不会收到MAC地址匹配, 但IP地址不匹配的IP包? 具体咋处理? 直接丢弃? 还是可以使用? </li>
<li>ip forwarding 是啥? 为啥NAT模式下需要开启? 为啥不默认开启? </li>
<li>ip隧道的原理是啥? </li>
<li>lvs的几种工作原理再研究, 再实践验证</li>
<li>组播的应用场景是啥? 很重要么?</li>
</ul>
</li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>linux</tag>
        <tag>iaas</tag>
        <tag>network</tag>
        <tag>cloud-computing</tag>
        <tag>nat</tag>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次Dubbo服务调用异常排查</title>
    <url>//2022-06-24-dubbo-invoke-error/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><ul>
<li>应用拓扑: systemA —- dubbo 调用 —-&gt; systemB</li>
<li>systemB应用在已有的dubbo接口类里, 新增加了一个方法methodA.</li>
<li>systemA在调用该methodA时, 抛错. 错误信息如下:</li>
</ul>
<h1 id="排查步骤"><a href="#排查步骤" class="headerlink" title="排查步骤"></a>排查步骤</h1><h2 id="0x00-排查provider侧"><a href="#0x00-排查provider侧" class="headerlink" title="0x00 排查provider侧"></a>0x00 排查provider侧</h2><p>确认provider侧:</p>
<ol>
<li>服务是否正常可以执行? &gt; 通过telnet localhost, 手动invoke确定是OK的.</li>
<li>接口类&amp;接口方法是否正常注册在registry上? &gt; 通过查看dubbo registry, 发现接口类与接口方法是正常注册的.</li>
</ol>
<h2 id="0x01-排查consumer侧"><a href="#0x01-排查consumer侧" class="headerlink" title="0x01 排查consumer侧"></a>0x01 排查consumer侧</h2><p>确认consumer侧:</p>
<ol>
<li>是否正确依赖到了provider?<ol>
<li>通过查看 tcp ESTABLISHED 连接确定长连接已经建立.<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207122201347.png"></li>
<li>or 查看registry下发的 dubbo config 文件?  –&gt; TODO: 暂时没找到, 待分析.</li>
</ol>
</li>
<li>请求是否正确路由到了provider的host?  &#x2F;&#x2F; 由于systemB有多套环境, 怀疑是请求路由到了非目标环境.<ol>
<li>动态分析: 查看 dubbo 请求日志 –&gt; 没找到, 待进一步查看.</li>
<li>静态分析: 查看 diamond 配置 + 相关代码, 是不是路由代码有误?</li>
</ol>
</li>
</ol>
<h2 id="0x02-真实错误原因"><a href="#0x02-真实错误原因" class="headerlink" title="0x02 真实错误原因"></a>0x02 真实错误原因</h2><ul>
<li>provider侧与consumer侧都没有问题, 路由也没有问题, 但为啥会报错?</li>
<li>最终在某位同学的提醒下, 查看了consumer侧的error日志, 发现了详细的错误堆栈信息如下(原来是序列化失败):</li>
</ul>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207122201975.png"></p>
<h2 id="0x03-原因探讨"><a href="#0x03-原因探讨" class="headerlink" title="0x03 原因探讨"></a>0x03 原因探讨</h2><h3 id="为啥dubbo调用参数必须要是Serializable的"><a href="#为啥dubbo调用参数必须要是Serializable的" class="headerlink" title="为啥dubbo调用参数必须要是Serializable的?"></a>为啥dubbo调用参数必须要是Serializable的?</h3><p>因为dubbo rpc, 默认使用hessian2序列化方式.<br><a href="https://blog.csdn.net/liyong1028826685/article/details/117308356">而hessian2针对java Object类型参数, 使用的是默认的Java序列化方式</a>.<br>而Java序列化则要求Object必须<code>implements Serializable</code>接口.</p>
<h3 id="为啥在本地telnet-invoke的时候没有序列化失败错误"><a href="#为啥在本地telnet-invoke的时候没有序列化失败错误" class="headerlink" title="为啥在本地telnet invoke的时候没有序列化失败错误?"></a>为啥在本地telnet invoke的时候没有序列化失败错误?</h3><p>因为在本地telnet invoke的时候, 默认使用的是JSON序列化方式!</p>
<h3 id="如何查看当前接口使用的序列化方式"><a href="#如何查看当前接口使用的序列化方式" class="headerlink" title="如何查看当前接口使用的序列化方式?"></a>如何查看当前接口使用的序列化方式?</h3><ol>
<li>查看registry, 如果没有指定, 则是默认的hessian2:</li>
</ol>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207122202268.png"></p>
<h3 id="如何指定序列化方式"><a href="#如何指定序列化方式" class="headerlink" title="如何指定序列化方式?"></a>如何指定序列化方式?</h3><p><a href="https://dubbo.apache.org/zh/docs/references/xml/dubbo-protocol/">https://dubbo.apache.org/zh/docs/references/xml/dubbo-protocol/</a><br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207122202940.png"></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>dubbo:protocol <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token string">"dubbo-m"</span> <span class="token assign-left variable">threadpool</span><span class="token operator">=</span><span class="token string">"dubboThreadPool"</span> <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"dubbo"</span>  <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;pbs.dubbo.protocol.default.port&#125;</span>"</span>  <span class="token assign-left variable">threads</span><span class="token operator">=</span><span class="token string">"150"</span> 
<span class="token assign-left variable">serialization</span><span class="token operator">=</span><span class="token string">"json"</span> /<span class="token operator">></span>

<span class="token operator">&lt;</span>dubbo:protocol <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token string">"dubbo-h"</span> <span class="token assign-left variable">threadpool</span><span class="token operator">=</span><span class="token string">"dubboThreadPool"</span> <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"dubbo"</span>  <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;pbs.dubbo.protocol.high.port&#125;</span>"</span>  <span class="token assign-left variable">threads</span><span class="token operator">=</span><span class="token string">"150"</span> <span class="token assign-left variable">serialization</span><span class="token operator">=</span><span class="token string">"fastjson"</span> /<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><h2 id="正确的问题排查步骤"><a href="#正确的问题排查步骤" class="headerlink" title="正确的问题排查步骤"></a>正确的问题排查步骤</h2><ol>
<li>排查问题时, 优先在报错的host(不用管是consumer&#x2F;provider)上, 查看error等更详细的堆栈日志.</li>
</ol>
<h2 id="走的一些弯路"><a href="#走的一些弯路" class="headerlink" title="走的一些弯路"></a>走的一些弯路</h2><ol>
<li>provider侧排查时, invoke 方法名称写错, 导致误以为是provider没有把新的接口方法暴露出去. 误导了排查方向. 如下:</li>
</ol>
<p>正确的: <code>invoke com.xxx.xxx.XXXQueryService.queryHistory(&quot;&quot;)</code><br>错误的: <code>invoke com.xxx.xxx.XXXQueryService.describeHistory(&quot;&quot;)</code><br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207122202508.png"><br><a href="#dubbo%E5%A6%82%E4%BD%95%E6%9F%A5%E5%88%B0%E6%9F%90%E5%8F%B0host%E4%B8%AD%E6%9F%90%E4%B8%AA%E6%8E%A5%E5%8F%A3%E6%8F%90%E4%BE%9B%E7%9A%84%E6%89%80%E6%9C%89%E6%96%B9%E6%B3%95">如何快速查看某个host的某个interface有没有把某个method暴露出去</a></p>
<ol start="2">
<li>consumer侧排查时, 由于systemA的dubbo console的端口与systemB的dubbo console 端口不一致, 也查了半天.<br><a href="#dubbo%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8Bconsole%E7%9A%84%E7%AB%AF%E5%8F%A3">如何快速查到dubbo console端口号?</a></li>
</ol>
<h2 id="Dubbo最佳实践"><a href="#Dubbo最佳实践" class="headerlink" title="Dubbo最佳实践"></a>Dubbo最佳实践</h2><h3 id="dubbo按照端口进行线程池隔离"><a href="#dubbo按照端口进行线程池隔离" class="headerlink" title="dubbo按照端口进行线程池隔离"></a>dubbo按照端口进行线程池隔离</h3><h4 id="隔离原理"><a href="#隔离原理" class="headerlink" title="隔离原理"></a>隔离原理</h4><p>单个host可以开启多个dubbo端口, 每个端口由独立的线程池处理, 把svc按照端口进行分组.<br>可以防止低优先级接口占用线程导致dubbo线程池满, 从而影响高优先级接口.<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207122202434.png"></p>
<h4 id="隔离配置样例"><a href="#隔离配置样例" class="headerlink" title="隔离配置样例"></a>隔离配置样例</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>registry</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>coreRegistry<span class="token punctuation">"</span></span> <span class="token attr-name">address</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;pbs.dubbo.registry.address&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token comment">&lt;!-- 核心接口 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>protocol</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dubbo-core<span class="token punctuation">"</span></span> <span class="token attr-name">threadpool</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dubboThreadPool<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dubbo<span class="token punctuation">"</span></span>  <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;pbs.dubbo.protocol.core.port&#125;<span class="token punctuation">"</span></span>  <span class="token attr-name">threads</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token comment">&lt;!-- 中优先级接口线程池(默认，为了最大保持兼容) --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>protocol</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dubbo-m<span class="token punctuation">"</span></span> <span class="token attr-name">threadpool</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dubboThreadPool<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dubbo<span class="token punctuation">"</span></span>  <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;pbs.dubbo.protocol.default.port&#125;<span class="token punctuation">"</span></span>  <span class="token attr-name">threads</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>150<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token comment">&lt;!-- 默认provider使用dubbo-m,http-dubbo协议 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>provider</span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dubbo-m<span class="token punctuation">"</span></span> <span class="token attr-name">filter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>-sentinel.dubbo.provider.filter<span class="token punctuation">"</span></span> <span class="token attr-name">delay</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>-1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>

<span class="token comment">&lt;!-- 使用dubbo-core --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>service</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.xxx.TestService<span class="token punctuation">"</span></span>
<span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dubbo-core<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;pbs.service.version&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>testService<span class="token punctuation">"</span></span> <span class="token attr-name">retries</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">timeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token comment">&lt;!-- 使用dubbo-core --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>service</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.xxx.SampleService<span class="token punctuation">"</span></span>
<span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dubbo-core<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;pbs.service.version&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sampleService<span class="token punctuation">"</span></span> <span class="token attr-name">retries</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">timeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="dubbo默认端口号配置原则"><a href="#dubbo默认端口号配置原则" class="headerlink" title="dubbo默认端口号配置原则"></a>dubbo默认端口号配置原则</h3><p>如上, <code>pbs.dubbo.protocol.default.port=-1</code>配置项, 按照dubbo文档说明, 应该是随机分配一个端口. 但发现systemB实际启动后, 却开启了 20880 端口. 这是为啥?</p>
<h4 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h4><p>根据 <a href="https://dubbo.apache.org/zh/docs/references/xml/dubbo-protocol/">https://dubbo.apache.org/zh/docs/references/xml/dubbo-protocol/</a>  文档说明,  <code>分配的端口在协议缺省端口的基础上增长</code><br>但实际语焉不详, dubbo协议默认端口是20880,  那么如果配置 <code>port=-1</code>, 则端口是 <code>20880</code> or <code>20881</code>??</p>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207122203219.png"></p>
<h4 id="源代码分析"><a href="#源代码分析" class="headerlink" title="源代码分析"></a>源代码分析</h4><p>核心代码: <code>com.alibaba.dubbo.config.ServiceConfig#doExportUrlsFor1Protocol</code>, 可以得知是从 20880 开始(包括20880).<br>这也就解释了, 为啥 <code>pbs.dubbo.protocol.default.port=-1</code>配置项, 实际对应的开启端口号是 20880 啦.<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207122203404.png"><br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207122203097.png"></p>
<h3 id="dubbo多端口telnet原则"><a href="#dubbo多端口telnet原则" class="headerlink" title="dubbo多端口telnet原则"></a>dubbo多端口telnet原则</h3><p>如上, 暴露了 20880~20884 5个端口, 用于线程池隔离.<br>实际:</p>
<ol>
<li>每个端口, 都是启动了一个NettyServer<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207122203903.png"></li>
<li>因此每个端口, 都可以telnet上去.</li>
<li>telnet每个端口执行 ls 列举出来本机暴露的dubbo服务都是一样的(会把所有其他端口暴露的服务也都枚举出来). 不会因为telnet 20880, 就只列举出暴露在20880端口的服务. 参见: <code>com.alibaba.dubbo.rpc.protocol.dubbo.telnet.ListTelnetHandler</code><br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207122204305.png"></li>
</ol>
<h3 id="dubbo版本号隔离"><a href="#dubbo版本号隔离" class="headerlink" title="dubbo版本号隔离"></a>dubbo版本号隔离</h3><p>用来区分多套预发环境.<br>但实际看了下, 多套预发环境provider的版本号都是1.0.0, 而不是通过版本号来进行隔离的. 那么consumer实际怎么做的路由?<br>&#x2F;&#x2F; TODO:  核心代码附录<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207122204657.png"></p>
<h3 id="dubbo序列化"><a href="#dubbo序列化" class="headerlink" title="dubbo序列化"></a>dubbo序列化</h3><ul>
<li>使用console手动invoke, 用的是json序列化.</li>
<li>而consumer真正调用时用的是hessian2序列化, 因此针对这种序列化差异导致的错误问题, 是无法验证到的. 需要编码测试的时候注意.</li>
</ul>
<h3 id="dubbo-ls-x2F-invoke"><a href="#dubbo-ls-x2F-invoke" class="headerlink" title="dubbo ls&#x2F;invoke"></a>dubbo ls&#x2F;invoke</h3><p>如何查看当前host下依赖的所有dubbo服务?</p>
<ol>
<li>通过telnet localhost xxxx 进入dubbo管控页面, 执行 <code>ls</code>命令, 只能列出自身作为provider对外暴露的所有服务.</li>
<li>而无法列出自身host作为consumer依赖到的所有服务.  &#x2F;&#x2F; 查看了dubbo文档, 目前没有办法通过telnet查看到.</li>
</ol>
<h3 id="dubbo如何查到某台host中某个接口提供的所有方法"><a href="#dubbo如何查到某台host中某个接口提供的所有方法" class="headerlink" title="dubbo如何查到某台host中某个接口提供的所有方法"></a>dubbo如何查到某台host中某个接口提供的所有方法</h3><h4 id="方案1-telnet查看"><a href="#方案1-telnet查看" class="headerlink" title="方案1 telnet查看"></a>方案1 telnet查看</h4><p><code>ls -l com.xxx.SampleService</code><br>telnet localhost  20880  telnet localhost  20881 telnet localhost  20882 都能登上去, 实际方法列表也相同.  参见: <a href="#th8th">dubbo多端口telnet原则</a></p>
<h4 id="方案2-registry查看"><a href="#方案2-registry查看" class="headerlink" title="方案2 registry查看"></a>方案2 registry查看</h4><p>在registry中查询接口, 选定host查看:<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207122206622.png"></p>
<h3 id="dubbo如何查看console的端口"><a href="#dubbo如何查看console的端口" class="headerlink" title="dubbo如何查看console的端口"></a>dubbo如何查看console的端口</h3><h4 id="方案1-通过查看应用配置文件"><a href="#方案1-通过查看应用配置文件" class="headerlink" title="方案1: 通过查看应用配置文件"></a>方案1: 通过查看应用配置文件</h4><p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207122207808.png"></p>
<blockquote>
<p>这种方式最直接, 也最有效. 缺点是紧急排查问题时, 如果配置项经过了一层有一层的自动替换, 不一定能很快找出实际配置值是啥.</p>
</blockquote>
<h4 id="方案2-通过查看TCP连接"><a href="#方案2-通过查看TCP连接" class="headerlink" title="方案2: 通过查看TCP连接"></a>方案2: 通过查看TCP连接</h4><ol>
<li><p>查看进程号PID(注意看清楚进程的USER是不是当前用户)</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">fgrep</span> <span class="token variable">$&#123;appName&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>查看进程占用的TCP在Listen状态的端口(如果上一步获取到的PID不是当前用户的, 则需要su到PID对应的用户, 或者如下用sudo)</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">lsof</span> -i -P<span class="token operator">|</span> <span class="token function">fgrep</span> <span class="token variable">$&#123;PID&#125;</span> <span class="token operator">|</span> <span class="token function">fgrep</span> LISTEN<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>看到如下, 一般dubbo端口号是从20880开始的(包括20880)</p>
</li>
</ol>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207122207567.png"></p>
<p>但如果应用配置的dubbo端口很奇怪, 不符合惯例, 那这里就只能一个一个端口来telnet试试了.</p>
<blockquote>
<p>这种方式不算非常直接, 但优点是可以不用去翻找代码, 翻找配置项. 在端口数很少的情况下, 简单有效.</p>
</blockquote>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h1><ul>
<li><a href="https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/Dubbo%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E4%B8%8E%E5%AE%9E%E6%88%98-%E5%AE%8C/16%20%20Dubbo%20Serialize%20%E5%B1%82%EF%BC%9A%E5%A4%9A%E7%A7%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AE%97%E6%B3%95%EF%BC%8C%E6%80%BB%E6%9C%89%E4%B8%80%E6%AC%BE%E9%80%82%E5%90%88%E4%BD%A0.md">Dubbo Serialize 层：多种序列化算法，总有一款适合你</a></li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>java</tag>
        <tag>dubbo</tag>
      </tags>
  </entry>
  <entry>
    <title>常用的Linux命令之网络相关命令</title>
    <url>//2022-06-25-linux-network-scripts/</url>
    <content><![CDATA[<h1 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h1><h2 id="查看ARP缓存表"><a href="#查看ARP缓存表" class="headerlink" title="查看ARP缓存表"></a>查看ARP缓存表</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">davywalker@davywalker-ThinkPad-X1-Carbon-4th:~/PlayGround/nat$ arp -v
Address                  HWtype  HWaddress           Flags Mask            Iface
_gateway                 ether   c0:b4:7d:69:d6:c3   C                     wlp4s0
<span class="token number">172.17</span>.0.3               ether   02:42:ac:11:00:03   C                     docker0
<span class="token number">192.168</span>.3.2              ether   00:11:32:b2:b7:04   C                     wlp4s0
<span class="token number">172.17</span>.0.2               ether   02:42:ac:11:00:02   C                     docker0
Entries: <span class="token number">4</span>	Skipped: <span class="token number">0</span>	Found: <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="查看某个网卡的arp缓存"><a href="#查看某个网卡的arp缓存" class="headerlink" title="查看某个网卡的arp缓存"></a>查看某个网卡的arp缓存</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">davywalker@davywalker-ThinkPad-X1-Carbon-4th:~/PlayGround/nat$ arp -i wlp4s0
Address                  HWtype  HWaddress           Flags Mask            Iface
_gateway                 ether   c0:b4:7d:69:d6:c3   C                     wlp4s0
<span class="token number">192.168</span>.3.2              ether   00:11:32:b2:b7:04   C                     wlp4s0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="参数详解"><a href="#参数详解" class="headerlink" title="参数详解"></a>参数详解</h2><ul>
<li>flags:<ul>
<li>C: complete, each complete entry in the ARP cache will be marked with the C flag.</li>
<li>M: 手动增加的，Permanent entries are marked  with  M</li>
<li>P: TODO: 不太明白具体啥意思，published entries have the P flag.</li>
</ul>
</li>
</ul>
<h1 id="网桥"><a href="#网桥" class="headerlink" title="网桥"></a>网桥</h1><h2 id="查看网桥"><a href="#查看网桥" class="headerlink" title="查看网桥"></a>查看网桥</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">davywalker@davywalker-ThinkPad-X1-Carbon-4th:~/Downloads$ brctl show
bridge name	bridge <span class="token function">id</span>		STP enabled	interfaces
docker0		<span class="token number">8000</span>.0242cee53ddd	no		veth9aec769
							            vethe466b6b
virbr0		<span class="token number">8000</span>.525400245c90	<span class="token function">yes</span>		virbr0-nic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="查看veth-pair"><a href="#查看veth-pair" class="headerlink" title="查看veth pair"></a>查看veth pair</h2><p>如上，发现<code>veth9aec769</code>与<code>vethe466b6b</code>都挂在<code>docker0</code>网桥下。<br>这两个veth设备都是在host上的，那么两个veth设备对应的pair（分别在2个docker容器中）分别是啥？</p>
<ol>
<li>查看host上veth设备对应的docker容器内veth设备的编号（如下分别是if23,if24）</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">davywalker@davywalker-ThinkPad-X1-Carbon-4th:~/Downloads$ <span class="token function">ip</span> a <span class="token operator">|</span> <span class="token function">fgrep</span> veth9aec769
<span class="token number">24</span>: veth9aec769@if23: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc noqueue master docker0 state UP group default 

davywalker@davywalker-ThinkPad-X1-Carbon-4th:~/Downloads$ <span class="token function">ip</span> a <span class="token operator">|</span> <span class="token function">fgrep</span> vethe466b6b
<span class="token number">22</span>: vethe466b6b@if21: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc noqueue master docker0 state UP group default <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>登录docker容器中查看veth设备编号</li>
</ol>
<p>如下可知：</p>
<ul>
<li>d3f6cb3a496e 容器的veth编号是21，与host上if22，即vethe466b6b绑定</li>
<li>333a28ae8ea1 容器的veth编号是23，与host上if24，即veth9aec769绑定</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">davywalker@davywalker-ThinkPad-X1-Carbon-4th:~/PlayGround/docker$ <span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it d3f6cb3a496e /bin/sh -c <span class="token string">"ip a"</span>
<span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">65536</span> qdisc noqueue state UNKNOWN qlen <span class="token number">1000</span>
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet <span class="token number">127.0</span>.0.1/8 scope <span class="token function">host</span> lo
       valid_lft forever preferred_lft forever
<span class="token number">21</span>: eth0@if22: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc noqueue state UP 
    link/ether 02:42:ac:11:00:03 brd ff:ff:ff:ff:ff:ff
    inet <span class="token number">172.17</span>.0.3/16 brd <span class="token number">172.17</span>.255.255 scope global eth0
       valid_lft forever preferred_lft forever
       
davywalker@davywalker-ThinkPad-X1-Carbon-4th:~/PlayGround/docker$ <span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it 333a28ae8ea1 /bin/sh -c <span class="token string">"ip a"</span>
<span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">65536</span> qdisc noqueue state UNKNOWN qlen <span class="token number">1000</span>
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet <span class="token number">127.0</span>.0.1/8 scope <span class="token function">host</span> lo
       valid_lft forever preferred_lft forever
<span class="token number">23</span>: eth0@if24: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc noqueue state UP 
    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff
    inet <span class="token number">172.17</span>.0.2/16 brd <span class="token number">172.17</span>.255.255 scope global eth0
       valid_lft forever preferred_lft forever<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="CAM表（MAC-Learning-Table）"><a href="#CAM表（MAC-Learning-Table）" class="headerlink" title="CAM表（MAC Learning Table）"></a>CAM表（MAC Learning Table）</h1><p><a href="https://www.xmodulo.com/show-mac-learning-table-linux-bridge.html">How to show a MAC learning table of Linux bridge</a><br>如下，可以看到docker0网桥（虚拟交换机）的CAM表，即mac addr对应的port no</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">davywalker@davywalker-ThinkPad-X1-Carbon-4th:~/Downloads$ brctl showmacs docker0
port no	mac addr		is local?	ageing timer
  <span class="token number">1</span>	<span class="token number">22</span>:2f:64:b8:78:af	<span class="token function">yes</span>		   <span class="token number">0.00</span>
  <span class="token number">1</span>	<span class="token number">22</span>:2f:64:b8:78:af	<span class="token function">yes</span>		   <span class="token number">0.00</span>
  <span class="token number">2</span>	<span class="token number">46</span>:de:b9:ed:19:0f	<span class="token function">yes</span>		   <span class="token number">0.00</span>
  <span class="token number">2</span>	<span class="token number">46</span>:de:b9:ed:19:0f	<span class="token function">yes</span>		   <span class="token number">0.00</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><h2 id="查看路由表"><a href="#查看路由表" class="headerlink" title="查看路由表"></a>查看路由表</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/ $ route
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
default         <span class="token number">172.17</span>.0.1      <span class="token number">0.0</span>.0.0         UG    <span class="token number">0</span>      <span class="token number">0</span>        <span class="token number">0</span> eth0
<span class="token number">172.17</span>.0.0      *               <span class="token number">255.255</span>.0.0     U     <span class="token number">0</span>      <span class="token number">0</span>        <span class="token number">0</span> eth0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>这是docker容器内部的路由表：</li>
<li>第二条路由规则：从该主机，发往172.17.0.0&#x2F;16的IP包，都要通过eth0网卡发出（Iface&#x3D;eth0），不经过网关（Gateway&#x3D;*）,直接通过二层网络发送过去。</li>
<li>第一条路由规则：从该主机，发往其他地址的IP包，都要通过eth0网卡发出（Iface&#x3D;eth0），要先发给网关172.17.0.1（Gateway&#x3D;172.17.0.1）</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">davywalker@davywalker-ThinkPad-X1-Carbon-4th:~/Downloads$ route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
<span class="token number">0.0</span>.0.0         <span class="token number">192.168</span>.3.1     <span class="token number">0.0</span>.0.0         UG    <span class="token number">600</span>    <span class="token number">0</span>        <span class="token number">0</span> wlp4s0
<span class="token number">172.17</span>.0.0      <span class="token number">0.0</span>.0.0         <span class="token number">255.255</span>.0.0     U     <span class="token number">0</span>      <span class="token number">0</span>        <span class="token number">0</span> docker0
<span class="token number">192.168</span>.3.0     <span class="token number">0.0</span>.0.0         <span class="token number">255.255</span>.255.0   U     <span class="token number">600</span>    <span class="token number">0</span>        <span class="token number">0</span> wlp4s0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>这是Host的路由表：</li>
<li>第二条路由规则：从该主机，发往172.17.0.0&#x2F;16的IP包，都要从docker0网卡发出（Iface&#x3D;docker0），不经过网关（Gateway&#x3D;0.0.0.0），直接通过二层网络发送过去</li>
<li>第三条路由规则：从该主机，发往192.168.3.0&#x2F;24的IP包，都要从wlp4s0网卡发出（Iface&#x3D;wlp4s0），不经过网关（Gateway&#x3D;0.0.0.0），直接通过二层网络发送过去</li>
</ul>
<p>因此：</p>
<ul>
<li>从主机 <code>ping 172.17.0.2</code> 容器，实际是进入了docker0网桥，因此能ping通容器</li>
<li>从主机 <code>ping 192.168.3.2</code> 即该主机局域网内其他主机，实际是从wlp4s0网卡（物理网卡）出去。</li>
</ul>
<h1 id="NAT-x2F-iptables"><a href="#NAT-x2F-iptables" class="headerlink" title="NAT&#x2F;iptables"></a>NAT&#x2F;iptables</h1><h1 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h1><h2 id="DNS缓存"><a href="#DNS缓存" class="headerlink" title="DNS缓存"></a>DNS缓存</h2><h3 id="Linux上查看DNS缓存"><a href="#Linux上查看DNS缓存" class="headerlink" title="Linux上查看DNS缓存"></a>Linux上查看DNS缓存</h3><h4 id="2016年前"><a href="#2016年前" class="headerlink" title="2016年前"></a>2016年前</h4><p><a href="https://unix.stackexchange.com/questions/28553/how-to-read-the-local-dns-cache-contents">By 2016, Prior to systemd, there was almost no OS-level DNS caching</a><br>unless nscd or dnsmasq was installed and running.<br>Even then, the DNS caching feature of nscd is disabled by default at least in Debian because it’s broken.<br><a href="https://stackoverflow.com/questions/11020027/dns-caching-in-linux">The practical upshot is that your linux system very very probably does not do any OS-level DNS caching.</a></p>
<blockquote>
<p>If an end user using your software needs to have DNS caching </br><br>because the DNS query load is large enough to be a problem or the RTT to the external DNS server is long enough to be a problem, </br><br>they can install a caching DNS server such as Unbound on the same machine as your application,<br>configured to cache responses and forward misses to the regular DNS resolvers.</p>
</blockquote>
<h4 id="2016年后"><a href="#2016年后" class="headerlink" title="2016年后"></a>2016年后</h4><p><a href="https://www.freedesktop.org/software/systemd/man/systemd-resolved.service.html">After 2016, nowadays on systemd there’s a service to cache DNS, it could be enabled with systemctl enable systemd-resolved</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">davywalker@davywalker-ThinkPad-X1-Carbon-4th:~/Downloads$ <span class="token function">service</span> systemd-resolved status
systemd-resolved.service - Network Name Resolution
     Loaded: loaded <span class="token punctuation">(</span>/lib/systemd/system/systemd-resolved.service<span class="token punctuation">;</span> enabled<span class="token punctuation">;</span> vendor preset: enabled<span class="token punctuation">)</span>
     Active: active <span class="token punctuation">(</span>running<span class="token punctuation">)</span> since Sun <span class="token number">2022</span>-05-08 <span class="token number">16</span>:04:20 CST<span class="token punctuation">;</span> <span class="token number">1</span> months <span class="token number">18</span> days ago
       Docs: man:systemd-resolved.service<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>
             https://www.freedesktop.org/wiki/Software/systemd/resolved
             https://www.freedesktop.org/wiki/Software/systemd/writing-network-configuration-managers
             https://www.freedesktop.org/wiki/Software/systemd/writing-resolver-clients
   Main PID: <span class="token number">603</span> <span class="token punctuation">(</span>systemd-resolve<span class="token punctuation">)</span>
     Status: <span class="token string">"Processing requests..."</span>
      Tasks: <span class="token number">1</span> <span class="token punctuation">(</span>limit: <span class="token number">9305</span><span class="token punctuation">)</span>
     Memory: <span class="token number">2</span>.6M
     CGroup: /system.slice/systemd-resolved.service
             └─603 /lib/systemd/systemd-resolved<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">davywalker@davywalker-ThinkPad-X1-Carbon-4th:~/Downloads$ <span class="token function">cat</span> /etc/resolv.conf
nameserver <span class="token number">127.0</span>.0.53
options edns0 trust-ad<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">davywalker@davywalker-ThinkPad-X1-Carbon-4th:~/Downloads$ resolvectl status
Link <span class="token number">3</span> <span class="token punctuation">(</span>wlp4s0<span class="token punctuation">)</span>
      Current Scopes: DNS        
DefaultRoute setting: <span class="token function">yes</span>        
       LLMNR setting: <span class="token function">yes</span>        
MulticastDNS setting: no         
  DNSOverTLS setting: no         
      DNSSEC setting: no         
    DNSSEC supported: no         
  Current DNS Server: <span class="token number">192.168</span>.3.1
         DNS Servers: <span class="token number">192.168</span>.3.1
          DNS Domain: ~.         
Link <span class="token number">6</span> <span class="token punctuation">(</span>docker0<span class="token punctuation">)</span>
      Current Scopes: none
DefaultRoute setting: no  
       LLMNR setting: <span class="token function">yes</span> 
MulticastDNS setting: no  
  DNSOverTLS setting: no  
      DNSSEC setting: no  
    DNSSEC supported: no  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Chrome上查看DNS缓存"><a href="#Chrome上查看DNS缓存" class="headerlink" title="Chrome上查看DNS缓存"></a>Chrome上查看DNS缓存</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chrome://net-internals/<span class="token comment">#dnschrome</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="Firefox上查看DNS缓存"><a href="#Firefox上查看DNS缓存" class="headerlink" title="Firefox上查看DNS缓存"></a>Firefox上查看DNS缓存</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">about:networking<span class="token comment">#dns</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="DNS域名解析排查"><a href="#DNS域名解析排查" class="headerlink" title="DNS域名解析排查"></a>DNS域名解析排查</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">davywalker@davywalker-ThinkPad-X1-Carbon-4th:/etc/systemd$ <span class="token function">dig</span> baidu.com
davywalker@davywalker-ThinkPad-X1-Carbon-4th:/etc/systemd$ <span class="token function">dig</span> baidu.com +trace<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h1 id="查看到某个IP的路由信息"><a href="#查看到某个IP的路由信息" class="headerlink" title="查看到某个IP的路由信息"></a>查看到某个IP的路由信息</h1><p>在Linux&amp;MacOS上，traceroute命令默认使用UDP，而Windows默认使用ICMP协议。但可以使用<code>traceroute -I</code>来强制使用ICMP协议。<br><a href="https://serverfault.com/questions/374620/does-traceroute-use-udp-or-icmp-or-both">By default Windows tracert uses ICMP and both Mac OS X and Linux traceroute use UDP.</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">davywalker@davywalker-ThinkPad-X1-Carbon-4th:~/Downloads$ <span class="token function">traceroute</span> <span class="token number">220.181</span>.38.148
<span class="token function">traceroute</span> to <span class="token number">220.181</span>.38.148 <span class="token punctuation">(</span><span class="token number">220.181</span>.38.148<span class="token punctuation">)</span>, <span class="token number">30</span> hops max, <span class="token number">60</span> byte packets
 <span class="token number">1</span>  _gateway <span class="token punctuation">(</span><span class="token number">192.168</span>.3.1<span class="token punctuation">)</span>  <span class="token number">3.140</span> ms  <span class="token number">3.401</span> ms  <span class="token number">5.204</span> ms
 <span class="token number">2</span>  <span class="token number">122.233</span>.112.1 <span class="token punctuation">(</span><span class="token number">122.233</span>.112.1<span class="token punctuation">)</span>  <span class="token number">8.077</span> ms  <span class="token number">8.005</span> ms  <span class="token number">8.613</span> ms
 <span class="token number">3</span>  <span class="token number">61.164</span>.3.50 <span class="token punctuation">(</span><span class="token number">61.164</span>.3.50<span class="token punctuation">)</span>  <span class="token number">8.474</span> ms <span class="token number">61.164</span>.2.2 <span class="token punctuation">(</span><span class="token number">61.164</span>.2.2<span class="token punctuation">)</span>  <span class="token number">8.331</span> ms  <span class="token number">9.131</span> ms
<span class="token number">30</span>  * * *<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>使用ICMP协议进行traceroute</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">davywalker@davywalker-ThinkPad-X1-Carbon-4th:~/Downloads$ <span class="token function">traceroute</span> -I <span class="token number">220.181</span>.38.148
<span class="token function">traceroute</span> to <span class="token number">220.181</span>.38.148 <span class="token punctuation">(</span><span class="token number">220.181</span>.38.148<span class="token punctuation">)</span>, <span class="token number">30</span> hops max, <span class="token number">60</span> byte packets
 <span class="token number">1</span>  _gateway <span class="token punctuation">(</span><span class="token number">192.168</span>.3.1<span class="token punctuation">)</span>  <span class="token number">3.348</span> ms  <span class="token number">3.300</span> ms  <span class="token number">3.604</span> ms
 <span class="token number">2</span>  <span class="token number">122.233</span>.112.1 <span class="token punctuation">(</span><span class="token number">122.233</span>.112.1<span class="token punctuation">)</span>  <span class="token number">46.031</span> ms  <span class="token number">46.236</span> ms  <span class="token number">46.274</span> ms
 <span class="token number">3</span>  <span class="token number">61.164</span>.3.50 <span class="token punctuation">(</span><span class="token number">61.164</span>.3.50<span class="token punctuation">)</span>  <span class="token number">8.196</span> ms  <span class="token number">9.610</span> ms  <span class="token number">9.522</span> ms
 <span class="token number">4</span>  * <span class="token number">115.233</span>.18.13 <span class="token punctuation">(</span><span class="token number">115.233</span>.18.13<span class="token punctuation">)</span>  <span class="token number">10.761</span> ms *
 <span class="token number">5</span>  <span class="token number">202.97</span>.102.201 <span class="token punctuation">(</span><span class="token number">202.97</span>.102.201<span class="token punctuation">)</span>  <span class="token number">40.430</span> ms  <span class="token number">40.413</span> ms  <span class="token number">40.431</span> ms
 <span class="token number">6</span>  <span class="token number">36.110</span>.245.66 <span class="token punctuation">(</span><span class="token number">36.110</span>.245.66<span class="token punctuation">)</span>  <span class="token number">35.611</span> ms *  <span class="token number">34.008</span> ms
 <span class="token number">7</span>  * * *
 <span class="token number">8</span>  <span class="token number">220.181</span>.182.30 <span class="token punctuation">(</span><span class="token number">220.181</span>.182.30<span class="token punctuation">)</span>  <span class="token number">41.642</span> ms  <span class="token number">41.785</span> ms  <span class="token number">37.416</span> ms
 <span class="token number">9</span>  * * *
<span class="token number">10</span>  * * *
<span class="token number">11</span>  * * *
<span class="token number">12</span>  <span class="token number">220.181</span>.38.148 <span class="token punctuation">(</span><span class="token number">220.181</span>.38.148<span class="token punctuation">)</span>  <span class="token number">40.385</span> ms  <span class="token number">40.757</span> ms  <span class="token number">40.478</span> ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="路由器上，多个网卡，请求到某个网卡之后，是如何转发到其他网卡的？"><a href="#路由器上，多个网卡，请求到某个网卡之后，是如何转发到其他网卡的？" class="headerlink" title="路由器上，多个网卡，请求到某个网卡之后，是如何转发到其他网卡的？"></a>路由器上，多个网卡，请求到某个网卡之后，是如何转发到其他网卡的？</h2><p>例如：<br>docker容器内部 172.17.0.2，访问host的ip (192.168.3.80)</p>
<ol>
<li><p>docker容器内部有一条路由规则，非docker容器网段，都到docker0网桥上，docker0网桥IP 172.17.0.1</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
default         <span class="token number">172.17</span>.0.1      <span class="token number">0.0</span>.0.0         UG    <span class="token number">0</span>      <span class="token number">0</span>        <span class="token number">0</span> eth0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>请求到docker0网桥 172.17.0.1 之后，（docker0网桥本身就在Host上），查看路由表，从 wlp4s0 网卡发出（这里具体怎么发出的？）</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">davywalker@davywalker-ThinkPad-X1-Carbon-4th:/etc/systemd$ route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
<span class="token number">0.0</span>.0.0         <span class="token number">192.168</span>.3.1     <span class="token number">0.0</span>.0.0         UG    <span class="token number">600</span>    <span class="token number">0</span>        <span class="token number">0</span> wlp4s0
<span class="token number">172.17</span>.0.0      <span class="token number">0.0</span>.0.0         <span class="token number">255.255</span>.0.0     U     <span class="token number">0</span>      <span class="token number">0</span>        <span class="token number">0</span> docker0
<span class="token number">192.168</span>.3.0     <span class="token number">0.0</span>.0.0         <span class="token number">255.255</span>.255.0   U     <span class="token number">600</span>    <span class="token number">0</span>        <span class="token number">0</span> wlp4s0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h2 id="centos-7-如何查看网卡状态-并将某个网卡设置为默认启动"><a href="#centos-7-如何查看网卡状态-并将某个网卡设置为默认启动" class="headerlink" title="centos 7 如何查看网卡状态, 并将某个网卡设置为默认启动"></a>centos 7 如何查看网卡状态, 并将某个网卡设置为默认启动</h2><p>使用<code>VMware Fusion</code>安装好了<code>CentOS 7</code>虚拟机之后, 发现网络怎么都不通.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ping</span> baidu.com
ping: baidu.com: Name or <span class="token function">service</span> not known

$ <span class="token function">curl</span> baidu.com
curl: Could not resolve host: baidu.com<span class="token punctuation">;</span> Unknown error<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用如下方式进行排查: </p>
<ol>
<li>查看网卡连接状态, 发现以太网卡<code>ens33</code>为未连接<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> nmcli d
DEVICE  TYPE      STATE         CONNECTION
ens33   ethernet  disconnected  --
lo      lookback  unmanaged     --<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>修改网卡状态<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">vi</span> /etc/sysconfig/network-scripts/ifcfg-ens33
-- <span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>no
<span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li>重启网络服务<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> /etc/init.d/network restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>验证网卡状态<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> nmcli d
DEVICE  TYPE      STATE         CONNECTION
ens33   ethernet  connected     ens33
lo      lookback  unmanaged     --<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>验证网络状态: 成功<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ping</span> baidu.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
<h2 id="centos-7-如何设置固定IP"><a href="#centos-7-如何设置固定IP" class="headerlink" title="centos 7 如何设置固定IP"></a>centos 7 如何设置固定IP</h2><p>使用<code>VMware Fusion</code>安装好了<code>CentOS 7</code>虚拟机之后, 发现每次虚拟机启动都会DHCP自动重新分配个IP, 导致配置免登比较麻烦.<br>因此需要设置虚拟机固定IP. 使用如下步骤来: </p>
<ol>
<li><p>首先查看网卡, 可知网卡名称是 <code>ens33</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost network-scripts<span class="token punctuation">]</span><span class="token comment"># ifconfig</span>
ens33: <span class="token assign-left variable">flags</span><span class="token operator">=</span><span class="token number">416</span><span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>UP,BROADCAST,RUNNING,MULTICAST<span class="token operator">></span>  mtu <span class="token number">1500</span>
        inet <span class="token number">192.168</span>.230.130  netmask <span class="token number">255.255</span>.255.0  broadcast <span class="token number">192.168</span>.230.255
        inet6 fe80::28f7:8740:599:2a5c  prefixlen <span class="token number">64</span>  scopeid 0x2<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>link<span class="token operator">></span>
        ether 00:0c:29:a2:4d:53  txqueuelen <span class="token number">1000</span>  <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>
        RX packets <span class="token number">19066</span>  bytes <span class="token number">24766708</span> <span class="token punctuation">(</span><span class="token number">23.6</span> MiB<span class="token punctuation">)</span>
        RX errors <span class="token number">0</span>  dropped <span class="token number">0</span>  overruns <span class="token number">0</span>  frame <span class="token number">0</span>
        TX packets <span class="token number">3695</span>  bytes <span class="token number">352775</span> <span class="token punctuation">(</span><span class="token number">344.5</span> KiB<span class="token punctuation">)</span>
        TX errors <span class="token number">0</span>  dropped <span class="token number">0</span> overruns <span class="token number">0</span>  carrier <span class="token number">0</span>  collisions <span class="token number">0</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>查看<code>VMWare Fusion</code>配置为子网配置的DNS路由器地址与网关地址<br>由于使用的网络模式是<code>NAT模式</code>, 即虚拟机与Mac所在的子网是不同的.<br>虚拟机子网网段是<code>192.168.230.0/24</code>, 而Mac宿主机所在的网段是<code>192.168.3.0/24</code>. 所以需要在Mac上查看: </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> /Library/Preferences/VMware<span class="token punctuation">\</span> Fusion/vmnet8/dhcpd.conf
subnet <span class="token number">192.168</span>.230.0 netmask <span class="token number">255.255</span>.255.0 <span class="token punctuation">&#123;</span>
	range <span class="token number">192.168</span>.230.128 <span class="token number">192.168</span>.230.254<span class="token punctuation">;</span>
	option broadcast-address <span class="token number">192.168</span>.230.255<span class="token punctuation">;</span>
	option domain-name-servers <span class="token number">192.168</span>.230.2<span class="token punctuation">;</span>
	option domain-name localdomain<span class="token punctuation">;</span>
	default-lease-time <span class="token number">1800</span><span class="token punctuation">;</span>                <span class="token comment"># default is 30 minutes</span>
	max-lease-time <span class="token number">7200</span><span class="token punctuation">;</span>                    <span class="token comment"># default is 2 hours</span>
	option netbios-name-servers <span class="token number">192.168</span>.230.2<span class="token punctuation">;</span>
	option routers <span class="token number">192.168</span>.230.2<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>根据上述信息可知, 虚拟机子网的DNS服务器地址为<code>192.168.230.2</code>, 网关地址为<code>192.168.230.2</code></p>
</li>
<li><p>修改网卡配置<br>如下, 修改dhcp为static, 增加<code>GATEWAY</code>(即上一步查出来的网关地址) <code>IPADDR</code>(即需要使用的固定IP) <code>NETMASK</code> <code>DNS1</code>(即上一步查出的DNS服务器地址) <code>DNS2</code> 等 </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">vi</span> /etc/sysconfig/network-scripts/ifcfg-ens33
<span class="token comment"># BOOTPROTO=dhcp</span>
<span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>static
<span class="token assign-left variable">GATEWAY</span><span class="token operator">=</span><span class="token number">192.168</span>.230.2
<span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token number">192.168</span>.230.130
<span class="token assign-left variable">NETMASK</span><span class="token operator">=</span><span class="token number">255.255</span>.255.0
<span class="token assign-left variable">DNS1</span><span class="token operator">=</span><span class="token number">192.168</span>.230.2
<span class="token assign-left variable">DNS2</span><span class="token operator">=</span><span class="token number">8.8</span>.8.8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>重启网络服务</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> /etc/init.d/network restart
$ <span class="token function">sudo</span> <span class="token function">service</span> network restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>验证网络能通</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ping baidu.com</span>
PING baidu.com <span class="token punctuation">(</span><span class="token number">110.242</span>.68.66<span class="token punctuation">)</span> <span class="token number">56</span><span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">)</span> bytes of data.
<span class="token number">64</span> bytes from <span class="token number">110.242</span>.68.66 <span class="token punctuation">(</span><span class="token number">110.242</span>.68.66<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">128</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">35.9</span> ms
^C
--- baidu.com <span class="token function">ping</span> statistics ---
<span class="token number">1</span> packets transmitted, <span class="token number">1</span> received, <span class="token number">0</span>% packet loss, <span class="token function">time</span> 0ms
rtt min/avg/max/mdev <span class="token operator">=</span> <span class="token number">35.915</span>/35.915/35.915/0.000 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<p>这里插播一句, 第4步配置时: </p>
<ul>
<li>DNS与GATEWAY都配置错误, 配置成了<code>192.168.230.1</code>, 导致ping完全不通, 都没解析出IP</li>
<li>DNS配置正确, 但GATEWAY配置错误, 只配置了DNS为<code>192.168.230.2</code>, 而GATEWAY想当然地配置为了<code>192.168.230.1</code>, 结果导致ping的时候, 域名能解析出来, 但100%丢包, 即网络不通.</li>
<li>最后两者都配置正确, 网络才通.</li>
</ul>
<h2 id="如何查看TCP连接创建的时间"><a href="#如何查看TCP连接创建的时间" class="headerlink" title="如何查看TCP连接创建的时间"></a>如何查看TCP连接创建的时间</h2><p>在排查TCP连接异常时, 某个长连接经常莫名其妙断连, 需要判断连接的建立时间:</p>
<ol>
<li><p>查看进程的TCP连接, 获取具体的本地端口号${port_no}</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">lsof</span> -p <span class="token variable">$&#123;pid&#125;</span> -nP <span class="token operator">|</span> <span class="token function">fgrep</span> TCP <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>查看本地端口对应的TCP连接详情, PID与FD</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">lsof</span> -i:<span class="token variable">$&#123;port_no&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>查看文件创建时间<br>如下, 文件创建时间即TCP连接建立时间</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">ls</span> -l /proc/<span class="token variable">$&#123;pid&#125;</span>/fd/<span class="token variable">$&#123;fd&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
<h1 id="SSH-Server"><a href="#SSH-Server" class="headerlink" title="SSH Server"></a>SSH Server</h1><p>便于客户端能通过SSH连接到该服务器上</p>
<h2 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装SSH Server</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> openssh-server -y

<span class="token comment"># 查看是否安装成功</span>
<span class="token function">sudo</span> dpkg -l <span class="token operator">|</span> <span class="token function">fgrep</span> openssh-server

<span class="token comment"># 确认ssh进程已启动</span>
<span class="token function">sudo</span> systemctl status <span class="token function">ssh</span>
<span class="token function">ps</span> -e <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">ssh</span>

<span class="token comment"># 启动ssh进程</span>
<span class="token function">sudo</span> <span class="token function">service</span> <span class="token function">ssh</span> start
<span class="token comment"># 或者</span>
<span class="token function">sudo</span> /etc/init.d/ssh start
<span class="token comment"># 或者</span>
<span class="token function">sudo</span> systemctl start <span class="token function">ssh</span>

<span class="token comment"># 停止ssh进程</span>
<span class="token function">sudo</span> systemctl stop <span class="token function">ssh</span>

<span class="token comment"># 开机自动启动ssh</span>
<span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> <span class="token function">ssh</span>

<span class="token comment"># 关闭开机自动启动ssh</span>
<span class="token function">sudo</span> systemctl disable <span class="token function">ssh</span>

<span class="token comment"># 安装ifconfig</span>
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> net-tools -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>code-snippets</tag>
        <tag>linux</tag>
        <tag>network</tag>
        <tag>nat</tag>
        <tag>arp</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux网络之原理探讨与疑问总结</title>
    <url>//2022-06-29-linux-network-faq/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><h2 id="网卡混杂模式"><a href="#网卡混杂模式" class="headerlink" title="网卡混杂模式"></a>网卡混杂模式</h2><ul>
<li><p>啥是网卡混杂模式？</p>
</li>
<li><p>正常情况下，在网卡收到二层帧之后，会查看TargetMac是否与自身的Mac地址相同，如果不同，则丢弃该帧。</p>
</li>
<li><p>开启了混杂模式之后，即使MAC地址不匹配，也不会丢弃。还是会进入TCP&#x2F;IP协议栈处理。</p>
</li>
<li><p>啥时候需要开启？</p>
</li>
<li><p>&#x2F;&#x2F; TODO:</p>
</li>
<li><p>如何开启？</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// 开启混杂模式
<span class="token function">ifconfig</span> eth0 promisc
// 取消混杂模式
<span class="token function">ifconfig</span> eth0 -promisc
// 内核判断网卡是否处于混杂模式是看如下标识，如果置位了0x100，则处于混杂模式
<span class="token function">cat</span> /sys/class/net/eth0/flags<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>是否开启了混杂模式，就能嗅探局域网（二层网）内的所有数据包了？</p>
</li>
<li><p>不一定。</p>
</li>
<li><p>针对二层如果是集线器模式，可以嗅探到。</p>
</li>
<li><p>但现在大部分二层都是交换机模式。即交换机会根据CAM表，往对应的端口转发，不会无脑地全部端口都转发，因此嗅探不到。</p>
</li>
<li><p>开启混杂模式的例子</p>
</li>
<li><p>如下，docker0网桥就开启了混杂模式。</p>
</li>
<li><p>&#x2F;&#x2F; TODO: 为啥docker0网桥开启混杂模式？具体怎么用的？</p>
</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">davywalker@davywalker-ThinkPad-X1-Carbon-4th:~$ <span class="token function">cat</span> /sys/class/net/docker0/flags 
0x1003<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="路由器与NAT设备的关联与区别"><a href="#路由器与NAT设备的关联与区别" class="headerlink" title="路由器与NAT设备的关联与区别"></a>路由器与NAT设备的关联与区别</h2><h3 id="路由器工作原理："><a href="#路由器工作原理：" class="headerlink" title="路由器工作原理："></a>路由器工作原理：</h3><p>主要用来联通连个不同的网段，<mark>只修改sourceMac与targetMac，不修改sourceIp与targetIp</mark></p>
<ol>
<li>根据传入包指定的targetIp（传入包的MAC地址是路由器当前网卡的MAC地址，IP地址是真正的IP地址）</li>
<li>查询自身路由表，查找到最近的下一跳的IP地址。<code>route -n</code></li>
<li>再根据下一跳的IP地址，查找到对应的MAC地址。arp缓存表</li>
<li>修改数据包的targetMAC地址为下一跳的MAC地址，sourceMAC为当前网卡出口的mac地址</li>
<li>将数据包从对应网卡送出去。</li>
</ol>
<blockquote>
<p>路由器的核心是路由表的维护，能生成最短最优路径。<br/><br>从sourceIp到targetIp的路由路径，很可能与回包，即从targetIp返回到sourceIp的路由路径不一样。<br>取决于当时的路径中路由器的路由表情况。</p>
</blockquote>
<h3 id="NAT工作原理："><a href="#NAT工作原理：" class="headerlink" title="NAT工作原理："></a>NAT工作原理：</h3><ul>
<li><p>原理<br>需要修改sourceMac与targetMac。<br>同时如果是SNAT，则还要修改sourceIp。<br>如果是DNAT，则还要修改targetIp。</p>
</li>
<li><p>实现方式:<br>通过iptables可以设置nat表。<br>snat作用在postrouting阶段，dnat作用在prerouting阶段。<br>回包由内核的conntrack模块负责，不再由iptables负责。<br>详细参见 <a href="https://davyjones2010.github.io/2022-06-23-linux-network-nat">NAT之端口映射(PAT)原理总结&amp;实践</a></p>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>由此可知，家用的路由器，是附带了SNAT（也可以配置DNAT）功能的路由器。</p>
<h2 id="ip-forwarding"><a href="#ip-forwarding" class="headerlink" title="ip_forwarding"></a>ip_forwarding</h2><h3 id="MAC地址匹配-但IP地址不匹配"><a href="#MAC地址匹配-但IP地址不匹配" class="headerlink" title="MAC地址匹配, 但IP地址不匹配"></a>MAC地址匹配, 但IP地址不匹配</h3><p>网卡会不会收到MAC地址与当前网卡MAC地址匹配, 但IP地址与当前网卡的IP不匹配的IP包?<br>具体咋处理? 直接丢弃? 还是可以使用?</p>
<ul>
<li>会收到。</li>
<li>如果开启了ip_forwarding，则会进入FORWARD&#x2F;ROUTE阶段，查看本地 route 表，进入路由与postrouting阶段，找到对应的出口网卡，将包转发出去。与路由器的功能完全一致了。</li>
<li>如果未开启ip_forwarding，则直接丢弃该包。</li>
<li>所以，NAT模式下，必须要开启ip_forwarding。</li>
</ul>
<h3 id="iptables工作原理图"><a href="#iptables工作原理图" class="headerlink" title="iptables工作原理图"></a>iptables工作原理图</h3><p>此图摘自 <a href="https://wiki.archlinux.org/title/Iptables">Archlinux 文档</a></p>
<pre class="line-numbers language-none"><code class="language-none">                               XXXXXXXXXXXXXXXXXX
                             XXX     Network    XXX
                               XXXXXXXXXXXXXXXXXX
                                       +
                                       |
                                       v
 +-------------+              +------------------+
 |table: filter| &lt;---+        | table: nat&#x2F;dnat  |
 |chain: INPUT |     |        | chain: PREROUTING|
 +-----+-------+     |        +--------+---------+
       |             |                 |
       v             |                 v
 [local process]     |           ****************          +--------------+
       |             +---------+ Routing decision +------&gt; |table: filter |
       v                         ****************          |chain: FORWARD|
****************                                           +------+-------+
Routing decision                                                  |
****************                                                  |
       |                                                          |
       v                        ****************                  |
+-------------+       +------&gt;  Routing decision  &lt;---------------+
|table: nat   |       |         ****************
|chain: OUTPUT|       |               +
+-----+-------+       |               |
      |               |               v
      v               |      +-------------------+
+--------------+      |      | table: nat&#x2F;snat   |
|table: filter | +----+      | chain: POSTROUTING|
|chain: OUTPUT |             +--------+----------+
+--------------+                      |
                                      v
                               XXXXXXXXXXXXXXXXXX
                             XXX    Network     XXX
                               XXXXXXXXXXXXXXXXXX<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="为啥Linux默认不开启ip-forwarding"><a href="#为啥Linux默认不开启ip-forwarding" class="headerlink" title="为啥Linux默认不开启ip_forwarding?"></a>为啥Linux默认不开启ip_forwarding?</h3><p>因为在默认情况下，host只是扮演在网络中的一台主机的角色，根本不需要ip_forwarding的功能。</p>
<blockquote>
<p>A Linux machine acting as an ordinary host would not need to have IP forwarding enabled,<br>because it just generates and receives IP traffic for its own purposes</p>
</blockquote>
<h3 id="如何开启ip-forwarding"><a href="#如何开启ip-forwarding" class="headerlink" title="如何开启ip_forwarding?"></a>如何开启ip_forwarding?</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token number">1</span> <span class="token operator">></span> /proc/sys/net/ipv4/ip_forward<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>所以开启了ip_forwarding，相当于本机就具备一台路由器的能力了。<br/><br>如果再通过iptables配置了相应的nat规则，就相当于一台家用的路由器了。</p>
<h2 id="本地多网卡curl公网地址问题"><a href="#本地多网卡curl公网地址问题" class="headerlink" title="本地多网卡curl公网地址问题"></a>本地多网卡curl公网地址问题</h2><ul>
<li>如果本机有私网网卡virbr0, 公网网卡en0, 且开启了virbr0网段的SNAT规则. 则在本地curl公网地址, 则curl的出口网卡是啥? </li>
<li>是通过virbr0, 然后走SNAT到en0出去么?</li>
<li>还是直接通过en0出去?</li>
</ul>
<ol>
<li><p>curl 支持指定出口网卡如下(实际只是使用了对应网卡的ip地址作为SIP): 如果不指定, 则使用默认网卡. </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// curl指定网卡出口
<span class="token function">curl</span> --interface virbr0 http://www.baidu.com
// mac上查看默认网卡: 
route -n get <span class="token number">0.0</span>.0.0 <span class="token operator">|</span> <span class="token function">grep</span> interface<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>The –interface options is used to figure determine what address on the system will be used as the source IP. <br/><br>It doesn’t magically change anything about routing.</p>
</blockquote>
</li>
<li><p>参见<a href="#iptables%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%9B%BE">iptables工作原理图</a>, 可知从curl公网地址, 就是从local process出去, 接下来会走route, 即查看Host的路由表, 确定出口网卡与网关信息.</p>
</li>
<li><p>接下来进入postrouting(SNAT)阶段, 如果配置有SNAT规则, 且刚好命中, 则执行SNAT.</p>
</li>
<li><p>所以结论是出口网卡是en0, 而不会经过virbr0(即使指定了<code>--interface virbr0</code>).</p>
</li>
<li><p>是否会SNAT, 取决于是否指定了<code>--interface virbr0</code>, 指定了, 则会走SNAT; 未指定, 则不需要走SNAT.</p>
</li>
</ol>
<h2 id="本地多网卡Java应用获取HostIp问题"><a href="#本地多网卡Java应用获取HostIp问题" class="headerlink" title="本地多网卡Java应用获取HostIp问题"></a>本地多网卡Java应用获取HostIp问题</h2><ul>
<li>如果本机有多块网卡, 在Java中如何获取到这些IP地址? </li>
<li>我们通常使用获取本机IP的方式如下: <mark>当Host多块网卡时, 不好兼容, 存在严重缺陷, 尤其是在线上服务器网卡堆叠场景下!</mark></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">InetAddress</span> ip <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> hostname <span class="token operator">=</span> ip<span class="token punctuation">.</span><span class="token function">getHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>解决方案: </li>
<li>方案1: 使用 <code>NetworkInterface.getNetworkInterfaces()</code> 接口, 获取所有网卡, 然后逐个获取IP信息.</li>
<li>方案2: 获取本机的FQDN, 然后使用<code>InetAddress.getByName(FQDN)</code>来获取主网卡的IP信息.<ul>
<li>本机的FQDN可以写在配置文件里.</li>
</ul>
</li>
<li>Ref: <a href="https://crunchify.com/how-to-get-server-ip-address-and-hostname-in-java/">How to get Server IP Address and Hostname in Java</a></li>
</ul>
<h2 id="IP隧道"><a href="#IP隧道" class="headerlink" title="IP隧道"></a>IP隧道</h2><h2 id="LVS"><a href="#LVS" class="headerlink" title="LVS"></a>LVS</h2><h3 id="LVS-v-s-iptables-x2F-netfilters"><a href="#LVS-v-s-iptables-x2F-netfilters" class="headerlink" title="LVS v.s. iptables&#x2F;netfilters"></a>LVS v.s. iptables&#x2F;netfilters</h3><p>本质上, 两个都可以做四层的DNAT, 都是工作在内核空间. </p>
<ul>
<li>LVS: 更侧重于LoadBalancing, 实现上使用hash查表, 而不是iptables的顺序查询. 效率更高. </li>
<li>iptables:</li>
</ul>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207042336674.png"></p>
<ul>
<li>可以看到, LVS本质上是与iptables配合使用</li>
<li>客户访问虚拟 IP（VIP）时，数据包先在主机内核空间被 PREROUTING 链检测，根据数据包的目标地址进行路由判断，若目标地址是本地，则交由 INPUT 链进行处理。</li>
<li>IPVS 工作于 INPUT 链，当数据包到达 INPUT 链时，会先由 IPVS 进行检查，并根据负载均衡算法选出真实服务器 IP。</li>
<li>IPVS 转发模式为 NAT 模式时，将数据包由 FORWARD 链进行处理后由 POST-ROUTING 链发送给真实服务器。</li>
<li>IPVS 转发模式为非 NAT 模式时，则将数据包由 POST-ROUTING 链发送给真实服务器。</li>
</ul>
<h3 id="LVS的几种模式分析"><a href="#LVS的几种模式分析" class="headerlink" title="LVS的几种模式分析"></a>LVS的几种模式分析</h3><p><a href="https://blog.csdn.net/Splend520/article/details/104587149">linux LVS负载均衡原理 NAT DR TUN FULLNAT 模式</a></p>
<h4 id="LVS-NAT-–-gt-NAT-x2F-DNAT"><a href="#LVS-NAT-–-gt-NAT-x2F-DNAT" class="headerlink" title="LVS-NAT –&gt; NAT&#x2F;DNAT"></a>LVS-NAT –&gt; NAT&#x2F;DNAT</h4><p>本质是类似iptables的端口映射(PAT)–&gt; 注意这里全程没有DIP的参与.</p>
<ul>
<li>LVS本身有两个IP, 对外是VIP, 对内是DIP(Director IP)</li>
<li>Client请求: {CIP, VIP}</li>
<li>LVS映射: 修改目标IP, VIP-&gt;RIP, 构建新的请求: {CIP, RIP}</li>
<li>Server处理: 完成后发送回包, {RIP, CIP}; 由于CIP与RIP不在同一个网段, 因此发送到网关(即LVS)</li>
<li>LVS映射: 修改源IP, RIP-&gt;VIP, 构建新的响应: {VIP, CIP}</li>
</ul>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207052223099.png"></p>
<ul>
<li>缺点: <ul>
<li>需要RS与DS在同一个二层网络里, 且需要把DS&#x2F;DIP配置为RS的网关.</li>
</ul>
</li>
<li>优点: <ul>
<li>&#x2F;&#x2F; TODO:</li>
</ul>
</li>
</ul>
<h4 id="LVS-NAT-–-gt-FullNAT"><a href="#LVS-NAT-–-gt-FullNAT" class="headerlink" title="LVS-NAT –&gt; FullNAT"></a>LVS-NAT –&gt; FullNAT</h4><ul>
<li>LVS本身有两个IP, 对外是VIP, 对内是DIP(Director IP)</li>
<li>Client请求: {CIP, VIP}</li>
<li>LVS映射: 修改目标IP, VIP-&gt;RIP(RealServerIP); 修改源IP, CIP-&gt;DIP; 构建新的请求: {DIP, RIP}</li>
<li>RealServer处理: 完成后发送回包, {RIP, DIP} (FullNAT模式, 不需要LVS必须是网关, 只要三层IP可达即可)</li>
<li>LVS映射: 修改源IP, RIP-&gt;VIP; 通过conntrack查表, 修改目标IP, DIP-&gt;CIP; 构建新的响应: {VIP, CIP}</li>
</ul>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207052218872.png"></p>
<ul>
<li><p>注意: LVS 本身不支持 FULLNAT 模式，需要额外对内核打补丁后才能使用。</p>
</li>
<li><p>缺点: </p>
<ul>
<li>不管是请求数据包还是响应数据包，都要经过负载均衡器。但是响应数据包一般要比请求数据包大很多，这可能会成为系统的瓶颈。</li>
</ul>
</li>
<li><p>优点:</p>
<ul>
<li>如上图, RealServer(DIP)不需要跟LVS在同一个网段, 只要IP包(三层路由)可达, 就能完成FullNAT</li>
</ul>
</li>
</ul>
<h4 id="LVS-DR"><a href="#LVS-DR" class="headerlink" title="LVS-DR"></a>LVS-DR</h4><h4 id="LVS-TUN"><a href="#LVS-TUN" class="headerlink" title="LVS-TUN"></a>LVS-TUN</h4><h4 id="实际"><a href="#实际" class="headerlink" title="实际"></a>实际</h4><ul>
<li><a href="https://help.aliyun.com/document_detail/27544.html">阿里云CLB</a>使用的是哪种模式? NAT?<ul>
<li>四层采用开源软件LVS（Linux Virtual Server）+ keepalived的方式实现负载均衡</li>
<li>LVS应该使用的是NAT模式. 但如果是NAT模式, 则必须把LVS作为ECS的网关. &#x2F;&#x2F;TODO: 待验证</li>
</ul>
</li>
</ul>
<h1 id="HTTP-代理"><a href="#HTTP-代理" class="headerlink" title="HTTP 代理"></a>HTTP 代理</h1><h1 id="什么是”冷土豆路由”与”热土豆路由”"><a href="#什么是”冷土豆路由”与”热土豆路由”" class="headerlink" title="什么是”冷土豆路由”与”热土豆路由”?"></a>什么是”冷土豆路由”与”热土豆路由”?</h1><ul>
<li>参见: <a href="https://docs.microsoft.com/zh-cn/azure/virtual-network/ip-services/routing-preference-overview">冷土豆路由&amp;热土豆路由</a></li>
<li>热土豆:<ul>
<li>入口流量: 如果来自新加坡的用户访问托管在芝加哥的 Azure 资源，则流量将通过公共 Internet 传输，并进入芝加哥的 Microsoft 全球网络。</li>
<li>出口流量: 出口流量遵循相同的原则。 流量会在托管服务的同一区域退出 Microsoft 网络。 例如，如果来自 Azure 芝加哥服务的流量最终传输给来自新加坡的用户，流量将离开芝加哥的 Microsoft 网络，并通过公共 Internet 传输给新加坡的用户。</li>
</ul>
</li>
<li>冷土豆:<ul>
<li>入口流量: 如果来自新加坡的用户访问托管在美国芝加哥的 Azure 资源，则流量将进入位于新加坡 Edge POP 的 Microsoft 全球网络，并通过 Microsoft 网络传输到托管在芝加哥的服务。</li>
<li>出口流量: 如果来自 Azure 芝加哥的流量最终传输给来自新加坡的用户，那么流量就会通过 Microsoft 网络从芝加哥传输到新加坡，并退出位于新加坡 Edge POP 的 Microsoft 网络。</li>
</ul>
</li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>linux</tag>
        <tag>iaas</tag>
        <tag>network</tag>
        <tag>cloud-computing</tag>
        <tag>nat</tag>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Java&amp;JVM&amp;OQL&amp;MVN 常用命令与脚本总结</title>
    <url>//2022-07-01-java-jvm/</url>
    <content><![CDATA[<h1 id="Java-amp-JVM"><a href="#Java-amp-JVM" class="headerlink" title="Java&amp;JVM"></a>Java&amp;JVM</h1><h2 id="打-HeapDump"><a href="#打-HeapDump" class="headerlink" title="打 HeapDump"></a>打 HeapDump</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jmap -dump:live,file<span class="token operator">=</span>heapdump.phrof <span class="token variable">$pid</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>或者</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jmap -dump:live,file<span class="token operator">=</span>heapdump.phrof -F <span class="token variable">$pid</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>一般情况下，<mark>尽量不要使用-F参数。</mark> 因为-F使用的是Linux操作系统层面的实现，而不是JVM层面的实现，会导致 打印堆信息很慢。<br/><br>如果提示第一种方式打印不出来堆的信息，需要增加-F，那么可以先检查下：</p>
<ol>
<li>Java应用进程的user_name是否与当前的user_name相同？ 如果不同，需要切换为同一个账号。</li>
<li>Java应用进程的Java路径是否与当前jmap命令的路径相同？ 如果不同，需要切换为同一个路径。</li>
</ol>
</blockquote>
<h2 id="打-ThreadDump"><a href="#打-ThreadDump" class="headerlink" title="打 ThreadDump"></a>打 ThreadDump</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jstack <span class="token variable">$pid</span> <span class="token operator">></span> tmp.jstack<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>注意: 当CPU利用率高或者想看下线程卡在哪里时，<mark>最好隔几秒就打一个线程栈，每个线程栈都保留下来</mark> <br/><br>多个线程栈对比起来看，会更能更好地发现问题。</p>
</blockquote>
<h2 id="查看消耗CPU时间片最多的线程信息"><a href="#查看消耗CPU时间片最多的线程信息" class="headerlink" title="查看消耗CPU时间片最多的线程信息"></a>查看消耗CPU时间片最多的线程信息</h2><p>需要与ThreadDump一起使用，才能定位到具体是Java中哪个线程。</p>
<ol>
<li>查看消耗cpu时间片最多的进程号<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// 查看瞬时消耗CPU，倒序排列
<span class="token function">top</span> -o %CPU
// 查看累计消耗CPU时间片，倒序排列
<span class="token function">top</span> -o TIME+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">davywalker@davywalker-ThinkPad-X1-Carbon-4th:~$ <span class="token function">top</span> -o %CPU
<span class="token function">top</span> - <span class="token number">21</span>:39:35 up <span class="token number">10</span>:52,  <span class="token number">1</span> user,  load average: <span class="token number">1.47</span>, <span class="token number">1.36</span>, <span class="token number">1.14</span>
Tasks: <span class="token number">325</span> total,   <span class="token number">4</span> running, <span class="token number">320</span> sleeping,   <span class="token number">0</span> stopped,   <span class="token number">1</span> zombie
%Cpu0  <span class="token builtin class-name">:</span>  <span class="token number">8.2</span> us,  <span class="token number">4.1</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">87.4</span> id,  <span class="token number">0.0</span> wa,  <span class="token number">0.0</span> hi,  <span class="token number">0.3</span> si,  <span class="token number">0.0</span> st
%Cpu1  <span class="token builtin class-name">:</span>  <span class="token number">7.5</span> us,  <span class="token number">3.8</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">88.7</span> id,  <span class="token number">0.0</span> wa,  <span class="token number">0.0</span> hi,  <span class="token number">0.0</span> si,  <span class="token number">0.0</span> st
%Cpu2  <span class="token builtin class-name">:</span> <span class="token number">11.6</span> us,  <span class="token number">2.7</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">85.4</span> id,  <span class="token number">0.0</span> wa,  <span class="token number">0.0</span> hi,  <span class="token number">0.3</span> si,  <span class="token number">0.0</span> st
%Cpu3  <span class="token builtin class-name">:</span>  <span class="token number">8.4</span> us,  <span class="token number">3.0</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">88.6</span> id,  <span class="token number">0.0</span> wa,  <span class="token number">0.0</span> hi,  <span class="token number">0.0</span> si,  <span class="token number">0.0</span> st
MiB Mem <span class="token builtin class-name">:</span>   <span class="token number">7823.4</span> total,    <span class="token number">172.0</span> free,   <span class="token number">5254.4</span> used,   <span class="token number">2397.0</span> buff/cache
MiB Swap:   <span class="token number">2048.0</span> total,    <span class="token number">252.2</span> free,   <span class="token number">1795.7</span> used.   <span class="token number">1107.3</span> avail Mem 

    PID <span class="token environment constant">USER</span>      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND                                      
   <span class="token number">2318</span> davywal+  <span class="token number">20</span>   <span class="token number">0</span> <span class="token number">5178536</span> <span class="token number">247920</span>  <span class="token number">52372</span> R  <span class="token number">12.5</span>   <span class="token number">3.1</span>  <span class="token number">24</span>:33.00 gnome-shell                                  
   <span class="token number">2099</span> davywal+  <span class="token number">20</span>   <span class="token number">0</span> <span class="token number">1008428</span> <span class="token number">112204</span>  <span class="token number">78172</span> R  <span class="token number">11.2</span>   <span class="token number">1.4</span>  <span class="token number">23</span>:31.71 Xorg                                         
   <span class="token number">6521</span> davywal+  <span class="token number">20</span>   <span class="token number">0</span>  <span class="token number">868244</span>  <span class="token number">35580</span>  <span class="token number">23924</span> R   <span class="token number">5.9</span>   <span class="token number">0.4</span>   <span class="token number">0</span>:38.61 gnome-terminal-                              
   <span class="token number">5308</span> davywal+  <span class="token number">20</span>   <span class="token number">0</span> <span class="token number">6370752</span> <span class="token number">517952</span> <span class="token number">219108</span> S   <span class="token number">2.6</span>   <span class="token number">6.5</span>  <span class="token number">39</span>:38.79 firefox                                      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>查看进程下消耗时间片最多的线程号</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">top</span> -Hp <span class="token variable">$pid</span> -o %CPU
<span class="token function">top</span> -Hp <span class="token variable">$pid</span> -o TIME+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">davywalker@davywalker-ThinkPad-X1-Carbon-4th:~$ <span class="token function">top</span> -Hp <span class="token number">2318</span>
<span class="token function">top</span> - <span class="token number">21</span>:42:00 up <span class="token number">10</span>:55,  <span class="token number">1</span> user,  load average: <span class="token number">1.08</span>, <span class="token number">1.38</span>, <span class="token number">1.19</span>
Threads:  <span class="token number">15</span> total,   <span class="token number">0</span> running,  <span class="token number">15</span> sleeping,   <span class="token number">0</span> stopped,   <span class="token number">0</span> zombie
%Cpu<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:  <span class="token number">5.7</span> us,  <span class="token number">1.9</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">92.3</span> id,  <span class="token number">0.0</span> wa,  <span class="token number">0.0</span> hi,  <span class="token number">0.1</span> si,  <span class="token number">0.0</span> st
MiB Mem <span class="token builtin class-name">:</span>   <span class="token number">7823.4</span> total,    <span class="token number">158.1</span> free,   <span class="token number">5264.5</span> used,   <span class="token number">2400.9</span> buff/cache
MiB Swap:   <span class="token number">2048.0</span> total,    <span class="token number">250.8</span> free,   <span class="token number">1797.2</span> used.   <span class="token number">1092.3</span> avail Mem 

    PID <span class="token environment constant">USER</span>      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND                                      
   <span class="token number">2318</span> davywal+  <span class="token number">20</span>   <span class="token number">0</span> <span class="token number">5178588</span> <span class="token number">247724</span>  <span class="token number">52288</span> S   <span class="token number">5.7</span>   <span class="token number">3.1</span>  <span class="token number">24</span>:28.42 gnome-shell                                  
   <span class="token number">2331</span> davywal+  <span class="token number">20</span>   <span class="token number">0</span> <span class="token number">5178588</span> <span class="token number">247724</span>  <span class="token number">52288</span> S   <span class="token number">0.0</span>   <span class="token number">3.1</span>   <span class="token number">0</span>:00.34 gmain                                        
   <span class="token number">2335</span> davywal+  <span class="token number">20</span>   <span class="token number">0</span> <span class="token number">5178588</span> <span class="token number">247724</span>  <span class="token number">52288</span> S   <span class="token number">0.0</span>   <span class="token number">3.1</span>   <span class="token number">0</span>:11.10 gdbus                                        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>将10进制转成16进制<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">printf</span> <span class="token string">'%x\n'</span> <span class="token environment constant">$PPID</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// <span class="token number">10</span>进制转成16进制
davywalker@davywalker-ThinkPad-X1-Carbon-4th:~$ <span class="token builtin class-name">printf</span> <span class="token string">'%x\n'</span> <span class="token number">2318</span>
90e

// <span class="token number">16</span>进制转成10进制
davywalker@davywalker-ThinkPad-X1-Carbon-4th:~$ <span class="token builtin class-name">printf</span> <span class="token string">'%d\n'</span> 0x90e
<span class="token number">2318</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li>查看jstack中对应的线程信息</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">fgrep</span> <span class="token string">"0x90e"</span> tmp.jstack -C <span class="token number">50</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="查看JVM默认HeapSize"><a href="#查看JVM默认HeapSize" class="headerlink" title="查看JVM默认HeapSize"></a>查看JVM默认HeapSize</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">java -XX:+PrintFlagsFinal -version <span class="token operator">|</span> <span class="token function">fgrep</span> HeapSize
// 查看java_home, class_path等默认配置与系统环境变量
java -XshowSettings:all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>如下，默认HeapSize为130023424&#x2F;1024&#x2F;1024&#x3D;124MB<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">davywalker@davywalker-ThinkPad-X1-Carbon-4th:~$ java -XX:+PrintFlagsFinal -version <span class="token operator">|</span> <span class="token function">fgrep</span> HeapSize
    uintx ErgoHeapSizeLimit                         <span class="token operator">=</span> <span class="token number">0</span>                                   <span class="token punctuation">&#123;</span>product<span class="token punctuation">&#125;</span>
    uintx HeapSizePerGCThread                       <span class="token operator">=</span> <span class="token number">87241520</span>                            <span class="token punctuation">&#123;</span>product<span class="token punctuation">&#125;</span>
    uintx InitialHeapSize                          :<span class="token operator">=</span> <span class="token number">130023424</span>                           <span class="token punctuation">&#123;</span>product<span class="token punctuation">&#125;</span>
    uintx LargePageHeapSizeThreshold                <span class="token operator">=</span> <span class="token number">134217728</span>                           <span class="token punctuation">&#123;</span>product<span class="token punctuation">&#125;</span>
    uintx MaxHeapSize                              :<span class="token operator">=</span> <span class="token number">2051014656</span>                          <span class="token punctuation">&#123;</span>product<span class="token punctuation">&#125;</span>
openjdk version <span class="token string">"1.8.0_312"</span>
OpenJDK Runtime Environment <span class="token punctuation">(</span>build <span class="token number">1.8</span>.0_312-8u312-b07-0ubuntu1~20.04-b07<span class="token punctuation">)</span>
OpenJDK <span class="token number">64</span>-Bit Server VM <span class="token punctuation">(</span>build <span class="token number">25.312</span>-b07, mixed mode<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">davywalker@davywalker-ThinkPad-X1-Carbon-4th:~$ java -XshowSettings:all
VM settings:
    Max. Heap Size <span class="token punctuation">(</span>Estimated<span class="token punctuation">)</span>: <span class="token number">1</span>.70G
    Ergonomics Machine Class: server
    Using VM: OpenJDK <span class="token number">64</span>-Bit Server VM

Property settings:
    awt.toolkit <span class="token operator">=</span> sun.awt.X11.XToolkit
    file.encoding <span class="token operator">=</span> UTF-8
    file.encoding.pkg <span class="token operator">=</span> sun.io<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h1 id="OQL"><a href="#OQL" class="headerlink" title="OQL"></a>OQL</h1><ul>
<li><p><a href="https://wiki.eclipse.org/MemoryAnalyzer/OQL">如何使用OQL</a></p>
</li>
<li><p>查询某规格类的对象</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> edu<span class="token punctuation">.</span>xmu<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>UserServiceImpl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>查询对象某个属性(这里只能根据类, 查到该类下所有对象的属性)</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> t<span class="token punctuation">.</span>initd<span class="token punctuation">,</span> t<span class="token punctuation">.</span>initAsyn<span class="token punctuation">,</span> toString<span class="token punctuation">(</span>t<span class="token punctuation">.</span>publicCloud<span class="token punctuation">)</span><span class="token punctuation">,</span> namespace<span class="token punctuation">,</span> toString<span class="token punctuation">(</span>t<span class="token punctuation">.</span>regionId<span class="token punctuation">)</span><span class="token punctuation">,</span> toString<span class="token punctuation">(</span>t<span class="token punctuation">.</span>useNuwa<span class="token punctuation">)</span><span class="token punctuation">,</span> toString<span class="token punctuation">(</span>t<span class="token punctuation">.</span>nuwaConfigDns<span class="token punctuation">)</span><span class="token punctuation">,</span> toString<span class="token punctuation">(</span>t<span class="token punctuation">.</span>nuwaCluster<span class="token punctuation">)</span><span class="token punctuation">,</span> toString<span class="token punctuation">(</span>t<span class="token punctuation">.</span>rootPath<span class="token punctuation">)</span> <span class="token keyword">FROM</span> edu<span class="token punctuation">.</span>xmu<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>UserServiceImpl t<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>查询对象某个属性(如何根据对象ID, 精确查询到该对象的某些属性?)</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> t<span class="token punctuation">.</span>initd<span class="token punctuation">,</span> t<span class="token punctuation">.</span>initAsyn<span class="token punctuation">,</span> toString<span class="token punctuation">(</span>t<span class="token punctuation">.</span>publicCloud<span class="token punctuation">)</span><span class="token punctuation">,</span> namespace<span class="token punctuation">,</span> toString<span class="token punctuation">(</span>t<span class="token punctuation">.</span>regionId<span class="token punctuation">)</span><span class="token punctuation">,</span> toString<span class="token punctuation">(</span>t<span class="token punctuation">.</span>useNuwa<span class="token punctuation">)</span><span class="token punctuation">,</span> toString<span class="token punctuation">(</span>t<span class="token punctuation">.</span>nuwaConfigDns<span class="token punctuation">)</span><span class="token punctuation">,</span> toString<span class="token punctuation">(</span>t<span class="token punctuation">.</span>nuwaCluster<span class="token punctuation">)</span><span class="token punctuation">,</span> toString<span class="token punctuation">(</span>t<span class="token punctuation">.</span>rootPath<span class="token punctuation">)</span> <span class="token keyword">FROM</span> OBJECTS <span class="token number">0x7480633e0</span> t<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>根据类的hash地址, 获取对应实例</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> instanceof <span class="token number">0x733ccc9f0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>根据对象hash值获取对象信息</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span>  OBJECTS <span class="token number">0xdc2819e0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>根据条件筛选出对象信息</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> edu<span class="token punctuation">.</span>xmu<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>UserServiceImpl t <span class="token keyword">where</span> toString<span class="token punctuation">(</span>t<span class="token punctuation">.</span>hostType<span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">"ddh.ebmec3metest"</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> edu<span class="token punctuation">.</span>xmu<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>UserServiceImpl t <span class="token keyword">where</span> toString<span class="token punctuation">(</span>t<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">"28745-27"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ul>
<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><ul>
<li><p>下载源代码. 有时候IDE无法自动下载jar包的源代码, 此时使用如下命令就能下载</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mvn dependency:sources<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>编译源码.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mvn clean compile -DskipTests<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>编译源码, 且把编译的jar包等产物安装到本地Repo中.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mvn clean <span class="token function">install</span> -DskipTests<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>强制重新下载SNAPSHOT包</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mvn clean compile -U<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>不再联网下载依赖, 即offline mode</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1. 先验证所有依赖都下载到了本地</span>
<span class="token comment"># mvn dependency:go-offline</span>

<span class="token comment"># 2. 再执行如下命令, 开启offline编译模式</span>
<span class="token comment"># mvn -o install</span>
<span class="token comment"># mvn -offline install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>依赖解析相关</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 把依赖树打印出来</span>
<span class="token comment"># mvn dependency:tree</span>

<span class="token comment"># 分析无用的依赖</span>
<span class="token comment"># mvn dependency: analyze</span>

<span class="token comment"># 分析重复的依赖</span>
<span class="token comment"># mvn dependency:analyze-duplicate</span>

<span class="token comment"># 当使用shell脚本执行jar命令启动项目时, 需要把项目依赖的jar包都放到classpath参数下. </span>
<span class="token comment"># 但人肉一个一个加很麻烦, 执行这个命令就把所有jar包全路径都拼接打印出来. </span>
<span class="token comment"># mvn dependency:build-classpath</span>

<span class="token comment"># 把所有解析好的依赖, 平铺打印</span>
<span class="token comment"># mvn dependency:resolve</span>

<span class="token comment"># 列出所有配置好的remote repo</span>
<span class="token comment"># mvn dependency:list-repositories</span>

<span class="token comment"># 把项目所有依赖的jar包都拷贝到目标目录下</span>
<span class="token comment"># mvn dependency:copy-dependencies -DoutputDirectory="~/lib/"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>code-snippets</tag>
        <tag>java</tag>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次Dubbo应用性能优化</title>
    <url>//2022-07-02-dubbo-app-perf-tunning/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>新的应用以dubbo接口对外暴露调度能力。<br>在上线前需要整体压测，确认下系统能力与瓶颈。</p>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>目标QPS: 500+<br>目标RT: 100ms-</p>
<h2 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h2><p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207042216549.png"></p>
<h2 id="应用框架"><a href="#应用框架" class="headerlink" title="应用框架"></a>应用框架</h2><ul>
<li>SpringBoot 2.5.6</li>
<li>Druid 1.1.22</li>
</ul>
<h2 id="机器配置清单"><a href="#机器配置清单" class="headerlink" title="机器配置清单"></a>机器配置清单</h2><ul>
<li>ECS规格： ecs.n4.2xlarge</li>
<li>2台8C16G 独享型</li>
<li>CPU: 2.5 GHz主频的Intel ® Xeon ®处理器</li>
<li>JDK 1.8</li>
<li>网络： 1.2Gbps，即至少支持100MB&#x2F;s的内网带宽</li>
</ul>
<h2 id="中间件配置清单"><a href="#中间件配置清单" class="headerlink" title="中间件配置清单"></a>中间件配置清单</h2><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><ul>
<li>规格：8C32GB</li>
<li>支持的最大连接数量：30000</li>
<li>Host到Redis的Ping延时在1ms以内</li>
</ul>
<h3 id="DB-x2F-RDS"><a href="#DB-x2F-RDS" class="headerlink" title="DB&#x2F;RDS"></a>DB&#x2F;RDS</h3><ul>
<li>规格：mysql.x4.4xlarge.2 32C128GB</li>
<li>MySQL 5.7</li>
<li>支持的最大连接数量：20000</li>
<li>Host到DB的Ping延时在1ms以内</li>
</ul>
<h1 id="压测记录"><a href="#压测记录" class="headerlink" title="压测记录"></a>压测记录</h1><h2 id="第一轮压测"><a href="#第一轮压测" class="headerlink" title="第一轮压测"></a>第一轮压测</h2><h3 id="压测结果"><a href="#压测结果" class="headerlink" title="压测结果"></a>压测结果</h3><ul>
<li>压到140QPS时， RT已经飙升到8s+；</li>
</ul>
<h3 id="其他指标"><a href="#其他指标" class="headerlink" title="其他指标"></a>其他指标</h3><ul>
<li>cpu: 已经基本跑满了，利用率780+%；</li>
<li>mem: 内存占用量很低，总体稳定在34%左右。</li>
<li>网络： 总体入流量在10Mbps以下，出流量1Mbps以下，远远没有打到带宽上限。</li>
<li>磁盘： 没有频繁的磁盘IO</li>
<li>Java: 没有发生频繁的GC。</li>
</ul>
<h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><p>根据应用日志，发现有如下几个问题：</p>
<ul>
<li>Redis访问<ul>
<li>单次schedule()请求，会连续串行调用40+次的redis get接口。</li>
<li>这些串行的get调用，加起来平均耗时在6s+</li>
</ul>
</li>
<li>其他问题：<ul>
<li>apache.util中Pair类型序列化问题</li>
</ul>
</li>
</ul>
<h3 id="Redis访问速度慢问题分析"><a href="#Redis访问速度慢问题分析" class="headerlink" title="Redis访问速度慢问题分析"></a>Redis访问速度慢问题分析</h3><h4 id="是否是服务端问题？"><a href="#是否是服务端问题？" class="headerlink" title="是否是服务端问题？"></a>是否是服务端问题？</h4><p>查看了Redis服务端整体性能情况：</p>
<ul>
<li>出口帶寬爲100MB，當時只利用了10%左右</li>
<li>CPU Usage 14% 左右</li>
<li>連接數：最大支持30000，當時只有3個穩定的連接</li>
<li>QPS: 高峯期QPS爲6000，而實例的max爲24w，使用率僅爲2.5%，遠遠沒有達到限流閾值</li>
</ul>
<h4 id="是否是客户端问题？"><a href="#是否是客户端问题？" class="headerlink" title="是否是客户端问题？"></a>是否是客户端问题？</h4><ul>
<li>網絡流量：10MB左右，遠遠沒有打滿。</li>
<li>Load: 很低，0.2以下</li>
</ul>
<h4 id="問題定位"><a href="#問題定位" class="headerlink" title="問題定位"></a>問題定位</h4><p>在這種情況下，一般就只能懷疑是client連接問題。類似HttpClient，客戶端請求都在排隊等着獲取connection。</p>
<ul>
<li>方案1： 增大連接池配置，增大最大連接數量。</li>
<li>方案2： 減少請求次數</li>
</ul>
<h3 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h3><ul>
<li>Redis优化：<ul>
<li>采用了方案2： 使用Redis的mget，而不是单个get。以减少网络交互</li>
<li>为啥没采用方案1？ <blockquote>
<p>因为 SpringBoot 1.5.x 版本默认使用Jedis作为redis client，比较好调整connection数量等。<br/><br>但 SpringBoot 2.x 版本默认使用了Lettuce作为redis client，本身基于Netty的异步IO方式实现，与Jedis不同，本身就支持单个连接被多个线程同时访问。<br>所以官方不建议配置连接池。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207042214249.png"></p>
<ul>
<li>其他问题优化<ul>
<li>自己重新实现了一版Pair类型的序列化、反序列化方式</li>
</ul>
</li>
</ul>
<h2 id="第二轮压测"><a href="#第二轮压测" class="headerlink" title="第二轮压测"></a>第二轮压测</h2><h3 id="压测结果-1"><a href="#压测结果-1" class="headerlink" title="压测结果"></a>压测结果</h3><ul>
<li>在250QPS时，RT基本稳定在100ms以下</li>
<li>压到300QPS时，RT突然飙升到3s+</li>
<li>cpu利用率较低</li>
<li>内存占用量很低，总体稳定在34%左右</li>
<li>没有发生GC</li>
</ul>
<h3 id="原因分析-1"><a href="#原因分析-1" class="headerlink" title="原因分析"></a>原因分析</h3><p>根据日志打点，很容易找到当时的瓶颈就在ram-client调用鉴权服务鉴权上。</p>
<ul>
<li>RAM接口问题：</li>
</ul>
<h3 id="优化方案-1"><a href="#优化方案-1" class="headerlink" title="优化方案"></a>优化方案</h3><ul>
<li>RAM Client优化：<ul>
<li>增大client的max-connections数量，增大到300。</li>
</ul>
</li>
</ul>
<blockquote>
<p>这里有个插曲，当增大client的max-connections数量到300之后，重新进行了一次压测，发现QPS并没有提升，RT的瓶颈仍然在访问RAM上！ <br/><br>后续看了ram-client的发布记录，发现属于ram-client的一个bug。<br/><br>ram-client使用了http-client作为内部实现。<br/><br>当前版本中，增大max-connections数量，只是增大了httpclient全局支持的connection数量，而单个host支持的connection数量仍然是默认值，即8. <br/><br>由于访问ram的endpoint就是单个host，因此相当于该配置没有生效！ <br/><br>后续升级了ram-client版本，新版本实现里，将max-connections值同时赋给了max-connections-per-host，因此相当于max-connections-per-host也被调大为300了<br/><br>关于max-connections与max-connections-per-host参数的详细解释，参见： <a href="https://davyjones2010.github.io/2022-03-15-http-client-netty/">异步HttpClient使用Netty作为SocketChannel的Provider</a></p>
</blockquote>
<h2 id="第三轮压测"><a href="#第三轮压测" class="headerlink" title="第三轮压测"></a>第三轮压测</h2><h3 id="压测结果-2"><a href="#压测结果-2" class="headerlink" title="压测结果"></a>压测结果</h3><ul>
<li><p>200QPS, 80ms RT</p>
</li>
<li><p>300QPS，2000ms RT</p>
</li>
<li><p>结果与上轮相比，并没有显著提升。</p>
</li>
<li><p>根据日志分析，ramclient耗时已经趋于平稳，平均10ms以下，调度耗时又上来了。</p>
</li>
</ul>
<h3 id="其他指标-1"><a href="#其他指标-1" class="headerlink" title="其他指标"></a>其他指标</h3><ul>
<li>cpu: 利用率较高，780%+</li>
<li>mem: 内存占用量很低，总体稳定在34%左右。</li>
<li>网络： 总体流量在10Mbps，远远没有打到带宽上限。</li>
<li>磁盘： 没有频繁的磁盘IO</li>
<li>Java: 没有发生频繁的GC。</li>
</ul>
<h3 id="原因分析-2"><a href="#原因分析-2" class="headerlink" title="原因分析"></a>原因分析</h3><p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207042215103.png"><br>根据当时的线程堆栈分析，占用CPU量最大的就是8个lettuce线程，几乎把CPU时间片占满了。<br>同时搜索了相关问题 ，发现<a href="https://gitter.im/lettuce-io/Lobby?at=5de8f93446397c721c8ed8ed">不是个例</a>。<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207042215636.png"></p>
<h3 id="优化方案-2"><a href="#优化方案-2" class="headerlink" title="优化方案"></a>优化方案</h3><ul>
<li>Redis:<ul>
<li>使用Jedis作为Client，并且调大Jedis对应的连接池数量</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">spring.redis.client-type</span><span class="token punctuation">=</span><span class="token value attr-value">jedis</span>
<span class="token key attr-name">spring.redis.jedis.pool.max-active</span><span class="token punctuation">=</span><span class="token value attr-value">100</span>
<span class="token key attr-name">spring.redis.jedis.pool.max-idle</span><span class="token punctuation">=</span><span class="token value attr-value">16</span>
<span class="token key attr-name">spring.redis.jedis.pool.max-wait</span><span class="token punctuation">=</span><span class="token value attr-value">10000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="第四轮压测"><a href="#第四轮压测" class="headerlink" title="第四轮压测"></a>第四轮压测</h2><h3 id="压测结果-3"><a href="#压测结果-3" class="headerlink" title="压测结果"></a>压测结果</h3><ul>
<li>300QPS，100ms RT</li>
<li>350QPS，200ms RT</li>
<li>400QPS，2000ms RT</li>
</ul>
<h3 id="其他指标-2"><a href="#其他指标-2" class="headerlink" title="其他指标"></a>其他指标</h3><ul>
<li>cpu: 利用率较高，780%+</li>
<li>mem: 内存占用量很低，总体稳定在34%左右。</li>
<li>网络： 总体流量在10Mbps，远远没有打到带宽上限。</li>
<li>磁盘： 没有频繁的磁盘IO</li>
<li>Java: 没有发生频繁的GC。</li>
</ul>
<h3 id="原因分析-3"><a href="#原因分析-3" class="headerlink" title="原因分析"></a>原因分析</h3><p>打印出了当时的线程栈信息，进行了详细的分析如下：</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>线程数量</th>
</tr>
</thead>
<tbody><tr>
<td>獲取Druid連接</td>
<td>442</td>
</tr>
<tr>
<td>歸還Druid連接</td>
<td>164</td>
</tr>
<tr>
<td>業務線程中Bind操作</td>
<td>107</td>
</tr>
<tr>
<td>Log4j打印</td>
<td>77</td>
</tr>
<tr>
<td>Jedis執行</td>
<td>2</td>
</tr>
</tbody></table>
<ul>
<li>大部分线程卡在Druid数据库连接池归还连接、获取连接的搶鎖阶段（lock()）</li>
<li>小部分线程由于bind()异步线程池队列满，导致占用了业务线程</li>
<li>最后一部分线程卡（blocked）在log4j打印日志</li>
</ul>
<h4 id="Druid连接池问题"><a href="#Druid连接池问题" class="headerlink" title="Druid连接池问题"></a>Druid连接池问题</h4><p>與 <a href="https://blog.csdn.net/beFocused/article/details/108533137">记一次Dubbo线程耗尽的问题-druid数据库连接池突发性能</a> 文中的問題一模一樣。</p>
<h4 id="异步线程队列满问题"><a href="#异步线程队列满问题" class="headerlink" title="异步线程队列满问题"></a>异步线程队列满问题</h4><p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207042216269.png"></p>
<p>隊列默認長度爲200，在200的長度滿了之後，使用的是<code>ThreadPoolExecutor.CallerRunsPolicy</code>, 即不再在異步線程裏執行，而是在caller線程中執行。<br>從而導致業務線程壓力進一步增大。</p>
<h4 id="Log4j日志问题"><a href="#Log4j日志问题" class="headerlink" title="Log4j日志问题"></a>Log4j日志问题</h4><p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207042216085.png"><br>也是比較經典的問題，使用Log2j的異步logger即可解決。</p>
<h3 id="优化方案-3"><a href="#优化方案-3" class="headerlink" title="优化方案"></a>优化方案</h3><ul>
<li><p>Druid优化： </p>
<ul>
<li>增大连接池中initial与max的连接数量</li>
<li>使用非公平锁，而不是默认的公平锁。具体参见<a href="https://mp.weixin.qq.com/s/RaiU9_ioWHvomZLLKuSuGw">有赞的压测记录</a>。<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">spring.datasource.druid.maxActive</span><span class="token punctuation">=</span><span class="token value attr-value">600</span>
<span class="token key attr-name">spring.datasource.druid.initialSize</span><span class="token punctuation">=</span><span class="token value attr-value">300</span>
<span class="token key attr-name">spring.datasource.druid.maxWait</span><span class="token punctuation">=</span><span class="token value attr-value">6000</span>
<span class="token key attr-name">spring.datasource.druid.minIdle</span><span class="token punctuation">=</span><span class="token value attr-value">300</span>
<span class="token key attr-name">spring.datasource.druid.poolPreparedStatements</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
<span class="token key attr-name">spring.datasource.druid.maxOpenPreparedStatements</span><span class="token punctuation">=</span><span class="token value attr-value">20</span>
<span class="token key attr-name">spring.datasource.druid.useUnfairLock</span><span class="token punctuation">=</span><span class="token value attr-value">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li><p>bind线程池优化：</p>
<ul>
<li>增大队列大小，从200增大到20000</li>
</ul>
</li>
<li><p>log4j优化：</p>
<ul>
<li>使用log4j2的asyncLogger。</li>
</ul>
</li>
</ul>
<h2 id="第五轮压测"><a href="#第五轮压测" class="headerlink" title="第五轮压测"></a>第五轮压测</h2><h3 id="压测结果-4"><a href="#压测结果-4" class="headerlink" title="压测结果"></a>压测结果</h3><ul>
<li>在600QPS时，RT基本稳定在40ms以下。</li>
<li>由于每次调用接口，都会调用一次ram鉴权接口，ram整体限制单个租户需要小于600qps；也担心把ram接口打挂或者被ram限流，因此不再继续压测。</li>
<li>按照其他指标推测，<mark> 理论上可以打到1000QPS+，即单机500QPS+ </mark></li>
<li>终于达标了！~ 撒花庆祝~~~</li>
</ul>
<h3 id="其他指标-3"><a href="#其他指标-3" class="headerlink" title="其他指标"></a>其他指标</h3><ul>
<li>cpu: 利用率较低，400%左右</li>
<li>mem: 内存占用量很低，总体稳定在34%左右。</li>
<li>网络： 总体流量在10Mbps，远远没有打到带宽上限。</li>
<li>磁盘： 没有频繁的磁盘IO</li>
<li>Java: 没有发生频繁的GC。</li>
</ul>
<h1 id="优化总结"><a href="#优化总结" class="headerlink" title="优化总结"></a>优化总结</h1><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>java</tag>
        <tag>dubbo</tag>
        <tag>perf-tunning</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>一些有意思的记录-4</title>
    <url>//2022-07-03-random-snippets/</url>
    <content><![CDATA[<p>五看: 看趋势, 看市场, 看客户, 看竞争, 看自己.</p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>soft-skills</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次分布式场景下状态机设计缺陷导致的问题</title>
    <url>//2022-07-06-state-machine-in-distributed-system/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><ul>
<li><p>为某个对象item建模, 有如下几种状态变迁, 在数据库中state字段记录:<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207072308671.png"></p>
</li>
<li><p>其中processing过程可能会持续时间较久, 10min左右</p>
</li>
<li><p>在服务端某个线程响应请求, 该对象处于processing过程中时, 服务器发布重启, 导致item状态一直卡在processing </p>
</li>
<li><p>而processing状态, <strong>本身是中间状态, 无法进行任何人肉干预&#x2F;操作</strong>, 从而导致只能临时提交数据订正, 将状态字段修改回”init”, 然后再执行一次process.</p>
</li>
</ul>
<h1 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h1><p>仔细思考了下, 发现设计的时候, 根本原因是对于中间状态没有做好处理, 如背景中介绍的服务重启的处理.<br>而<mark>在分布式场景下, 服务重启是by design需要被接受的.</mark><br>这里思考了下可能的几种处理方式:</p>
<h2 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h2><ul>
<li>如何区分状态机的中间状态与终态? </li>
<li>一条原则: <mark>终态-&gt;终态之间, 必须是可以人肉有入口触发的(而不是系统自动触发的); 必须是可重入的.</mark></li>
</ul>
<h2 id="方案1-状态机设计修改-把processing作为纯粹的中间状态"><a href="#方案1-状态机设计修改-把processing作为纯粹的中间状态" class="headerlink" title="方案1: 状态机设计修改: 把processing作为纯粹的中间状态"></a>方案1: 状态机设计修改: 把processing作为纯粹的中间状态</h2><ol>
<li><p>将processing从状态机中删除掉, 如下: <br/><br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207072351350.png"></p>
</li>
<li><p>使用 分布式锁&#x2F;db字段锁 来实现排他功能(即item同时只能被一个线程处理, 防止多个线程同时处理一个item导致死锁&#x2F;重复计算等问题).</p>
<ol>
<li>在item执行前, 加上锁+锁超时时间(如例子中的10min); 其他线程要执行时, 无法抢到该item的锁. </li>
<li>item执行完成之后, 状态修改为finished之后, 再释放掉item锁.</li>
<li>item执行异常中断(例如服务器重启, 线程crash等): 等待锁超时. 由于仍然是init状态(终态), 因此可以重新人肉触发, 新的线程抢到锁, 重新执行.</li>
<li>item执行失败: 线程里catch住异常, 主动释放掉该item锁. 由于仍然是init状态(终态), 因此可以重新人肉触发, 新的线程抢到锁, 重新执行.</li>
</ol>
</li>
<li><p>或者使用事务:(不过本例子中不适合, 因为10min太久了, 其他执行耗时较短30s以内的可以使用该方案)  </p>
<ol>
<li>item执行前开启事务;</li>
<li>执行后修改状态为finished, commit事务.</li>
<li>item执行异常中断(例如服务器重启, 线程crash等): 事务自动回滚. 由于仍然是init状态(终态), 因此可以重新人肉触发, 新的线程抢到锁, 重新执行.</li>
<li>item执行失败: 主动回滚事务. 由于仍然是init状态(终态), 因此可以重新人肉触发, 新的线程抢到锁, 重新执行.</li>
</ol>
</li>
</ol>
<h2 id="方案2-状态机设计修改-把processing作为纯粹的终态"><a href="#方案2-状态机设计修改-把processing作为纯粹的终态" class="headerlink" title="方案2: 状态机设计修改: 把processing作为纯粹的终态"></a>方案2: 状态机设计修改: 把processing作为纯粹的终态</h2><ol>
<li><p>需要设计从processing-&gt;finished&#x2F;init的人肉触发入口.<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207072354738.png"></p>
</li>
<li><p>如何防止多个线程同时触发该item从processing-&gt;finished&#x2F;init的变迁? 参见方案1中锁&#x2F;事务的方式</p>
</li>
</ol>
<h2 id="方案3-优雅停机"><a href="#方案3-优雅停机" class="headerlink" title="方案3: 优雅停机"></a>方案3: 优雅停机</h2><ol>
<li>在shutdown-hook里注册事件:<ol>
<li>将状态改回init. –&gt; required.</li>
<li>将worker线程interrupt掉. –&gt; optional, 因为即使不interrupt, 进程停止线程也会被回收.</li>
</ol>
</li>
<li>但该方案有很大的缺陷, 如果直接<code>kill -9</code>, 则shutdown-hook根本不会执行.</li>
</ol>
<h2 id="最终方案"><a href="#最终方案" class="headerlink" title="最终方案"></a>最终方案</h2><p>最终采用了方案2, 因为从状态机中删除掉一个终态, 对现有代码改造量太大了.</p>
<h1 id="其他思考"><a href="#其他思考" class="headerlink" title="其他思考"></a>其他思考</h1><ol>
<li>状态机设计的时候, 一定要慎重考虑哪些是终态, 哪些是中间状态. 不是说因为在某个状态持续时间较长(如例子中的processing), 就要作为终态. </li>
<li>状态机中每个终态之间, 必须考虑可重入性; 必须要保证能人肉触发终态之间的转化. 本文的例子就是反面教材, item卡在processing这个终态, 无法进行程序上的任何操作.</li>
</ol>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>learn-from-failure</tag>
        <tag>java</tag>
        <tag>good-design</tag>
        <tag>bad-design</tag>
        <tag>state-machine</tag>
        <tag>lock</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux网络之HTTP Proxy原理与实现分析</title>
    <url>//2022-07-10-linux-network-http-proxy/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在使用apache的HttpClient时(获取其他常用的httpclient), 经常会发现初始化时可以配置http proxy. 但有些疑问:</p>
<ol>
<li>在什么场景下需要使用http proxy?</li>
<li>具体http proxy怎么配置?</li>
<li>具体http proxy的实现原理是啥? 包括 httpClient 如何使用这个proxy? 具体的httpProxy怎么处理这种包?</li>
</ol>
<h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>docker</li>
<li>ubuntu</li>
</ul>
<h2 id="http-proxy-服务端部署"><a href="#http-proxy-服务端部署" class="headerlink" title="http proxy 服务端部署"></a>http proxy 服务端部署</h2><p>Nginx通常是作为反向代理, 但其实也可以作为正向代理使用:  <a href="https://github.com/reiz/nginx_proxy">nginx_proxy</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -d -p <span class="token number">9999</span>:8888 -v <span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/nginx_allowlist.conf:/usr/local/nginx/conf/nginx.conf reiz/nginx_proxy:0.0.3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="http-proxy-客户端配置"><a href="#http-proxy-客户端配置" class="headerlink" title="http proxy 客户端配置"></a>http proxy 客户端配置</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>httpclient<span class="token punctuation">.</span></span><span class="token class-name">HostConfiguration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>httpclient<span class="token punctuation">.</span></span><span class="token class-name">HttpClient</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>httpclient<span class="token punctuation">.</span>methods<span class="token punctuation">.</span></span><span class="token class-name">GetMethod</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>httpclient<span class="token punctuation">.</span>params<span class="token punctuation">.</span></span><span class="token class-name">HttpMethodParams</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpClientTest</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> ENCODING <span class="token operator">=</span> <span class="token string">"UTF-8"</span><span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"https://www.google.com"</span><span class="token punctuation">;</span>
        
        <span class="token class-name">HttpClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">HostConfiguration</span> hostConfiguration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HostConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        hostConfiguration<span class="token punctuation">.</span><span class="token function">setProxy</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        client<span class="token punctuation">.</span><span class="token function">setHostConfiguration</span><span class="token punctuation">(</span>hostConfiguration<span class="token punctuation">)</span><span class="token punctuation">;</span>
        client<span class="token punctuation">.</span><span class="token function">getParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setParameter</span><span class="token punctuation">(</span>
            <span class="token class-name">HttpMethodParams</span><span class="token punctuation">.</span>HTTP_CONTENT_CHARSET<span class="token punctuation">,</span> ENCODING<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">GetMethod</span> method <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetMethod</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">int</span> i <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">executeMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Code: "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">String</span> response <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getResponseBodyAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="客户端请求分析"><a href="#客户端请求分析" class="headerlink" title="客户端请求分析"></a>客户端请求分析</h2><p>不配置proxy:</p>
<ul>
<li>client —http get—&gt; <a href="http://www.google.com/">www.google.com</a></li>
</ul>
<p>配置了proxy:</p>
<ul>
<li>client — tcp —&gt; proxy — http get —&gt;  <a href="http://www.google.com/">www.google.com</a></li>
</ul>
<p>可以看到, client.executeMethod实质上是:</p>
<ol>
<li>client先与proxy建立了TCP连接.</li>
<li>然后将HTTP报文, 包括目标域名(即GET <a href="http://www.google.com/">http://www.google.com</a>), 作为TCP的output stream传给proxy</li>
<li>proxy解析tcp报文, 获取到真正的目标域名, 查找DNS获取到google.com的ip地址.</li>
<li>proxy与google.com建立TCP连接, 发送报文body等.</li>
</ol>
<p>这种也叫: relay, 即中继.</p>
<h2 id="实际连接分析"><a href="#实际连接分析" class="headerlink" title="实际连接分析"></a>实际连接分析</h2><h3 id="host上，-LISTEN了9999端口"><a href="#host上，-LISTEN了9999端口" class="headerlink" title="host上， LISTEN了9999端口"></a>host上， LISTEN了9999端口</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">davywalker@davywalker-ThinkPad-X1-Carbon-4th:~/PlayGround/docker/nginx-forward-proxy$ <span class="token function">netstat</span> -natp <span class="token operator">|</span> <span class="token function">fgrep</span> <span class="token number">9999</span>
<span class="token punctuation">(</span>Not all processes could be identified, non-owned process info
 will not be shown, you would have to be root to see it all.<span class="token punctuation">)</span>
tcp        <span class="token number">0</span>      <span class="token number">0</span> <span class="token number">0.0</span>.0.0:9999            <span class="token number">0.0</span>.0.0:*               LISTEN      -                   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="容器内部，-LISTEN了8888端口"><a href="#容器内部，-LISTEN了8888端口" class="headerlink" title="容器内部， LISTEN了8888端口"></a>容器内部， LISTEN了8888端口</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@84129a407795:/app<span class="token comment"># netstat -nat | fgrep 8888</span>
tcp        <span class="token number">0</span>      <span class="token number">0</span> <span class="token number">0.0</span>.0.0:8888            <span class="token number">0.0</span>.0.0:*               LISTEN     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="在Host上某个java进程发起一个HTTP请求之后"><a href="#在Host上某个java进程发起一个HTTP请求之后" class="headerlink" title="在Host上某个java进程发起一个HTTP请求之后"></a>在Host上某个java进程发起一个HTTP请求之后</h3><ul>
<li><p>HOST上 Java 进程</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">davywalker@davywalker-ThinkPad-X1-Carbon-4th:~/Downloads/Clash-Linux$ <span class="token function">netstat</span> -natp <span class="token operator">|</span> <span class="token function">fgrep</span> <span class="token number">9999</span>
<span class="token punctuation">(</span>Not all processes could be identified, non-owned process info
 will not be shown, you would have to be root to see it all.<span class="token punctuation">)</span>
tcp        <span class="token number">0</span>      <span class="token number">0</span> <span class="token number">0.0</span>.0.0:9999            <span class="token number">0.0</span>.0.0:*               LISTEN      -                   
tcp        <span class="token number">0</span>      <span class="token number">0</span> <span class="token number">127.0</span>.0.1:9999          <span class="token number">127.0</span>.0.1:42261         TIME_WAIT   -                   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>容器内部</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@84129a407795:/app<span class="token comment"># netstat -nat | fgrep 8888</span>
tcp        <span class="token number">0</span>      <span class="token number">0</span> <span class="token number">0.0</span>.0.0:8888            <span class="token number">0.0</span>.0.0:*               LISTEN     
tcp        <span class="token number">0</span>      <span class="token number">0</span> <span class="token number">172.17</span>.0.4:8888         <span class="token number">172.17</span>.0.1:51960        TIME_WAIT  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
</ul>
<p>TODO:</p>
<ul>
<li>在访问<code>http://www.google.com</code>时，Java测试代码正常返回结果。</li>
<li>在访问<code>http://www.baidu.com</code>时， Java会出现如下异常，理论上由于不在nginx的白名单里应该被block的，但为啥会抛出异常？<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>IOException</span><span class="token operator">:</span> <span class="token class-name">Stream</span> closed
	at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>BufferedInputStream</span><span class="token punctuation">.</span><span class="token function">getBufIfOpen</span><span class="token punctuation">(</span><span class="token class-name">BufferedInputStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">170</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>BufferedInputStream</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">BufferedInputStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">336</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>httpclient<span class="token punctuation">.</span></span>WireLogInputStream</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">WireLogInputStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">69</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>httpclient<span class="token punctuation">.</span></span>ContentLengthInputStream</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">ContentLengthInputStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">170</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>FilterInputStream</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">FilterInputStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">133</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>httpclient<span class="token punctuation">.</span></span>AutoCloseInputStream</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">AutoCloseInputStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">108</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>FilterInputStream</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">FilterInputStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">107</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>httpclient<span class="token punctuation">.</span></span>AutoCloseInputStream</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">AutoCloseInputStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">127</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>httpclient<span class="token punctuation">.</span></span>HttpMethodBase</span><span class="token punctuation">.</span><span class="token function">getResponseBody</span><span class="token punctuation">(</span><span class="token class-name">HttpMethodBase</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">690</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>httpclient<span class="token punctuation">.</span></span>HttpMethodBase</span><span class="token punctuation">.</span><span class="token function">getResponseBodyAsString</span><span class="token punctuation">(</span><span class="token class-name">HttpMethodBase</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">803</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">edu<span class="token punctuation">.</span>xmu<span class="token punctuation">.</span>test<span class="token punctuation">.</span>javaweb<span class="token punctuation">.</span>httpclient<span class="token punctuation">.</span></span>HttpClientProxyTest</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token class-name">HttpClientProxyTest</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">31</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><h1 id="再回到实践中"><a href="#再回到实践中" class="headerlink" title="再回到实践中"></a>再回到实践中</h1><h2 id="实践1：-DNS劫持-正向代理过滤域名"><a href="#实践1：-DNS劫持-正向代理过滤域名" class="headerlink" title="实践1： DNS劫持+正向代理过滤域名"></a>实践1： DNS劫持+正向代理过滤域名</h2><p>通过DNS劫持，将所有HTTP请求都定位到正向代理中，在正向代理里进行代理域名的黑白名单控制。</p>
<ul>
<li>缺点：<ul>
<li>DNS劫持可以被手动禁用，也可以手动指定<code>8.8.8.8</code>绕过DNS服务器（当然如果DNS请求直接都被劫持，）。</li>
<li>只针对HTTP请求有效，如果知道目标的IP, 可以通过IP直连上。</li>
</ul>
</li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>linux</tag>
        <tag>iaas</tag>
        <tag>network</tag>
        <tag>cloud-computing</tag>
        <tag>http-proxy</tag>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>由ZK的SID/ZXID与snowflake算法引发的ID生成算法探讨</title>
    <url>//2022-07-11-zk-uuid-gen/</url>
    <content><![CDATA[<h1 id="几种生成算法"><a href="#几种生成算法" class="headerlink" title="几种生成算法"></a>几种生成算法</h1><h2 id="zk里的sid生成算法"><a href="#zk里的sid生成算法" class="headerlink" title="zk里的sid生成算法"></a>zk里的sid生成算法</h2><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><ul>
<li>一个long类型, 占用64位</li>
<li>由ZK服务端生成的.</li>
<li>当客户端与ZK服务端建立好TCP连接(或者说应用层连接)之后, 生成.</li>
</ul>
<h3 id="生成规则"><a href="#生成规则" class="headerlink" title="生成规则"></a>生成规则</h3><ol>
<li>获取当前时间(2013-10-04 21:59:42)的毫秒表示：1380895182327 用二进制表示为：</li>
</ol>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207122157745.png"></p>
<ol start="2">
<li>将步骤1中的数值左移24位，得到：</li>
</ol>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207122157302.png"></p>
<ol start="3">
<li>右移8位：</li>
</ol>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207122158285.png"></p>
<ol start="4">
<li>添加机器标识: SID. id 表示配置在myid文件中的值，通常是整数1、2、3等,假设id为2：</li>
</ol>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207122158613.png"></p>
<ol start="5">
<li>将步骤3和步骤4得到的两个64位表示的数值进行<code>或</code>操作：</li>
</ol>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207122158687.png"></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">initializeNextSessionId</span><span class="token punctuation">(</span><span class="token keyword">long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">long</span> nextSid<span class="token punctuation">;</span>
    nextSid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">currentElapsedTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">>>></span> <span class="token number">8</span><span class="token punctuation">;</span>
    nextSid <span class="token operator">=</span> nextSid <span class="token operator">|</span> <span class="token punctuation">(</span>id <span class="token operator">&lt;&lt;</span> <span class="token number">56</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nextSid <span class="token operator">==</span> <span class="token class-name">EphemeralType</span><span class="token punctuation">.</span>CONTAINER_EPHEMERAL_OWNER<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token operator">++</span>nextSid<span class="token punctuation">;</span>  <span class="token comment">// this is an unlikely edge case, but check it just in case</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> nextSid<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="详细分析"><a href="#详细分析" class="headerlink" title="详细分析"></a>详细分析</h3><p>{8位, 当前主机的myid} {40位, 毫秒时间戳} {16位, 单host递增序列号}<br>ZK主机启动时, 会把前 48位初始化好, 接下来每次有client链接到该host, 则后16位进行递增.</p>
<h3 id="线上样例"><a href="#线上样例" class="headerlink" title="线上样例"></a>线上样例</h3><p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207122158988.png"></p>
<p>例如, sid &#x3D; 0x3 518ae13bc4 16e8 本质上能拆分成:</p>
<ul>
<li>前8位: 0x3, 代表当前myid&#x3D;3, 是整个ZK集群的第3台服务器.</li>
<li>中间40位: 518ae13bc4, 代表初始化时时间戳. 由于移位时截断了最高位1, 因此实际的时间戳是 1518ae13bc4, 转成10进制1449733995460, 按照毫秒数转成时间戳2015-12-10 15:53:15, 可以知道该host启动是在这个时间点.</li>
<li>后16位: 16e8, 转成10进制, 5864, 代表是第5864个连接</li>
</ul>
<h3 id="碰撞分析"><a href="#碰撞分析" class="headerlink" title="碰撞分析"></a>碰撞分析</h3><p>思考SID产生规则, 是否有碰撞风险?</p>
<ol>
<li>前8位代表主机位, 最大支持256个主机, 如果集群有上千台服务器, 这样必然会重复, 但这样会导致碰撞么? –&gt; 不太会<ol>
<li>只要能保证前48位不重复, 即可以保证sid不碰撞. 因为后16位是单host粒度递增.</li>
</ol>
</li>
<li>前48位如何碰撞?<ol>
<li>即前8位相同的主机 myid&#x3D;1 (二进制 00000001) 与 myid&#x3D;257 (100000001)</li>
<li>在同一毫秒同时启动, 从而中间40位相同</li>
<li>而在实际小规模集群情况下, 基本很难产生.</li>
</ol>
</li>
<li>单机上, 后16位如果溢出怎么办?<ol>
<li>即单机上client反复创建session, 超过了2^16&#x3D;65535, 必然会重复!</li>
<li>经试验, 发现当后16位满了之后, 会向前边借位. 例如:<ol>
<li>单机上之前的sid: 0x3 764c3db1d3 768e</li>
<li>后续频繁创建session, 后16位满了, 变成 0x3 764c3db1d4 00e1</li>
</ol>
</li>
<li>看代码: 无脑地对sid做+1操作. 即使这样, 也不太会导致 中间40位碰撞. (有这个可能, 例如当前session频繁创建, 变成了 0x3 ffffffffff 768e, 接下来服务器在 ffffffffff 这个毫秒点启动, 但当前session未失效, 重新连接上去了.  从而sid从 0x3 ffffffffff 0000开始递增, 有可能重新生成了一个 0x3 ffffffffff 768e 的sid)</li>
</ol>
</li>
</ol>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207122159565.png"></p>
<h2 id="zk里的zxid生成算法"><a href="#zk里的zxid生成算法" class="headerlink" title="zk里的zxid生成算法"></a>zk里的zxid生成算法</h2><h3 id="zxid组成"><a href="#zxid组成" class="headerlink" title="zxid组成"></a>zxid组成</h3><blockquote>
<p>The zxid has two parts: the epoch and a counter. <br/><br>In our implementation the zxid is a 64-bit number. <br/><br>We use the high order 32-bits for the epoch and the low order 32-bits for the counter.</p>
</blockquote>
<p>64位的long类型, 包含两部分: 前32位代表epoch(即选举次数); 后32位代表counter(即该zk集群中的update操作的次数, 基本是单调递增的).<br>但实际这样设计是有缺陷的:</p>
<ul>
<li>在实际场景中, quorum一般都是在较为稳定的内网环境下, 不太会因为网络问题导致发生failover选主切换; 因此epoch使用32位, 支持40亿次选举, 没啥必要.</li>
<li>而实际counter增长是比较迅猛的, 在支持1000qps的系统中, 50天左右counter就会溢出.</li>
<li>而counter溢出会导致发生一次强制选主, 从而把counter清零, 把epoch+1;</li>
<li>而在3.3.5版本之前, counter溢出不会选主, 存在bug, 导致zk集群整体不可用. <a href="https://issues.apache.org/jira/browse/ZOOKEEPER-1277">servers stop serving when lower 32bits of zxid roll over</a></li>
</ul>
<h3 id="zxid生成"><a href="#zxid生成" class="headerlink" title="zxid生成"></a>zxid生成</h3><ul>
<li>zxid必然是由leader生成, 保证单调递增, 不能由客户端生成.</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> epoch <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> counter <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> zxid <span class="token operator">=</span> epoch <span class="token operator">&lt;&lt;</span> <span class="token number">32</span> <span class="token operator">|</span> counter<span class="token punctuation">;</span>
<span class="token comment">// 新的update操作</span>
zxid<span class="token operator">++</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="zxid使用情况"><a href="#zxid使用情况" class="headerlink" title="zxid使用情况"></a>zxid使用情况</h3><p>可以使用如下脚本判断后32位使用量, 如果结果&gt;0.8, 代表使用量已经超过80%, 代表有风险.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> srvr <span class="token operator">|</span> <span class="token function">nc</span> <span class="token number">127.0</span>.0.1 <span class="token number">32188</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'/Zxid/&#123;printf "%f\n", and(strtonum($NF),0xffffffff)/2^32&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


<h2 id="Snowflake-ID生成算法"><a href="#Snowflake-ID生成算法" class="headerlink" title="Snowflake ID生成算法"></a>Snowflake ID生成算法</h2><h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207122159430.png"></p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul>
<li>41位时间戳, 标识的时间范围是?</li>
</ul>
<p>1970-01-01 08:00:00 ~ 2039-09-07 23:47:35</p>
<blockquote>
<p>41位时间截不是存储当前时间的时间截，而是存储时间截的差值（当前时间截 - 开始时间截) 得到的值，这里的开始时间截，一般是我们的id生成器开始使用的时间，由我们程序来指定的（如下面程序IdWorker类的startTime属性）。41位的时间截，可以使用69年</p>
</blockquote>
<ul>
<li>10位机器id, 标识的机器数量范围是:</li>
</ul>
<p>1024 台, 5位datacenterId和 5位workerId</p>
<ul>
<li>12位序列号</li>
</ul>
<h3 id="实际场景"><a href="#实际场景" class="headerlink" title="实际场景"></a>实际场景</h3><p>RocketMQ, 消息ID是使用snowflake算法生成, 是由客户端产生.</p>
<ul>
<li>客户端如何知道自己的datacenterId?</li>
<li>可以通过配置, 也可以如下, 通过本机网卡的MAC生成, 参照：<a href="https://github.com/dromara/hutool/blob/a9310c2d305acac617ca656ea6ffc3be6cc48a4c/hutool-core/src/main/java/cn/hutool/core/util/IdUtil.java#L240">IdUtil.java</a></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 获取数据中心ID&lt;br>
 * 数据中心ID依赖于本地网卡MAC地址。
 * &lt;p>
 * 此算法来自于mybatis-plus#Sequence
 * &lt;/p>
 *
 * @param maxDatacenterId 最大的中心ID
 * @return 数据中心ID
 * @since 5.7.3
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">getDataCenterId</span><span class="token punctuation">(</span><span class="token keyword">long</span> maxDatacenterId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>maxDatacenterId <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"maxDatacenterId must be > 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>maxDatacenterId <span class="token operator">==</span> <span class="token class-name">Long</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        maxDatacenterId <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">long</span> id <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mac <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span><span class="token punctuation">&#123;</span>
        mac <span class="token operator">=</span> <span class="token class-name">NetUtil</span><span class="token punctuation">.</span><span class="token function">getLocalHardwareAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UtilException</span> ignore<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">// ignore</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> mac<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0x000000FF</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> mac<span class="token punctuation">[</span>mac<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">0x0000FF00</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> mac<span class="token punctuation">[</span>mac<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">6</span><span class="token punctuation">;</span>
        id <span class="token operator">=</span> id <span class="token operator">%</span> <span class="token punctuation">(</span>maxDatacenterId <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> id<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>客户端如何知道自己的工作机器ID? </li>
<li>根据进程PID与datacenterId生成, 参照：<a href="https://github.com/dromara/hutool/blob/a9310c2d305acac617ca656ea6ffc3be6cc48a4c/hutool-core/src/main/java/cn/hutool/core/util/IdUtil.java#L240">IdUtil.java</a></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 获取机器ID，使用进程ID配合数据中心ID生成&lt;br>
 * 机器依赖于本进程ID或进程名的Hash值。
 *
 * &lt;p>
 * 此算法来自于mybatis-plus#Sequence
 * &lt;/p>
 *
 * @param datacenterId 数据中心ID
 * @param maxWorkerId  最大的机器节点ID
 * @return ID
 * @since 5.7.3
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">getWorkerId</span><span class="token punctuation">(</span><span class="token keyword">long</span> datacenterId<span class="token punctuation">,</span> <span class="token keyword">long</span> maxWorkerId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">final</span> <span class="token class-name">StringBuilder</span> mpid <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mpid<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>datacenterId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
        mpid<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">RuntimeUtil</span><span class="token punctuation">.</span><span class="token function">getPid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UtilException</span> igonre<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//ignore</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">/*
     * MAC + PID 的 hashcode 获取16个低位
     */</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>mpid<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span>maxWorkerId <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="aws中资源ID生成算法"><a href="#aws中资源ID生成算法" class="headerlink" title="aws中资源ID生成算法"></a>aws中资源ID生成算法</h2><h3 id="方案1-Base36"><a href="#方案1-Base36" class="headerlink" title="方案1: Base36"></a>方案1: Base36</h3><p>代码如下, 优点是不需要占位符, 可以直接用<code>ALPHABET</code>甚至可以修改<code>ALPHABET</code>的顺序达到简单加密的效果.</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Base36Test</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">// 26小写+26大写+10数字=62</span>
    <span class="token comment">//public static String ALPHABET = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";</span>
    <span class="token comment">// 26小写+10数字=36</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> ALPHABET <span class="token operator">=</span> <span class="token string">"0123456789abcdefghijklmnopqrstuvwxyz"</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">encoding</span><span class="token punctuation">(</span><span class="token keyword">long</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"num must be greater than 0."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>

        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> num <span class="token operator">/=</span> <span class="token number">36</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ALPHABET<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">decoding</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"str must not be empty."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">long</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            result <span class="token operator">+=</span> ALPHABET<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> dcId <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> izId <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

        <span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> encoding <span class="token operator">=</span> <span class="token class-name">Base36Test</span><span class="token punctuation">.</span><span class="token function">encoding</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>encoding<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//int idx = (int)(Math.random() * 1024);</span>
        <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        encoding <span class="token operator">=</span> <span class="token class-name">Base36Test</span><span class="token punctuation">.</span><span class="token function">encoding</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>encoding<span class="token punctuation">)</span><span class="token punctuation">;</span>

        encoding <span class="token operator">=</span> <span class="token class-name">Base36Test</span><span class="token punctuation">.</span><span class="token function">encoding</span><span class="token punctuation">(</span><span class="token number">1023</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>encoding<span class="token punctuation">)</span><span class="token punctuation">;</span>
        encoding <span class="token operator">=</span> <span class="token class-name">Base36Test</span><span class="token punctuation">.</span><span class="token function">encoding</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>encoding<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="方案2-Base64"><a href="#方案2-Base64" class="headerlink" title="方案2: Base64"></a>方案2: Base64</h3><p>缺点是会有<code>=</code>占位符.</p>
<h1 id="时钟回拨问题"><a href="#时钟回拨问题" class="headerlink" title="时钟回拨问题"></a>时钟回拨问题</h1><ul>
<li>zk里的sid不太会有时钟回拨问题, 是因为时间戳是机器启动的时候生成的. 除非回拨时间特别长, 刚好回拨之后机器又重启了, 拿到了之前那个时间戳. 但考虑到实际场景, 实际不太会发生.<ul>
<li>机器重启不会那么频繁, 只会在启动时生成</li>
<li>时钟回拨, 一般都是亚秒级别的回拨</li>
</ul>
</li>
<li>rocketmq里snowflake, 由于是客户端每次生成时实时获取的时间戳, 因此即使回拨了几毫秒, 在生成ID速度非常快的情况下, 也有可能重复. 如何解决?<ul>
<li>比较挫的方案, 关闭ntp</li>
<li>比较好的方案: 当回拨时间小于15ms，就等时间追上来之后继续生成。</li>
</ul>
<ol>
<li>更好的方案, 当时间大于15ms时间我们通过<strong>更换workid</strong>来产生之前都没有产生过的来解决回拨问题。</li>
<li>最好的方案: 如下修改算法, 可以找2bit位作为时钟回拨位，发现有时钟回拨就将回拨位加1，达到最大位后再从0开始进行循环。</li>
</ol>
</li>
</ul>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207122159865.png"></p>
<h1 id="方案比较"><a href="#方案比较" class="headerlink" title="方案比较"></a>方案比较</h1><ul>
<li><p>相同点: </p>
<ul>
<li>都使用long类型, 占用64位</li>
<li>都希望既能尽量减少碰撞, 又能反映递增趋势</li>
<li>组成结构都是: <code>主机编号+时间戳+递增编号</code></li>
</ul>
</li>
<li><p>差异点:</p>
<ul>
<li>时间戳: <ul>
<li>sid时间戳占用40位(完整的应该是41位, 但默认截断了最高位1); 而snowflake时间戳占用41位, 相对时间范围是79年, 绝对时间到2039年. </li>
<li>sid的时间戳, 是zk主机启动起来的时间戳, 之后在下次启动之前, 就不再变化了.</li>
<li>snowflake的时间戳, 是client相对于某个时间点的相对时间; 且是生成ID的当前时间, 下一个毫秒这个时间戳会变化.</li>
</ul>
</li>
</ul>
</li>
<li><p>其他</p>
<ul>
<li>zk的算法, 但单host增数量是65535(实际可以借40位, 即上千亿, 但有碰撞风险了), 适用于长连场景, 即session不会频繁创建, 从而导致后16位递增那么快.</li>
<li>snowflake算法, 支持单机每毫秒产生 2^12 &#x3D; 4096 个ID, 适用于创建ID非常频繁的场景.</li>
<li>假设, 用zk的算法来生成snowflake的id:<ul>
<li>如果还是机器启动时生成时间戳位, 那单机只能生成 2^16 &#x3D; 65535 个ID, 之后就只能借时间戳的位了, 可能会重复了!</li>
</ul>
</li>
<li>假设, 用snowflake来生成zk的sid: <ul>
<li>貌似没啥问题.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="其他总结"><a href="#其他总结" class="headerlink" title="其他总结"></a>其他总结</h1><ol>
<li>sid, snowflakeID 本质上都是分布式ID生成, 需要保障几点:<ol>
<li>局部, 全局 唯一</li>
<li>趋势递增. (这点是UUID无法达到的效果, 因此不使用UUIDGen)</li>
</ol>
</li>
</ol>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h1><ul>
<li><a href="https://www.cnblogs.com/haoxinyue/p/5208136.html">https://www.cnblogs.com/haoxinyue/p/5208136.html</a></li>
<li><a href="https://www.cnblogs.com/jiangxinlingdu/p/8440413.html">https://www.cnblogs.com/jiangxinlingdu/p/8440413.html</a></li>
<li><a href="https://xie.infoq.cn/article/ed9b31c014342fd469627d42d">https://xie.infoq.cn/article/ed9b31c014342fd469627d42d</a></li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>zookeeper</tag>
        <tag>distributed-system</tag>
        <tag>uuid</tag>
        <tag>snowflake</tag>
        <tag>sid</tag>
      </tags>
  </entry>
  <entry>
    <title>从GitHub CLI禁止用户名密码登录引发的思考与总结</title>
    <url>//2022-07-23-github-token-login/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在本地CLI中push github代码时, 要求输入用户名密码, 但输入密码之后, 提示禁止使用密码登录.</p>
<ul>
<li>根据提示配置了半天SSH免登, 结果发现并不生效, push时仍然让输入账号名密码.</li>
<li>后续根据提示, 在<a href="https://github.com/settings/tokens">GitHub页面新申请了Token</a>, 然后使用 用户名+Token 登录就可以了.<br>从而引发了诸多疑问与思考.</li>
</ul>
<h1 id="GitHub访问几种方式"><a href="#GitHub访问几种方式" class="headerlink" title="GitHub访问几种方式"></a>GitHub访问几种方式</h1><h2 id="方案1-SSH方式"><a href="#方案1-SSH方式" class="headerlink" title="方案1: SSH方式"></a>方案1: SSH方式</h2><h3 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h3><p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207242155452.png"></p>
<p>这种方式, 可以通过配置SSH免登即可.</p>
<h3 id="如何支持不同Host采用不同SSHKey"><a href="#如何支持不同Host采用不同SSHKey" class="headerlink" title="如何支持不同Host采用不同SSHKey?"></a>如何支持不同Host采用不同SSHKey?</h3><p>如果在本地, 既需要配置gitee的SSH免登, 又需要配置github的SSH免登, 有需要配置其他Host的SSH免登, 怎么能让不同的Host使用不同的公私钥对?</p>
<ul>
<li>配置样例如下:</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> ~/.ssh/config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-- 为 git@gitee.com:/xxx ssh地址配置
Host gitee.com
  HostName gitee.com
  AddKeysToAgent <span class="token function">yes</span>
  UseKeychain <span class="token function">yes</span>
  IdentityFile ~/.ssh/id_rsa

-- 为 git@github.com:xxx/xxx ssh地址配置
Host github.com
  HostName github.com
  AddKeysToAgent <span class="token function">yes</span>
  UseKeychain <span class="token function">yes</span>
  IdentityFile ~/.ssh/id_ed25519

-- 其他地址默认ssh地址配置
Host *
  AddKeysToAgent <span class="token function">yes</span>
  UseKeychain <span class="token function">yes</span>
  IdentityFile ~/.ssh/id_ed25519<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>验证是否配置正确:</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>davywalker@davywalkers-MacBook-Pro ~<span class="token punctuation">]</span>$ <span class="token function">ssh</span> git@github.com
PTY allocation request failed on channel <span class="token number">1</span>
Hi DavyJones2010<span class="token operator">!</span> You've successfully authenticated, but GitHub does not provide shell access.
Connection to github.com closed.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>


<h2 id="方案2-HTTPS方式"><a href="#方案2-HTTPS方式" class="headerlink" title="方案2: HTTPS方式"></a>方案2: HTTPS方式</h2><h3 id="配置方式-1"><a href="#配置方式-1" class="headerlink" title="配置方式"></a>配置方式</h3><p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207242155904.png"></p>
<p>这种方式, 即背景中的案例, 必须通过 用户名+Token方式 登录, 即CLI中密码字段, 不要输入账号的密码, 而是输入Token</p>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207242158549.png"></p>
<p>搜索了下, <strong>从2021年8月13日开始, GitHub已经禁止了 用户名+密码方式 登录</strong></p>
<blockquote>
<p>From August 13, 2021, <br/><br>GitHub is no longer accepting account passwords when authenticating Git operations. <br/><br>You need to add a PAT (Personal Access Token) instead, <br/><br>and you can follow the below method to add a PAT on your system. <br/></p>
</blockquote>
<h3 id="GitHub密码存储位置"><a href="#GitHub密码存储位置" class="headerlink" title="GitHub密码存储位置"></a>GitHub密码存储位置</h3><p>在使用SourceTree的时候, 由于repo使用的也是HTTPS, 因此也提示输入 用户名+密码, 由于密码方式被禁用, 因此后续再push这个repo, 会一直报禁止密码登录错误.<br>但也<mark>找不到修改&#x2F;删除该密码的位置.</mark></p>
<p>查了下资料, 不同的操作系统, 甚至同样操作系统的不同的版本, 存储方式都不同. 这里以 <a href="https://stackoverflow.com/questions/42584934/where-is-my-remote-git-repository-password-stored-on-the-local-machine">MacOS Monterey 12.3.1版本</a> 为例:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">davywalkerdeMacBook-Pro:~ davywalker$ <span class="token function">git</span> config credential.helper
osxkeychain<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>可以看出来是由keychain进行的管理, 在Mac的 <code>Applications -&gt; Utilties -&gt; Keychain Access</code> </p>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207252101640.png"></p>
<ul>
<li>可以看到SourceTree应用保存的GitHub Repo密码.</li>
<li>同时也可以看到IntelliJ IDEA保存的GitHub Repo密码, 通过显示repo密码发现, 这个密码字段其实就是签发给Intellij的 PAT(Personal Access Token)</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>由于<font color='red'>本地配置的remote repo是HTTPS方式, 因此通过配置SSH免登方式必然是无效的.</font> </p>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202207242202265.png"></p>
<h1 id="登录安全思考"><a href="#登录安全思考" class="headerlink" title="登录安全思考"></a>登录安全思考</h1><h2 id="为啥禁止CLI-HTTPS方式通过用户名密码登录"><a href="#为啥禁止CLI-HTTPS方式通过用户名密码登录" class="headerlink" title="为啥禁止CLI HTTPS方式通过用户名密码登录?"></a>为啥禁止CLI HTTPS方式通过用户名密码登录?</h2><p>应该是担心密码泄露.<br>但会在哪种情况下泄露密码?</p>
<ol>
<li>存储过程: 为了防止每次push都重复输入, git client应该把用户名密码存储到本机某个位置了. </li>
<li>传输过程: HTTPS中间人攻击, 发生概率就较小了<br>所以应该还是密码存储的风险.<br>通过页面登录, 有交互方式可以实现MFA, 但<mark>CLI方式无法进行交互从而实现MFA.</mark><br>这样从而减弱了安全性.</li>
</ol>
<h2 id="为啥通过用户名-Token方式登录-就支持呢"><a href="#为啥通过用户名-Token方式登录-就支持呢" class="headerlink" title="为啥通过用户名+Token方式登录, 就支持呢"></a>为啥通过用户名+Token方式登录, 就支持呢</h2><h3 id="几种类型的Token"><a href="#几种类型的Token" class="headerlink" title="几种类型的Token"></a>几种类型的Token</h3><ul>
<li>密码: 时间维度是永久有效, 不可召回. 权限范围是无限的(除非子账号). 可能是有规律的.</li>
<li>SecretKey: 时间维度通常是永久有效(但支持设定长期), 可以召回. 权限范围是有限的. 通常是UUID等无规律的.</li>
<li>RefreshToken: 时间维度是较长维度(例如可以60天), 可以召回. 权限范围是有限的. 通常是UUID等无规律的.</li>
<li>AccessToken: 时间维度是较短维度(例如4个小时), 可以召回(但一般不召回, 通过召回RefreshToken实现). 权限范围是优先的. 通常是UUID等无规律的.</li>
</ul>
<h3 id="几种登录方式"><a href="#几种登录方式" class="headerlink" title="几种登录方式"></a>几种登录方式</h3><ul>
<li>方式1: 在网页端, 通常选择密码方式登录, 但需要开启MFA以加固安全. 以该方式作为安全性最强, 权限最大的方式. </li>
<li>方式2: 在服务端SDK里, 通常选择SecretKey方式. SecretKey如果泄露, 可以通过方式1登录, 然后撤销SecretKey的有效性, 重新签发新的SecretKey. </li>
<li>方式3: 在移动端SDK里, 通常会签发一个RefreshToken+AccessToken. 每次AccessToken过期之后, 重新通过RefreshToken调用API申请新的AccessToken.</li>
</ul>
<p>因此在GitHub CLI方式登录, 其实就是从方式1(但不带MFA)降级到方案2, 一是限制权限范围, 二是可以随时撤销. </p>
<h2 id="其他解决方案"><a href="#其他解决方案" class="headerlink" title="其他解决方案"></a>其他解决方案</h2><ul>
<li>也可以将remote repo切换成<a href="https://docs.github.com/en/get-started/getting-started-with-git/managing-remote-repositories#switching-remote-urls-from-https-to-ssh">SSH方式</a>, 并配置SSH免登实现.</li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>distributed-system</tag>
        <tag>login</tag>
        <tag>token</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins Alibaba Cloud 插件开发总结</title>
    <url>//2022-08-07-jenkins-cloud-plugin-dev-summary/</url>
    <content><![CDATA[<h1 id="Cloud框架的架构与概念"><a href="#Cloud框架的架构与概念" class="headerlink" title="Cloud框架的架构与概念"></a>Cloud框架的架构与概念</h1><hr>
<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><h3 id="ER图"><a href="#ER图" class="headerlink" title="ER图"></a>ER图</h3><pre class="mermaid">erDiagram
    Jenkins ||--o{ hudson_slaves_Cloud : contains
    hudson_slaves_Cloud {
        id name
    }
    hudson_slaves_Cloud ||--|{ SlaveTemplate : contains
    SlaveTemplate {
        id templateName
    }
    SlaveTemplate ||--o{ AlibabaEcsSpotFollower : "provision"
    AlibabaEcsSpotFollower {
        id ecsInstanceId
    }
    AlibabaEcsSpotFollower ||--|| SlaveComputer : createComputer
    SlaveComputer {
        id 
    }</pre>

<h3 id="各Entity关联关系"><a href="#各Entity关联关系" class="headerlink" title="各Entity关联关系"></a>各Entity关联关系</h3><p>&#x2F;&#x2F; TODO: 待补充完善.</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Jenkins</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h2 id="noDelayProvisioning"><a href="#noDelayProvisioning" class="headerlink" title="noDelayProvisioning"></a>noDelayProvisioning</h2><ul>
<li>当任务队列里有任务时, 自动会在 instanceFloor与instanceCap 之间进行弹性创建node.</li>
</ul>
<p>&#x2F;&#x2F; TODO: 待补充完善.</p>
<h1 id="其他重要信息"><a href="#其他重要信息" class="headerlink" title="其他重要信息"></a>其他重要信息</h1><p>对象序列化后XML文件路径:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token variable">$&#123;proj_path&#125;</span>/alibabacloud-ecs-plugin/work/config.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h1 id="插件开发的经验"><a href="#插件开发的经验" class="headerlink" title="插件开发的经验"></a>插件开发的经验</h1><hr>
<h2 id="规格选择"><a href="#规格选择" class="headerlink" title="规格选择"></a>规格选择</h2><p>在规格选择栏, 设计的时候为了简便用户选择:</p>
<ol>
<li>下拉框方式, 方便不熟悉ECS的用户选择</li>
<li>默认使用2C8G, 即独享型最小规格. 从而减少下拉框规格量, 便于入门.</li>
</ol>
<p>但在实际企业级场景下, 用户</p>
<ol>
<li>需要有大规格, 基本都是48C以上, 即 12xlarge, 16xlarge, 24xlarge 的规格</li>
<li>本身使用ECS, 对ECS规格熟悉, 有目标规格.</li>
</ol>
<h2 id="SKU选择"><a href="#SKU选择" class="headerlink" title="SKU选择"></a>SKU选择</h2><ol>
<li>单个CloudProvider, 只支持一个SKU, 数量可以选择多个.<br>但在实际场景下:</li>
<li>用户希望在多可用区, 多规格, 这样需要重复逐一配置CloudProvider, 非常麻烦.</li>
</ol>
<h2 id="系统盘类型选择"><a href="#系统盘类型选择" class="headerlink" title="系统盘类型选择"></a>系统盘类型选择</h2><p>在系统盘选择项上, 设计的时候为了简便用户上手:</p>
<ol>
<li>不需要用户填入系统盘类型, 创建ECS(RunInstances)时不传入系统盘类型&amp;大小, 从而让ECS使用的默认值, 即cloud_efficiency</li>
<li>不需要用户填入系统盘大小, 即使用默认的20GB</li>
</ol>
<p>但在实际场景下, 用户:</p>
<ol>
<li>选择ecs.c7.xxx规格, 7代规格不支持cloud_efficiency, 只支持cloud_essd, 即RunInstances接口必须传入cloud_essd系统盘类型</li>
</ol>
<h2 id="数据盘类型"><a href="#数据盘类型" class="headerlink" title="数据盘类型"></a>数据盘类型</h2><p>在数据盘选项上, 为了用户上手方便:</p>
<ol>
<li>默认不创建&amp;挂载系统盘, 因此不需要用户选择数据盘类型&amp;数据盘大小<br>但在实际场景下, 用户:</li>
<li>会有全镜像, 即镜像中既包含系统盘, 又包含数据盘</li>
</ol>
<h2 id="Master与Slave通信方式"><a href="#Master与Slave通信方式" class="headerlink" title="Master与Slave通信方式"></a>Master与Slave通信方式</h2><p>JenkinsMaster与Slave的联通方式, 设计的时候为了方便应对用户Master在云上&#x2F;其他云上&#x2F;云下等场景, 默认为Slave创建公网IP, 从而Master通过公网IP与Slave联通.<br>但在实际场景下:</p>
<ol>
<li>创建公网IP会导致频繁的攻击.<pre class="line-numbers language-java" data-language="java"><code class="language-java">【XXX】尊敬的xxxx：
云安全中心检测到恶意XX<span class="token punctuation">.</span>XX<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>xxx正在尝试攻击您的服务器：XX<span class="token punctuation">.</span>XX<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>xxx（XX<span class="token operator">-</span>XX<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>），已为您创建IP拦截策略，并成功拦截该恶意IP，建议您登录云安全中心控制台安全告警页中查看IP拦截策略。若您需要放行该 IP ，您可以在IP 拦截策略中禁用安全策略。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li>用户本身VPC就是在阿里云上, 通过公网连接, 会产生额外的费用.</li>
</ol>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
        <tag>ci</tag>
        <tag>ci/cd</tag>
      </tags>
  </entry>
  <entry>
    <title>瞎折腾软路由笔记</title>
    <url>//2022-08-07-software-based-router/</url>
    <content><![CDATA[<p>垃圾佬的周末, 没事儿就是瞎折腾, 前段时间被种草了软路由, 一直心痒痒. 月底下单奢侈一把, 今天给彻底搞起来了. 现在总结下.</p>
<h1 id="为啥要使用软路由"><a href="#为啥要使用软路由" class="headerlink" title="为啥要使用软路由?"></a>为啥要使用软路由?</h1><p>有几个原因: </p>
<ol>
<li>家里的Android(V2RayNG), Mac(ClashX), Windows, Ubuntu等设备都有相关软件能科学上网; 但iPad, iPhone等设备, 安装小火箭, 必须要登录海外AppStore, 而且软件还收费, 太麻烦, 因此没有配置科学上网. 对强迫症患者来说, 简直是灾难.</li>
<li>想要对网络设备的工作原理能有更深入的理解. 例如路由器的底层工作原理, 实际的路由表是咋样的? 之前使用华为的路由器, 这些权限完全是没有的, 也没办法看到这些的. 对于越狱狂魔来说, 也同样是灾难.</li>
<li>家里的路由器明显感觉力不从心, 100M的带宽, 平常根本跑不满, 就开始发热. </li>
<li>IPTV共享: <ol>
<li>无法啊忍受丑陋的电信机顶盒(烽火 HG680-J), 设计得丑陋不堪, 遥控器巨难用; </li>
<li>只能在客厅使用, 卧室里也想连接IPTV, 但是连接不上.</li>
</ol>
</li>
</ol>
<p>软路由本质上是一个低功耗的x86机器, 应该能很好地解决上边的问题. </p>
<h1 id="配置清单"><a href="#配置清单" class="headerlink" title="配置清单"></a>配置清单</h1><table>
<thead>
<tr>
<th>配件名称</th>
<th>品牌</th>
<th>价格</th>
<th>详细说明</th>
</tr>
</thead>
<tbody><tr>
<td>主机</td>
<td><a href="https://detail.tmall.com/item.htm?id=673002078011&spm=a1z09.2.0.0.237b2e8dIxvpd0&_u=77rqrdmc3b6">倍控</a></td>
<td>729</td>
<td>裸机,</td>
</tr>
<tr>
<td>CPU</td>
<td><a href="https://www.intel.com/content/www/us/en/products/sku/212328/intel-celeron-processor-n5105-4m-cache-up-to-2-90-ghz/specifications.html">Intel N5105</a></td>
<td>无, 包含在主机里</td>
<td>第11代, Jasper Lake; 4Core; 10nm; Base 2GHz, Burst 2.9GHz; 4MB L3 Cache; 10W TDP</td>
</tr>
<tr>
<td>内存</td>
<td>三星</td>
<td>380*2</td>
<td>16GB * 2(组成双通道); DDR4; 3200MHz;</td>
</tr>
<tr>
<td>闪存</td>
<td>西数 SN570</td>
<td>350</td>
<td>500GB; NVME</td>
</tr>
<tr>
<td>网卡</td>
<td>Intel I225-V</td>
<td>无, 包含在主机里</td>
<td>4个物理网口&#x2F;卡; 1000Mbps</td>
</tr>
</tbody></table>
<p>合计: <code>729 + 380*2 + 350 = 1839</code>, 几乎可以说是目前工控机的顶配了.</p>
<div class="note warning"><p>内存频率限制<br>CPU支持的内存频率最大为<code>2933 MHz</code>, 因此使用的 DDR4 <code>3200MHz</code> 被自动降频到了<code>2933 MHz</code>;</p>
</div>


<h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><h2 id="OpenWrt安装"><a href="#OpenWrt安装" class="headerlink" title="OpenWrt安装"></a>OpenWrt安装</h2><p>裸机上安装OpenWrt, 配置步骤直接看小电视: <a href="https://www.bilibili.com/video/BV1w541157Uo?spm_id_from=333.880.my_history.page.click&amp;vd_source=25b2aadfc1b4b676c371c31423142e7b">https://www.bilibili.com/video/BV1w541157Uo?spm_id_from=333.880.my_history.page.click&amp;vd_source=25b2aadfc1b4b676c371c31423142e7b</a></p>
<h2 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h2><ul>
<li>OpenClash: &#x2F;&#x2F; TODO:</li>
</ul>
<h1 id="网络拓扑"><a href="#网络拓扑" class="headerlink" title="网络拓扑"></a>网络拓扑</h1><p>由于家里的网络是FTTB(Fiber-To-The-Building)的, 因此没有光猫, 只有一根入户线. </p>
<h2 id="软路由改造前"><a href="#软路由改造前" class="headerlink" title="软路由改造前"></a>软路由改造前</h2><p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208072212775.png"></p>
<h2 id="软路由改造后"><a href="#软路由改造后" class="headerlink" title="软路由改造后"></a>软路由改造后</h2><p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208072216377.png"></p>
<h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><h2 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h2><ol>
<li>安装好 <a href="https://github.com/vernesong/OpenClash">OpenClash</a> 插件, 局域网内科学上网无忧.  </li>
<li>直接SSH上去, 看到任何的网络相关信息:<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208072139468.png" alt="ARP表"><br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208072140766.png" alt="路由表"><br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208072141717.png" alt="网桥"></li>
<li>网速基本能跑满:<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208072137732.png"></li>
<li>IPTV共享: 目前还未实现, 涉及到组播+vLan等, 还在研究中.</li>
</ol>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li>CPU Load极低, 长期维持在0.1-;</li>
<li>MEM 使用比例极低, 长期可用内存维持在96%+;</li>
<li>资源完全没有充分利用起来!<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208072130374.png"></li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总体来说, 虽然达到了部分目标, 但还是大材小用了! 后边计划有几种方案来充分压榨: </p>
<ul>
<li>多跑几个docker容器, 例如搭建Jenkins, GitLab, Nginx, Redis; 方便自己平常的压测验证. </li>
<li>改成裸机上刷esxi, 搭建几个虚拟机, 把OpenWrt放在其中一个虚拟机里, 其他的Ubuntu, Windows等作为日常休闲娱乐机.</li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>瞎折腾</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>network</tag>
        <tag>open-wrt</tag>
        <tag>software-based-router</tag>
        <tag>router</tag>
      </tags>
  </entry>
  <entry>
    <title>深入探究DNS流程与报文</title>
    <url>//2022-08-08-dns-deep-dive/</url>
    <content><![CDATA[<h1 id="DNS服务器类型"><a href="#DNS服务器类型" class="headerlink" title="DNS服务器类型"></a>DNS服务器类型</h1><h2 id="root-nameserver"><a href="#root-nameserver" class="headerlink" title="root nameserver"></a>root nameserver</h2><p>即负责<code>.</code>域名的, 全球只有13台(至于为啥只有13台, 自己google吧):  </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">davywalkerdeMBP:_assets davywalker$ <span class="token function">dig</span> baidu.com +trace

<span class="token punctuation">;</span> <span class="token operator">&lt;&lt;</span><span class="token operator">>></span> DiG <span class="token number">9.10</span>.6 <span class="token operator">&lt;&lt;</span><span class="token operator">>></span> baidu.com +trace
<span class="token punctuation">;</span><span class="token punctuation">;</span> global options: +cmd
<span class="token builtin class-name">.</span>			<span class="token number">1</span>	IN	NS	m.root-servers.net.
<span class="token builtin class-name">.</span>			<span class="token number">1</span>	IN	NS	a.root-servers.net.
<span class="token builtin class-name">.</span>			<span class="token number">1</span>	IN	NS	h.root-servers.net.
<span class="token builtin class-name">.</span>			<span class="token number">1</span>	IN	NS	l.root-servers.net.
<span class="token builtin class-name">.</span>			<span class="token number">1</span>	IN	NS	i.root-servers.net.
<span class="token builtin class-name">.</span>			<span class="token number">1</span>	IN	NS	g.root-servers.net.
<span class="token builtin class-name">.</span>			<span class="token number">1</span>	IN	NS	j.root-servers.net.
<span class="token builtin class-name">.</span>			<span class="token number">1</span>	IN	NS	c.root-servers.net.
<span class="token builtin class-name">.</span>			<span class="token number">1</span>	IN	NS	k.root-servers.net.
<span class="token builtin class-name">.</span>			<span class="token number">1</span>	IN	NS	e.root-servers.net.
<span class="token builtin class-name">.</span>			<span class="token number">1</span>	IN	NS	f.root-servers.net.
<span class="token builtin class-name">.</span>			<span class="token number">1</span>	IN	NS	b.root-servers.net.
<span class="token builtin class-name">.</span>			<span class="token number">1</span>	IN	NS	d.root-servers.net.
<span class="token punctuation">;</span><span class="token punctuation">;</span> Received <span class="token number">239</span> bytes from <span class="token number">192.168</span>.1.1<span class="token comment">#53(192.168.1.1) in 7 ms</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="TLD-Top-Level-Domain-nameserver"><a href="#TLD-Top-Level-Domain-nameserver" class="headerlink" title="TLD(Top Level Domain) nameserver"></a>TLD(Top Level Domain) nameserver</h2><p>即对应 <code>.com</code>, <code>.gov</code>, <code>.cn</code> 等的解析服务器. </p>
<h2 id="authoritative-nameserver"><a href="#authoritative-nameserver" class="headerlink" title="authoritative nameserver"></a>authoritative nameserver</h2><p>即对应 <code>.baidu.com</code> <code>.hangzhou.gov</code>, <code>gitee.cn</code> 等的解析服务器.<br>通常 authoritative nameserver 是DNS解析的最后一步</p>
<blockquote>
<p>The authoritative nameserver is usually the resolver’s last step in the journey for an IP address.</p>
</blockquote>
<h1 id="DNS查询类型"><a href="#DNS查询类型" class="headerlink" title="DNS查询类型"></a>DNS查询类型</h1><h2 id="递归式-Recursive-Query"><a href="#递归式-Recursive-Query" class="headerlink" title="递归式(Recursive Query)"></a>递归式(Recursive Query)</h2><p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208092118248.png"></p>
<h3 id="DNS请求"><a href="#DNS请求" class="headerlink" title="DNS请求:"></a>DNS请求:</h3><p>如下, 是个请求中的标识位, 使用dig命令, </p>
<ul>
<li>如果<code>+trace</code>则请求自动禁用递归(即如下递归标识设置为false);<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208082351183.png"></li>
<li>不加<code>+trace</code>, 则请求自动使用递归.<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208092101659.png"></li>
</ul>
<h3 id="DNS响应"><a href="#DNS响应" class="headerlink" title="DNS响应:"></a>DNS响应:</h3><p>如下, </p>
<ul>
<li>代表当前LocalDNS服务器支持递归查询.<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208082352908.png"></li>
<li>与此形成鲜明对比的是ROOT根DNS服务器返回不支持递归查询.<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208082353697.png"></li>
</ul>
<h2 id="迭代式-Iterative-Query"><a href="#迭代式-Iterative-Query" class="headerlink" title="迭代式(Iterative Query)"></a>迭代式(Iterative Query)</h2><p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208092115451.png"></p>
<h1 id="dig-重要参数与模式"><a href="#dig-重要参数与模式" class="headerlink" title="dig 重要参数与模式"></a><code>dig</code> 重要参数与模式</h1><h2 id="指定域名解析服务器"><a href="#指定域名解析服务器" class="headerlink" title="指定域名解析服务器"></a>指定域名解析服务器</h2><h3 id="方式1-使用-trace参数"><a href="#方式1-使用-trace参数" class="headerlink" title="方式1: 使用+trace参数:"></a>方式1: 使用<code>+trace</code>参数:</h3><p>例如 <code>dig @8.8.8.8 baidu.com +trace</code>: </p>
<ol>
<li>@8.8.8.8 则dig +trace时, 代表获取ROOT Server域名列表, 会请求8.8.8.8</li>
<li>之后会把每个ROOT Server的域名, 例如 a.root-servers.net b.root-servers.net 等, 请求LocalDNS(如图中的30.30.30.30), 通过递归方式(recurse&#x3D;1), 获取到对应的A记录. 注意, 这里就不再是请求 8.8.8.8 了!!</li>
<li>之后再请求某个ROOT Server, 获取到TLD Server的域名. 依次类推, 走正常迭代DNS方式.<br>所以 @x.x.x.x +trace, 本质上是从 8.8.8.8 获取到根域名地址. 之后还是走的正常迭代查询DNS流程.<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208092122506.png"></li>
</ol>
<h3 id="方式2-不使用-trace参数"><a href="#方式2-不使用-trace参数" class="headerlink" title="方式2: 不使用+trace参数:"></a>方式2: 不使用<code>+trace</code>参数:</h3><p>例如 <code>dig @8.8.8.8 baidu.com</code></p>
<ol>
<li>@8.8.8.8 则dig时, 会请求8.8.8.8, 让8.8.8.8通过递归方式, 直接给出对应baidu.com对应的IP地址.</li>
<li>注意: 这种就是实际常用的正常DNS解析流程.<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208092124056.png"><br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208092125582.png"></li>
</ol>
<p>如下图, 这是从浏览器里输入baidu.com之后的DNS流程, 可知是递归式的:<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208092128420.png"></p>
<h3 id="指定域名解析服务器总结"><a href="#指定域名解析服务器总结" class="headerlink" title="指定域名解析服务器总结"></a>指定域名解析服务器总结</h3><p>如果不指定, 则默认: </p>
<ol>
<li>请求LocalDNS, 通过 <code>cat /etc/resolv.conf</code> 可知LocalDNS的IP</li>
<li>让LocalDNS使用递归的方式给出结果.</li>
</ol>
<h2 id="指定使用TCP协议解析"><a href="#指定使用TCP协议解析" class="headerlink" title="指定使用TCP协议解析"></a>指定使用TCP协议解析</h2><p>默认DNS协议是基于UDP 53端口; 但也可以基于TCP 53端口完成请求.  </p>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">dig</span> @8.8.8.8 baidu.com +tcp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="包解析"><a href="#包解析" class="headerlink" title="包解析"></a>包解析</h3><p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208092204677.png"></p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>&#x2F;&#x2F; TODO:<br>&#x2F;&#x2F; 1. 可以思考下 DNS over TCP(DoT) 与DNS over UDP(DoU)各自的优缺点<br>&#x2F;&#x2F; 2. 近几年有 DNS over TLS; DNS over HTTP; DNS over HTTPS; 为啥会有这么多套娃协议? 是为了解决啥问题? 优缺点是啥? </p>
<h1 id="WireShark抓包实战"><a href="#WireShark抓包实战" class="headerlink" title="WireShark抓包实战"></a>WireShark抓包实战</h1><h2 id="简单的顶级域名DNS抓包"><a href="#简单的顶级域名DNS抓包" class="headerlink" title="简单的顶级域名DNS抓包"></a>简单的顶级域名DNS抓包</h2><h3 id="命令-1"><a href="#命令-1" class="headerlink" title="命令"></a>命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 就简单地对baidu.com进行DNS抓包</span>
davywalkerdeMBP:_assets davywalker$ <span class="token function">dig</span> baidu.com +trace<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="trace迭代式-WireShark分析"><a href="#trace迭代式-WireShark分析" class="headerlink" title="+trace迭代式, WireShark分析"></a><code>+trace</code>迭代式, WireShark分析</h3><h4 id="第一步-向LocalDNS发起请求-请求获取-对应的root-nameserver"><a href="#第一步-向LocalDNS发起请求-请求获取-对应的root-nameserver" class="headerlink" title="第一步: 向LocalDNS发起请求, 请求获取.对应的root nameserver"></a>第一步: 向LocalDNS发起请求, 请求获取<code>.</code>对应的root nameserver</h4><h5 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h5><p>可以看到: </p>
<ul>
<li>请求的目标IP是<code>/etc/resolv.conf</code>中对应的LocalDNS IP</li>
<li>请求是UDP协议, 目标LocalDNS的端口号是53</li>
<li>请求内容是: <code>&lt;ROOT&gt;</code>, 即根域名DNS; 类型是 <code>NS</code>, 即nameserver; 就是请求根域名的nameserver<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208082303614.png"><br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208082259231.png"></li>
</ul>
<h5 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h5><p>可以看到: </p>
<ul>
<li>响应内容里有13个根域名服务器的域名 </li>
<li>但注意: <mark>没有返回nameserver的domain对应的IP地址!!!</mark> , 经分析与推测, 由于全球13个根域名服务器的IP是<del>永远不会变</del>的(有可能会变化, <a href="https://web.archive.org/web/20130310100321/http://d.root-servers.org/renumber.html">历史上也变化过</a>), 各个domain对应的IP地址应该是<mark>通过<a href="https://www.iana.org/domains/root/files">Root Hint File</a>, 缓存在操作系统中</mark>.<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208082306546.png"></li>
</ul>
<h4 id="第二步-向root-nameserver请求-请求获取-com-对应的TLD’s-nameserver"><a href="#第二步-向root-nameserver请求-请求获取-com-对应的TLD’s-nameserver" class="headerlink" title="第二步: 向root nameserver请求, 请求获取.com.对应的TLD’s nameserver"></a>第二步: 向root nameserver请求, 请求获取<code>.com.</code>对应的TLD’s nameserver</h4><h5 id="请求-1"><a href="#请求-1" class="headerlink" title="请求"></a>请求</h5><p>可以看到: </p>
<ul>
<li>请求的目标IP是<code>202.12.27.33</code>, 经分析, 是<code>m.root-servers.net.</code>对应的IP地址. 应该是按照某种算法随机选的.</li>
<li>请求想要直接从root nameserver中获取到 baidu.com 的A记录<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208082308662.png"></li>
</ul>
<h5 id="响应-1"><a href="#响应-1" class="headerlink" title="响应"></a>响应</h5><p>可以看到: </p>
<ul>
<li>响应内容里有13个<code>.com.</code>域名服务器的域名.</li>
<li>但注意: <mark>同时在Additional records部分, 把各个域名服务器对应的IP也都以A记录形式返回</mark>. 这个就是所谓的 <strong><a href="https://blog.csdn.net/dranker/article/details/109754755">Glue Record</a></strong>, 试想下, 如果没有返回A记录, 那么如果<code>.com.</code>返回的nameserver是<code>a.com.</code>, 那么如何获取到这个domain对应的IP? 通过DNS么? 那就无限递归了!</li>
<li>Additional records中<code>AAAA</code>记录, 代表的是各个域名服务器对应的IPV6地址.<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208082315463.png"><br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208082321212.png"></li>
</ul>
<h4 id="第三步-向TLD’s-nameserver请求-请求获取baidu-com-对应的authoritative-nameserver"><a href="#第三步-向TLD’s-nameserver请求-请求获取baidu-com-对应的authoritative-nameserver" class="headerlink" title="第三步: 向TLD’s nameserver请求, 请求获取baidu.com.对应的authoritative nameserver"></a>第三步: 向TLD’s nameserver请求, 请求获取<code>baidu.com.</code>对应的authoritative nameserver</h4><h5 id="请求-2"><a href="#请求-2" class="headerlink" title="请求"></a>请求</h5><p>可以看到: </p>
<ul>
<li>请求的目标IP是<code>192.31.80.30</code>, 通过翻看上一个Glue Record, 可以知道正是<code>d.gtld-servers.net: type A, class IN, addr 192.31.80.30</code>对应的IP.<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208082323511.png"></li>
</ul>
<h5 id="响应-2"><a href="#响应-2" class="headerlink" title="响应"></a>响应</h5><p>可以看到: </p>
<ul>
<li>响应的内容里没有<code>baidu.com</code>的A记录信息, 而是一堆的NS记录信息, 以及NS对应的IP, 因此还需要继续往下查.</li>
<li>如果是查询顶级域名(例如github.com), 或者二级域名(例如login.github.com)等:  <ul>
<li>那么理论上这个时候就可以直接返回A记录了. 即不用再走第四步了. 此时A记录可以是个VIP, 然后根据请求具体的二级域名, 例如<code>login.github.com</code>, 通过Nginx等反向代理到对应服务即可.</li>
<li>但实际分析了下, 大部分网站(如下图中<code>alibaba.com</code>, <code>zhihu.com</code>, <code>aliyun.com</code>等), 都是在这里返回自己的<code>authoritative nameserver</code>, 自己思考了下原因: <ul>
<li>一是: 因为 TLD’s nameserver 通常是由国家或者组织统一管理的, 各个公司如果IP变化, 不好同步到 TLD 中. 而 authoritative nameserver 一般都是各个公司自己管理, 时效性与灵活性都很高. 例如可以给某些二级&#x2F;三级域名配置不同的IP.  </li>
<li>二是: 因为如果直接A记录注册在TLD上, 那么整个网站的所有二级&#x2F;三级域名等, 就只能有一个IP入口了. 整体风险就很大了. 如果VIP挂了, 整个网站都不可用了. 如果是不同的二级域名, 分配不同nameserver, 则</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208082326335.png"><br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208082343058.png"><br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208082343720.png"><br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208082344089.png"></p>
<h4 id="第四步-向authoritative-nameserver请求-请求获取baidu-com-对应的ip"><a href="#第四步-向authoritative-nameserver请求-请求获取baidu-com-对应的ip" class="headerlink" title="第四步: 向authoritative nameserver请求, 请求获取baidu.com.对应的ip"></a>第四步: 向authoritative nameserver请求, 请求获取<code>baidu.com.</code>对应的ip</h4><h5 id="请求-3"><a href="#请求-3" class="headerlink" title="请求"></a>请求</h5><p>可以看到:</p>
<ul>
<li>请求的目标IP是<code>14.215.178.80</code>, 通过翻看上一个Glue Record, 可以知道正是<code>ns4.baidu.com: type A, class IN, addr 14.215.178.80</code>对应的IP.</li>
</ul>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208082345386.png"></p>
<h5 id="响应-3"><a href="#响应-3" class="headerlink" title="响应"></a>响应</h5><p>可以看到: </p>
<ul>
<li>正确地返回了<code>baidu.com</code>的A记录<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208082347974.png"></li>
</ul>
<h3 id="不加-trace递归式-WireShark分析"><a href="#不加-trace递归式-WireShark分析" class="headerlink" title="不加+trace递归式, WireShark分析"></a>不加<code>+trace</code>递归式, WireShark分析</h3><h4 id="第一步-向LocalDNS发起请求-请求获取aliyun-com的IP地址-A记录"><a href="#第一步-向LocalDNS发起请求-请求获取aliyun-com的IP地址-A记录" class="headerlink" title="第一步: 向LocalDNS发起请求, 请求获取aliyun.com的IP地址(A记录)"></a>第一步: 向LocalDNS发起请求, 请求获取<code>aliyun.com</code>的IP地址(A记录)</h4><h5 id="请求-4"><a href="#请求-4" class="headerlink" title="请求"></a>请求</h5><p>可以看到:</p>
<ul>
<li>请求的目标IP是<code>/etc/resolv.conf</code>中对应的LocalDNS IP<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208090001833.png"></li>
</ul>
<h5 id="响应-4"><a href="#响应-4" class="headerlink" title="响应"></a>响应</h5><p>可以看到: </p>
<ul>
<li>LocalDNS直接把DNS的A记录结果返回了. 所有的迭代操作都是LocalDNS执行的了.<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208090002803.png"></li>
</ul>
<h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1><h2 id="域名服务器本身IP解析问题"><a href="#域名服务器本身IP解析问题" class="headerlink" title="域名服务器本身IP解析问题"></a>域名服务器本身IP解析问题</h2><p>DNS协议返回了根域名服务器的域名, 例如<code>m.root-servers.net.</code>, 但实际后续向根域名服务器发起查询TLD域名服务器的请求时, 是需要知道根域名服务器的IP的! 这个IP从哪里获取? 通过WireShark抓包, 发现返回的根域名服务器域名列表里, 没有这些域名对应的IP地址. 难道也是通过DNS解析的么? 这样就涉及到循环.<br><mark> Glue Record </mark></p>
<h2 id="dig请求能否使用指定”递归式”或者”迭代式”么"><a href="#dig请求能否使用指定”递归式”或者”迭代式”么" class="headerlink" title="dig请求能否使用指定”递归式”或者”迭代式”么?"></a>dig请求能否使用指定”递归式”或者”迭代式”么?</h2><blockquote>
<p>切换查询中的 RD（要求递归）位设置。<br>在缺省情况下设置该位，也就是说 dig 正常情形下发送递归查询。<br>当使用查询选项 +nssearch 或 +trace 时，递归自动禁用。</p>
</blockquote>
<h2 id="有CNAME的DNS请求具体是咋样的"><a href="#有CNAME的DNS请求具体是咋样的" class="headerlink" title="有CNAME的DNS请求具体是咋样的?"></a>有CNAME的DNS请求具体是咋样的?</h2><p>例如 <code>dig passport.baidu.com +trace</code>, 返回: </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">passport.baidu.com. <span class="token number">1200</span> IN CNAME passport.n.shifen.com.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>在dig调用流程中, 到CNAME就结束了; 因为没有继续执行<code>dig passport.n.shifen.com +trace</code></li>
<li>但在实际浏览器访问时, 浏览器收到CNAME记录, 会重新发一个DNS请求解析<code>passport.n.shifen.com</code>域名.</li>
</ul>
<h2 id="直接使用DNS返回的IP访问网站可以么"><a href="#直接使用DNS返回的IP访问网站可以么" class="headerlink" title="直接使用DNS返回的IP访问网站可以么?"></a>直接使用DNS返回的IP访问网站可以么?</h2><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>如下, 返回的<code>baidu.com</code>的A记录<code>39.156.66.10</code>IP地址: </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">^CdavywalkerdeMBP:~ davywalker$ <span class="token function">dig</span> baidu.com
<span class="token punctuation">;</span><span class="token punctuation">;</span> QUESTION SECTION:
<span class="token punctuation">;</span>baidu.com.			IN	A
<span class="token punctuation">;</span><span class="token punctuation">;</span> ANSWER SECTION:
baidu.com.		<span class="token number">1</span>	IN	A	<span class="token number">110.242</span>.68.66
baidu.com.		<span class="token number">1</span>	IN	A	<span class="token number">39.156</span>.66.10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>是否可以不用域名直接通过IP访问?</li>
<li>答案是<mark>不可以</mark><br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208092137035.png"></li>
</ul>
<h3 id="为啥要禁止直接通过ip访问？"><a href="#为啥要禁止直接通过ip访问？" class="headerlink" title="为啥要禁止直接通过ip访问？"></a>为啥要禁止直接通过ip访问？</h3><ul>
<li>虚拟主机，主机上放置了N个网站，而每个网站绑定1个或以上域名，所以用域名访问主机可以解析到网站目录，但用IP的话服务器就不知道解析到哪个目录了！</li>
<li>为了避免别人把未备案的域名解析到自己的服务器IP而导致服务器被断网; 目前国内很多机房都要求网站主关闭空主机头，防止未备案的域名指向过来造成麻烦</li>
<li>可能是出于安全的考虑, 如果直接使用IP访问, 则HTTPS证书有效性就无法校验了. 这样被钓鱼了也不知道.</li>
</ul>
<h3 id="实践-如何设置禁止ip直接访问-以Nginx为例"><a href="#实践-如何设置禁止ip直接访问-以Nginx为例" class="headerlink" title="实践: 如何设置禁止ip直接访问(以Nginx为例)"></a>实践: 如何设置禁止ip直接访问(以Nginx为例)</h3><ul>
<li>参见官方给出的文档: <a href="http://nginx.org/en/docs/http/request_processing.html">How to prevent processing requests with undefined server names</a></li>
<li>实践参照: <a href="https://davyjones2010.github.io/2022-08-09-nginx-scripts/#%E7%A6%81%E6%AD%A2%E9%80%9A%E8%BF%87IP%E8%AE%BF%E9%97%AE">Nginx配置-禁止通过IP访问</a></li>
</ul>
<h3 id="实践-如何设置单Host多域名-不同域名访问不同服务-以Nginx为例"><a href="#实践-如何设置单Host多域名-不同域名访问不同服务-以Nginx为例" class="headerlink" title="实践: 如何设置单Host多域名, 不同域名访问不同服务(以Nginx为例)"></a>实践: 如何设置单Host多域名, 不同域名访问不同服务(以Nginx为例)</h3><ul>
<li>参见官方给出的文档: <a href="http://nginx.org/en/docs/http/request_processing.html">How to prevent processing requests with undefined server names</a></li>
<li>实践参照: <a href="https://davyjones2010.github.io/2022-08-09-nginx-scripts/#%E5%8D%95Host%E5%A4%9A%E5%9F%9F%E5%90%8D-%E4%B8%8D%E5%90%8C%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE%E4%B8%8D%E5%90%8C%E6%9C%8D%E5%8A%A1">Nginx配置-单Host多域名, 不同域名访问不同服务
</a></li>
</ul>
<h3 id="nslookup-如何指定-nameserver"><a href="#nslookup-如何指定-nameserver" class="headerlink" title="nslookup 如何指定 nameserver?"></a>nslookup 如何指定 nameserver?</h3><ul>
<li><p>如下, 指定 <code>ns7.taobao.com.</code> 为查询 <code>taobao.com</code> 域名的ns</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nslookup</span> taobao.com ns7.taobao.com.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>完整的nslookup命令参见: <a href="https://phoenixnap.com/kb/nslookup-command">How to Use the nslookup Command</a></p>
</li>
</ul>
<h3 id="“Non-authoritative-answer”-代表啥意思"><a href="#“Non-authoritative-answer”-代表啥意思" class="headerlink" title="“Non-authoritative answer” 代表啥意思?"></a>“Non-authoritative answer” 代表啥意思?</h3><p>如下,  “Non-authoritative answer” 代表请求不是由对应的权威服务器返回, 而是由本地或者其他DNS缓存的结果.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> google.com
Server:  one.one.one.one
Address:  <span class="token number">1.1</span>.1.1

Non-authoritative answer:
google.com      MX preference <span class="token operator">=</span> <span class="token number">10</span>, mail exchanger <span class="token operator">=</span> aspmx.l.google.com
google.com      MX preference <span class="token operator">=</span> <span class="token number">20</span>, mail exchanger <span class="token operator">=</span> alt1.aspmx.l.google.com
google.com      MX preference <span class="token operator">=</span> <span class="token number">30</span>, mail exchanger <span class="token operator">=</span> alt2.aspmx.l.google.com
google.com      MX preference <span class="token operator">=</span> <span class="token number">40</span>, mail exchanger <span class="token operator">=</span> alt3.aspmx.l.google.com
google.com      MX preference <span class="token operator">=</span> <span class="token number">50</span>, mail exchanger <span class="token operator">=</span> alt4.aspmx.l.google.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h1><ul>
<li><a href="https://www.cloudflare.com/learning/dns/dns-server-types/">https://www.cloudflare.com/learning/dns/dns-server-types/</a></li>
<li><a href="https://www.jianshu.com/p/f6ef04bf6af2">https://www.jianshu.com/p/f6ef04bf6af2</a></li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>dns</tag>
        <tag>network</tag>
      </tags>
  </entry>
  <entry>
    <title>常用的Nginx命令与配置</title>
    <url>//2022-08-09-nginx-scripts/</url>
    <content><![CDATA[<h1 id="MAC环境"><a href="#MAC环境" class="headerlink" title="MAC环境"></a>MAC环境</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/local/var/www
/usr/local/Cellar/nginx/1.21.3/html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="配置文件路径"><a href="#配置文件路径" class="headerlink" title="配置文件路径"></a>配置文件路径</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/local/etc/nginx
/usr/local/etc/nginx/nginx.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="禁止通过IP访问"><a href="#禁止通过IP访问" class="headerlink" title="禁止通过IP访问"></a>禁止通过IP访问</h3><ul>
<li>绑定了hosts<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1 example.org www.example.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>只允许通过<code>localhost:8080</code>或者<code>example.org:8080</code>或者<code>www.example.org:8080</code>访问, </li>
<li>禁止通过<code>127.0.0.1:8080</code>访问, 返回502错误.<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">server <span class="token punctuation">&#123;</span>
    listen  <span class="token number">8080</span><span class="token punctuation">;</span>
    <span class="token builtin class-name">return</span> <span class="token number">502</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

server <span class="token punctuation">&#123;</span>
    listen       <span class="token number">8080</span><span class="token punctuation">;</span>
    server_name  localhost example.org www.example.org<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208092149192.png"></p>
<h3 id="单Host多域名-不同域名访问不同服务"><a href="#单Host多域名-不同域名访问不同服务" class="headerlink" title="单Host多域名, 不同域名访问不同服务"></a>单Host多域名, 不同域名访问不同服务</h3><ul>
<li>绑定了hosts<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1 example.org www.example.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>通过<code>localhost:8080</code>访问, 则访问到 <code>$NGINX_HOME/html/</code> 目录</li>
<li>通过<code>example.org:8080</code>或者<code>www.example.org:8080</code>访问, 则访问到 <code>$NGINX_HOME/html2/</code> 目录</li>
<li>禁止通过<code>127.0.0.1:8080</code>访问, 返回502错误.<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">server <span class="token punctuation">&#123;</span>
    listen  <span class="token number">8080</span><span class="token punctuation">;</span>
    <span class="token builtin class-name">return</span> <span class="token number">502</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
server <span class="token punctuation">&#123;</span>
    listen       <span class="token number">8080</span><span class="token punctuation">;</span>
    server_name  example.org www.example.org<span class="token punctuation">;</span>
    location / <span class="token punctuation">&#123;</span>
        root html2<span class="token punctuation">;</span>
        index index.html index.htm<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    error_page   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  /50x.html<span class="token punctuation">;</span>
    location <span class="token operator">=</span> /50x.html <span class="token punctuation">&#123;</span>
        root   html2<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
server <span class="token punctuation">&#123;</span>
    listen       <span class="token number">8080</span><span class="token punctuation">;</span>
    server_name  localhost<span class="token punctuation">;</span>
    location / <span class="token punctuation">&#123;</span>
        root   html<span class="token punctuation">;</span>
        index  index.html index.htm<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    error_page   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  /50x.html<span class="token punctuation">;</span>
    location <span class="token operator">=</span> /50x.html <span class="token punctuation">&#123;</span>
        root   html<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208092152127.png"><br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208092152948.png"></li>
</ul>
<h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>NGINX_HOME:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/local/Cellar/nginx/1.21.3
location / <span class="token punctuation">&#123;</span>
root   html<span class="token punctuation">;</span>
index  index.html index.htm<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上边的html就是 NGINX_HOME&#x2F;html&#x2F;</p>
<h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew services start nginx
brew services restart nginx
brew services stop nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="Nginx是如何知道本次请求-请求的是IP还是域名-如果是域名的话-多个域名如何区分"><a href="#Nginx是如何知道本次请求-请求的是IP还是域名-如果是域名的话-多个域名如何区分" class="headerlink" title="Nginx是如何知道本次请求, 请求的是IP还是域名? 如果是域名的话, 多个域名如何区分?"></a>Nginx是如何知道本次请求, 请求的是IP还是域名? 如果是域名的话, 多个域名如何区分?</h3><ul>
<li>如下图, 本质上还是Nginx解析HTTP协议, 根据请求行里的<code>RequestURL</code>来进行判断.<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208092154665.png"><br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208092154173.png"></li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>linux</tag>
        <tag>network</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>瞎折腾洋垃圾电脑笔记</title>
    <url>//2022-08-13-computer-diy/</url>
    <content><![CDATA[<p>垃圾佬的周末, 没事儿就是瞎折腾, 自从在B站被种草了洋垃圾, 按耐不住心中的冲动, 决定也用洋垃圾组装一台能数框框的电脑, 玩玩儿游戏, 压榨压榨性能.</p>
<h1 id="为啥要使用洋垃圾"><a href="#为啥要使用洋垃圾" class="headerlink" title="为啥要使用洋垃圾"></a>为啥要使用洋垃圾</h1><ul>
<li>一: 穷, </li>
<li>二: 玩,</li>
</ul>
<h1 id="配置清单"><a href="#配置清单" class="headerlink" title="配置清单"></a>配置清单</h1><blockquote>
<p>几乎都是从海鲜市场淘来的</p>
<ul>
<li>优点是便宜, 性价比高; </li>
<li>缺点是电气特性衰减不明确, 长期稳定性没有保障.</li>
</ul>
</blockquote>
<p>但对于偶尔玩一玩游戏, 不是长期高负荷跑渲染等, 整体还OK. 目标是<strong>1000元</strong>左右搞定.</p>
<h2 id="详细清单"><a href="#详细清单" class="headerlink" title="详细清单"></a>详细清单</h2><table>
<thead>
<tr>
<th>配件名称</th>
<th>品牌</th>
<th>数量</th>
<th>价格</th>
<th>详细说明</th>
</tr>
</thead>
<tbody><tr>
<td>CPU</td>
<td><a href="https://ark.intel.com/content/www/us/en/ark/products/83357/intel-xeon-processor-e52630l-v3-20m-cache-1-80-ghz.html">Intel® Xeon® Processor E5-2630L v3</a></td>
<td>1</td>
<td>80</td>
<td>Haswell; 8Core 16HT; 22 nm制程; Base 1.8GHz, Burst 2.90 GHz; 20MB L3 Cache; 55W TDP</td>
</tr>
<tr>
<td>主板</td>
<td><a href="https://item.taobao.com/item.htm?id=676047268901">X99寨板</a></td>
<td>1</td>
<td>250</td>
<td></td>
</tr>
<tr>
<td>内存</td>
<td>威刚万紫千红</td>
<td>4</td>
<td>160 + 200</td>
<td>8GB; DDR4 2133MHz; 强迫症4条必须插满, 组成4通道^_^</td>
</tr>
<tr>
<td>闪存</td>
<td><a href="https://www.intel.com/content/www/us/en/products/sku/134583/intel-ssd-760p-series-256gb-m-2-80mm-pcie-3-1-x4-3d2-tlc/specifications.html">Intel® SSD 760P</a></td>
<td>1</td>
<td>160</td>
<td>256GB; PCIe 3.1 x4 接口, NVMe</td>
</tr>
<tr>
<td>显卡</td>
<td>蓝宝石RX460</td>
<td>1</td>
<td>350</td>
<td>4GB显存; 无需单独供电; HDMI + VGA + DP 接口</td>
</tr>
<tr>
<td>电源</td>
<td>鑫谷全模组</td>
<td>1</td>
<td>120</td>
<td>550W, 整体绰绰有余了</td>
</tr>
<tr>
<td>CPU散热器</td>
<td>长城霄龙400</td>
<td>1</td>
<td>45</td>
<td>4铜管, 3针脚</td>
</tr>
<tr>
<td>机箱</td>
<td>待挑选</td>
<td>1</td>
<td>??</td>
<td>??</td>
</tr>
</tbody></table>
<p>合计 <code>80 + 250 + 160 + 200 + 160 + 350 + 120 + 45 = 1,365</code><br>现在显卡电源都还没到, 希望组装上去之后一次点亮, 就可以说声”真香!”啦.</p>
<h2 id="主板细节"><a href="#主板细节" class="headerlink" title="主板细节"></a>主板细节</h2><p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208132325729.png"></p>
<div class="note info"><p>x99含义<br>所谓的x99主板, 代表的其实是<code>Intel X99 chipset</code>, 是Intel的PCH(Platform Controller Hub)即南桥芯片, 定义了主板的规范, 如下:<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208140001662.png"></p>
</div>

<p>其他细节: </p>
<ul>
<li>CPU插槽: 单路; LGA2011 <ul>
<li>LGA代表LGA(Land Grid Array)封装类型, 即CPU上只有触点, 没有针; 与之对应的是PGA(Pin Grid Array)封装类型, 即CPU上有针(印象中老式的CPU都是这种类型), 更容易折断; 两者优缺点参见:<a href="https://techedged.com/lga-vs-pga/">LGA vs PGA CPU Sockets: What’s the Difference?</a>, 非常详细了. TODO: 啥时候翻译出来.</li>
<li>2011代表是2011个针脚; <a href="https://zhuanlan.zhihu.com/p/48593932">CPU底部的小块是干什么用？为什么CPU这么多电源引脚？</a></li>
</ul>
</li>
<li>CPU只支持DDR4内存, 但主板支持DDR3(问了店家, 主板同时也支持DDR4), 现在DDR4普遍价格比较贵, 没办法使用闲鱼上价格巨便宜的DDR3 ECC内存.</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="CPU型号"><a href="#CPU型号" class="headerlink" title="CPU型号"></a>CPU型号</h3><p>买的时候没有看清楚CPU型号, 以为是 <code>E5-2630 V3</code>, 结果实际是 <code>E5-2630L V3</code>, 才知道多了的这个<code>L</code>代表<mark>低功耗(Low Power)</mark>, 基频只有<code>1.8GHz</code>不能忍.<br>因此就又淘了如下两个能够适配X99主板的CPU, 准备到时候各自对比测试下:</p>
<table>
<thead>
<tr>
<th>配件名称</th>
<th>品牌</th>
<th>数量</th>
<th>价格</th>
<th>详细说明</th>
</tr>
</thead>
<tbody><tr>
<td>CPU</td>
<td><a href="https://ark.intel.com/content/www/us/en/ark/products/83357/intel-xeon-processor-e52630l-v3-20m-cache-1-80-ghz.html">Intel® Xeon® Processor E5-2630L v3</a></td>
<td>1</td>
<td>80</td>
<td>8Core 16HT; 22 nm制程; Base 1.8GHz, Burst 2.90 GHz; 20MB L3 Cache; 55W TDP</td>
</tr>
<tr>
<td>CPU</td>
<td><a href="https://ark.intel.com/content/www/us/en/ark/products/81706/intel-xeon-processor-e52660-v3-25m-cache-2-60-ghz.html">Intel® Xeon® Processor E5-2660 v3</a></td>
<td>1</td>
<td>100</td>
<td>10Core 20HT; 22 nm制程; Base 2.60 GHz, Burst 3.3 GHz; 25MB L3 Cache; 105W TDP</td>
</tr>
<tr>
<td>CPU</td>
<td><a href="https://ark.intel.com/content/www/us/en/ark/products/83352/intel-xeon-processor-e52620-v3-15m-cache-2-40-ghz.html">Intel® Xeon® Processor E5-2620 v3</a></td>
<td>1</td>
<td>20</td>
<td>6Core 12HT; 22 nm制程; Base 2.40 GHz, Burst 3.20 GHz; 15MB L3 Cache; 85W TDP; 你不能对一个20块钱的CPU要求更多了! :)</td>
</tr>
</tbody></table>
<div class="note info"><blockquote>
<p>CPU盖子上的<code>Costa Rica</code>, <code>Malay</code> 代表啥意思?<br>Just to clear something up, the markings on the back of the CPU refer to the packaging site - not the manufacturing site of the actual silicon chip itself.<br>也就是说<mark>代表的是封装工厂的地点</mark>, <code>Malay</code> 代表 <code>Malaysia</code></p>
</blockquote>
</div>

<h3 id="ECC内存"><a href="#ECC内存" class="headerlink" title="ECC内存"></a>ECC内存</h3><div class="note warning"><p>内存买成ECC却不能用 ECC内存到底是什么鬼?</p>
</div>

<ul>
<li>这是因为一般的电脑为了速度，一般都是不支持ECC内存，而ECC内存由于有校验这一步骤，一般都多用在服务器领域，<mark>普通的家用主板一般都是不支持的</mark>，而且对于服务器，还要区分REG-ECC和纯ECC的区别，REG是带寄存器的ECC内存，可以支持更大的单条容量，但是由于有寄存器的存在，延迟会更高。</li>
</ul>
<h3 id="CPU散热器"><a href="#CPU散热器" class="headerlink" title="CPU散热器"></a>CPU散热器</h3><div class="note warning"><p>主板上<code>CPU FAN</code>是4针的, 买来的散热器风扇是3针的. 区别是啥? 怎么插?</p>
</div>

<blockquote>
<p>2针, 3针与4针风扇区别?</p>
</blockquote>
<ul>
<li>2针的散热风扇（结构简单，但不能测速）: 一个用于供电、一个用于接地，不过没有测速功能。目前2针的散热风扇已经在市场上大量采用，但是2针的风扇在变速等方面上已经不能满足要求了</li>
<li>3针的散热风扇（VC电压调速，灵活性欠佳）: 第三条线, 主要是起着测速的作用，通过主板能够侦测到风扇是否在转、转速为多少，但是3针散热风扇的调速是通过调整风扇电压来实现的，此外，能不能调速还需要看下主板是否支持，显然这种调节转速并不够灵活，不能实时反映CPU状态的信息，还需要在主板BIOS中进行各种设置。</li>
<li>4针的散热风扇（更加灵活更加智能的调速）: 4针的散热风扇是在3针基础上又多了一根PWM线（ 脉宽调变），所谓的PWM线就是利用PWM机制来调节风扇转速，而风扇电压是恒定的，避免了控制电压来变速的一系列弊端。而PWM风扇无需依赖主板BIOS，更加省心方便。PWM脉冲信号可以输出不同的占空比（Duty Cycle），0-100%之间的占空比就能调节出不同的风扇转速，所以能够做到精确、灵活控制。</li>
</ul>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208140950640.png"></p>
<blockquote>
<p>3针怎么插入主板4针接口中?</p>
</blockquote>
<ul>
<li>兼容, 有防呆机制.</li>
</ul>
<p>总体来说, 风扇踩坑了, 但也够用了:</p>
<ol>
<li>应该购买6铜管</li>
<li>应该购买4针的</li>
</ol>
<h2 id="成果展示"><a href="#成果展示" class="headerlink" title="成果展示"></a>成果展示</h2><h3 id="成品图"><a href="#成品图" class="headerlink" title="成品图"></a>成品图</h3><p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208172253812.png"></p>
<h3 id="数框框"><a href="#数框框" class="headerlink" title="数框框"></a>数框框</h3><p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208172318658.png"><br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208172253927.png"><br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208172254393.png"></p>
<h2 id="升级潜力-amp-计划"><a href="#升级潜力-amp-计划" class="headerlink" title="升级潜力&amp;计划"></a>升级潜力&amp;计划</h2><p>整体CPU还是比较强悍的, 有很大升级潜力</p>
<h3 id="主板升级"><a href="#主板升级" class="headerlink" title="主板升级"></a>主板升级</h3><ul>
<li>升级成两路, 看有没必要吧, 这样电费吃不消, 电源可能也要升级; <a href="https://post.smzdm.com/p/aoo8wewm/pic_3/#bigImg">X99双路主板简评</a> 指明了方向</li>
</ul>
<h3 id="CPU升级"><a href="#CPU升级" class="headerlink" title="CPU升级"></a>CPU升级</h3><ul>
<li>X99整体还支持V4(Broadwell)的CPU, 例如 <code>E5-2660 V4</code>, 16年上市, 14nm制程. 全部列表参见: </li>
<li>2699 v3: 650RMB左右</li>
<li><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208141020764.png"></li>
</ul>
<h3 id="内存升级"><a href="#内存升级" class="headerlink" title="内存升级"></a>内存升级</h3><ul>
<li>ECC内存: 这几个CPU都支持ECC内存, 等下批服务器淘汰, 或者DDR5主流, 就可以低价淘几个DDR4 ECC内存;</li>
<li>容量升级: CPU支持 <code>192GB * 4 = 768GB</code> 主板支持<code>32GB*4=128GB</code>; 当前是<code>8GB*4=32GB</code>, 有很大升级潜力, 等内存价格下降吧~</li>
<li>频率升级: CPU限制最大支持2133MHz, 导致最新的3200MHz都没法用(能用, 但会自动降频到2133MHz).</li>
</ul>
<h1 id="学到了啥"><a href="#学到了啥" class="headerlink" title="学到了啥"></a>学到了啥</h1><h2 id="常用主板型号"><a href="#常用主板型号" class="headerlink" title="常用主板型号"></a>常用主板型号</h2><ul>
<li>X79<ul>
<li>Sandy Bridge-E, Ivy Bridge-E</li>
<li>Quad-channel DDR3, up to two DIMMs per channel</li>
</ul>
</li>
<li>X99<ul>
<li>Haswell-E, Broadwell-E</li>
<li>Quad-channel DDR4, up to two DIMMs per channel</li>
</ul>
</li>
</ul>
<h2 id="家用机箱型号"><a href="#家用机箱型号" class="headerlink" title="家用机箱型号"></a>家用机箱型号</h2><ul>
<li>E-ATX</li>
<li>ATX</li>
<li>M-ATX</li>
<li>ITX</li>
</ul>
<h2 id="奇技淫巧"><a href="#奇技淫巧" class="headerlink" title="奇技淫巧"></a>奇技淫巧</h2><blockquote>
<p>Q: 鞋盒机箱, 如何无开关开机?<br>A: 直接螺丝刀戳主板, 连接针脚.<br><img data-src="http://p8.itc.cn/images01/20200823/5eb93a0ca39443f68d7d3392fc3615ea.jpeg"></p>
</blockquote>
<h2 id="其他体悟"><a href="#其他体悟" class="headerlink" title="其他体悟"></a>其他体悟</h2><ul>
<li>知道了经常说的V3, V4利旧是啥了; 对这种洋垃圾CPU市场行情有了大概的认知.</li>
<li>计算机并非只有CPU, 还有内存, 主板, 显卡甚至电源, 散热器等; 也都是极为关键的. 尤其是这种洋垃圾, CPU跟不要钱一样, 其他组件的可扩展性与稳定性就至关重要了. 很多特性不止要看CPU是否支持, 也要看主板. 例如内存的DDR代数, 最大容量, 通道数, 最大频率, 是否支持ECC; 例如CPU插槽的针脚数;</li>
<li>摩尔定律的恐怖: 上边几个CPU基本都是14年Q3上市, 到今天2022年Q2, 仅仅8年左右:  <ul>
<li>价格: 就已经跌倒了白菜价, 以<code>E5-2660 v3</code>为例, 上市价格是<code>$1445.00</code>, 现在是<code>100RMB=$15</code>. </li>
<li>性能: 当前主流的12代Intel, 以家用的 <a href="https://ark.intel.com/content/www/cn/zh/ark/products/134594/intel-core-i712700k-processor-25m-cache-up-to-5-00-ghz.html">i7-12700K</a> 为例, 制程已经到了7nm; 更不用提ARM架构下的主流制程都是5nm了.</li>
</ul>
</li>
</ul>
<blockquote>
<p>旧时王谢堂前燕, 飞入寻常百姓家</p>
</blockquote>
<h2 id="老司机踩坑记"><a href="#老司机踩坑记" class="headerlink" title="老司机踩坑记"></a>老司机踩坑记</h2><blockquote>
<p>自诩为垃圾佬, 结果这次组装电脑, 结结实实把自己给教育了一番.</p>
</blockquote>
<h3 id="U盘套路"><a href="#U盘套路" class="headerlink" title="U盘套路"></a>U盘套路</h3><p>在某宝买了2个32GB的U盘, 想要分别作为win10与centos的装机PE.<br>结果在拷贝镜像到U盘的时候, 发现传输速度奇慢无比, 只有6MB&#x2F;s.<br>普通的win10镜像大小是4GB左右, 也就是全部拷贝到U盘里需要: <code>4 * 1024 / 6 / 60 = 11.3</code>, 要10min+;<br>不解, 遂问客服, 解释道是USB2.0的. 仔细看了下详情页, 硕大的”USB 2.0”仿佛在嘲讽我@-@<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208172225310.png"></p>
<p>What??? 都2202年了, 竟然还有USB 2.0?? 我仿佛听到了一个国际笑话.<br>个人下意识里USB2.0都已经跟鼠标&#x2F;键盘的PS&#x2F;2接口一样, 已经销声匿迹了, by default不都应该是3.0的么?</p>
<p>此为坑一.</p>
<h3 id="镜像文件套路"><a href="#镜像文件套路" class="headerlink" title="镜像文件套路"></a>镜像文件套路</h3><p>为图省事儿, 在某CSXN网站花了N多积分, 下载了个”纯净版”镜像.<br>结果一安装, 里边密密麻麻各种软件, 什么360全家桶, TX全家桶, 2345全家桶.<br>浏览器主页被修改得不像样子.<br><mark>原来伪装成纯净版啊</mark></p>
<p>去搜自己仍然停留在十年前的经典的 雨林X风, 深度, 系统之家等, 结果一个一个都不像样子. 一点都不<code>纯净</code>!<br>最后只能老老实实去下载官方镜像, 又不是不能用@-@</p>
<h3 id="2345套路"><a href="#2345套路" class="headerlink" title="2345套路"></a>2345套路</h3><p>注册表里搜索”看图王”, 不查不知道, 一查吓一跳. 密密麻麻的, 看得我神经衰弱.<br>心想一个一个删除也不是个事儿啊.<br>索性大笔一挥, 直接把父节点删除. 结果直接经典的windows蓝屏.<br>没办法, 只好拾起传统艺能, 进入PE, 重装系统!</p>
<ul>
<li>不搜不知道, 一搜吓一跳. <a href="https://www.zhihu.com/question/35188509/answer/1266544765">劣迹斑斑</a>. 原来老板已经跑路, 搞起了网贷, 区块链.</li>
<li>好家伙, 我直呼好家伙. 原来还想做百年企业, 天天在官网给自己倒计时呢.</li>
</ul>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202208172241888.png"></p>
<blockquote>
<p>同样是小章鱼, 差别咋就那么大呢? 瞧瞧人家 <a href="https://github.com/">GitHub</a> 多有节操.</p>
</blockquote>
<h3 id="win10无节操套路"><a href="#win10无节操套路" class="headerlink" title="win10无节操套路"></a>win10无节操套路</h3><p>安装好系统, 准备安装显卡驱动, 结果报警, C盘存储空间不足.<br>What??? 我C盘可是40GB的容量, 就装了个系统, 啥软件都没安装呢, 咋就没了?<br>每个文件夹大小加起来, 总共也才10多GB, 剩下的20GB哪里去了? 查询才知道, 原来是被微软套路了.</p>
<ul>
<li><a href="https://www.itechtics.com/reserved-storage-windows-10/">17GB的预留空间</a></li>
<li>5GB的休眠文件</li>
</ul>
<blockquote>
<p>FxxK MicroSoft!</p>
</blockquote>
<h3 id="多么痛的领悟"><a href="#多么痛的领悟" class="headerlink" title="多么痛的领悟"></a>多么痛的领悟</h3><p>想想之前, 自己被mac&#x2F;linux保护得太好了. 还一直在纳闷为啥要给硬盘分区, C盘, D盘啥的多麻烦.<br>这次我知道了, 我乖乖地分成了几个区, 安装好了GHOST工具, 乖乖给C盘打了个GHOST镜像.<br>随时准备被这些流氓软件”XX”, 随时准备重装&#x2F;恢复系统.</p>
<blockquote>
<p>没办法, Windows的生存环境实在是太恶劣了!!</p>
</blockquote>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h1><ul>
<li><a href="https://www.expreview.com/62077.html">散热风扇的2针、3针、4针都有什么区别？</a></li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>瞎折腾</category>
      </categories>
      <tags>
        <tag>diy</tag>
      </tags>
  </entry>
  <entry>
    <title>十万个为什么之--为什么磁盘需要分区与挂载?</title>
    <url>//2022-08-30-disk-partition/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>经常会有个疑问: </p>
<ul>
<li>为什么磁盘需要进行分区, 不分区直接按照文件夹划分有啥问题? 这个在Windows下尤其有疑问.</li>
<li>为啥需要挂载? 直接插入设备, 为啥不能像Windows下U盘一样直接热插拔? Linux下为啥还需要手动挂载下? </li>
<li>分区与格式化以及文件系统有啥关系与区别? 是一对一的么? 一个分区下只能有一个文件系统么? 一个文件系统下只能有一个分区么?</li>
</ul>
<h1 id="为啥需要分区"><a href="#为啥需要分区" class="headerlink" title="为啥需要分区?"></a>为啥需要分区?</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>习惯了使用Linux&#x2F;Mac之后, 完全没有分区的概念了.</p>
<ul>
<li>Linux&#x2F;Ubuntu装机步骤:<ul>
<li>一整块磁盘, 选定文件系统类型, 进行格式化.</li>
<li>直接在磁盘上安装操作系统, 就可以开始使用了.</li>
</ul>
</li>
<li>Mac甚至无需装机, 开机直接使用.</li>
</ul>
<p>实际使用过程中, 不分区有如下优势:</p>
<ul>
<li>软件安装: 无需关注需要把软件安装在哪个盘(C盘&#x2F;D盘&#x2F;E盘…), 通常只需要默认路径就好;</li>
<li>文件下载存储: 无需关注文件要保存在哪个盘, 只需要关注保存在哪个目录即可.</li>
</ul>
<blockquote>
<p>因此完全不用担心到底分几个区, 每个分区大小多少, C盘满了如何扩容之类的问题.</p>
</blockquote>
<p>因此, 在攒了台Windows机器之后, 犹豫要不要分多个区. 后来事实教会了我怎么做人.</p>
<blockquote>
<p>Win10很无节操地会在C盘预留30GB+的空间, 还要放虚拟内存文件等, 导致可怜的C盘立刻存储报警.</p>
</blockquote>
<h2 id="个人实践理解"><a href="#个人实践理解" class="headerlink" title="个人实践理解"></a>个人实践理解</h2><p>个人使用下来, 唯一的理由就是: <strong>分区隔离, 方便无损重装系统.</strong></p>
<p>Mac&#x2F;Linux上, 几乎无需也没有重装过系统. 但<strong>在Windows下, 重装系统简直是常态</strong>. </p>
<blockquote>
<p>垃圾(病毒)软件太多, 连所谓的纯净镜像也根本不纯净.</p>
</blockquote>
<ul>
<li>都想往注册表里偷偷塞东西. 清理注册表, 一不小心就会把系统清理蓝屏.</li>
<li>或者有病毒, 直接系统崩溃.</li>
</ul>
<blockquote>
<p>解决方案</p>
</blockquote>
<ul>
<li>要么通过PE进入系统, 找到问题点, 进行修复. </li>
<li>要么直接重装系统. </li>
<li>找到问题点太麻烦, 所以还是无脑一键重装吧.</li>
</ul>
<p>但重装系统, 就需要把分区重新格式化. 想想吧, 辛苦安装的软件, 设定的配置, 保存的文件, 都会随着格式化被完全抹除!<br>所以还是分区吧, 只格式化C盘就好. 软件啊, 文件啊, 配置啊, 都放到其他盘里好了.</p>
<h2 id="其他专业理由"><a href="#其他专业理由" class="headerlink" title="其他专业理由"></a>其他专业理由</h2><p>参照知乎 <a href="https://www.zhihu.com/question/47538075/answer/107737383">其实windows分区是不是分C盘和D盘就好了？</a> 回答.</p>
<ul>
<li>病毒泛滥, 会把系统搞Crash, 需要频繁重装系统.</li>
<li>早期的FAT16&#x2F;32文件系统支持的单个分区容量有限. FAT32最大文件系统总容量 128GB, 在现在随便一个硬盘就是1TB+, 无法充分利用磁盘空间.</li>
<li>xp之前的windows系列操作系统本身稳定性堪忧，很容易因为用户操作、软件故障崩溃甚至破坏。尤其是经常折腾的桌面系统。这就导致用户不得不频繁重装系统。</li>
<li>操作系统权限&amp;软件兼容问题: 现在win10管理员权限小了，某些软件装在C盘会有权限问题，比如notepad++装在C盘，直接运行的话是不能保存自定义配置的</li>
</ul>
<blockquote>
<p>所以在Windows下, 还是老老实实分区吧! 当然在严肃的企业场景, 也推荐按照系统盘与数据盘进行下区分.</p>
</blockquote>
<h1 id="为啥需要挂载"><a href="#为啥需要挂载" class="headerlink" title="为啥需要挂载?"></a>为啥需要挂载?</h1><p>尤其是在Linux下, 设备可以从 &#x2F;dev&#x2F;sda[b] 路径下获取, 为啥不能直接操作这些设备? 还需要挂载(mount)下?</p>
<h2 id="为啥磁盘需要挂载才能使用"><a href="#为啥磁盘需要挂载才能使用" class="headerlink" title="为啥磁盘需要挂载才能使用?"></a>为啥磁盘需要挂载才能使用?</h2><h3 id="为啥不能直接操作-dev-sda-b-等裸设备"><a href="#为啥不能直接操作-dev-sda-b-等裸设备" class="headerlink" title="为啥不能直接操作/dev/sda[b]等裸设备?"></a>为啥不能直接操作<code>/dev/sda[b]</code>等裸设备?</h3><h3 id="挂载具体做了啥"><a href="#挂载具体做了啥" class="headerlink" title="挂载具体做了啥?"></a>挂载具体做了啥?</h3><p>本质上, Windows下也是有挂载这一步的, 本质上挂载就是把分区&#x2F;磁盘格式化之后的文件系统, 挂载到操作系统文件树下, 映射到某个目录,<br>便于操作系统</p>
<h3 id="Windows下也有挂载么"><a href="#Windows下也有挂载么" class="headerlink" title="Windows下也有挂载么?"></a>Windows下也有挂载么?</h3><p>是的. Windows下</p>
<h2 id="为啥不能像Windows一样-插入设备直接默认挂载"><a href="#为啥不能像Windows一样-插入设备直接默认挂载" class="headerlink" title="为啥不能像Windows一样, 插入设备直接默认挂载?"></a>为啥不能像Windows一样, 插入设备直接默认挂载?</h2><p>这个搜索了知乎, <a href="https://www.zhihu.com/question/524667726/answer/2437578886">得到的结论</a>是: </p>
<ol>
<li><p>Unix-like的操作系统不支持自动mount原因是为了权限控制</p>
<blockquote>
<p>POSIX权限的概念出现的很早，Unix、Linux都是支持POSIX权限的。<br>那么对于一个新设备来说，操作系统不是很确定是不是所有用户都对这个设备有访问权限，<br>这种情况下，如果自动mount，那么这个设备的内容就可能会被所有用户看到，<br>这样会有安全的隐患。所以Unix和Linux才要求必须先mount，<br>并且mount命令必须要用root权限，也就是说对于一个未知的设备，<br>必须由root来决定是不是可用的。</p>
<p>所以，这种设计的原因已经很清晰了，就是为了权限控制。</p>
</blockquote>
</li>
<li><p>Windows不需要这个机制，是因为Windows是从DOS发展过来的，这个过程中一直没有权限控制，</p>
<blockquote>
<p>所以Windows也不需要mount</p>
</blockquote>
</li>
<li><p>Linux也可以做到自动挂载, 例如Ubuntu就是自动挂载的</p>
</li>
</ol>
<h1 id="磁盘-amp-文件系统的扩展知识"><a href="#磁盘-amp-文件系统的扩展知识" class="headerlink" title="磁盘&amp;文件系统的扩展知识"></a>磁盘&amp;文件系统的扩展知识</h1><h2 id="磁盘-分区-文件系统-关系"><a href="#磁盘-分区-文件系统-关系" class="headerlink" title="磁盘, 分区, 文件系统 关系"></a>磁盘, 分区, 文件系统 关系</h2><p>如下: </p>
<pre class="mermaid">erDiagram
    DiskDevice ||--|{ Partition : contain
    Partition ||--|| FileSystem : format</pre>

<h3 id="磁盘-x2F-块设备-gt-分区"><a href="#磁盘-x2F-块设备-gt-分区" class="headerlink" title="磁盘&#x2F;块设备 -&gt; 分区"></a>磁盘&#x2F;块设备 -&gt; 分区</h3><p>一个磁盘设备(HDD, SSD, U盘等), 可以划分为多个分区. 分区方式有MBR, GPT两种.<br>那么磁盘分区的元信息写在哪里? </p>
<ul>
<li>是存储在文件系统中么? 此时磁盘还没有文件系统, 所以应该不是以文件形式保存, 所以我们也就无法直接在操作系统里找到这个文件并操作.</li>
<li>是存储在裸设备的固定位置(它在硬盘上的三维地址为（柱面，磁头，扇区）＝（0，0，1）。)</li>
<li>通过 <code>lsblk</code> 命令查看已经挂载的块设备<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@662fd3213ce8:/data<span class="token comment"># lsblk</span>
NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
vda    <span class="token number">254</span>:0    <span class="token number">0</span> <span class="token number">59</span>.6G  <span class="token number">0</span> disk
`-vda1 <span class="token number">254</span>:1    <span class="token number">0</span> <span class="token number">59</span>.6G  <span class="token number">0</span> part /etc/hosts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="分区-gt-文件系统"><a href="#分区-gt-文件系统" class="headerlink" title="分区 -&gt; 文件系统"></a>分区 -&gt; 文件系统</h3><p>一个分区对应一个文件系统. 因此同一个磁盘设备的多个分区, 各个分区都可以格式化成不同的文件系统类型.</p>
<ul>
<li>通过 <code>df -h</code> 命令查看分区<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@662fd3213ce8:/data<span class="token comment"># df -h</span>
Filesystem      Size  Used Avail Use% Mounted on
overlay          59G  <span class="token number">2</span>.7G   53G   <span class="token number">5</span>% /
tmpfs            64M     <span class="token number">0</span>   64M   <span class="token number">0</span>% /dev
shm              64M     <span class="token number">0</span>   64M   <span class="token number">0</span>% /dev/shm
/dev/vda1        59G  <span class="token number">2</span>.7G   53G   <span class="token number">5</span>% /data
tmpfs           <span class="token number">3</span>.9G     <span class="token number">0</span>  <span class="token number">3</span>.9G   <span class="token number">0</span>% /proc/acpi
tmpfs           <span class="token number">3</span>.9G     <span class="token number">0</span>  <span class="token number">3</span>.9G   <span class="token number">0</span>% /sys/firmware<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="文件系统类型描述元数据"><a href="#文件系统类型描述元数据" class="headerlink" title="文件系统类型描述元数据"></a>文件系统类型描述元数据</h3><div class="note warning"><p>TODO: 暂时还没搜索到相关信息.</p>
</div>

<h3 id="文件系统内部目录-amp-文件元数据"><a href="#文件系统内部目录-amp-文件元数据" class="headerlink" title="文件系统内部目录&amp;文件元数据:"></a>文件系统内部目录&amp;文件元数据:</h3><ul>
<li>例如ext4, 以inode形式保存. 包括文件大小, 权限信息, gmtCreated, gmtModified, 包含的block数量, 存储在磁盘的位置(柱面) 等</li>
<li>可以使用 stat 命令查看</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@662fd3213ce8:/data<span class="token comment"># stat dump.rdb</span>
  File: dump.rdb
  Size: <span class="token number">105</span>       	Blocks: <span class="token number">8</span>          IO Block: <span class="token number">4096</span>   regular <span class="token function">file</span>
Device: fe01h/65025d	Inode: <span class="token number">1055693</span>     Links: <span class="token number">1</span>
Access: <span class="token punctuation">(</span>0600/-rw-------<span class="token punctuation">)</span>  Uid: <span class="token punctuation">(</span>  <span class="token number">999</span>/   redis<span class="token punctuation">)</span>   Gid: <span class="token punctuation">(</span>  <span class="token number">999</span>/   redis<span class="token punctuation">)</span>
Access: <span class="token number">2022</span>-10-12 <span class="token number">16</span>:01:07.043330092 +0000
Modify: <span class="token number">2022</span>-06-26 <span class="token number">10</span>:16:40.880774990 +0000
Change: <span class="token number">2022</span>-06-26 <span class="token number">10</span>:16:40.896774990 +0000
 Birth: <span class="token number">2022</span>-06-26 <span class="token number">10</span>:16:40.869774990 +0000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<div class="note warning"><p>TODO: 分析下stat的具体信息含义, 尤其是 Device 相关的, 是不是操作系统直接就按照这个信息去寻找到文件的柱面范围了?</p>
</div>

<h3 id="分区名称规范"><a href="#分区名称规范" class="headerlink" title="分区名称规范"></a>分区名称规范</h3><ul>
<li>在Linux系统中，硬盘分区命名为sda1－sda4或者hda1－hda4</li>
</ul>
<div class="note warning"><p>TODO: 自己找个U盘试下划分成多个分区, 每个分区不同的文件系统类型?</p>
</div>





<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>十万个为什么</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>disk</tag>
        <tag>os</tag>
      </tags>
  </entry>
  <entry>
    <title>K8s部署使用错误排查</title>
    <url>//2022-11-01-k8s-trouble-shooting/</url>
    <content><![CDATA[<h1 id="ImagePullBackOff"><a href="#ImagePullBackOff" class="headerlink" title="ImagePullBackOff"></a>ImagePullBackOff</h1><h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><hr>
<p>在mac上使用minikube, 创建pod出现如下 ImagePullBackOff:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Normal   Pulling    8s               kubelet            Pulling image <span class="token string">"docker.io/nginx:1.23"</span>
Warning  Failed     8s               kubelet            Failed to pull image <span class="token string">"docker.io/nginx:1.23"</span><span class="token builtin class-name">:</span> rpc error: code <span class="token operator">=</span> Unknown desc <span class="token operator">=</span> Error response from daemon: Get <span class="token string">"https://registry-1.docker.io/v2/"</span><span class="token builtin class-name">:</span> dial tcp: lookup registry-1.docker.io on <span class="token number">192.168</span>.64.1:53: server misbehaving
Warning  Failed     8s               kubelet            Error: ErrImagePull
Normal   BackOff    6s <span class="token punctuation">(</span>x2 over 7s<span class="token punctuation">)</span>  kubelet            Back-off pulling image <span class="token string">"docker.io/nginx:1.23"</span>
Warning  Failed     6s <span class="token punctuation">(</span>x2 over 7s<span class="token punctuation">)</span>  kubelet            Error: ImagePullBackOff<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><hr>
<p>参见: <a href="https://github.com/docker/for-mac/issues/1317">解决方案</a></p>
<ol>
<li><p>登录minikube的节点</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ minikube <span class="token function">ssh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>在minikube node上手动 pull docker image, 如下, 发现问题仍然重现</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> pull docker.io/nginx
Using default tag: latest
Error response from daemon: Get <span class="token string">"https://registry-1.docker.io/v2/"</span><span class="token builtin class-name">:</span> dial tcp: lookup registry-1.docker.io on <span class="token number">192.168</span>.64.1:53: server misbehaving<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>修改minikube node上的resolv.conf文件的nameserver:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">vi</span> /etc/resolv.conf
nameserver <span class="token number">8.8</span>.8.8
search <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>重新尝试手动pull image, 发现问题解决:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> pull docker.io/nginx:1.23
<span class="token number">1.23</span>: Pulling from library/nginx
Digest: sha256:943c25b4b66b332184d5ba6bb18234273551593016c0e0ae906bab111548239f
Status: Downloaded newer image <span class="token keyword">for</span> nginx:1.23
docker.io/library/nginx:1.23<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>退出node, 在Mac上重新检查pod状态, 问题解决🎉🎉🎉:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">davywalkerdeMacBook-Pro:~ davywalker$ k get po
NAME                              READY   STATUS    RESTARTS   AGE
hello-minikube-67b8c7bdfd-965qn   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          87s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h2 id="为啥叫”ImagePullBackOff”"><a href="#为啥叫”ImagePullBackOff”" class="headerlink" title="为啥叫”ImagePullBackOff”??"></a>为啥叫”ImagePullBackOff”??</h2><hr>
<p>参见文章 <a href="https://www.tutorialworks.com/kubernetes-imagepullbackoff/">Kubernetes ImagePullBackOff error: what you need to know</a> 说明.</p>
<blockquote>
<p>The status ImagePullBackOff means that a Pod couldn’t start,<br>because Kubernetes couldn’t pull a container image.<br>The ‘BackOff’ part means that Kubernetes will keep trying to pull the image,<br>with an increasing delay (‘back-off’).</p>
</blockquote>
<p>这里的”BackOff”就是”退避”的意思, 当拉取失败时, kubelet应该有个退避算法来重试拉取. 具体退避算法是啥, 有待后续钻研. 🤔</p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>k8s</tag>
        <tag>kubectl</tag>
        <tag>trouble-shooting</tag>
      </tags>
  </entry>
  <entry>
    <title>玩转minikube</title>
    <url>//2022-11-02-k8s-play-with-minikube/</url>
    <content><![CDATA[<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><ul>
<li><p>登录Node</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">minikube <span class="token function">ssh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li></li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>k8s</tag>
        <tag>kubectl</tag>
        <tag>minikube</tag>
      </tags>
  </entry>
  <entry>
    <title>十万个为什么--用晶体管数量衡量芯片的先进性合理么?</title>
    <url>//2022-11-05-transistor-cnt-a-flawed-metric/</url>
    <content><![CDATA[<h1 id="0x00-Intro"><a href="#0x00-Intro" class="headerlink" title="0x00: Intro"></a>0x00: Intro</h1><p>最近在看 <a href="https://zhuanlan.zhihu.com/p/479978458">The Basic Principles of Computers for Everyone</a> 这本书, 从 </p>
<ul>
<li>与非门(NAND) 开始, 加上非门, 构建与门</li>
<li>4个NAND构建一位带开关的存储单元(M); </li>
<li>8个存储单元(M)构建1Byte的存储(B)</li>
<li>8个与门构建一个8位的Enabler(E)</li>
<li>B+E 构建一个 8位 <strong>寄存器(R)</strong> + 总线</li>
<li>8个与门+3个非门构建一个 <strong>3X8译码器(Decoder)</strong></li>
<li>1个8位寄存器&amp;2个4X16译码器(用于寻址) + 256个1位寄存器(R)&amp;3个与门(用于存数) 构建 256位 的RAM</li>
</ul>
<p>等等, 非常深入浅出. 后边会把读书笔记补充上来. </p>
<p>忍不住思维跳跃了下, 构建一个256位的RAM至少需要((4*8+8) + (4+16) + (4+1)*256 + 3 &#x3D; 1343)个门(4个MOS管构建出一个与非门, 但当前主流的都是FinFET, 场效应晶体管). 虽然是RAM的实现, 与实际CPU上L1&#x2F;L2&#x2F;L3Cache的实现方式不同, 但也能基本说明点儿问题, 就是我们构建CPU&#x2F;DRAM等都需要庞大数量的晶体管.</p>
<p>想起苹果2021发布的M1 Max芯片, <a href="https://www.apple.com/hk/en/newsroom/2021/10/introducing-m1-pro-and-m1-max-the-most-powerful-chips-apple-has-ever-built/">晶体管数量是570亿, 57 billion transistors</a>, 例如自己在用的<code>Intel Xeon E5 2660 V3</code>, 也有2.6 billion个transistors. 这种庞大的数字, 总是让人很震撼. 也无外乎厂商会用这个数字来吹嘘, 来作为重要指标, 说明自己的CPU&#x2F;芯片有多复杂多先进. 毕竟芯片面积总共就那么大, 10倍晶体管数量的提升, 基本就只能提升密度了, 也就是得靠先进制程等. </p>
<p>但我们技术人都要有批判性思维, 仔细再想下, CPU中<a href="https://zhuanlan.zhihu.com/p/31422201">几乎一半的面积都是L3 Cache</a>, Cache的电路设计并不复杂, 因此都是先进制程带来的红利么? 晶体管数量庞大, 真的能说明技术NB么?</p>
<p>遂搜索了下资料, 发现果然有人砸场子的, <a href="https://www.realworldtech.com/transistor-count-flawed-metric/">Transistor Count: A Flawed Metric</a>, 在标题里就明确之处, <strong>晶体管数量是一个有缺陷的指标</strong>. 详细阅读了之后, 我试着总结下作者的几个理由.</p>
<h1 id="0x01-晶体管数量是数不准的"><a href="#0x01-晶体管数量是数不准的" class="headerlink" title="0x01: 晶体管数量是数不准的!!"></a>0x01: 晶体管数量是数不准的!!</h1><hr>
<p>厂商给出的晶体管数量都是一个近似值. 同样的设计, 晶体管数量会有33%到37%的误差. 为啥呢? 摘录 <a href="https://www.eet-china.com/news/202009071737.html">为什么说Intel的10nm工艺比别家7nm更先进？</a> 中的片段:</p>
<blockquote>
<p>比较古老的一种计量密度的方法，其实是用 CPP（contacted poly pitch，即 gate pitch，栅间距）去乘以 metal pitch 最小金属间距。<br>到了 FinFET 晶体管时期，增加 fin（鳍）高度、减少 fin 之间的间距就能有效增加驱动电流。驱动电流上去之后，就可以减少 fin 的数量——一个单元减少 fin 的数量，也就实现了金属 track 的减少，可以降低动态功耗，与此同时确保性能，甚至还能通过一些优化手法来提升速度。<br>在金属 track 减少之后，传统计算密度的方法其实就不怎么准确了，因为它其实不能反映单元高度减少这样的实际结构变化。所以后来有方法是 CPP 乘以 MMP（最小金属间距），再乘以 Track 数。<br>但更多的结构优化，比如后文会提到的 COAG 技术进一步降低了单元高度，同时采用 dummy gate 来缩减单元的宽度。那么在单元宽度、高度同时降低的情况下，上面这种计算方法就又不准确了。<br>所以如今的晶体管数字，更多的应当作为一种参考来看，毕竟晶体管并不是以均匀的方式分布在 die 上的。</p>
</blockquote>
<h1 id="0x02-不同类型的芯片-设计目标是有差异的-不会一味追求高密度"><a href="#0x02-不同类型的芯片-设计目标是有差异的-不会一味追求高密度" class="headerlink" title="0x02: 不同类型的芯片, 设计目标是有差异的, 不会一味追求高密度"></a>0x02: 不同类型的芯片, 设计目标是有差异的, 不会一味追求高密度</h1><hr>
<p>例如</p>
<ul>
<li>ASCI芯片, 只需要达到目标的吞吐量即可, 不需要追求高主频. 例如<code>Cisco Silicon One</code>, 只需要达到目标的400Gbps以太网吞吐量即可. 因此ASCI设计团队更倾向于 1. 使用自动化设计工具 2. 更少的定制电路 3. 更高密度晶体管(单Fin的FinFET晶体管). </li>
<li>服务器芯片追求更高频率, 例如<code>Xeon 8268</code>和<code>Xeon 8260</code>都有24 Core, 但8268的频率是2.9GHz, 8260是2.4GHz, 价格相差了$1600. 因此服务器芯片设计更倾向于 1. 更多的定制电路 2. 更大的晶体管(2Fin, 3Fin甚至更多Fin的FinFET晶体管)<blockquote>
<p>TODO: FinFET中Fin数量与主频的关系是?</p>
</blockquote>
</li>
</ul>
<h1 id="0x03-芯片中不同功能区域密度不同"><a href="#0x03-芯片中不同功能区域密度不同" class="headerlink" title="0x03. 芯片中不同功能区域密度不同"></a>0x03. 芯片中不同功能区域密度不同</h1><hr>
<p><img data-src="https://plantegg.github.io/images/951413iMgBlog/4Z1nU.png"><br>如上图, 处理器组成部分:</p>
<ol>
<li>CPU Cores, 包含 cores, L1 Cache, L2 Cache</li>
<li>L3 Cache</li>
<li>System Interface</li>
<li>I&#x2F;O, 包含 QPI, DIMM</li>
</ol>
<p>如下两个处理器, 都是for服务器场景:<br><img data-src="https://www.realworldtech.com/wp-content/uploads/2020/05/Table1.png?x97168" alt="Table 1. Transistor count and density for major regions for the Poulson and Tukwila generations of Itanium processors"></p>
<p>如上图, CPU 不同区域, 密度差异能高达20倍. 例如Poulson的L3 Cache密度是13.33Mtr&#x2F;mm2, 但IO区域密度是0.65Mtr&#x2F;mm2</p>
<blockquote>
<p>Naturally, the cache region which primarily comprises ultra-dense SRAM is the densest and makes up most of the transistors in each design.<br>The I&#x2F;O is the least dense portion of the two designs, because it contains many delicate analog circuits such as PLLs and DLLs, digital filters, and the large, high-voltage I&#x2F;O transistors that are used to transmit and receive off-chip data.</p>
</blockquote>
<p>如果只追求高密度, 庞大数量, 直接堆L3Cache就行了.</p>
<h1 id="0x04-实际有很多无效的晶体管"><a href="#0x04-实际有很多无效的晶体管" class="headerlink" title="0x04: 实际有很多无效的晶体管"></a>0x04: 实际有很多无效的晶体管</h1><hr>
<p>正常工作的叫做active transistors, 但实际上, 生产出来的芯片里还会包含: </p>
<ol>
<li>dummy transistors: 主要用来提升良品率, 但数量不算那么庞大.</li>
<li>decap transistors(decoupling capacitors): 数量就比较巨大了.</li>
</ol>
<blockquote>
<p>To ensure yield, the die must be relatively uniform and the whitespace cannot be truly empty. Many designs will fill the whitespace with decap cells to provide decoupling capacitance for power delivery and thereby improve operating frequency.</p>
</blockquote>
<p>实际上无效晶体管数量占到了20%~30%, 甚至更多.</p>
<blockquote>
<p>They found that in the small sampled regions that the active transistors were between 70-80% of the total, and the remaining 20-30% of layout transistors were decap and dummy devices.</p>
</blockquote>
<h1 id="0x05-晶体管不贵多而贵在精"><a href="#0x05-晶体管不贵多而贵在精" class="headerlink" title="0x05. 晶体管不贵多而贵在精"></a>0x05. 晶体管不贵多而贵在精</h1><hr>
<p>例如 AMD Radeon VII 比 RX 5700多了28%的transistors, 但是两者性能差不多. 部分原因是RX 5700使用了更加先进的架构, 而且RX 5700要便宜很多.</p>
<blockquote>
<p>When it comes to actual value to customers, it’s not about the transistor count, but how the transistors are used.</p>
</blockquote>
<h1 id="0x06-总结"><a href="#0x06-总结" class="headerlink" title="0x06: 总结"></a>0x06: 总结</h1><p>所以, 这东西就跟娱乐大师跑分一样, 只作为一个参考项, 不要作为唯一指标. 不能一叶障目不见泰山.</p>
<p>更重要的是, 我们技术人, <strong>需要保持独立思考能力</strong>, 知其然, 也要知其所以然, 不要被厂商忽悠了. </p>
<h1 id="0xFF-其他一些好玩儿的科普"><a href="#0xFF-其他一些好玩儿的科普" class="headerlink" title="0xFF:其他一些好玩儿的科普"></a>0xFF:其他一些好玩儿的科普</h1><ol>
<li>L3 Cache为啥不能做得更大一些? 直接替换掉RAM不行么?</li>
</ol>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>十万个为什么</category>
      </categories>
      <tags>
        <tag>semi-conductor</tag>
        <tag>cpu</tag>
        <tag>hardware</tag>
        <tag>chip</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux磁盘与分区的常用命令</title>
    <url>//2022-11-16-disk-partition-2/</url>
    <content><![CDATA[<h1 id="磁盘"><a href="#磁盘" class="headerlink" title="磁盘"></a>磁盘</h1><h2 id="查看当前系统块设备列表"><a href="#查看当前系统块设备列表" class="headerlink" title="查看当前系统块设备列表"></a>查看当前系统块设备列表</h2><h3 id="fdisk-l"><a href="#fdisk-l" class="headerlink" title="fdisk -l"></a>fdisk -l</h3><p>如下, <code>fdisk -l</code> 命令, 可以显示出:</p>
<ol>
<li>当前系统存在2块块设备, 分别是 <code>/dev/sda</code> 与 <code>/dev/sdb</code>, 大小分别为 21.5GB 与 31.5GB</li>
<li><code>/dev/sda</code> 磁盘, 划为两个分区, 分别是 <code>/dev/sda1</code> <code>/dev/sda2</code>, 其中 <code>/dev/sda2</code> 为LVM文件系统类型</li>
<li><code>/dev/sdb</code> 磁盘(个人知道是U盘), 划分为1个分区 <code>/dev/sdb1</code> , 文件系统类型是 <code>W95 FAT32</code></li>
<li>TODO: 疑问1  <code>/dev/mapper/centos-root</code> <code>/dev/mapper/centos-swap</code> 分别都是啥? 个人已知是在 <code>/dev/sda2</code> 下继续分区出来的, 如下 <code>lsblk</code> 命令指示. 但为啥这里没有</li>
<li>TODO: 疑问2 <code>Linux LVM</code> 具体是啥文件系统类型?</li>
</ol>
<blockquote>
<p>SATA device names follow the pattern &#x2F;dev&#x2F;sd[a-z]<br>while NVMe device names have the following pattern &#x2F;dev&#x2F;nvme[1-9]n[1-9]</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># fdisk -l</span>
Disk /dev/sda: <span class="token number">21.5</span> GB, <span class="token number">21474836480</span> bytes, <span class="token number">41943040</span> sectors
Units <span class="token operator">=</span> sectors of <span class="token number">1</span> * <span class="token number">512</span> <span class="token operator">=</span> <span class="token number">512</span> bytes
Sector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: <span class="token number">512</span> bytes / <span class="token number">512</span> bytes
I/O size <span class="token punctuation">(</span>minimum/optimal<span class="token punctuation">)</span>: <span class="token number">512</span> bytes / <span class="token number">512</span> bytes
Disk label type: dos
Disk identifier: 0x000b7bb1

   Device Boot      Start         End      Blocks   Id  System
/dev/sda1   *        <span class="token number">2048</span>     <span class="token number">2099199</span>     <span class="token number">1048576</span>   <span class="token number">83</span>  Linux
/dev/sda2         <span class="token number">2099200</span>    <span class="token number">41943039</span>    <span class="token number">19921920</span>   8e  Linux LVM

Disk /dev/mapper/centos-root: <span class="token number">18.2</span> GB, <span class="token number">18249416704</span> bytes, <span class="token number">35643392</span> sectors
Units <span class="token operator">=</span> sectors of <span class="token number">1</span> * <span class="token number">512</span> <span class="token operator">=</span> <span class="token number">512</span> bytes
Sector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: <span class="token number">512</span> bytes / <span class="token number">512</span> bytes
I/O size <span class="token punctuation">(</span>minimum/optimal<span class="token punctuation">)</span>: <span class="token number">512</span> bytes / <span class="token number">512</span> bytes

Disk /dev/mapper/centos-swap: <span class="token number">2147</span> MB, <span class="token number">2147483648</span> bytes, <span class="token number">4194304</span> sectors
Units <span class="token operator">=</span> sectors of <span class="token number">1</span> * <span class="token number">512</span> <span class="token operator">=</span> <span class="token number">512</span> bytes
Sector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: <span class="token number">512</span> bytes / <span class="token number">512</span> bytes
I/O size <span class="token punctuation">(</span>minimum/optimal<span class="token punctuation">)</span>: <span class="token number">512</span> bytes / <span class="token number">512</span> bytes

Disk /dev/sdb: <span class="token number">31.5</span> GB, <span class="token number">31457280000</span> bytes, <span class="token number">61440000</span> sectors
Units <span class="token operator">=</span> sectors of <span class="token number">1</span> * <span class="token number">512</span> <span class="token operator">=</span> <span class="token number">512</span> bytes
Sector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: <span class="token number">512</span> bytes / <span class="token number">512</span> bytes
I/O size <span class="token punctuation">(</span>minimum/optimal<span class="token punctuation">)</span>: <span class="token number">512</span> bytes / <span class="token number">512</span> bytes
Disk label type: dos
Disk identifier: 0x1c9aed9e

   Device Boot      Start         End      Blocks   Id  System
/dev/sdb1   *          <span class="token number">64</span>    <span class="token number">61439999</span>    <span class="token number">30719968</span>    b  W95 FAT32<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="lsblk"><a href="#lsblk" class="headerlink" title="lsblk"></a>lsblk</h3><ul>
<li>如下, 类型为”disk”的有两个, sda sdb</li>
<li>sda 被划分为了2个分区, sda1 与 sda2</li>
<li>sdb 被划分为了1个分区, sdb1</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># lsblk</span>
NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
sda               <span class="token number">8</span>:0    <span class="token number">0</span>   20G  <span class="token number">0</span> disk
├─sda1            <span class="token number">8</span>:1    <span class="token number">0</span>    1G  <span class="token number">0</span> part /boot
└─sda2            <span class="token number">8</span>:2    <span class="token number">0</span>   19G  <span class="token number">0</span> part
  ├─centos-root <span class="token number">253</span>:0    <span class="token number">0</span>   17G  <span class="token number">0</span> lvm  /
  └─centos-swap <span class="token number">253</span>:1    <span class="token number">0</span>    2G  <span class="token number">0</span> lvm  <span class="token punctuation">[</span>SWAP<span class="token punctuation">]</span>
sdb               <span class="token number">8</span>:16   <span class="token number">1</span> <span class="token number">29</span>.3G  <span class="token number">0</span> disk
└─sdb1            <span class="token number">8</span>:17   <span class="token number">1</span> <span class="token number">29</span>.3G  <span class="token number">0</span> part<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="查看设备的文件系统类型"><a href="#查看设备的文件系统类型" class="headerlink" title="查看设备的文件系统类型"></a>查看设备的文件系统类型</h2><h3 id="不挂载查看-fdisk-l"><a href="#不挂载查看-fdisk-l" class="headerlink" title="不挂载查看: fdisk -l"></a>不挂载查看: fdisk -l</h3><p>如上, </p>
<h3 id="不挂载查看-blkid"><a href="#不挂载查看-blkid" class="headerlink" title="不挂载查看: blkid"></a>不挂载查看: blkid</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># blkid /dev/sda2</span>
/dev/sda2: <span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">"xb72qt-XG0d-7jNA-VOEC-z3jt-y7bz-mtye35"</span> <span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">"LVM2_member"</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># blkid /dev/mapper/centos-root</span>
/dev/mapper/centos-root: <span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">"a30443bd-8ab9-4869-917d-fe51b512b993"</span> <span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">"xfs"</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># blkid /dev/sdb1</span>
/dev/sdb1: <span class="token assign-left variable">LABEL</span><span class="token operator">=</span><span class="token string">"DISK_IMG"</span> <span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">"1C9A-ED9E"</span> <span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">"vfat"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="挂载后查看-df-hT"><a href="#挂载后查看-df-hT" class="headerlink" title="挂载后查看: df -hT"></a>挂载后查看: df -hT</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># df -hT</span>
Filesystem              Type      Size  Used Avail Use% Mounted on
devtmpfs                devtmpfs  475M     <span class="token number">0</span>  475M   <span class="token number">0</span>% /dev
tmpfs                   tmpfs     487M     <span class="token number">0</span>  487M   <span class="token number">0</span>% /dev/shm
tmpfs                   tmpfs     487M  <span class="token number">7</span>.7M  479M   <span class="token number">2</span>% /run
tmpfs                   tmpfs     487M     <span class="token number">0</span>  487M   <span class="token number">0</span>% /sys/fs/cgroup
/dev/mapper/centos-root xfs        17G  <span class="token number">1</span>.4G   16G   <span class="token number">9</span>% /
/dev/sda1               xfs      1014M  138M  877M  <span class="token number">14</span>% /boot
tmpfs                   tmpfs      98M     <span class="token number">0</span>   98M   <span class="token number">0</span>% /run/user/0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="查看所有已挂载的分区与挂载点文件系统等信息-findmnt"><a href="#查看所有已挂载的分区与挂载点文件系统等信息-findmnt" class="headerlink" title="查看所有已挂载的分区与挂载点文件系统等信息 findmnt"></a>查看所有已挂载的分区与挂载点文件系统等信息 findmnt</h3><p>如下: </p>
<ol>
<li><code>/dev/mapper/centos-root</code> 分区挂载在 <code>/</code> 目录下, 文件系统类型是<code>xfs</code></li>
<li><code>/dev/sda1</code> 分区挂载在 <code>/boot/</code> 目录下, 文件系统类型是<code>xfs</code></li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># findmnt</span>
TARGET                                SOURCE                  FSTYPE     OPTIONS
/                                     /dev/mapper/centos-root xfs        rw,relatime,seclabel,attr2,inode64,noquota
├─/sys                                sysfs                   sysfs      rw,nosuid,nodev,noexec,relatime,seclabel
│ ├─/sys/kernel/security              securityfs              securityfs rw,nosuid,nodev,noexec,relatime
│ ├─/sys/fs/cgroup                    tmpfs                   tmpfs      ro,nosuid,nodev,noexec,seclabel,mode<span class="token operator">=</span><span class="token number">755</span>
│ │ ├─/sys/fs/cgroup/systemd          cgroup                  cgroup     rw,nosuid,nodev,noexec,relatime,seclabel,xattr,release_agent<span class="token operator">=</span>/usr/lib/systemd/systemd-cgroups-agent,name<span class="token operator">=</span>systemd
│ │ ├─/sys/fs/cgroup/memory           cgroup                  cgroup     rw,nosuid,nodev,noexec,relatime,seclabel,memory
│ │ ├─/sys/fs/cgroup/blkio            cgroup                  cgroup     rw,nosuid,nodev,noexec,relatime,seclabel,blkio
│ │ ├─/sys/fs/cgroup/cpuset           cgroup                  cgroup     rw,nosuid,nodev,noexec,relatime,seclabel,cpuset
│ │ ├─/sys/fs/cgroup/perf_event       cgroup                  cgroup     rw,nosuid,nodev,noexec,relatime,seclabel,perf_event
│ │ ├─/sys/fs/cgroup/net_cls,net_prio cgroup                  cgroup     rw,nosuid,nodev,noexec,relatime,seclabel,net_prio,net_cls
│ │ ├─/sys/fs/cgroup/devices          cgroup                  cgroup     rw,nosuid,nodev,noexec,relatime,seclabel,devices
│ │ ├─/sys/fs/cgroup/cpu,cpuacct      cgroup                  cgroup     rw,nosuid,nodev,noexec,relatime,seclabel,cpuacct,cpu
│ │ ├─/sys/fs/cgroup/hugetlb          cgroup                  cgroup     rw,nosuid,nodev,noexec,relatime,seclabel,hugetlb
│ │ ├─/sys/fs/cgroup/freezer          cgroup                  cgroup     rw,nosuid,nodev,noexec,relatime,seclabel,freezer
│ │ └─/sys/fs/cgroup/pids             cgroup                  cgroup     rw,nosuid,nodev,noexec,relatime,seclabel,pids
│ ├─/sys/fs/pstore                    pstore                  pstore     rw,nosuid,nodev,noexec,relatime
│ ├─/sys/kernel/config                configfs                configfs   rw,relatime
│ ├─/sys/fs/selinux                   selinuxfs               selinuxfs  rw,relatime
│ └─/sys/kernel/debug                 debugfs                 debugfs    rw,relatime
├─/proc                               proc                    proc       rw,nosuid,nodev,noexec,relatime
│ └─/proc/sys/fs/binfmt_misc          systemd-1               autofs     rw,relatime,fd<span class="token operator">=</span><span class="token number">26</span>,pgrp<span class="token operator">=</span><span class="token number">1</span>,timeout<span class="token operator">=</span><span class="token number">0</span>,minproto<span class="token operator">=</span><span class="token number">5</span>,maxproto<span class="token operator">=</span><span class="token number">5</span>,direct,pipe_ino<span class="token operator">=</span><span class="token number">13709</span>
├─/dev                                devtmpfs                devtmpfs   rw,nosuid,seclabel,size<span class="token operator">=</span>485840k,nr_inodes<span class="token operator">=</span><span class="token number">121460</span>,mode<span class="token operator">=</span><span class="token number">755</span>
│ ├─/dev/shm                          tmpfs                   tmpfs      rw,nosuid,nodev,seclabel
│ ├─/dev/pts                          devpts                  devpts     rw,nosuid,noexec,relatime,seclabel,gid<span class="token operator">=</span><span class="token number">5</span>,mode<span class="token operator">=</span><span class="token number">620</span>,ptmxmode<span class="token operator">=</span>000
│ ├─/dev/hugepages                    hugetlbfs               hugetlbfs  rw,relatime,seclabel
│ └─/dev/mqueue                       mqueue                  mqueue     rw,relatime,seclabel
├─/run                                tmpfs                   tmpfs      rw,nosuid,nodev,seclabel,mode<span class="token operator">=</span><span class="token number">755</span>
│ └─/run/user/0                       tmpfs                   tmpfs      rw,nosuid,nodev,relatime,seclabel,size<span class="token operator">=</span>99568k,mode<span class="token operator">=</span><span class="token number">700</span>
└─/boot                               /dev/sda1               xfs        rw,relatime,seclabel,attr2,inode64,noquota<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h2><h3 id="划分分区-fdisk-n"><a href="#划分分区-fdisk-n" class="headerlink" title="划分分区: fdisk n"></a>划分分区: fdisk n</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># fdisk /dev/sdb</span>
Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> <span class="token builtin class-name">help</span><span class="token punctuation">)</span>: n
Partition type:
   p   primary <span class="token punctuation">(</span><span class="token number">0</span> primary, <span class="token number">0</span> extended, <span class="token number">4</span> <span class="token function">free</span><span class="token punctuation">)</span>
   e   extended
Select <span class="token punctuation">(</span>default p<span class="token punctuation">)</span>: p
Partition number <span class="token punctuation">(</span><span class="token number">1</span>-4, default <span class="token number">1</span><span class="token punctuation">)</span>:
First sector <span class="token punctuation">(</span><span class="token number">2048</span>-61439999, default <span class="token number">2048</span><span class="token punctuation">)</span>:
Using default value <span class="token number">2048</span>
Last sector, +sectors or +size<span class="token punctuation">&#123;</span>K,M,G<span class="token punctuation">&#125;</span> <span class="token punctuation">(</span><span class="token number">2048</span>-61439999, default <span class="token number">61439999</span><span class="token punctuation">)</span>:
Using default value <span class="token number">61439999</span>
Partition <span class="token number">1</span> of <span class="token builtin class-name">type</span> Linux and of size <span class="token number">29.3</span> GiB is <span class="token builtin class-name">set</span>

Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> <span class="token builtin class-name">help</span><span class="token punctuation">)</span>: w
The partition table has been altered<span class="token operator">!</span>

Calling ioctl<span class="token punctuation">(</span><span class="token punctuation">)</span> to re-read partition table.
Syncing disks.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="删除分区-fdisk-d"><a href="#删除分区-fdisk-d" class="headerlink" title="删除分区 fdisk d"></a>删除分区 fdisk d</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># fdisk /dev/sdb</span>
命令<span class="token punctuation">(</span>输入 m 获取帮助<span class="token punctuation">)</span>：d
分区号 <span class="token punctuation">(</span><span class="token number">1</span>-3，默认 <span class="token number">3</span><span class="token punctuation">)</span>：
分区 <span class="token number">3</span> 已删除

命令<span class="token punctuation">(</span>输入 m 获取帮助<span class="token punctuation">)</span>：w
The partition table has been altered<span class="token operator">!</span>

Calling ioctl<span class="token punctuation">(</span><span class="token punctuation">)</span> to re-read partition table.
正在同步磁盘。
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># lsblk -p</span>
NAME                        MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
/dev/sda                      <span class="token number">8</span>:0    <span class="token number">0</span>   20G  <span class="token number">0</span> disk
├─/dev/sda1                   <span class="token number">8</span>:1    <span class="token number">0</span>    1G  <span class="token number">0</span> part /boot
└─/dev/sda2                   <span class="token number">8</span>:2    <span class="token number">0</span>   19G  <span class="token number">0</span> part
  ├─/dev/mapper/centos-root <span class="token number">253</span>:0    <span class="token number">0</span>   17G  <span class="token number">0</span> lvm  /
  └─/dev/mapper/centos-swap <span class="token number">253</span>:1    <span class="token number">0</span>    2G  <span class="token number">0</span> lvm  <span class="token punctuation">[</span>SWAP<span class="token punctuation">]</span>
/dev/sdb                      <span class="token number">8</span>:16   <span class="token number">1</span> <span class="token number">29</span>.3G  <span class="token number">0</span> disk
├─/dev/sdb1                   <span class="token number">8</span>:17   <span class="token number">1</span>   10G  <span class="token number">0</span> part
└─/dev/sdb2                   <span class="token number">8</span>:18   <span class="token number">1</span>    4G  <span class="token number">0</span> part
/dev/sr0                     <span class="token number">11</span>:0    <span class="token number">1</span>  973M  <span class="token number">0</span> rom<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="挂载分区-mount"><a href="#挂载分区-mount" class="headerlink" title="挂载分区 mount"></a>挂载分区 mount</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># mount /dev/sdb1 /root/movie</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># mount /dev/sdb2 /root/book</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># df -h</span>
文件系统                 容量  已用  可用 已用% 挂载点
/dev/sdb1                 10G   33M   10G    <span class="token number">1</span>% /root/movie
/dev/sdb2                <span class="token number">4</span>.0G   33M  <span class="token number">4</span>.0G    <span class="token number">1</span>% /root/book
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># lsblk -p</span>
NAME                        MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
/dev/sdb                      <span class="token number">8</span>:16   <span class="token number">1</span> <span class="token number">29</span>.3G  <span class="token number">0</span> disk
├─/dev/sdb1                   <span class="token number">8</span>:17   <span class="token number">1</span>   10G  <span class="token number">0</span> part /root/movie
└─/dev/sdb2                   <span class="token number">8</span>:18   <span class="token number">1</span>    4G  <span class="token number">0</span> part /root/book<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="卸载分区-umount"><a href="#卸载分区-umount" class="headerlink" title="卸载分区 umount"></a>卸载分区 umount</h3><blockquote>
<p>本质上与Windows上弹出U盘(设备)是一样道理, 底层就是将该设备从文件树中删除.<br>因此如果操作系统正在访问&#x2F;占用该设备, 会卸载&#x2F;弹出失败.</p>
</blockquote>
<p>卸载方式: </p>
<ul>
<li>通过挂载点卸载</li>
<li>通过设备名卸载</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># umount -v /root/movie #通过挂载点卸载</span>
umount: /root/movie <span class="token punctuation">(</span>/dev/sdb1<span class="token punctuation">)</span> 已卸载
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># umount -v /dev/sdb2 #通过设备名卸载</span>
umount: /root/book <span class="token punctuation">(</span>/dev/sdb2<span class="token punctuation">)</span> 已卸载
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># lsblk -p</span>
NAME                        MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
/dev/sdb                      <span class="token number">8</span>:16   <span class="token number">1</span> <span class="token number">29</span>.3G  <span class="token number">0</span> disk
├─/dev/sdb1                   <span class="token number">8</span>:17   <span class="token number">1</span>   10G  <span class="token number">0</span> part
└─/dev/sdb2                   <span class="token number">8</span>:18   <span class="token number">1</span>    4G  <span class="token number">0</span> part
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># df -h</span>
文件系统                 容量  已用  可用 已用% 挂载点
devtmpfs                 475M     <span class="token number">0</span>  475M    <span class="token number">0</span>% /dev
/dev/mapper/centos-root   17G  <span class="token number">1</span>.4G   16G    <span class="token number">9</span>% /
/dev/sda1               1014M  138M  877M   <span class="token number">14</span>% /boot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>卸载之后, 重新挂载:</p>
<ol>
<li>不要求新的挂载点与之前一直. 例如之前<code>/dev/sdb2</code>挂载到<code>/root/book</code>目录下, 卸载之后重新挂载, <code>/dev/sdb2</code>可以挂载到 <code>/root/movie</code> 目录下</li>
<li>分区里边的内容仍然是保留的. 例如 <code>/dev/sdb2</code> 分区卸载重新挂载到其他目录, 该分区下的内容仍然是保留的, 能从新的目录下访问到该内容.</li>
</ol>
<h1 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h1><h2 id="为磁盘格式化文件系统"><a href="#为磁盘格式化文件系统" class="headerlink" title="为磁盘格式化文件系统"></a>为磁盘格式化文件系统</h2><h3 id="不分区-直接格式化整个设备"><a href="#不分区-直接格式化整个设备" class="headerlink" title="不分区, 直接格式化整个设备"></a>不分区, 直接格式化整个设备</h3><ul>
<li>如下, 直接把U盘格式化为xfs文件系统, 之后使用 <code>blkid</code> 查看设备的文件系统类型, 使用<code>lsblk</code>只能看到该设备是裸设备: <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># mkfs.xfs -f /dev/sdb</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># blkid /dev/sdb</span>
/dev/sdb: <span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">"b3841552-6b45-4e76-980a-911a107fbade"</span> <span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">"xfs"</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># lsblk -p</span>
NAME                        MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
/dev/sda                      <span class="token number">8</span>:0    <span class="token number">0</span>   20G  <span class="token number">0</span> disk
├─/dev/sda1                   <span class="token number">8</span>:1    <span class="token number">0</span>    1G  <span class="token number">0</span> part /boot
└─/dev/sda2                   <span class="token number">8</span>:2    <span class="token number">0</span>   19G  <span class="token number">0</span> part
  ├─/dev/mapper/centos-root <span class="token number">253</span>:0    <span class="token number">0</span>   17G  <span class="token number">0</span> lvm  /
  └─/dev/mapper/centos-swap <span class="token number">253</span>:1    <span class="token number">0</span>    2G  <span class="token number">0</span> lvm  <span class="token punctuation">[</span>SWAP<span class="token punctuation">]</span>
/dev/sdb                      <span class="token number">8</span>:16   <span class="token number">1</span> <span class="token number">29</span>.3G  <span class="token number">0</span> disk
/dev/sr0                     <span class="token number">11</span>:0    <span class="token number">1</span>  973M  <span class="token number">0</span> rom<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="分区-格式化分区"><a href="#分区-格式化分区" class="headerlink" title="分区, 格式化分区"></a>分区, 格式化分区</h3><ul>
<li><p>如下, <code>/dev/sdb</code>U盘分成1个分区, 但不对分区进行格式化, blkid 查看到的信息为空</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># fdisk -l</span>
   Device Boot      Start         End      Blocks   Id  System
/dev/sdb1            <span class="token number">2048</span>    <span class="token number">61439999</span>    <span class="token number">30718976</span>   <span class="token number">83</span>  Linux
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># blkid /dev/sdb</span>
/dev/sdb: <span class="token assign-left variable">PTTYPE</span><span class="token operator">=</span><span class="token string">"dos"</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># blkid /dev/sdb1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>将分区格式化之后, blkid 查看到具体分区文件系统类型信息:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># mkfs.xfs -f /dev/sdb1</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># blkid /dev/sdb1</span>
/dev/sdb1: <span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">"6c3bcc54-b925-4e3c-a101-6edf5ca28268"</span> <span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">"xfs"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="扩容-x2F-缩容分区"><a href="#扩容-x2F-缩容分区" class="headerlink" title="扩容&#x2F;缩容分区"></a>扩容&#x2F;缩容分区</h2><h3 id="普通类型分区"><a href="#普通类型分区" class="headerlink" title="普通类型分区"></a>普通类型分区</h3><p>可以无损扩容缩容么? </p>
<h3 id="LVM类型"><a href="#LVM类型" class="headerlink" title="LVM类型"></a>LVM类型</h3><p>参照: <a href="https://zhuanlan.zhihu.com/p/450057653">centos7扩容根目录</a><br>自己使用的虚拟机是20G硬盘. 想要扩容下根目录, 扩容到32G, 即如下的 <code>MOUNTPOINT /</code>: </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># lsblk -p</span>
NAME                        MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
/dev/sda                      <span class="token number">8</span>:0    <span class="token number">0</span>   20G  <span class="token number">0</span> disk
├─/dev/sda1                   <span class="token number">8</span>:1    <span class="token number">0</span>    1G  <span class="token number">0</span> part /boot
└─/dev/sda2                   <span class="token number">8</span>:2    <span class="token number">0</span>   19G  <span class="token number">0</span> part
  ├─/dev/mapper/centos-root <span class="token number">253</span>:0    <span class="token number">0</span>   17G  <span class="token number">0</span> lvm  /
  └─/dev/mapper/centos-swap <span class="token number">253</span>:1    <span class="token number">0</span>    2G  <span class="token number">0</span> lvm  <span class="token punctuation">[</span>SWAP<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="VMWare-Fusion中修改磁盘大小"><a href="#VMWare-Fusion中修改磁盘大小" class="headerlink" title="VMWare Fusion中修改磁盘大小"></a>VMWare Fusion中修改磁盘大小</h4><p>操作方式比较简单, 直接在控制面板修改文件大小即可.<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202211222348543.png"></p>
<ul>
<li>该步骤结束后, 效果:<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># lsblk -p</span>
NAME                        MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
/dev/sda                      <span class="token number">8</span>:0    <span class="token number">0</span>   32G  <span class="token number">0</span> disk
├─/dev/sda1                   <span class="token number">8</span>:1    <span class="token number">0</span>    1G  <span class="token number">0</span> part /boot
└─/dev/sda2                   <span class="token number">8</span>:2    <span class="token number">0</span>   19G  <span class="token number">0</span> part
  ├─/dev/mapper/centos-root <span class="token number">253</span>:0    <span class="token number">0</span>   17G  <span class="token number">0</span> lvm  /
  └─/dev/mapper/centos-swap <span class="token number">253</span>:1    <span class="token number">0</span>    2G  <span class="token number">0</span> lvm  <span class="token punctuation">[</span>SWAP<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h4 id="将新增的空间新建一个LVM类型分区-fdisk"><a href="#将新增的空间新建一个LVM类型分区-fdisk" class="headerlink" title="将新增的空间新建一个LVM类型分区(fdisk)"></a>将新增的空间新建一个LVM类型分区(fdisk)</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># fdisk /dev/sda</span>
命令<span class="token punctuation">(</span>输入 m 获取帮助<span class="token punctuation">)</span>：n
Partition type:
   p   primary <span class="token punctuation">(</span><span class="token number">2</span> primary, <span class="token number">0</span> extended, <span class="token number">2</span> <span class="token function">free</span><span class="token punctuation">)</span>
   e   extended
Select <span class="token punctuation">(</span>default p<span class="token punctuation">)</span>:
Using default response p
分区号 <span class="token punctuation">(</span><span class="token number">3,4</span>，默认 <span class="token number">3</span><span class="token punctuation">)</span>：
起始 扇区 <span class="token punctuation">(</span><span class="token number">41943040</span>-67108863，默认为 <span class="token number">41943040</span><span class="token punctuation">)</span>：
将使用默认值 <span class="token number">41943040</span>
Last 扇区, +扇区 or +size<span class="token punctuation">&#123;</span>K,M,G<span class="token punctuation">&#125;</span> <span class="token punctuation">(</span><span class="token number">41943040</span>-67108863，默认为 <span class="token number">67108863</span><span class="token punctuation">)</span>：
将使用默认值 <span class="token number">67108863</span>
分区 <span class="token number">3</span> 已设置为 Linux 类型，大小设为 <span class="token number">12</span> GiB

命令<span class="token punctuation">(</span>输入 m 获取帮助<span class="token punctuation">)</span>：p

磁盘 /dev/sda：34.4 GB, <span class="token number">34359738368</span> 字节，67108864 个扇区
Units <span class="token operator">=</span> 扇区 of <span class="token number">1</span> * <span class="token number">512</span> <span class="token operator">=</span> <span class="token number">512</span> bytes
扇区大小<span class="token punctuation">(</span>逻辑/物理<span class="token punctuation">)</span>：512 字节 / <span class="token number">512</span> 字节
I/O 大小<span class="token punctuation">(</span>最小/最佳<span class="token punctuation">)</span>：512 字节 / <span class="token number">512</span> 字节
磁盘标签类型：dos
磁盘标识符：0x000b7bb1

   设备 Boot      Start         End      Blocks   Id  System
/dev/sda1   *        <span class="token number">2048</span>     <span class="token number">2099199</span>     <span class="token number">1048576</span>   <span class="token number">83</span>  Linux
/dev/sda2         <span class="token number">2099200</span>    <span class="token number">41943039</span>    <span class="token number">19921920</span>   8e  Linux LVM
/dev/sda3        <span class="token number">41943040</span>    <span class="token number">67108863</span>    <span class="token number">12582912</span>   <span class="token number">83</span>  Linux

命令<span class="token punctuation">(</span>输入 m 获取帮助<span class="token punctuation">)</span>：t
分区号 <span class="token punctuation">(</span><span class="token number">1</span>-3，默认 <span class="token number">3</span><span class="token punctuation">)</span>：3
Hex 代码<span class="token punctuation">(</span>输入 L 列出所有代码<span class="token punctuation">)</span>：L
Hex 代码<span class="token punctuation">(</span>输入 L 列出所有代码<span class="token punctuation">)</span>：8e
已将分区“Linux”的类型更改为“Linux LVM”

命令<span class="token punctuation">(</span>输入 m 获取帮助<span class="token punctuation">)</span>：w
The partition table has been altered<span class="token operator">!</span>
正在同步磁盘。
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># partprobe</span>
Warning: 无法以读写方式打开 /dev/sr0 <span class="token punctuation">(</span>只读文件系统<span class="token punctuation">)</span>。/dev/sr0 已按照只读方式打开。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>该步骤结束后, 效果如下, 看到多了一块分区<code>/dev/sda3</code>, TODO: 为啥这里看到的类型还是<code>part</code>??</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># lsblk</span>
NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
sda               <span class="token number">8</span>:0    <span class="token number">0</span>   32G  <span class="token number">0</span> disk
├─sda1            <span class="token number">8</span>:1    <span class="token number">0</span>    1G  <span class="token number">0</span> part /boot
├─sda2            <span class="token number">8</span>:2    <span class="token number">0</span>   19G  <span class="token number">0</span> part
│ ├─centos-root <span class="token number">253</span>:0    <span class="token number">0</span>   17G  <span class="token number">0</span> lvm  /
│ └─centos-swap <span class="token number">253</span>:1    <span class="token number">0</span>    2G  <span class="token number">0</span> lvm  <span class="token punctuation">[</span>SWAP<span class="token punctuation">]</span>
└─sda3            <span class="token number">8</span>:3    <span class="token number">0</span>   12G  <span class="token number">0</span> part
sr0              <span class="token number">11</span>:0    <span class="token number">1</span>  973M  <span class="token number">0</span> rom<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="将该LVM分区添加到pv-group下-并扩展原来的Logical-volume-实现逻辑卷扩容"><a href="#将该LVM分区添加到pv-group下-并扩展原来的Logical-volume-实现逻辑卷扩容" class="headerlink" title="将该LVM分区添加到pv group下, 并扩展原来的Logical volume, 实现逻辑卷扩容"></a>将该LVM分区添加到pv group下, 并扩展原来的Logical volume, 实现逻辑卷扩容</h4><ol>
<li><p>将该LVM分区添加到pv group下, <code>vgextend</code>:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># lvm</span>
lvm<span class="token operator">></span> pvcreate /dev/sda3
  Physical volume <span class="token string">"/dev/sda3"</span> successfully created.
lvm<span class="token operator">></span> pvdisplay
  --- Physical volume ---
  PV Name               /dev/sda2
  VG Name               centos
  PV Size               <span class="token operator">&lt;</span><span class="token number">19.00</span> GiB / not usable <span class="token number">3.00</span> MiB
  Allocatable           <span class="token function">yes</span> <span class="token punctuation">(</span>but full<span class="token punctuation">)</span>
  PE Size               <span class="token number">4.00</span> MiB
  Total PE              <span class="token number">4863</span>
  Free PE               <span class="token number">0</span>
  Allocated PE          <span class="token number">4863</span>
  PV UUID               xb72qt-XG0d-7jNA-VOEC-z3jt-y7bz-mtye35

  <span class="token string">"/dev/sda3"</span> is a new physical volume of <span class="token string">"12.00 GiB"</span>
  --- NEW Physical volume ---
  PV Name               /dev/sda3
  VG Name
  PV Size               <span class="token number">12.00</span> GiB
  Allocatable           NO
  PE Size               <span class="token number">0</span>
  Total PE              <span class="token number">0</span>
  Free PE               <span class="token number">0</span>
  Allocated PE          <span class="token number">0</span>
  PV UUID               f71O6u-tlAf-F2Cr-rTyy-zGcq-YqE2-PvO5Ri

lvm<span class="token operator">></span> vgdisplay 
  --- Volume group ---
  VG Name               centos
  System ID
  Format                lvm2
  Metadata Areas        <span class="token number">1</span>
  Metadata Sequence No  <span class="token number">3</span>
  VG Access             read/write
  VG Status             resizable
  MAX LV                <span class="token number">0</span>
  Cur LV                <span class="token number">2</span>
  Open LV               <span class="token number">2</span>
  Max PV                <span class="token number">0</span>
  Cur PV                <span class="token number">1</span>
  Act PV                <span class="token number">1</span>
  VG Size               <span class="token operator">&lt;</span><span class="token number">19.00</span> GiB
  PE Size               <span class="token number">4.00</span> MiB
  Total PE              <span class="token number">4863</span>
  Alloc PE / Size       <span class="token number">4863</span> / <span class="token operator">&lt;</span><span class="token number">19.00</span> GiB
  Free  PE / Size       <span class="token number">0</span> / <span class="token number">0</span>
  VG UUID               seZW4N-tjt9-C5Qg-UFYp-z0uY-TZgq-2F94Hd

lvm<span class="token operator">></span> vgextend centos /dev/sda3 <span class="token comment"># 将该LVM分区添加到pv group下</span>
  Volume group <span class="token string">"centos"</span> successfully extended<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>扩展原始的Logical Volume, <code>lvextend</code>:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lvm<span class="token operator">></span> lvdisplay
  --- Logical volume ---
  LV Path                /dev/centos/swap
  LV Name                swap
  VG Name                centos
  LV UUID                wltk2Z-WIJW-vB6N-en6c-z5kg-U1IV-MWF7iX
  LV Write Access        read/write
  LV Creation host, <span class="token function">time</span> localhost, <span class="token number">2022</span>-10-22 07:51:02 -0400
  LV Status              available
  <span class="token comment"># open                 2</span>
  LV Size                <span class="token number">2.00</span> GiB
  Current LE             <span class="token number">512</span>
  Segments               <span class="token number">1</span>
  Allocation             inherit
  Read ahead sectors     auto
  - currently <span class="token builtin class-name">set</span> to     <span class="token number">8192</span>
  Block device           <span class="token number">253</span>:1
lvm<span class="token operator">></span> lvextend -l +100%FREE /dev/centos/root
  Size of logical volume centos/root changed from <span class="token operator">&lt;</span><span class="token number">17.00</span> GiB <span class="token punctuation">(</span><span class="token number">4351</span> extents<span class="token punctuation">)</span> to <span class="token number">28.99</span> GiB <span class="token punctuation">(</span><span class="token number">7422</span> extents<span class="token punctuation">)</span>.
  Logical volume centos/root successfully resized.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>该步骤结束后, 效果如下:</p>
</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># lsblk -p</span>
NAME                        MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
/dev/sda                      <span class="token number">8</span>:0    <span class="token number">0</span>   32G  <span class="token number">0</span> disk
├─/dev/sda1                   <span class="token number">8</span>:1    <span class="token number">0</span>    1G  <span class="token number">0</span> part /boot
├─/dev/sda2                   <span class="token number">8</span>:2    <span class="token number">0</span>   19G  <span class="token number">0</span> part
│ ├─/dev/mapper/centos-root <span class="token number">253</span>:0    <span class="token number">0</span>   29G  <span class="token number">0</span> lvm  /
│ └─/dev/mapper/centos-swap <span class="token number">253</span>:1    <span class="token number">0</span>    2G  <span class="token number">0</span> lvm  <span class="token punctuation">[</span>SWAP<span class="token punctuation">]</span>
└─/dev/sda3                   <span class="token number">8</span>:3    <span class="token number">0</span>   12G  <span class="token number">0</span> part
  └─/dev/mapper/centos-root <span class="token number">253</span>:0    <span class="token number">0</span>   29G  <span class="token number">0</span> lvm  /<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="同步到文件系统-实现根目录扩容"><a href="#同步到文件系统-实现根目录扩容" class="headerlink" title="同步到文件系统, 实现根目录扩容"></a>同步到文件系统, 实现根目录扩容</h4><p>注意, 这里的 <code>/dev/centos/root</code> 是<code>Logical volume</code>的<code>LV Path</code>, 即使用 <code>lvdisplay</code> 之后显示的<code>LV Path</code><br>而不是 <code>/dev/mapper/centos-root</code> 这个路径.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># xfs_growfs /dev/centos/root</span>
meta-data<span class="token operator">=</span>/dev/mapper/centos-root <span class="token assign-left variable">isize</span><span class="token operator">=</span><span class="token number">512</span>    <span class="token assign-left variable">agcount</span><span class="token operator">=</span><span class="token number">4</span>, <span class="token assign-left variable">agsize</span><span class="token operator">=</span><span class="token number">1113856</span> blks
         <span class="token operator">=</span>                       <span class="token assign-left variable">sectsz</span><span class="token operator">=</span><span class="token number">512</span>   <span class="token assign-left variable">attr</span><span class="token operator">=</span><span class="token number">2</span>, <span class="token assign-left variable">projid32bit</span><span class="token operator">=</span><span class="token number">1</span>
         <span class="token operator">=</span>                       <span class="token assign-left variable">crc</span><span class="token operator">=</span><span class="token number">1</span>        <span class="token assign-left variable">finobt</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">spinodes</span><span class="token operator">=</span><span class="token number">0</span>
data     <span class="token operator">=</span>                       <span class="token assign-left variable">bsize</span><span class="token operator">=</span><span class="token number">4096</span>   <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">4455424</span>, <span class="token assign-left variable">imaxpct</span><span class="token operator">=</span><span class="token number">25</span>
         <span class="token operator">=</span>                       <span class="token assign-left variable">sunit</span><span class="token operator">=</span><span class="token number">0</span>      <span class="token assign-left variable">swidth</span><span class="token operator">=</span><span class="token number">0</span> blks
naming   <span class="token operator">=</span>version <span class="token number">2</span>              <span class="token assign-left variable">bsize</span><span class="token operator">=</span><span class="token number">4096</span>   ascii-ci<span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">ftype</span><span class="token operator">=</span><span class="token number">1</span>
log      <span class="token operator">=</span>internal               <span class="token assign-left variable">bsize</span><span class="token operator">=</span><span class="token number">4096</span>   <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">2560</span>, <span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token number">2</span>
         <span class="token operator">=</span>                       <span class="token assign-left variable">sectsz</span><span class="token operator">=</span><span class="token number">512</span>   <span class="token assign-left variable">sunit</span><span class="token operator">=</span><span class="token number">0</span> blks, lazy-count<span class="token operator">=</span><span class="token number">1</span>
realtime <span class="token operator">=</span>none                   <span class="token assign-left variable">extsz</span><span class="token operator">=</span><span class="token number">4096</span>   <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">rtextents</span><span class="token operator">=</span><span class="token number">0</span>
data blocks changed from <span class="token number">4455424</span> to <span class="token number">7600128</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>该步骤结束后, 效果如下: <pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# lsblk -p
NAME                        MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
&#x2F;dev&#x2F;sda                      8:0    0   32G  0 disk
├─&#x2F;dev&#x2F;sda1                   8:1    0    1G  0 part &#x2F;boot
├─&#x2F;dev&#x2F;sda2                   8:2    0   19G  0 part
│ ├─&#x2F;dev&#x2F;mapper&#x2F;centos-root 253:0    0   29G  0 lvm  &#x2F;
│ └─&#x2F;dev&#x2F;mapper&#x2F;centos-swap 253:1    0    2G  0 lvm  [SWAP]
└─&#x2F;dev&#x2F;sda3                   8:3    0   12G  0 part
  └─&#x2F;dev&#x2F;mapper&#x2F;centos-root 253:0    0   29G  0 lvm  &#x2F;

[root@localhost ~]# df -h
文件系统                 容量  已用  可用 已用% 挂载点
&#x2F;dev&#x2F;mapper&#x2F;centos-root   29G  1.4G   28G    5% &#x2F;
&#x2F;dev&#x2F;sda1               1014M  138M  877M   14% &#x2F;boot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h1 id="总结-amp-思考"><a href="#总结-amp-思考" class="headerlink" title="总结&amp;思考"></a>总结&amp;思考</h1><p>深刻体会到了磁盘与文件系统的关系, 如知乎某位大神所言, <strong>根本没有关系!</strong> </p>
<ul>
<li>一个磁盘(块设备)可以分为多个分区, 每个分区都可以分别格式化为不同的文件系统, 然后分别挂载在不同的目录下.</li>
<li>裸设备也可以不分区, 直接格式化为文件系统.</li>
<li>文件系统里一个文件可以作为(虚拟化为)一个块设备使用 </li>
<li>多个磁盘&#x2F;多个分区也可以共同组成一个设备, 该设备使用一个分区&#x2F;文件系统类型.</li>
</ul>
<p>TODO: </p>
<ol>
<li>研究下LVM吧, 不求源码级别的深入, 但原理与实践需要跟上.</li>
<li>分区与文件系统格式方案的最佳实践是啥?</li>
</ol>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h1><ul>
<li><a href="https://linux.cn/article-10194-1.html">如何在 Linux 中查看已挂载的文件系统类型</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/450057653">centos7扩容根目录（&#x2F;dev&#x2F;mapper&#x2F;centos-root）</a></li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Linux常用命令</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>disk</tag>
        <tag>os</tag>
        <tag>file-system</tag>
      </tags>
  </entry>
  <entry>
    <title>2023 年度书单</title>
    <url>//2022-12-31-booklist-for-2023/</url>
    <content><![CDATA[<h1 id="BookList"><a href="#BookList" class="headerlink" title="BookList"></a>BookList</h1><hr>
<h2 id="必读"><a href="#必读" class="headerlink" title="必读"></a>必读</h2><h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ul>
<li><input disabled="" type="checkbox"> Google 4篇论文复习 GFS MapReduce BigTable Dapper</li>
<li><input disabled="" type="checkbox"> <a href="https://github.com/yanfeizhang/coder-kung-fu">深入理解Linux网络</a></li>
<li><input disabled="" type="checkbox"> <a href="https://book.douban.com/subject/3998926/">系统分析师考试全程指导</a></li>
<li><input disabled="" type="checkbox"> <a href="https://baike.baidu.com/item/%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E5%B8%88%E6%95%99%E7%A8%8B/8182174">系统分析师教程</a></li>
<li><input disabled="" type="checkbox"> <a href="https://book.douban.com/subject/26643785/">深度探索嵌入式操作系统：从零开始设计、架构和开发</a></li>
<li><input disabled="" type="checkbox"> <a href="https://book.douban.com/subject/11530329/">30天自制操作系统</a></li>
<li><input disabled="" type="checkbox"> <a href="https://book.douban.com/subject/27091064/">云原生应用架构实践——从单体到服务化架构演进</a></li>
<li><input disabled="" type="checkbox"> <a href="https://book.douban.com/subject/35731316/">文件系统技术内幕</a> <a href="https://www.bilibili.com/video/av889477532/">B站视频</a></li>
</ul>
<h3 id="经济"><a href="#经济" class="headerlink" title="经济"></a>经济</h3><ul>
<li><input checked="" disabled="" type="checkbox"> <a href="https://book.douban.com/subject/25926542/">一本书读懂财报</a> -20230125</li>
</ul>
<h3 id="健康"><a href="#健康" class="headerlink" title="健康"></a>健康</h3><ul>
<li><input checked="" disabled="" type="checkbox"> <a href="https://book.douban.com/subject/27104999/">癌症新知: 科学终结恐慌</a> -20230119</li>
</ul>
<h3 id="历史社科"><a href="#历史社科" class="headerlink" title="历史社科"></a>历史社科</h3><ul>
<li><input disabled="" type="checkbox"> <a href="https://book.douban.com/subject/26943161/">未来简史</a></li>
</ul>
<h3 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h3><ul>
<li><input disabled="" type="checkbox"> <a href="https://www.amazon.com/Harmony-Fifth-Walter-Piston/dp/0393954803">Harmony by Walter Piston</a></li>
</ul>
<h3 id="通识"><a href="#通识" class="headerlink" title="通识"></a>通识</h3><ul>
<li><input checked="" disabled="" type="checkbox"> <a href="https://clauswilke.com/dataviz/">Fundamentals of Data Visualization</a></li>
<li><input disabled="" type="checkbox"> <a href="https://bookdown.org/yihui/rmarkdown/">R Markdown: The Definitive Guide</a></li>
<li><input disabled="" type="checkbox"> <a href="https://book.douban.com/subject/27175636/">数据分析思维: 产品经理的成长笔记</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://book.douban.com/subject/27108685/">用数据讲故事 (豆瓣)</a> -20230718 done</li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://book.douban.com/subject/34922776/">代码精进之路 从码农到工匠 (豆瓣)</a> -20230629 done</li>
<li><input disabled="" type="checkbox"> <a href="https://book.douban.com/subject/24381562/">统计思维 (豆瓣)</a> -doing</li>
<li><input disabled="" type="checkbox"> <a href="https://book.douban.com/subject/35426737/">吴军数学通识讲义</a></li>
<li><input disabled="" type="checkbox"> <a href="https://zhuanlan.zhihu.com/p/543113943">谷歌方法论</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="">硅谷来信</a></li>
<li><input disabled="" type="checkbox"> <a href="https://book.douban.com/subject/26115203/">权衡：批判性思维之探究途径</a></li>
<li><input disabled="" type="checkbox"> <a href="http://hongchaozhang.github.io/blog/2019/08/26/infomation-theory/">信息论40讲</a></li>
<li><input disabled="" type="checkbox"> <a href="https://book.douban.com/subject/35590821/">「图解」产品：产品经理业务设计与 UML 建模</a></li>
<li><input disabled="" type="checkbox"> <a href="https://book.douban.com/subject/26593654/">The Open Organization</a></li>
</ul>
<h3 id="小说"><a href="#小说" class="headerlink" title="小说"></a>小说</h3><ul>
<li><input checked="" disabled="" type="checkbox"> <a href="https://book.douban.com/subject/26957420/">临高启明</a> -20230418</li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://book.douban.com/subject/36069426/">大医-破晓篇</a> -20230703</li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://book.douban.com/subject/36104107/">长安的荔枝</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://book.douban.com/subject/30414743/">显微镜下的大明</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://book.douban.com/subject/11524204/">围城</a> -20230508</li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://m.douban.com/book/subject/26876438/">人间草木</a> -20230521</li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://book.douban.com/subject/36328704/">太白金星有点烦 (豆瓣)</a> -20230709</li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://book.douban.com/subject/26365250/">死人经 (豆瓣)</a> -20230808</li>
</ul>
<h2 id="选读"><a href="#选读" class="headerlink" title="选读"></a>选读</h2><ul>
<li><input disabled="" type="checkbox"> <a href="https://book.douban.com/subject/4163938/">软件随想录</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://book.douban.com/subject/36082349/">Chip War</a> -20230517 done</li>
<li><input disabled="" type="checkbox"> <a href="https://www.amazon.com/Only-Paranoid-Survive-Exploit-Challenge/dp/0385483821">Only the paranoid survive</a></li>
<li><input disabled="" type="checkbox"> <a href="https://book.douban.com/subject/1313875/">The Innovator’s Dilemma</a> -doing</li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://www.amazon.com/-/es/Sid-Meier/dp/1324005874">Sid Meier’s Memoir!: A Life in Computer Games</a> -20230625 done</li>
</ul>
<h1 id="ThesisList"><a href="#ThesisList" class="headerlink" title="ThesisList"></a>ThesisList</h1><ul>
<li><input checked="" disabled="" type="checkbox"> <a href="https://www.alibabacloud.com/blog/a-paper-on-rund-a-lightweight-secure-container-runtime-for-high-density-deployment-and-high-concurrency-startup-in-serverless-computing_599753">A Paper on RunD: A Lightweight Secure Container Runtime for High-density Deployment and High-concurrency Startup in Serverless Computing - Alibaba Cloud Community</a> -20230912 done</li>
</ul>
<h1 id="ReadList"><a href="#ReadList" class="headerlink" title="ReadList"></a>ReadList</h1><hr>
<ul>
<li><input checked="" disabled="" type="checkbox"> <a href="https://mp.weixin.qq.com/s/EUAN-w14moJiQ0oVUTCtgQ">如何写出一份优秀的设计文档</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://mp.weixin.qq.com/s/YdoxVxz_91ZFemF8JuxRvQ">Koordinator 0.6：企业级容器调度系统解决方案，引入 CPU 精细编排、资源预留与全新的重调度框架</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://mp.weixin.qq.com/s/_ehHZfBo9A6_oq5RaA57Vw">携手15年，语雀创始人玉伯从蚂蚁离职，选择一个人远行</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://zhuanlan.zhihu.com/p/590569755">大厂病：穿堂风和平流层 - 知乎</a></li>
</ul>
<h1 id="MovieList"><a href="#MovieList" class="headerlink" title="MovieList"></a>MovieList</h1><hr>
<h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><ul>
<li><input disabled="" type="checkbox"> <a href="https://www.bilibili.com/video/BV1qa4y1j7xk/">2020 南京大学计算机系统基础习题课 (蒋炎岩)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.bilibili.com/video/BV1sR4y1V7T4/">2022 南京大学拔尖计划《操作系统：设计与实现》</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.bilibili.com/video/av889477532/">文件系统技术内幕 B站视频</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://time.geekbang.org/column/intro/460?utm_term=zeusXD30A&utm_source=geektime&utm_medium=geektime&utm_campaign=100099801&utm_content=text&tab=comment">郭东白的架构课</a> -20230718 done</li>
<li><input disabled="" type="checkbox"> <a href="https://www.khanacademy.org/economics-finance-domain/ap-microeconomics/basic-economic-concepts/resource-allocation-and-economic-systems/v/property-rights-in-a-market-system">Microeconomics | Khan Academy</a></li>
</ul>
<h2 id="娱乐"><a href="#娱乐" class="headerlink" title="娱乐"></a>娱乐</h2><ul>
<li><input checked="" disabled="" type="checkbox"> <a href="https://movie.douban.com/subject/35465232/">狂飙</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://movie.douban.com/subject/35465011/">显微镜下的大明之丝绢案</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://movie.douban.com/subject/35208467/">想见你 想見你 (2022)</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://m.douban.com/movie/subject/36193784/">黑暗荣耀第二季</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://movie.douban.com/subject/35588177/">漫长的季节</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://movie.douban.com/subject/26955946/">安眠书店</a> -ing</li>
<li><input disabled="" type="checkbox"> <a href="https://movie.douban.com/subject/35609387/">猎魔人 第三季 (豆瓣)</a> -ing</li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://movie.douban.com/subject/35506348/">白莲花度假村 第一季 (豆瓣)</a></li>
</ul>
<h1 id="Games"><a href="#Games" class="headerlink" title="Games"></a>Games</h1><hr>
<ul>
<li><a href="https://www.douban.com/game/27185974/">DriveClub VR</a></li>
</ul>
<h1 id="Certificates"><a href="#Certificates" class="headerlink" title="Certificates"></a>Certificates</h1><hr>
<ul>
<li><strong>软考高级系统架构设计师</strong></li>
<li>CKA</li>
<li>IELTS</li>
</ul>
<h1 id="Blogs"><a href="#Blogs" class="headerlink" title="Blogs"></a>Blogs</h1><ul>
<li>Jenkins Core&amp;Cloud系列博客</li>
</ul>
<h1 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h1><ul>
<li><a href="https://github.com/AmruthPillai/Reactive-Resume">开源简历生成器</a></li>
<li><a href="https://github.com/sb2nov/resume">Latex简历模板</a></li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>书单</category>
      </categories>
      <tags>
        <tag>books</tag>
        <tag>2023</tag>
      </tags>
  </entry>
  <entry>
    <title>宋词集锦&amp;赏析</title>
    <url>//2023-02-08-songci/</url>
    <content><![CDATA[<h1 id="行香子·过七里濑"><a href="#行香子·过七里濑" class="headerlink" title="行香子·过七里濑"></a>行香子·过七里濑</h1><p>宋 · 苏轼<br>一叶舟轻，双桨鸿惊。水天清、影湛波平。鱼翻藻鉴，鹭点烟汀。过沙溪急，霜溪冷，月溪明。<br>重重似画，曲曲如屏。算当年、虚老严陵。君臣一梦，今古空名。但远山长，云山乱，晓山青。</p>
<p>这首词作于公元1073年（宋神宗熙宁六年）春二月。苏轼时任杭州通判，巡查富阳，由新城至桐庐，乘舟富春江，经过七里濑时作此词。</p>
<p>七里濑：又名七里滩、七里泷，在今浙江省桐庐县城南三十里。钱塘江两岸山峦夹峙，水流湍急，连绵七里，故名七里濑。濑，沙石上流过的急水。</p>
<p>严陵：即严光，字子陵，东汉人，曾与<a href="https://so.gushiwen.cn/authorv_0ef2b626111d.aspx">刘秀</a>同学，并帮助刘秀打天下。刘秀称帝后，他改名隐居。刘秀三次派人才把他召到京师。授谏议大夫，他不肯接受，归隐富春江，终日钓鱼。</p>
<p>接下来“过沙溪急，霜溪冷，月溪明”三句，节奏轻快。沙溪，是白天之溪，清澈而见沙底；霜溪，是清晓之溪，清冷而有霜意；月溪，乃是月下之溪，是明亮的水晶世界。词人用蒙太奇手法，剪接了三个不同时辰的舟行之景。既写出了船之行程，也创造出清寒凄美的意境，由此引出一股人生的况味，为下片抒写人生感慨作了铺垫。</p>
<p>“算当年，虚老严陵。”东汉初年的严子陵，隐居不仕，垂钓富春江上。昔人多说严光垂钓实是“钓名”，东坡在此，也笑严光当年白白在此终老，不曾真正领略到山水佳处。“君臣一梦，今古空名”，表达出浮生若梦的感慨：皇帝和隐士，而今也已如梦一般消失，只留下空名而已。那么真正能永恒留传的实体是什么呢？“但远山长，云山乱，晓山青。”只有远山连绵，重峦叠嶂；山间白云，缭绕变形；晓山晨曦，青翠欲滴。意思是说，只有大自然才是永恒的，只有大自然之美才是永恒的。这是<a href="https://so.gushiwen.cn/authorv_3b99a16ff2dd.aspx">苏轼</a>的一贯思想，正如他在《前赤壁赋》中所感叹的：“惟江上之清风，与山间之明月，耳得之而为声，目遇之而成色，取之无禁，用之不竭……”</p>
<hr>
<h1 id="临安春雨初霁"><a href="#临安春雨初霁" class="headerlink" title="临安春雨初霁"></a>临安春雨初霁</h1><p>宋 · 陆游</p>
<p>世味年来薄似纱，谁令骑马客京华。<br>小楼一夜听春雨，深巷明朝卖杏花。<br>矮纸斜行闲作草，晴窗细乳戏分茶。<br>素衣莫起风尘叹，犹及清明可到家。</p>
<p>孩儿巷里的南宋慢生活</p>
<p>我们的故事从杭城闹市区的一幢小楼说起。</p>
<p>南宋偏安一隅，临安城的人们有了短暂的慢生活时光。陆游在起起伏伏的仕途中间，也得以钱塘江边观潮、西子湖上泛舟、冷泉亭中饮酒、深巷小楼戏分茶。最让如今杭州人乐道的莫过于他和一条小巷一座小楼的传说。</p>
<p>孩儿巷98号，陆游回到杭州做军器少监，就寓居于这幢小楼里，而他办公的地方位于现在的百井坊巷一带，每天他或走路或乘轿或骑马去上班。</p>
<p>小楼现在是陆游纪念馆，白墙黛瓦，岁月斑驳的痕迹很显眼，这里虽然是清末建筑，没有留下他的任何痕迹，但一首《临安春雨初霁》足矣。</p>
<p>处于闹市中的孩儿巷当时甚是热闹。七夕，孩子们会买泥土做的玩具，手持新鲜的荷叶嬉戏；除夕，家庭主妇们会在供桌上摆放泥娃娃，用红色的绒线给泥娃娃系一个钱币，以求早生贵子；平日里，这条巷子就成了擅长捏塑泥孩儿的民间艺人的天堂，泥偶铺子甚多，且生意兴隆。所以哪怕是陆游夜班后回到小楼，巷子也是“近坊灯火如昼明，十里东风吹市声。”</p>
<p>初春，淅淅沥沥的雨声浸满了二楼的书房， “小楼一夜听春雨，深巷明朝卖杏花。矮纸斜行闲作草，晴窗细乳戏分茶。”虽然诗、酒、花、茶一应俱全，但陆游难以入眠，因为他花甲之年还没实现自己的英雄梦——“上马击狂胡,下马草军书”，收复中原。</p>
<p>据史料记载，陆游一生多次来杭，并居住在保和坊，宋时的保和坊就是现在的孩儿巷，俗称砖街巷。在陆游的眼中，孩儿巷是极富诗意的：夜色灿烂、静寂如野。“近坊灯火如昼明，十里杀风吹市声”、“谁家小楼歌恼侬，余响缥缈萦帘栊。”等诗句就是陆游笔下的孩儿巷。这位深切关注国家命运的豪迈诗人，竟将孩儿巷的市井风貌观察、描写得如此生动，实为不易，陆游为孩儿巷的传神写照，一直流传至今。</p>
<p>孩儿巷的重要历史文化价值，还在于南宋爱国诗人陆游曾写下了名闻遐迩的不朽诗篇：“世味年来薄似纱，谁令骑马客京华。小楼一夜听春雨，深巷明朝卖杏花。矮纸斜行闲作草，晴窗细乳戏分茶。素衣莫起风尘叹，犹及清明可到家。” 现在的孩儿巷98号，设有<a href="https://baike.baidu.com/item/%E9%99%86%E6%B8%B8%E7%BA%AA%E5%BF%B5%E9%A6%86/6426661?fromModule=lemma_inlink">陆游纪念馆</a>。</p>
<p>陆游62岁时任除军器少监（唐宋时期的官职名，监督兵器、旗帜、戎帐等物品的造作），就住在孩儿巷内的南楼，在不眠之夜听了春雨之后，写下了著名的《<a href="https://baike.baidu.com/item/%E4%B8%B4%E5%AE%89%E6%98%A5%E9%9B%A8%E5%88%9D%E9%9C%81/7331905?fromModule=lemma_inlink">临安春雨初霁</a>》：世味年来薄似纱，谁令骑马客京华？小楼一夜听春雨，深巷明朝卖杏花。矮纸斜行闲作草，晴窗细乳戏分茶。素衣莫起风尘叹，犹及清明可到家。</p>
<hr>
<h1 id="看梅绝句"><a href="#看梅绝句" class="headerlink" title="看梅绝句"></a>看梅绝句</h1><p>陆游 〔宋代〕</p>
<p>老子舞时不须拍，梅花乱插乌巾香。<br>樽前作剧莫相笑，我死诸君思此狂。</p>
<hr>
<h1 id="六月二十七日望湖楼醉书-之一"><a href="#六月二十七日望湖楼醉书-之一" class="headerlink" title="六月二十七日望湖楼醉书 之一"></a>六月二十七日望湖楼醉书 之一</h1><p>宋 · 苏轼<br>黑云翻墨未遮山，白雨跳珠乱入船。<br>卷地风来忽吹散，望湖楼下水如天。</p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>六月二十七日：指宋神宗熙宁五年（1072）六月二十七日。<br>望湖楼：古建筑名，又叫看经楼。位于杭州西湖畔，五代时吴越王钱弘俶所建。</p>
<h2 id="赏析"><a href="#赏析" class="headerlink" title="赏析"></a>赏析</h2><p>公元1072年（宋神宗熙宁五年），作者在杭州任通判。这年六月二十七日，他游览西湖，在船上看到奇妙的湖光山色，再到望湖楼上喝酒，写下这五首七言绝句。本诗是其第一首。</p>
<p>此诗描绘了望湖楼的美丽雨景。才思敏捷的诗人用诗句捕捉到西子湖这一番别具风味的“即兴表演”，绘成一幅“西湖骤雨图”。乌云骤聚，大雨突降，倾刻又雨过天晴，水天一色。又是山，又是水，又是船，这就突出了泛舟西湖的特点。其次，作者用“黑云翻墨”，“白雨跳珠”形成强烈的色彩对比，给人以很强的质感。再次，用“翻墨”写云的来势，用“跳珠”描绘雨点飞溅的情态，以动词前移的句式使比喻运用得灵活生动却不露痕迹。而“卷地风来忽吹散，望湖楼下水如天”两句又把天气由骤雨到晴朗前转变之快描绘得令人心清气爽，眼前陡然一亮，境界大开。</p>
<p>诗人将一场变幻的风雨写得十分生动。他那时是坐在船上。船正好划到望湖楼下，忽见远处天上涌起来一片黑云，就像泼翻了一盆墨汁，半边天空霎时昏暗。这片黑云不偏不倚，直向湖上奔来，一眨眼间，便泼下一场倾盆大雨。只见湖面上溅起无数水花，那雨点足有黄豆大小，纷纷打到船上来，就像天老爷把千万颗珍珠一齐撒下，船篷船板，全是一片乒乒乓乓的声响。船上有人吓慌了，嚷着要靠岸。可是诗人朝远处一看，却知道这不过是一场过眼云雨，转眼就收场了。远处的群山依然映着阳光，全无半点雨意。事实上也确实是如此。这片黑云，顺着风势吹来，也顺着风势移去。还不到半盏茶工夫，雨过天晴，依旧是一片平静。水映着天，天照着水，碧波如镜，又是一派温柔明媚的风光。</p>
<p>诗人先在船中，后在楼头，迅速捕捉住湖上急剧变化的自然景物：云翻、雨泻、风卷、天晴，写得有远有近，有动有静，有声有色，有景有情。抓住几个要点，把一场忽然而来又忽然而去的骤雨，写得非常鲜明，富于情趣，颇见功夫。诗用“翻墨”写出云的来势，用“跳珠”描绘雨的特点，说明是骤雨而不是久雨。“未遮山”是骤雨才有的景象。“卷地风”说明雨过得快的原因，都是如实描写，却分插在第一、第三句中，彼此呼应，烘托得好。</p>
<p>最后用“水如天”写一场骤雨的结束，又有悠然不尽的情致。句中又用“白雨”和“黑云”映衬，用“水如天”和“卷地风”对照，用“乱入船“与“未遮山”比较，都显出作者构思时的用心。这二十八个字，随笔挥洒，信手拈来，显示出作者功力的深厚，只是在表面上不着痕迹罢了。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>奥运会解说那个，我记得东京奥运会皮划艇有个比赛因为下雨推迟了，然后开始时雨还没有完全停，屏幕上能看到雨点撞击的样子，然后解说来了句黑云翻墨未遮山白雨跳珠乱入船</p>
<hr>
<h1 id="六月二十七日望湖楼醉书-之五"><a href="#六月二十七日望湖楼醉书-之五" class="headerlink" title="六月二十七日望湖楼醉书 之五"></a>六月二十七日望湖楼醉书 之五</h1><p>宋 · 苏轼</p>
<p>未成小隐聊中隐，可得长闲胜暂闲。<br>我本无家更安往，故乡无此好湖山。</p>
<p>做不到隐居山林，暂时先做个闲官吧，这样尚可得到长期的悠闲胜过暂时的休闲。<br>我本来就没有家，不安身在这里又能到哪里去呢?何况就算是故乡，也没有像这里这样优美的湖光山色。</p>
<hr>
<h1 id="湖州"><a href="#湖州" class="headerlink" title="湖州"></a>湖州</h1><p>【作者】戴表元【朝代】宋</p>
<p>山从天目成群出，水傍太湖分港流。<br>行遍江南清丽地，人生只合住湖州。</p>
<hr>
<h1 id="寒食雨二首"><a href="#寒食雨二首" class="headerlink" title="寒食雨二首"></a>寒食雨二首</h1><p>苏轼 〔宋代〕</p>
<p>自我来黄州，已过三寒食。<br>年年欲惜春，春去不容惜。<br>今年又苦雨，两月秋萧瑟。<br>卧闻海棠花，泥污燕脂雪。<br><strong>暗中偷负去，夜半真有力。</strong><br><strong>何殊病少年，病起头已白。</strong></p>
<p>春江欲入户，雨势来不已。<br>小屋如渔舟，濛濛水云里。<br>空庖煮寒菜，破灶烧湿苇。<br>那知是寒食，但见乌衔纸。<br>君门深九重，坟墓在万里。<br>也拟哭途穷，死灰吹不起。</p>
<h2 id="译文"><a href="#译文" class="headerlink" title="译文"></a>译文</h2><p>自从我来到黄州，已度过三个寒食时际。<br>年年爱惜春光想将它挽留，春天自管自归去不容人惋惜。<br>今年又苦于连连阴雨，绵延两个月气候萧瑟一如秋季。<br>独卧在床听得雨打海棠，胭脂样花瓣像雪片凋落污泥。<br>造物主把艳丽的海棠偷偷背去，夜半的雨真有神力。<br>雨中海棠仿佛一位患病的少年，病愈时双鬓斑白已然老去。</p>
<p>春江暴涨仿佛要冲进门户，雨势凶猛袭来似乎没有穷已。<br>我的小屋宛如一叶渔舟，笼罩在濛濛水云里。<br>空空的厨房煮着些寒菜，潮湿的芦苇燃在破灶底。<br>哪还知道这一天竟然是寒食，却看见乌鸦衔来烧剩的纸币。<br>天子的宫门有九重，深远难以归去，祖上的坟茔遥隔万里不能吊祭。<br>我只想学阮籍作穷途痛哭，心头却似死灰并不想重新燃起。</p>
<h2 id="注释-1"><a href="#注释-1" class="headerlink" title="注释"></a>注释</h2><p>寒食：旧历清明节的前一天，是寒食节。<br>胭脂雪：指海棠花瓣。</p>
<h2 id="创作背景"><a href="#创作背景" class="headerlink" title="创作背景"></a>创作背景</h2><p>这首诗作于元丰五年（1082年）三月寒食节。东坡依然处境艰难，生活凄凉。心情孤郁。经过险恶的政治斗争和牢狱的折磨，东坡的个性收敛了许多。这两首诗充分表现了这种心境平和之后的无奈和绝望。</p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>诗词</category>
      </categories>
      <tags>
        <tag>诗词</tag>
        <tag>宋词</tag>
      </tags>
  </entry>
  <entry>
    <title>唐诗集锦&amp;赏析</title>
    <url>//2023-02-08-tangshi/</url>
    <content><![CDATA[<h1 id="忆秦娥"><a href="#忆秦娥" class="headerlink" title="忆秦娥"></a>忆秦娥</h1><p>李白</p>
<p>箫声咽，秦娥梦断秦楼月。秦楼月，年年柳色，灞陵伤别。</p>
<p>乐游原上清秋节，咸阳古道音尘绝。音尘绝，西风残照，汉家陵阙。</p>
<hr>
<h1 id="杂咏三首"><a href="#杂咏三首" class="headerlink" title="杂咏三首"></a>杂咏三首</h1><p>王维</p>
<p>家住孟津河，门对孟津口。<br>常有江南船，寄书家中否。</p>
<p>君自故乡来，应知故乡事。<br>来日绮窗前，寒梅著花未。</p>
<p>已见寒梅发，复闻啼鸟声。<br>心心视春草，畏向阶前生。</p>
<p>孟津河：指河南洛阳北部的黄河南岸一带，是“武王伐纣，与八百诸侯会盟”之地，为古代交通要道。</p>
<hr>
<h1 id="游洞庭湖五首·其二"><a href="#游洞庭湖五首·其二" class="headerlink" title="游洞庭湖五首·其二"></a>游洞庭湖五首·其二</h1><p>（唐）李白</p>
<p>南湖秋水夜无烟，耐可乘流直上天。<br>且就洞庭赊月色，将船买酒白云边。</p>
<h2 id="赏析"><a href="#赏析" class="headerlink" title="赏析"></a>赏析</h2><p>诗人为我们描绘了月夜泛舟的情形：明月皎皎，湖水悠悠。洞庭秋水澄澈无烟，水月相映，清辉怡人。</p>
<p>诗人与友人（此处，我们不妨把其族叔也当作友人）泛舟湖上，与清风朗月为伴，不由生出遗世独立、羽化登仙的“上天”之念。但乘流上天终不可得，诗人也只好收起这份不羁的想象，姑且向洞庭湖赊几分月色，痛快地赏月喝酒。</p>
<p>首句写景，同时点出秋游洞庭事。“南湖秋水夜无烟”，初读平淡无奇，似是全不费力，脱口而出，实则极具表现力：月夜泛舟，洞庭湖水全不似白日烟波浩渺、水汽蒸腾之气象。波澜不惊，澄澈如画。无烟水愈清，水清月更明。溶溶月色溶于水，悠悠湖光悠月明。这种景象，这种意味，非置身其中不可得，非写意简笔不可得。诗人虽然没有精工细绘，但读者心中自会涌现出一幅水天一色的美好图景。</p>
<hr>
<h1 id="送柴侍御"><a href="#送柴侍御" class="headerlink" title="送柴侍御"></a>送柴侍御</h1><p>（唐）王昌龄</p>
<p>沅水通波接武冈，送君不觉有离伤。<br>青山一道同云雨，明月何曾是两乡。</p>
<p>典型王昌龄风格的送别诗。<br>王昌龄一生官场沉浮(以沉为主)，交友广阔，诗文题材涉猎颇多，尤擅边塞、宫怨、离别。</p>
<p>可能是因为大部分时间不是被贬，就是谪居，一生高开低走，所以老王非常珍惜朋友之间的温暖情意。王昌龄的送别诗，首先是构思新颖，不落窠臼，看似轻描淡写，其实情意浓厚。其次是不重离别场景，多描绘别后情景。重点是，不伤离别而多慰别，但却回味颇深。</p>
<p>回到这首诗，前两句先说沅水通波，淡化距离感(目测龙标到武冈，好像也不近)，顺理成章的找了理由，随口说没觉得有啥离愁。稍微有点心眼都能看出来，那么大的诗人，说得越无所谓，其实越当回事儿。</p>
<p>下一句就看出功夫了，青山一道同云雨，就七个字，信息量超级大。青山一道，没有特指哪座山，说明同游过不止一座山，爱好相同，有点携手踏遍青山的意思。同云雨就不说了，至少共同经历了各种天气变化，说明相处时间不短(想污了的自己面壁去)。</p>
<p>最后一句，明月何曾是两乡，戏肉来了。第一层意思，借明月同天，再次拉近彼此距离，是为慰别——千里共婵娟。第二层意思，毕竟38万公里乘以2，说不远。。。真不远吗？是为忍别——道是无晴却有晴。第三层意思，从此以后，日踏青山，夜望明月，没有了你，却全都是你，是为难别——醒也无聊，醉也无聊。。。</p>
<p>老王同学，浪漫豪情不及李白，才华横溢不及王维，侠之大者不及杜甫，但是其情景妙合，意与境浑，委婉含蓄，意境深远，堪称大家。</p>
<hr>
<h1 id="酬中都小吏携斗酒双鱼于逆旅见赠"><a href="#酬中都小吏携斗酒双鱼于逆旅见赠" class="headerlink" title="酬中都小吏携斗酒双鱼于逆旅见赠"></a>酬中都小吏携斗酒双鱼于逆旅见赠</h1><p><a href="https://so.gushiwen.cn/authorv_b90660e3e492.aspx">李白</a> <a href="https://so.gushiwen.cn/shiwens/default.aspx?cstr=%E5%94%90%E4%BB%A3">〔唐代〕</a></p>
<p>鲁酒若琥珀，汶鱼紫锦鳞。<br>山东豪吏有俊气，手携此物赠远人。<br>意气相倾两相顾，斗酒双鱼表情素。<br>双鳃呀呷鳍鬣张，拨剌银盘欲飞去。<br>呼儿拂几霜刃挥，红肌花落白雪霏。<br>为君下箸一餐饱，醉著金鞍上马归。</p>
<h2 id="译文"><a href="#译文" class="headerlink" title="译文"></a>译文</h2><p>鲁地的酒色如琥珀，汶水鱼紫鳞似锦。<br>山东小吏豪爽俊逸．提来这两样东西送给客人。<br>二人意气相投，两相顾惜，两条鱼一杯酒以表情意。<br>鱼儿吞吐双鳃，振起鳍鬣，跋刺一声，要从银盘中跳去。<br>唤儿擦净几案挥刀割肉，红的如同花落，白的好似雪飞。<br>为你下箸吃足了酒，著鞍上马，醉蒙蒙地归去。</p>
<p>鳍（qí）鬣（liè）：鱼的背鳍为鳍，胸鳍为鬣。</p>
<h2 id="创作背景"><a href="#创作背景" class="headerlink" title="创作背景"></a>创作背景</h2><p>公元746年（天宝五年），<a href="https://so.gushiwen.cn/authorv_b90660e3e492.aspx">李白</a>卧病任城很久，秋天，病稍好，又去游览鲁郡，到达中都。中都一位久仰李白盛名的小官携斗酒双鱼到旅馆拜访李白。席中，李白诗兴大发，作此诗以酬谢。</p>
<h2 id="赏析-1"><a href="#赏析-1" class="headerlink" title="赏析"></a>赏析</h2><p>这首诗记述诗人在浪迹江湖的旅途中，收到中都一小吏赠送的酒、鱼，便豪兴大发，烹鱼煮酒，二人对酌，直到酒酣饭饱，才“醉著金鞍上马归”。<br>“鲁酒若琥珀，汶鱼紫锦鳞，”是盛赞中都小吏礼物的珍贵。以“斗酒诗百篇”而著称的“谪仙人”<a href="https://so.gushiwen.cn/authorv_b90660e3e492.aspx">李白</a>，对山东名酒素有特殊的感情，曾经为此写下热情洋溢的诗句：“兰陵美酒郁金香，玉碗盛来琥珀光，但使主人能醉客，不知何处是他乡。”中都小吏带来的美酒也是光“若琥珀”，这就使李白愈感谢小吏的情意。<br>中都小吏能以名贵的贡品金赤鳞赠送李白，可见其情深意长。李白在诗的头两句首先从光彩色泽上对鲁酒，汶鱼进行点染，说明礼物的名贵，为下文抒写小吏对诗人的挚情做好铺垫。“山东豪吏有俊气，手携此物赠远人”直抒胸臆，热情赞美中都小吏高尚的心灵，赞美小吏对李白这异乡“远人”的深情厚谊。第三句中诗人不用“小吏”而用“豪吏”，既是对小吏的尊重，又暗示出李白对中都小吏位虽卑，德却高的赞赏，换句话说，“小吏”德本高位却卑，说明封建社会的黑暗。<br>“意气相倾两相顾，斗酒双鱼表情素。”在这两句诗中，直接吟咏彼此之间的真挚的友谊。中都小吏和诗人的“两相顾”，因为二人的意气之“相倾”。而二人“意气相倾”的力量支点又都在于有不肯摧眉折腰事权贵的崇高心灵。正由于有了这共通的价值观，因此中都小吏对“赐金放还”的李白不但不鄙弃，相反，还“意气相倾”地“携斗酒双鱼于逆旅”来拜访。也正由于有了相通的心灵，因此李白对小吏那不附炎趋势的高尚品格才愈加钦佩，“斗酒双鱼表情素”一句是对“意气相倾两相顾”的补充，“斗酒双鱼”原本是中都小吏为“表情素”赠予诗人的礼物，但在“恨相逢之晚”的氛围中，诗人却将“斗酒双鱼”“借花献佛”般地反赠小吏，表达了诗人对小吏由衷敬慕的“情素”。<br>“双鳃呀呷鳍鬣张，跋刺银盘欲飞去”两句。是写赤鳞鱼出水后的神态：赤鳞鱼发着呀呷的声音，鳍鬣都大张开来，在盘中激烈地翻滚着几欲飞走。“呼儿拂几霜刃挥，红肥花落白雪霏”两句，重在描写宰鱼，做鱼的过程，意思是招呼孩子擦净桌案挥刀宰鱼，雪白肥嫩的鱼肉呈现在眼前。这里“呼”、“拂”、“挥”三个动词给人以欢快之感，使诗句的内在节奏感迅速加快；而“红”、“花”、“白”三种鲜亮的色彩，也给人以赏心悦目的感觉。这些充满动感和色彩感的字词的巧妙间用，显示出李白及其家人酬谢中都小吏时轻松快捷的心情。<br>结句“为君下筯一餐饱，醉著金鞍上马归”，意思是希望小吏开怀畅饮，之后再上马酣然归去。这首诗歌虽然不象《赠汪伦》、《黄鹤楼送<a href="https://so.gushiwen.cn/authorv_3811e4e1f460.aspx">孟浩然</a>之广陵》等诗作一样著名，但在李白描写友情的诗歌中仍不失为一首佳作。它体现了诗人对下层百姓的深挚友情。<br>李白自离长安后，饱览世态之炎凉，倍尝势力小人的鄙视。困窘之时，素昧平生的中都小吏能毅然冲破世俗樊篱，“携斗酒双鱼于逆旅”拜访李白，更显其心灵之美。同时通过揭露小吏的位卑与心灵的高洁之间所存在的矛盾，控诉摧残人才的封建社会。另外，此诗写鱼酒活灵活现，跃然纸上，而李白豪爽坦诚、热情待人的音容笑貌，也宛然可接。<br>“意气相倾两相顾”，也显示了一代大诗人与下层社会一小吏意气相投的真挚友谊及心心相印的心灵之美</p>
<hr>
<h1 id="剑客-x2F-述剑"><a href="#剑客-x2F-述剑" class="headerlink" title="剑客 &#x2F; 述剑"></a>剑客 &#x2F; 述剑</h1><p>（唐）贾岛</p>
<p>十年磨一剑，霜刃未曾试。<br>今日把示君，谁有不平事？</p>
<hr>
<h1 id="短歌行"><a href="#短歌行" class="headerlink" title="短歌行"></a>短歌行</h1><p>（唐）李白</p>
<p>白日何短短，百年苦易满。<br>苍穹浩茫茫，万劫太极长。<br>麻姑垂两鬓，一半已成霜。<br>天公见玉女，大笑亿千场。<br>吾欲揽六龙，回车挂扶桑。<br>北斗酌美酒，劝龙各一觞。<br>富贵非所愿，与人驻颜光。</p>
<hr>
<h1 id="侠客行"><a href="#侠客行" class="headerlink" title="侠客行"></a>侠客行</h1><p>李白〔唐代〕</p>
<p>赵客缦胡缨，吴钩霜雪明。<br>银鞍照白马，飒沓如流星。<br>十步杀一人，千里不留行。<br>事了拂衣去，深藏身与名。<br>闲过信陵饮，脱剑膝前横。<br>将炙啖朱亥，持觞劝侯嬴。<br>三杯吐然诺，五岳倒为轻。<br>眼花耳热后，意气素霓生。<br>救赵挥金槌，邯郸先震惊。<br>千秋二壮士，烜赫大梁城。<br>纵死侠骨香，不惭世上英。<br>谁能书阁下，白首太玄经。</p>
<h2 id="译文-1"><a href="#译文-1" class="headerlink" title="译文"></a>译文</h2><p>燕赵的侠士，头上系着侠士的武缨，腰佩吴越闪亮的弯刀。<br>骑着银鞍白马，在大街上驰骋就像天上的流星一样迅疾。<br>他们武艺盖世，十步可斩杀一人，千里之行，无人可挡。<br>他们大事做成后，拂袖而去将功劳和美名隐藏起来。<br>想当年，侯嬴、朱亥与信陵君结交，与之脱剑横膝，交相欢饮。<br>与朱亥、侯赢一同大口吃肉，大碗饮酒。<br>几杯热酒下肚，便慷慨许诺，愿为知己两肋插刀，一诺重于泰山。<br>酒后眼花耳热，意气勃勃劲生，感动苍天，可贯长虹。<br>朱亥为信陵君救赵，挥起了金椎，使赵都邯郸上下，都为之震惊。<br>二位壮士的豪举，千秋之后仍然在大梁城传为美谈。<br>他们纵然死去而侠骨犹香，不愧为一世英豪。<br>谁能像扬雄一样，在书阁里研究《太玄经》到老，而一辈子无所作为呢？</p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>信陵：信陵君，战国四公子之一，为人礼贤下士，门下食客三千余人。<br>朱亥、侯嬴：都是信陵君的门客。朱本是一屠夫，侯原是魏国都城大梁东门的门官，两人都受到信陵君的礼遇，都为信陵君所用。炙，烤肉。啖，吃。<br>啖朱亥：让朱亥来吃。<br>“三杯”两句：说几杯酒下肚就作出了承诺，并且把承诺看得比五岳还重。<br>素霓：白虹。古人认为，凡要出现不寻常的大事，就会有不寻常的天象出现，如“白虹贯日”。<br>烜赫：形容声名盛大。大梁城：魏国都城，今河南开封。<br>太玄经：西汉扬雄的一部哲学著作。扬雄曾在皇帝藏书的天禄阁任校刊工作。</p>
<hr>
<h1 id="咏老赠梦得"><a href="#咏老赠梦得" class="headerlink" title="咏老赠梦得"></a>咏老赠梦得</h1><p>[ 唐 ]  白居易<br>与君俱老也，自问老何如。<br>眼涩夜先卧，头慵朝未梳。<br>有时扶杖出，尽日闭门居。<br>懒照新磨镜，休看小字书。<br>情于故人重，迹共少年疏。<br>唯是闲谈兴，相逢尚有馀。</p>
<hr>
<h1 id="酬乐天咏老见示"><a href="#酬乐天咏老见示" class="headerlink" title="酬乐天咏老见示"></a>酬乐天咏老见示</h1><p>刘禹锡 〔唐代〕</p>
<p>人谁不顾老，老去有谁怜。<br>身瘦带频减，发稀冠自偏。<br>废书缘惜眼，多灸为随年。<br>经事还谙事，阅人如阅川。<br>细思皆幸矣，下此便翛然。<br>莫道桑榆晚，为霞尚满天。</p>
<p>阅人如阅川：意谓阅历人生如同积水成川一样。语出陆机《叹逝赋》：“阅水以成川，水滔滔而日度；世阅人而为世，人冉冉而行暮。”阅，经历。</p>
<h1 id="偶作寄朗之"><a href="#偶作寄朗之" class="headerlink" title="偶作寄朗之"></a>偶作寄朗之</h1><p>白居易 〔唐代〕</p>
<p>历想为官日，无如刺史时。<br>欢娱接宾客，饱暖及妻儿。<br>自到东都后，安闲更得宜。<br>分司胜刺史，致仕胜分司。<br>何况园林下，欣然得朗之。<br>仰名同旧识，为乐即新知。<br>有雪先相访，无花不作期。<br>斗醲干酿酒，夸妙细吟诗。<br>里巷千来往，都门五别离。<br>岐分两回首，书到一开眉。<br>叶落槐亭院，冰生竹阁池。<br>雀罗谁问讯，鹤氅罢追随。<br>身与心俱病，容将力共衰。<br>老来多健忘，唯不忘相思。</p>
<h2 id="译文-2"><a href="#译文-2" class="headerlink" title="译文"></a>译文</h2><p>回想为官时的日子，没有比做刺史时更快意舒畅了。<br>欢乐的接待来访的宾客，妻儿的生活能够得到保障。<br>自从来到东都以后，生活清闲更胜从前。<br>做分司时清闲的生活胜过刺史，辞去官职后生活清闲胜过分司。<br>更不说是在这偏远的家乡，能收到你的书信非常欣喜。<br>仰慕你的大名就像与你相识已久，一起做乐曲就像是新得的知己。<br>下雪时就先到朗之家里拜访，不是花开时节不相约。<br>边畅饮着自己酿造的美酒，边细细品味所作的诗句。<br>作为邻里已来往无数遍，在那京都城门也已分别五次。<br>翘首以盼你的来信，书信到时方能舒展眉头。<br>槐亭院中已满是落叶，竹阁池中的水也结满冰霜。<br>门庭冷落无处询问讯息，只得放弃追问。<br>身体病痛增多，容貌与体力也在逐渐衰退。<br>虽已年老记忆减退，但你我间那些相处场景仍历历在目从未忘却。</p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>诗词</category>
      </categories>
      <tags>
        <tag>诗词</tag>
        <tag>唐诗</tag>
      </tags>
  </entry>
  <entry>
    <title>主席诗词集锦&amp;赏析</title>
    <url>//2023-02-08-zhuxishici/</url>
    <content><![CDATA[<h1 id="水调歌头·重上井冈山"><a href="#水调歌头·重上井冈山" class="headerlink" title="水调歌头·重上井冈山"></a>水调歌头·重上井冈山</h1><p>久有凌云志，重上井冈山。<br>千里来寻故地，旧貌变新颜。<br>到处莺歌燕舞，更有潺潺流水，高路入云端。<br>过了黄洋界，险处不须看。<br>风雷动，旌旗奋，是人寰。<br>三十八年过去，弹指一挥间。<br>可上九天揽月，可下五洋捉鳖，谈笑凯歌还。<br>世上无难事，只要肯登攀！</p>
<hr>
<h1 id="忆秦娥·娄山关"><a href="#忆秦娥·娄山关" class="headerlink" title="忆秦娥·娄山关"></a>忆秦娥·娄山关</h1><p>西风烈，长空雁叫霜晨月。霜晨月，马蹄声碎，喇叭声咽。</p>
<p>雄关漫道真如铁，而今迈步从头越。从头越，苍山如海，残阳如血。</p>
<hr>
<h1 id="清平乐·六盘山"><a href="#清平乐·六盘山" class="headerlink" title="清平乐·六盘山"></a>清平乐·六盘山</h1><p>天高云淡，望断南飞雁。不到长城非好汉，屈指行程二万。</p>
<p>六盘山上高峰，红旗漫卷西风。今日长缨在手，何时缚住苍龙？</p>
<hr>
<h1 id="七律·和柳亚子先生"><a href="#七律·和柳亚子先生" class="headerlink" title="七律·和柳亚子先生"></a>七律·和柳亚子先生</h1><p>饮茶粤海未能忘，索句渝州叶正黄。</p>
<p>三十一年还旧国，落花时节读华章。</p>
<p>牢骚太盛防肠断，风物长宜放眼量。</p>
<p>莫道昆明池水浅，观鱼胜过富春江。</p>
<hr>
<h1 id="七律·人民解放军占领南京"><a href="#七律·人民解放军占领南京" class="headerlink" title="七律·人民解放军占领南京"></a>七律·人民解放军占领南京</h1><p>钟山风雨起苍黄，百万雄师过大江。<br>虎踞龙盘今胜昔，天翻地覆慨而慷。<br>宜将剩勇追穷寇，不可沽名学霸王。<br>天若有情天亦老，人间正道是沧桑。</p>
<h2 id="译文"><a href="#译文" class="headerlink" title="译文"></a>译文</h2><p>自然界如果有知，它会体察到兴盛与衰败这条不可改变的法则。事物不断的向前发展更新和变化，这是必然的规律。</p>
<h2 id="创作背景"><a href="#创作背景" class="headerlink" title="创作背景"></a>创作背景</h2><p>1949年4月21日，毛泽东主席和朱德总司令发出《向全国进军的命令》，号令全军坚决、彻底、干净、全部地歼灭中国境内一切敢于抵抗的国民党反动派，解放全中国。中国人民解放军百万大军于4月23日占领国民党反动政府的“首都”南京。毛泽东同志在北平香山双清别墅得到占领南京的捷报，心情振奋，写下了这首诗。</p>
<hr>
<h1 id="七律二首·送瘟神"><a href="#七律二首·送瘟神" class="headerlink" title="七律二首·送瘟神"></a>七律二首·送瘟神</h1><p>读六月三十日《人民日报》，余江县消灭了血吸虫。浮想联翩，夜不能寐。微风拂煦，旭日临窗，遥望南天，欣然命笔。</p>
<p>绿水青山枉自多，华佗无奈小虫何！<br>千村薜荔人遗矢，万户萧疏鬼唱歌。<br>坐地日行八万里，巡天遥看一千河。<br>牛郎欲问瘟神事，一样悲欢逐逝波。</p>
<p>春风杨柳万千条，六亿神州尽舜尧。<br>红雨随心翻作浪，青山着意化为桥。<br>天连五岭银锄落，地动三河铁臂摇。<br>借问瘟君欲何往，纸船明烛照天烧。</p>
<h2 id="译文-1"><a href="#译文-1" class="headerlink" title="译文"></a>译文</h2><p>祖国大地上白白有这么多的绿水青山，连神医华佗拿小小的血吸虫也没有根治的办法。<br>许多村庄荒草丛生，杳无人迹，瘟疫无情蔓延，千门万户家破人亡，听到的只是鬼在唱歌。<br>坐在地球上每天行走八万里的路程，沿着天路遥遥地看过浩渺的银河。<br>牛郎如问起血吸虫病的事，一切悲欢离合都已随着时光的流逝而成为过去。</p>
<p>春风吹拂杨柳新绿，新中国一片春意盎然，六亿人民意气风发，个个都像古代的尧舜一样。<br>落花随着自己的心意翻波逐浪，青山有意化崎岖险阻为康庄大道。<br>人民群众挥动银光闪闪的铁锄，挥舞着坚实的臂膀，兴修水利，整治山河，使大地都为之颤动。<br>试问瘟神啊，你要往哪里去？人们焚化纸钱，点起明烛，火光明亮，照耀天空，以此来送走瘟神。</p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>诗词</category>
      </categories>
      <tags>
        <tag>诗词</tag>
        <tag>主席诗词</tag>
      </tags>
  </entry>
  <entry>
    <title>一次心跳导致dubbo调用偶现失败问题排查</title>
    <url>//2023-02-09-dubbo-heartbeat-fail/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><h2 id="应用拓扑"><a href="#应用拓扑" class="headerlink" title="应用拓扑"></a>应用拓扑</h2><ul>
<li>SystemA作为client, 通过dubbo接口调用SystemB提供的某个服务</li>
<li>SystemB由2台机器组成一个集群, 即 SystemB.45 SystemB.46</li>
</ul>
<pre class="mermaid">graph TD
    A[SystemA] --> |dubbo| B[SystemB.45];
        A[SystemA] --> |dubbo| C[SystemB.46];</pre>


<h2 id="详细问题"><a href="#详细问题" class="headerlink" title="详细问题"></a>详细问题</h2><p>SystemA调用SystemB的服务时:</p>
<ol>
<li><p>SystemA日志中持续性出现调用SystemB失败, 详细错误信息如下:</p>
</li>
<li><p>且<strong>SystemA报错日志都固定出现在SystemB.46这台机器上</strong></p>
</li>
</ol>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202302092122356.png"></p>
<h1 id="问题1-为啥出现”channel-is-closed”错误-从而导致调用失败"><a href="#问题1-为啥出现”channel-is-closed”错误-从而导致调用失败" class="headerlink" title="问题1: 为啥出现”channel is closed”错误, 从而导致调用失败?"></a>问题1: 为啥出现”channel is closed”错误, 从而导致调用失败?</h1><h2 id="现象"><a href="#现象" class="headerlink" title="现象:"></a>现象:</h2><p>根据源代码分析只有底层TCP连接关闭, 才会有该错误报出. 但为啥TCP连接会关闭?</p>
<ol>
<li>是因为网络闪断么? 理论上内网环境下, 链路可靠, 不应该频繁发生.</li>
<li>是客户端主动关闭? or 服务端主动关闭?</li>
</ol>
<p>按照100ms一次打印某个dubbo服务的TCP连接状态. 发现每隔2~5min, dubbo的TCP连接就会重建. 而且观察到重建时是Provider处于TIME_WAIT状态, 也就知道是Provider主动关闭连接的.<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202302092124462.png"><br>基本可以确认, TCP连接是服务端主动关闭的.</p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因:"></a>原因:</h2><ol>
<li><strong>因为provider主动把连接空闲关闭掉了</strong></li>
</ol>
<p>查看服务端hsf-remoting.log, 发现如下频繁的关闭TCP日志.<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202302092126521.png"></p>
<ol start="2">
<li>Provider的HSF版本2.2.10.1, 查看对应代码, 发现使用的是Netty io.netty.handler.timeout.IdleStateHandler 方式进行链路空闲检测, 默认超过 90s 没有数据传输, Provider就会主动关闭TCP连接.</li>
<li>Consumer侧, 抛错的地点是: com.alibaba.dubbo.remoting.transport.AbstractClient#send , 即在发送数据包时发现TCP连接已关闭, 抛出异常.</li>
</ol>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决:"></a>解决:</h2><h3 id="方案1-增大空闲阈值"><a href="#方案1-增大空闲阈值" class="headerlink" title="方案1: 增大空闲阈值"></a>方案1: 增大空闲阈值</h3><p>增加如下启动参数, 扩大服务端空闲时长, 15min; 一般SystemA调用不太会15min都没有请求, 每次业务请求进来, 也都会重置时间, 基本能保证TCP长连不断.</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">-</span><span class="token class-name">Dhsf</span><span class="token punctuation">.</span>server<span class="token punctuation">.</span>idle<span class="token punctuation">.</span>time<span class="token operator">=</span><span class="token number">900</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>增加参数之后, 查看 hsf-remoting.log, 就没有频繁的CloseIdle日志了, 查看TCP连接, 发现连接端口长期保持稳定, 没有再发生重建, 查看线上错误日志, 发现该错误消失, 问题解决.<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202302092127153.png"></p>
<h3 id="方案2-缩短心跳间隔"><a href="#方案2-缩短心跳间隔" class="headerlink" title="方案2: 缩短心跳间隔"></a>方案2: 缩短心跳间隔</h3><p>减小客户端心跳发送间隔. (dubbo 默认心跳包间隔为 60s)<br>在<code>dubbo-config.xml</code>主配置文件里, 增加如下配置:</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>protocol</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dubbo<span class="token punctuation">"</span></span> <span class="token attr-name">heartbeat</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


<h3 id="最终方案-缩短心跳间隔"><a href="#最终方案-缩短心跳间隔" class="headerlink" title="最终方案: 缩短心跳间隔"></a>最终方案: 缩短心跳间隔</h3><ul>
<li>方案1主要问题是改造量大, 需要修改应用的部署脚本, 而本身应用是未docker化的, 部署脚本在aone中需要单独的环境包发布. 一旦其他环境初始化没有增添该配置, 就会导致问题重现. 而修改代码配置文件则更好维护.</li>
<li>方案1也有优势, 即心跳包发送频率低, 60s一次, 而非新修改的20s一次, 对consumer侧压力会小一些.<br>但综合考虑, 心跳包频率增加对应用压力代价其实很小, 最终决定选择方案2.</li>
</ul>
<h1 id="问题2-为啥channel-is-closed异常信息中-总是集中在某个特定provider-channel-closed"><a href="#问题2-为啥channel-is-closed异常信息中-总是集中在某个特定provider-channel-closed" class="headerlink" title="问题2: 为啥channel is closed异常信息中, 总是集中在某个特定provider channel closed?"></a>问题2: 为啥channel is closed异常信息中, 总是集中在某个特定provider channel closed?</h1><h2 id="现象-1"><a href="#现象-1" class="headerlink" title="现象:"></a>现象:</h2><p>如 cn-chengdu, SystemA调用SystemB日志, 总是说 SystemB.46:12200 的channel closed, 而另外一个provider SystemB.45:12200 从来没有抛出异常.<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202302092128763.png"></p>
<ol>
<li><p>难道说只有SystemB.46的TCP连接会Idle重建, SystemB.45 就不会重建么?</p>
<ol>
<li>并不是, 查看 SystemB.45 的 hsf-remoting.log 日志, 发现与 46 基本相同, TCP连接会频繁重建.<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202302092129160.png"></li>
</ol>
</li>
<li><p>为啥没有报出: SystemB.45 channel is closed 呢?</p>
</li>
</ol>
<h2 id="原因-1"><a href="#原因-1" class="headerlink" title="原因:"></a>原因:</h2><ul>
<li>根本原因是dubbo client发起RPC调用前 连接状态检测 + failover策略 导致的:</li>
</ul>
<ol>
<li><p>dubbo client发起调用时, com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker#doInvoke</p>
</li>
<li><p>会使用 com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker#select 来选择一个合适的provider(代码里叫invokers), 核心逻辑如下:<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202302092130342.png"></p>
</li>
<li><p>loadbalance.select(invokers, getUrl(), invocation); 随机选择一个provider(例如 SystemB.45 ), selected为null, 如果 SystemB.45对应的TCP连接关闭, 则 invoker.isAvailable() 为false, 从而进入 reselect流程, 如果 46对应的TCP连接也关闭, 则 reselect 返回的rinvoker为null, 从而进入</p>
</li>
<li><p>所有可能case如下, 可以知道抛出异常时, 肯定错误信息是46失败, 因此就解释了上边的问题.</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>45机器状态</th>
<th>46机器状态</th>
<th>loadbalance结果</th>
<th>最终AbstractClusterInvoker#select结果</th>
</tr>
</thead>
<tbody><tr>
<td>45 TCP正常</td>
<td>46 TCP正常</td>
<td>选中45</td>
<td>直接使用45作为provider, 不会抛出异常.</td>
</tr>
<tr>
<td>45 TCP正常</td>
<td>46 TCP正常</td>
<td>选中46</td>
<td>直接使用46作为provider, 不会抛出异常.</td>
</tr>
<tr>
<td>45 TCP正常</td>
<td>46 TCP异常</td>
<td>选中45</td>
<td>直接使用45作为provider, 不会抛出异常.</td>
</tr>
<tr>
<td>45 TCP正常</td>
<td>46 TCP异常</td>
<td>选中46</td>
<td>调用前reselect到45, 从而调用成功, 不会抛出异常.</td>
</tr>
<tr>
<td>45 TCP异常</td>
<td>46 TCP正常</td>
<td>选中45</td>
<td>调用前reselect到46, 从而调用成功, 不会抛出异常.</td>
</tr>
<tr>
<td>45 TCP异常</td>
<td>46 TCP正常</td>
<td>选中46</td>
<td>直接使用46作为provider, 不会抛出异常.</td>
</tr>
<tr>
<td>45 TCP异常</td>
<td>46 TCP异常</td>
<td>选中45</td>
<td>由于45的index为0, index+1, 从而就尝试failover到46, 返回46. 后续在invoke时, 由于46也是关闭, 因此抛出46失败.</td>
</tr>
<tr>
<td>45 TCP异常</td>
<td>46 TCP异常</td>
<td>选中46</td>
<td>由于46的index为1, 不再index+1(否则就IndexOutOfBoundsException啦), 从而返回46. 后续在invoke时, 由于46也是关闭的, 因此抛出46失败.</td>
</tr>
</tbody></table>
<ol start="3">
<li>由此可以下结论, 当providers数量&gt;&#x3D;2时, 在发生该异常时, 报错信息里必然不会有第一个provider, 因为第一个provider失败, 会index+1, 返回第2个. 以同样抛错的”SystemC”为例进行观察, 验证了该猜想:<ol>
<li>抛出的channel is closed信息中, provider只有, “SystemC.40”  “SystemC.173” “SystemC.240” “SystemC.17” “SystemC.174” , 而没有排在第一个   SystemC.183 这个provider.</li>
</ol>
</li>
</ol>
<h1 id="问题3-为啥channel会空闲被关闭-心跳保活机制失效了么"><a href="#问题3-为啥channel会空闲被关闭-心跳保活机制失效了么" class="headerlink" title="问题3: 为啥channel会空闲被关闭? 心跳保活机制失效了么?"></a>问题3: 为啥channel会空闲被关闭? 心跳保活机制失效了么?</h1><p>dubboclient, 默认会60s发送一次心跳包, 所以服务端空闲timeout是90s&gt;60s, 理论上链路应该一直保活, 但为啥?</p>
<h2 id="现象-2"><a href="#现象-2" class="headerlink" title="现象"></a>现象</h2><p>实际用tcpdump查看了下, 发现稳定是2min一次的心跳, 为啥不是1min一次?<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202302092131119.png"></p>
<ul>
<li>上边tcpdump出来的确定是心跳包么?</li>
<li>是心跳包! 如下TCP包数据段内容为: dabbe200000000000005d772000000014e 查看代码:<br><em>com.alibaba.dubbo.remoting.exchange.codec.ExchangeCodec#encodeRequest</em>, 可知内容符合dubbo心跳包协议:</li>
</ul>
<ol>
<li>以 0xdabb 为开头</li>
<li>isTwoWay, isEvent都为true; 因此按照如下运算可知, 第三个字节是 0xe2</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">header<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>FLAG_REQUEST <span class="token operator">|</span> serialization<span class="token punctuation">.</span><span class="token function">getContentTypeId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">isTwoWay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> header<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">|=</span> FLAG_TWOWAY<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">isEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> header<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">|=</span> FLAG_EVENT<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>心跳包的mData为null, 通过hessian2序列化之后, <em>com.alibaba.com.caucho.hessian.io.Hessian2Output#writeNull</em>, null占用一个字节, 会被默认写作 N</li>
<li>整个TCP Payload为17个字节, 包括 16个字节的dubbo协议头 +  1个字节的0x4e(即为N的ASCII码), 符合实际抓包情况.</li>
</ol>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202302092131065.png"><br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202302092132229.png"><br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202302092133191.png"></p>
<h2 id="原因-2"><a href="#原因-2" class="headerlink" title="原因"></a>原因</h2><ul>
<li>根本原因是 com.alibaba.dubbo.remoting.exchange.support.header.HeartBeatTask 设计缺陷导致.</li>
</ul>
<ol>
<li>HeartBeatTask 是在com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeServer#startHeatbeatTimer进行启动, 使用ScheduledExecutorService, 定时执行间隔时间为heartbeat值, 即为60s(60000ms)一次.</li>
<li>HeartBeatTask 执行具体实现(删除了与本问题不相关的代码):</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">long</span> now <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token class-name">Channel</span> channel <span class="token operator">:</span> channelProvider<span class="token punctuation">.</span><span class="token function">getChannels</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Long</span> lastRead <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token class-name">Long</span> <span class="token punctuation">)</span> channel<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>
                <span class="token class-name">HeaderExchangeHandler</span><span class="token punctuation">.</span>KEY_READ_TIMESTAMP <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Long</span> lastWrite <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token class-name">Long</span> <span class="token punctuation">)</span> channel<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>
                <span class="token class-name">HeaderExchangeHandler</span><span class="token punctuation">.</span>KEY_WRITE_TIMESTAMP <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span> lastRead <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> now <span class="token operator">-</span> lastRead <span class="token operator">></span> heartbeat <span class="token punctuation">)</span> <span class="token comment">// 注意: 这里的heartbeat是60000ms</span>
                <span class="token operator">||</span> <span class="token punctuation">(</span> lastWrite <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> now <span class="token operator">-</span> lastWrite <span class="token operator">></span> heartbeat <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Request</span> req <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            req<span class="token punctuation">.</span><span class="token function">setVersion</span><span class="token punctuation">(</span> <span class="token string">"2.0.0"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
            req<span class="token punctuation">.</span><span class="token function">setTwoWay</span><span class="token punctuation">(</span> <span class="token boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
            req<span class="token punctuation">.</span><span class="token function">setEvent</span><span class="token punctuation">(</span> <span class="token class-name">Request</span><span class="token punctuation">.</span>HEARTBEAT_EVENT <span class="token punctuation">)</span><span class="token punctuation">;</span>
            channel<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span> req <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span> logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span> <span class="token string">"Send heartbeat to remote channel "</span> <span class="token operator">+</span> channel<span class="token punctuation">.</span><span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                      <span class="token operator">+</span> <span class="token string">", cause: The channel has no data-transmission exceeds a heartbeat period: "</span> <span class="token operator">+</span> heartbeat <span class="token operator">+</span> <span class="token string">"ms"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>问题复现:<ol>
<li>2022年09月27日18:53:00,000 触发一次HeartBeatTask, 假设本次执行到 channel.send(req), 即发送了心跳包.</li>
<li>由于发送了心跳包, 因此channel的 lastWrite 会被更新 假设被更新为 2022年09月27日18:53:00,001 (注意这个时间与执行HeartBeatTask会有几毫秒差异, 因为netty处理会耗时)</li>
<li>2022年09月27日18:54:00,000 再次触发一次HeartBeatTask, 当前时间(即为2022年09月27日18:54:00,000) - lastWrite(2022年09月27日18:53:00,001) 为 59999ms &lt; 60000ms, 因此本次不再发送心跳包.</li>
<li>2022年09月27日18:55:00,000 再次触发一次HeartBeatTask, 当前时间(即为2022年09月27日18:55:00,000) - lastWrite(2022年09月27日18:53:00,001) 为 119999ms &gt; 60000ms, 因此本次发送心跳包.  从上次心跳包到这次, 刚好间隔为2min.</li>
</ol>
</li>
<li>因此在链路空闲时, <strong>两次心跳的间隔稳定为120s &gt; HSF服务端的90s</strong>, 因此服务端会频繁地关闭连接!</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>dubboclient在进行failover之后, 报错信息不直观, 一直在报46调用失败, 从而导致以为只有46这台provider有问题, 从而以为是单台机器的问题, 从而误导了排查方向(例如46这台机器load, 网络等有啥特殊问题). 如果failover逻辑中, 不是简单地按照index+1, 而是使用环形数组, 这样报错信息会报出45, 46有问题, 从而不会误导排查方向.</li>
<li>该问题只有在dubboclient与所有的provider的TCP连接都关闭, 从而failover失败, 从而抛出异常. 因此较为偶现, 导致无法稳定复现以及保存现场. (当然现在知道了原因, 就可以通过iptables来模拟重现该问题).</li>
<li>根本原因还是HSF服务端对与dubboclient的适配不好:<ol>
<li>默认参数90s+dubboclient默认的60s, 在小流量情况下完全是坑爹, 在大流量情况下, 由于业务请求一直会有, 相当于通过业务请求来进行保活了, 因此不会有本文的问题.</li>
<li>HSF作为dubbo服务端阉割掉了dubbo原生服务端的反向保活能力(provider-&gt;client), 从而变成了单向心跳(client-&gt;provider), 可靠性差很多.</li>
<li>心跳保活作为RPC框架的基础, 出现问题通常是最后怀疑的点. 而如果用dubbo作为服务端, 要可靠得多, 有双向保活机制, 具体可以参照: <a href="https://dubbo.apache.org/zh/blog/2018/08/19/dubbo-%E7%8E%B0%E6%9C%89%E5%BF%83%E8%B7%B3%E6%96%B9%E6%A1%88%E6%80%BB%E7%BB%93%E4%BB%A5%E5%8F%8A%E6%94%B9%E8%BF%9B%E5%BB%BA%E8%AE%AE/?spm=ata.21736010.0.0.318e4799tOQZt9">dubbo-现有心跳方案总结以及改进建议</a></li>
</ol>
</li>
</ol>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>java</tag>
        <tag>dubbo</tag>
        <tag>heartbeat</tag>
      </tags>
  </entry>
  <entry>
    <title>工作流框架中ID与Token使用引发的思考</title>
    <url>//2023-02-09-inner-id-outer-id-design/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在使用工作流框架时, 发现token&#x2F;id字段非常多, 尤其是</p>
<ul>
<li>workflow_id</li>
<li>biz_id</li>
</ul>
<p>这两个的格式都是UUID, 都是唯一的.<br><img data-src="https://intranetproxy.alipay.com/skylark/lark/0/2021/png/18490/1629896347576-a7614293-1ddc-4d13-9f9a-e48248cfac62.png#clientId=u1f1ec6f0-275f-4&from=paste&height=683&id=u52913c82&name=image.png&originHeight=938&originWidth=762&originalType=binary&ratio=1&rotation=0&showTitle=false&size=547248&status=done&style=none&taskId=u9488ccd6-246c-4b06-8e39-5b5ea32309a&title=&width=555" alt="image.png"><br>这两个分别代表啥?</p>
<ul>
<li>biz_id是外部传入的业务唯一ID, 客户端排查问题时可以使用. 作为外部主键<ul>
<li>一个biz_id代表一次业务请求, 可能会对应多个workflow_id;</li>
<li>例如 创建ECS实例的一次请求, 对应一个biz_id(request_id), 但会对应多个workflow的编排, 因此不能把biz_id作为唯一键(会导致workflow_instance唯一键冲突), 也不能直接使用workflow_id(会导致无法trace到整个请求)</li>
</ul>
</li>
<li>workflow_id是系统内部生成的系统唯一ID, 可以认为是唯一主键. 作为内部主键</li>
</ul>
<h1 id="几种方案"><a href="#几种方案" class="headerlink" title="几种方案"></a>几种方案</h1><p>为什么不把biz_id与workflow_id合并成一个? 可以假设下述几种方案:</p>
<h2 id="方案1-外部不传入biz-id-只使用workflow-id"><a href="#方案1-外部不传入biz-id-只使用workflow-id" class="headerlink" title="方案1: 外部不传入biz_id, 只使用workflow_id"></a>方案1: 外部不传入biz_id, 只使用workflow_id</h2><ul>
<li>存在一个先后依赖的问题: 如果在workflow_id生成前出现了问题, 根据哪个来定位这次请求, 该怎么排查?</li>
<li>无法实现biz_id对应多个workflow_id的一对多关系</li>
</ul>
<h2 id="方案2-外部传入biz-id-内部不生成新的workflow-id"><a href="#方案2-外部传入biz-id-内部不生成新的workflow-id" class="headerlink" title="方案2: 外部传入biz_id, 内部不生成新的workflow_id:"></a>方案2: 外部传入biz_id, 内部不生成新的workflow_id:</h2><ul>
<li>外部biz_id如果生成的不可靠, 有重复, 会导致workflow工作机制产生问题.</li>
<li>不能信任任何外部传入的ID作为内部的主键ID</li>
</ul>
<p>所以设计两个ID也是合理的, 一个内部ID, 一个外部ID, 甚至可以认为是最佳实践.</p>
<h2 id="方案3-外部传入biz-id-内部同时也生成workflow-id"><a href="#方案3-外部传入biz-id-内部同时也生成workflow-id" class="headerlink" title="方案3: 外部传入biz_id, 内部同时也生成workflow_id"></a>方案3: 外部传入biz_id, 内部同时也生成workflow_id</h2><ul>
<li>即实现上最终选用的方案</li>
<li>当biz_id与workflow_id是一对一场景下, biz_id除了方便进行客户端定位问题, 也可以作为client_token实现幂等</li>
</ul>
<h1 id="实际应用场景"><a href="#实际应用场景" class="headerlink" title="实际应用场景"></a>实际应用场景</h1><p>大部分都是使用clientToken用来实现幂等</p>
<ul>
<li><a href="https://next.api.aliyun.com/document/Ecs/2014-05-26/RunInstances">ECS SDK调用</a>:<ul>
<li>支持方案1, 即客户端不传入任何requestID信息, 请求完成后会返回内部生成的requestID.</li>
<li>也支持方案3, 即客户端传入clientToken, 请求完成后会返回内部生成的requestID.</li>
</ul>
</li>
<li><a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">AWS SDK调用</a>:<ul>
<li>同样支持方案1与方案3;</li>
</ul>
</li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>learn-from-failure</tag>
        <tag>java</tag>
        <tag>good-design</tag>
      </tags>
  </entry>
  <entry>
    <title>常用的Linux命令之tcpdump</title>
    <url>//2023-02-10-linux-network-tcpdump-sample/</url>
    <content><![CDATA[<h1 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h1><p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202302102123138.png"></p>
<h1 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h1><h2 id="应用拓扑"><a href="#应用拓扑" class="headerlink" title="应用拓扑"></a>应用拓扑</h2><pre class="mermaid">graph BT
    B[HostB:anyPort] -..-> |dubbo| A[HostA:12200];</pre>

<h2 id="拓扑说明"><a href="#拓扑说明" class="headerlink" title="拓扑说明"></a>拓扑说明</h2><ul>
<li>HostA是服务端, 开启了12200服务端口</li>
<li>HostB是客户端, 开启了任意端口与HostA:12200连接</li>
<li>在HostA上执行tcpdump 查看 HostA:12200 &lt;-&gt; HostB 的通信</li>
</ul>
<h2 id="命令实践"><a href="#命令实践" class="headerlink" title="命令实践"></a>命令实践</h2><p>⁃ in 链路(即从B —&gt;A:12200)</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> tcpdump -i eth0 -P <span class="token keyword">in</span> -vv dst port <span class="token number">12200</span> and src <span class="token function">host</span> <span class="token variable">$&#123;hostB&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>⁃ out 链路(即从A:12200—&gt;B)</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> tcpdump -i eth0 -P out -vv src port <span class="token number">12200</span> and dst <span class="token function">host</span> <span class="token variable">$&#123;hostB&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>⁃ inout (即从A:12200&lt;—&gt;B)</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tcpdump -i eth0  <span class="token function">host</span> <span class="token variable">$&#123;hostB&#125;</span> and port <span class="token number">12200</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>⁃ dump 抓取具体包内容, 导出为文件, 便于wireshark分析 (注意, 这里导出的文件为二进制, 推荐使用.pcap作为后缀名)</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> tcpdump -i eth0 -P <span class="token keyword">in</span> -vv dst port <span class="token number">12200</span> and src <span class="token function">host</span> <span class="token variable">$&#123;hostB&#125;</span> -w ~/tcpdump.pcap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>⁃ 读取tcpdump文件 (注意, 这里读取的文件也为二进制)</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> tcpdump -r tcpdump.pcap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h1><ul>
<li><a href="https://blog.csdn.net/weixin_36338224/article/details/107035214">linux下如何使用 tcpdump 进行抓包详细教程</a></li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>code-snippets</tag>
        <tag>linux</tag>
        <tag>network</tag>
        <tag>tcpdump</tag>
      </tags>
  </entry>
  <entry>
    <title>jmockit测试框架常用技巧</title>
    <url>//2023-02-19-jmockit-usage-faq/</url>
    <content><![CDATA[<h1 id="Injectable-与-Mocked-有啥区别"><a href="#Injectable-与-Mocked-有啥区别" class="headerlink" title="@Injectable  与 @Mocked 有啥区别?"></a>@Injectable  与 @Mocked 有啥区别?</h1><p><a href="https://www.cnblogs.com/shoren/p/jmokit-summary.html">https://www.cnblogs.com/shoren/p/jmokit-summary.html</a></p>
<ol>
<li>Injectable只会mock当前实例</li>
<li>Mocked会mock该类下所有实例</li>
</ol>
<p>针对 @Tested 的类, 所有field必须使用 Injectable 来注入, 使用 Mocked 来标识的properties, 不会被注入.</p>
<h1 id="如何测试private方法"><a href="#如何测试private方法" class="headerlink" title="如何测试private方法?"></a>如何测试private方法?</h1><p><code>mockit.Deencapsulation#invoke(java.lang.Object, java.lang.String, java.lang.Object...)</code></p>
<hr>
<h2 id="如何测试private方法-并且传入null作为参数"><a href="#如何测试private方法-并且传入null作为参数" class="headerlink" title="如何测试private方法, 并且传入null作为参数?"></a>如何测试private方法, 并且传入null作为参数?</h2><p>使用<code>Deencapsulation.invoke</code> 测试private方法时, 如果需要传入null作为参数, 如果直接传入null,  会报错, 样例如下:</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 第1, 第3个参数为null</span>
<span class="token class-name">Deencapsulation</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>testResourceService<span class="token punctuation">,</span> <span class="token string">"testMethod"</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token keyword">null</span><span class="token punctuation">,</span> param1<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> param2<span class="token punctuation">,</span> param3<span class="token punctuation">,</span> param4<span class="token punctuation">,</span> param5<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>IllegalArgumentException</span><span class="token operator">:</span> <span class="token class-name">Invalid</span> <span class="token keyword">null</span> value passed as argument <span class="token number">0</span>

	at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span></span>ServiceImplTest</span><span class="token punctuation">.</span><span class="token function">testMethod</span><span class="token punctuation">(</span>xxxTest<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1141</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span>NativeMethodAccessorImpl</span><span class="token punctuation">.</span><span class="token function">invoke0</span><span class="token punctuation">(</span><span class="token class-name">Native</span> <span class="token class-name">Method</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span>Method</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Method</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">498</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>intellij<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span>JUnit4IdeaTestRunner</span><span class="token punctuation">.</span><span class="token function">startRunnerWithArgs</span><span class="token punctuation">(</span><span class="token class-name">JUnit4IdeaTestRunner</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">69</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>intellij<span class="token punctuation">.</span>rt<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span>IdeaTestRunner</span>$<span class="token class-name">Repeater</span><span class="token punctuation">.</span><span class="token function">startRunnerWithArgs</span><span class="token punctuation">(</span><span class="token class-name">IdeaTestRunner</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">33</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>intellij<span class="token punctuation">.</span>rt<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span>JUnitStarter</span><span class="token punctuation">.</span><span class="token function">prepareStreamsAndStart</span><span class="token punctuation">(</span><span class="token class-name">JUnitStarter</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">235</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>intellij<span class="token punctuation">.</span>rt<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span>JUnitStarter</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">JUnitStarter</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">54</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>解决方案:</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 第1, 第3个参数, 使用 类名.class 来传入</span>
<span class="token class-name">Deencapsulation</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>testResourceService<span class="token punctuation">,</span> <span class="token string">"testMethod"</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> param1<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> param2<span class="token punctuation">,</span> param3<span class="token punctuation">,</span> param4<span class="token punctuation">,</span> param5<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>参见:  <a href="https://stackoverflow.com/questions/23096026/how-to-pass-null-string-to-a-private-method-using-jmockit-while-unit-testing-it">https://stackoverflow.com/questions/23096026/how-to-pass-null-string-to-a-private-method-using-jmockit-while-unit-testing-it</a></p>
<h1 id="如何mock-static方法"><a href="#如何mock-static方法" class="headerlink" title="如何mock static方法"></a>如何mock static方法</h1><p>例如需要mock EnvUtil.get() 这个static方法, 如下即可:</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">MockUp</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EnvUtil</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Mock</span>
    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 注意, 这里不要加 static 标识</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"inventoryResourceProviderUseLocal"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token string">"true"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token string">"false"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>参见: <a href="https://www.baeldung.com/jmockit-static-method">https://www.baeldung.com/jmockit-static-method</a></p>
<h1 id="如何mock-Tested对象的方法"><a href="#如何mock-Tested对象的方法" class="headerlink" title="如何mock Tested对象的方法"></a>如何mock Tested对象的方法</h1><p>由于 Tested 的对象, 通常都是当前UT需要测试的对象本身. 在测试的目标方法(如下例子中的calcUserScore), 需要本身依赖到当前类的其他方法, 且逻辑非常复杂(例如下例中的getUserById), 则可以将测试对象本身的部分方法也进行mock. 如下:</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">JMockit</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceMockTest</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Tested</span>
    <span class="token class-name">UserServiceImpl</span> userService<span class="token punctuation">;</span>

    
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">calcUserScoreTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

        <span class="token keyword">new</span> <span class="token class-name">MockUp</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserServiceImpl</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token annotation punctuation">@Mock</span>
            <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> uid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        userService<span class="token punctuation">.</span><span class="token function">calcUserScore</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="如何mock-Injectable对象的方法"><a href="#如何mock-Injectable对象的方法" class="headerlink" title="如何mock Injectable对象的方法"></a>如何mock Injectable对象的方法</h1><p>Injectable对象通常是当前要测试对象依赖的其他对象. 方法如下:</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">JMockit</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceMockTest</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Tested</span>
    <span class="token class-name">UserServiceImpl</span> userService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Injectable</span>
    <span class="token class-name">AddrService</span> addrSvc<span class="token punctuation">;</span>

    
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUsrAddrTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Addr</span> testAddr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Addr</span><span class="token punctuation">(</span><span class="token string">"cn"</span><span class="token punctuation">,</span> <span class="token string">"hangzhou"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">new</span> <span class="token class-name">Expectations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>
            addrSvc<span class="token punctuation">.</span><span class="token function">getAddrByAddrId</span><span class="token punctuation">(</span>anyLong<span class="token punctuation">)</span><span class="token punctuation">;</span>
            result <span class="token operator">=</span> testAddr<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        
        userService<span class="token punctuation">.</span><span class="token function">getUsrAddr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="如何根据不同的输入参数-值-mock不同的输出结果"><a href="#如何根据不同的输入参数-值-mock不同的输出结果" class="headerlink" title="如何根据不同的输入参数(值), mock不同的输出结果"></a>如何根据不同的输入参数(值), mock不同的输出结果</h1><blockquote>
<p>尤其是在输入参数是个List的时候, 需要mock不同的输出</p>
</blockquote>
<p>代码片段如下, 核心是使用Delegate, 完整样例参见:<a href="https://github.com/DavyJones2010/test-core/blob/master/src/test/java/edu/xmu/test/javase/jmockit/JMockitTest.java#L27">JMockitTest.java</a> </p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Expectations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>
    <span class="token comment">// 由于这里 userDao 被mock了, 因此不会真正去执行 userDao.insert 方法</span>
    userDao<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> any<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 因此使用 Delegate 来根据不同的input来mock userDao.insert的不同output;</span>
    <span class="token comment">// 如果output为void, 则使用 Delegate&lt;Void></span>
    result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Delegate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 方法签名需要mock的方法`insert`保持一致</span>
        <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">User</span> usr<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UserException</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 这里根据不同的input(usr), 对 userDao.insert 的结果进行mock</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>usr<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"Wang"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"User is Wang!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UserException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="如何Mock-Injectable的Bean的void且修改了参数的方法"><a href="#如何Mock-Injectable的Bean的void且修改了参数的方法" class="headerlink" title="如何Mock @Injectable的Bean的void且修改了参数的方法"></a>如何Mock @Injectable的Bean的void且修改了参数的方法</h1><blockquote>
<p>尤其是@Injectable的 Bean 的方法对输入参数执行了init等操作, 之后的步骤里依赖init之后的值</p>
</blockquote>
<p>代码片段如下, 核心是使用Delegate, 完整样例参见:<a href="https://github.com/DavyJones2010/test-core/blob/master/src/test/java/edu/xmu/test/javase/jmockit/JMockitTest.java#L59">JMockitTest.java</a></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">new</span> <span class="token class-name">Expectations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>
    <span class="token comment">// 这里没有真正去执行format, 因此没有把age进行规整</span>
    userDao<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> any<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 虽然userDao.format无返回结果且被mock了(未执行), 但这里仍然可以使用 result = new Delegate&lt;Void>() &#123;&#125; 对方法执行内容&amp;结果进行Mock</span>
    result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Delegate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 方法签名需要mock的方法`format`保持一致</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">User</span> usr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            usr<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h1 id="如何进行DAO层测试"><a href="#如何进行DAO层测试" class="headerlink" title="如何进行DAO层测试"></a>如何进行DAO层测试</h1><p>数据库测试: <a href="https://www.freesion.com/article/88601080583/">UNITILS库的使用经历</a></p>
<h2 id="如何防止自动回滚"><a href="#如何防止自动回滚" class="headerlink" title="如何防止自动回滚?"></a>如何防止自动回滚?</h2><p>使用 <code>@Transactional(TransactionMode.COMMIT)</code>其中 <code>org.unitils.database.annotations.Transactional</code></p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul>
<li>由于项目历史依赖, 以及自身熟悉程度原因, 使用了 <a href="http://jmockit.github.io/changes.html">JMockit - Development history</a> 作为Mock测试框架.</li>
<li>但该项目在2019年12月之后就停止了更新. 事实上也踩了坑, 不支持Mac M1&#x2F;M2 ARM架构的JDK, 导致只能使用Hack的方式来绕过. 参见 <a href="https://github.com/jmockit/jmockit1/issues/710">Issue #710</a></li>
<li>所以针对新的应用, 建议使用 <a href="https://github.com/mockito/mockito">GitHub - mockito</a>, 虽然有一定的学习迁移成本, 但至少至今(2023年08月09日)仍在活跃维护中.</li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>java</tag>
        <tag>jmockit</tag>
        <tag>unit-test</tag>
        <tag>ut</tag>
        <tag>test-framework</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL/MySQL使用过程中的踩坑合集</title>
    <url>//2023-02-19-mysql-learn-from-failure/</url>
    <content><![CDATA[<h1 id="left-join"><a href="#left-join" class="headerlink" title="left join"></a>left join</h1><h2 id="key在右表中重复导致结果集重复"><a href="#key在右表中重复导致结果集重复" class="headerlink" title="key在右表中重复导致结果集重复"></a>key在右表中重复导致结果集重复</h2><p>样例参见: <a href="http://sqlfiddle.com/#!9/4f158d1/7">SQL Fiddle</a><br>所以left join之前, <font color='red'>一定要确认右表的key是否会重复</font>.<br>尤其是在写HIVE这种比较重量级的SQL之前, 一定要注意, 否则会导致报表制作出来数据重复, 影响数据质量.</p>
<h2 id="on中写了左表的"><a href="#on中写了左表的" class="headerlink" title="on中写了左表的"></a>on中写了左表的</h2><div class="note warning"><p>left join 为了保证左表所有行, 因此on里的条件只对右表起作用, 控制左表的条件写到on里也没用</p>
</div>
<p>样例参见: <a href="http://sqlfiddle.com/#!9/4f158d1/10">SQL Fiddle</a><br>所以left join的时候, <font color='red'>一定要保证筛选左表的条件要放到where里, 而不要放到on里</font>. </p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>learn-from-failure</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Java线程状态与jstack线程栈分析实战</title>
    <url>//2023-02-22-java-jstack-thread-status/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>某次机房间光纤被挖断, 导致跨机房通信网络丢包率高. </p>
<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>TODO: 补充</p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>learn-from-failure</tag>
        <tag>java</tag>
        <tag>jstack</tag>
      </tags>
  </entry>
  <entry>
    <title>一本书读懂财报笔记</title>
    <url>//2023-02-24-finance-report-reading-notes/</url>
    <content><![CDATA[
<div class="markmap-container" style="height:500px">
  <svg data="{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;一本书读懂财报&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;企业活动&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;经营活动&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;生产产品&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;销售产品&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;回收货款&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[13,14]},&quot;v&quot;:&quot;投资活动&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[15,16]},&quot;v&quot;:&quot;融资活动&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[17,18]},&quot;v&quot;:&quot;企业目的&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[19,20]},&quot;v&quot;:&quot;盈利&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[21,22]},&quot;v&quot;:&quot;第一张表: 资产负债表&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[23,24]},&quot;v&quot;:&quot;资产(Assets)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[25,26]},&quot;v&quot;:&quot;流动资产(Current Assets, 流动性从高到低)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[27,28]},&quot;v&quot;:&quot;货币资金(Cash)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[29,30]},&quot;v&quot;:&quot;钱, 放在银行里, 放在公司里&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[31,32]},&quot;v&quot;:&quot;应收账款(Accounts Receivable)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[33,34]},&quot;v&quot;:&quot;在销售产品的时候，时常有卖掉产品却收不到钱的情况发生，这到底是怎么回事呢？可能是因为买方说不能马上付钱给卖方，而卖方又不想失去这个客户，所以愿意承担风险，让买方延迟付款。也有可能是因为，同类产品的售卖者很多，为了和别人竞争，卖方必须向买方承诺一些优惠条件&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[35,36]},&quot;v&quot;:&quot;其他应收款(Other Receivables)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[37,38]},&quot;v&quot;:&quot;“小张的好朋友小红的公司临时周转不开，小红就向小张借了100万元，并承诺两周之后把钱还给小张。这笔钱显然不是一项投资，或者说不是一项对外的贷款，因为小张没有向小红收取任何利息；但小张又必须在两周之后收回向小红的借款，所以说这笔钱也是一笔应收款。这种类型的应收款跟一般的应收账款是不一样的，它不是销售产品所得，所以是“其他应收款”。”&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[39,40]},&quot;v&quot;:&quot;“在现实中，确实有一些公司的其他应收款高达几十个亿。”&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[43,44]},&quot;v&quot;:&quot;预付账款(Prepaid Accounts)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[45,46]},&quot;v&quot;:&quot;“比如说货品相当紧缺，卖方可能会要求买方预付一笔定金，甚至要求买方预付所有的货款；而买方也想要切切实实地把东西握在手里，因而也愿意提前把钱付给卖方。这样就产生了预付账款。”&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[47,48]},&quot;v&quot;:&quot;存货(Inventory)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[49,50]},&quot;v&quot;:&quot;在产品(Work in Process)&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[51,52]},&quot;v&quot;:&quot;产成品(Finished Goods)&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[53,54]},&quot;v&quot;:&quot;存货(Inventory)&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[55,56]},&quot;v&quot;:&quot;待摊费用&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[57,58]},&quot;v&quot;:&quot;其他流动资产&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[59,60]},&quot;v&quot;:&quot;非流动资产(Non-current Assets)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[61,62]},&quot;v&quot;:&quot;长期投资(Long-term Investments)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[63,64]},&quot;v&quot;:&quot;参股别的公司&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[65,66]},&quot;v&quot;:&quot;长期持有的股权和债券&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[67,68]},&quot;v&quot;:&quot;固定资产(Fixed Assets)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[69,70]},&quot;v&quot;:&quot;例如设备, 厂房, 汽车, 电脑&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[71,72]},&quot;v&quot;:&quot;使用时间长, 具有较高的价值&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[73,74]},&quot;v&quot;:&quot;在使用过程中, 固定资产会逐渐损耗, 价值也会随着损耗逐渐降低. 即”折旧”(Depreciation)&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[77,78]},&quot;v&quot;:&quot;无形资产(Intangible Assets)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[79,80]},&quot;v&quot;:&quot;专利权, 专有技术, 版权, 商标权, 商标权, 商誉&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[81,82]},&quot;v&quot;:&quot;土地使用权(Land Usage Rights)&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[87,88]},&quot;v&quot;:&quot;其他非流动资产&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[89,90]},&quot;v&quot;:&quot;生物资产(Biological Assets)&quot;}]}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[93,94]},&quot;v&quot;:&quot;负债(Liability)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[95,96]},&quot;v&quot;:&quot;流动负债&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[97,98]},&quot;v&quot;:&quot;短期借款(Short-term Borrowing)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[99,100]},&quot;v&quot;:&quot;还款期限在一年以下的借款&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[101,102]},&quot;v&quot;:&quot;应付账款&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[103,104]},&quot;v&quot;:&quot;其他应付款&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[105,106]},&quot;v&quot;:&quot;预收账款&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[107,108]},&quot;v&quot;:&quot;其他应付款&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[109,110]},&quot;v&quot;:&quot;非流动负债&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[111,112]},&quot;v&quot;:&quot;长期借款(Long-term Borrowing)&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[113,114]},&quot;v&quot;:&quot;应付债券&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[115,116]},&quot;v&quot;:&quot;长期应付款&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[117,118]},&quot;v&quot;:&quot;其他非流动负债&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[119,120]},&quot;v&quot;:&quot;所有者权益&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[121,122]},&quot;v&quot;:&quot;实收资本&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[123,124]},&quot;v&quot;:&quot;资本公积&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[125,126]},&quot;v&quot;:&quot;盈余公积&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[127,128]},&quot;v&quot;:&quot;留存收益&quot;}]}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[129,130]},&quot;v&quot;:&quot;第二张表: 利润表&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[131,132]},&quot;v&quot;:&quot;像一个漏斗, 但利润不等同于现金流&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[133,134]},&quot;v&quot;:&quot;营业收入&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[135,136]},&quot;v&quot;:&quot;营业收入: 卖出产品所获得的的收益&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[137,138]},&quot;v&quot;:&quot;-营业成本&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[139,140]},&quot;v&quot;:&quot;营业成本: 卖出的产品成本&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[141,142]},&quot;v&quot;:&quot;-营业税金及附加&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[143,144]},&quot;v&quot;:&quot;营业税&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[145,146]},&quot;v&quot;:&quot;消费税&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[147,148]},&quot;v&quot;:&quot;城市维护建设税&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[149,150]},&quot;v&quot;:&quot;资源税&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[151,152]},&quot;v&quot;:&quot;教育附加费&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[153,154]},&quot;v&quot;:&quot;…&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[155,156]},&quot;v&quot;:&quot;-营业费用(Operating Expenses)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[157,158]},&quot;v&quot;:&quot;“在生产和销售过程中产生的费用就是营业费用。比如说把货物从仓库运到销售场所的运费、仓储费、广告费和其他为了促销而支出的一些费用、销售人员的工资、门店的店租抑或是折旧——视乎门店店面的所有权是否在企业自己手上，等等。”&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[159,160]},&quot;v&quot;:&quot;-管理费用(General and Administrative Expense)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[161,162]},&quot;v&quot;:&quot;“管理费用就是与企业的管理环节有关的一切费用。比如说管理部门各种人员的工资，比如说行政开支、办公楼的折旧等，都是管理费用。因此，不同类型工作人员的工资往往属于不同的项目——销售人员的工资属于营业费用，而管理人员的工资属于管理费用。不同类型的固定资产的折旧也属于不同的项目，门店的折旧属于营业费用，办公楼的折旧属于管理费用，而厂房的折旧属于生产成本。”&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[163,164]},&quot;v&quot;:&quot;-财务费用&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[165,166]},&quot;v&quot;:&quot;例如公司筹集了大量资金, 这些资金是通过股权融资获得, 因此借款利息为0; 这些资金存在银行, 产生存款利息=100w; 因此财务费用=-100w; 因此营业收入-财务费用=营业收入+100w; 是增加利润的.&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[167,168]},&quot;v&quot;:&quot;=借款利息-存款利息&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[169,170]},&quot;v&quot;:&quot;-资产减值损失(Inpairment Loss of Assets Impairment)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[171,172]},&quot;v&quot;:&quot;大部分资产按照”历史成本”来机架, 如果资产发生了减值, 需要扣除该部分减值, 利润也会相应受到影响.这就是”资产减值损失”&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[173,174]},&quot;v&quot;:&quot;+投资收益(Investment Income)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[175,176]},&quot;v&quot;:&quot;“比如小张公司的子公司给小张的公司分红了，那这笔钱就是小张公司的投资收益。实际上，投资收益可以说是小张以成立子公司这种特殊方式进行的营业活动，所以仍旧是营业利润当中的一部分。”&quot;}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[177,178]},&quot;v&quot;:&quot;营业利润(Operating Profit)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[179,180]},&quot;v&quot;:&quot;=营业收入-营业成本-营业税金及附加-三项费用-资产减值损失+投资收益&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[181,182]},&quot;v&quot;:&quot;营业外&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[183,184]},&quot;v&quot;:&quot;营业外收入(Non-operating Revenues)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[185,186]},&quot;v&quot;:&quot;卖掉了公司一台闲置设备, 由此获得的收益为”营业外收入”, 因为公司经营的目的是通过”出售产品赚钱”, 而不是通过出售自己的固定资产(设备)赚钱 获得的赔偿和奖励&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[187,188]},&quot;v&quot;:&quot;营业外支出(Non-operating Expenses)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[189,190]},&quot;v&quot;:&quot;因违规遭受处罚, 或者火灾, 水灾, 地震所导致的损失&quot;}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[191,192]},&quot;v&quot;:&quot;利润总额&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[193,194]},&quot;v&quot;:&quot;=营业利润+营业外收入-营业外之处+补贴收入+汇兑损益&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[195,196]},&quot;v&quot;:&quot;净利润(Net Profit)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[197,198]},&quot;v&quot;:&quot;净利润是一个企业经营的最终成果. 净利润多, 经营效益就好; 净利润少, 经营效益就差&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[199,200]},&quot;v&quot;:&quot;=利润总额-所得税&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[201,202]},&quot;v&quot;:&quot;所得税&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[203,204]},&quot;v&quot;:&quot;中国企业所得税税率一般在25%; 但这里的25%是”应税所得”的25%; 而非”利润总额”的25%; 利润总额: 以会计准则为基础计算出来 应税所得: 以税法为基础计算出来&quot;}]}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[205,206]},&quot;v&quot;:&quot;其他知识&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[207,208]},&quot;v&quot;:&quot;资产与费用的区别&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[209,210]},&quot;v&quot;:&quot;如果这笔钱可以换来一个对将来有用的东西, 那就是资产. 例如6万元买来的能够使用6个月的办公用品. 6个月之后, 这笔钱就变成了费用.&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[211,212]},&quot;v&quot;:&quot;如果这笔钱花完就完了, 那它就是费用. 例如预付的房租, 预付的广告费用.&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[213,214]},&quot;v&quot;:&quot;很多情况下, 资产和费用只存在时间概念上的不同.&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[215,216]},&quot;v&quot;:&quot;资产计价方式&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[217,218]},&quot;v&quot;:&quot;历史成本/原始成本/实际成本(Historical Cost)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[219,220]},&quot;v&quot;:&quot;例如1台使用了5年的生产设备, 如何计价?&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[221,222]},&quot;v&quot;:&quot;如果资产升值, 则忽略, 如果资产减值,就把这个减值记录下来.&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[223,224]},&quot;v&quot;:&quot;只要没有新的交易发生, 资产的价值只能减少, 不能增加&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[225,226]},&quot;v&quot;:&quot;“在历史成本的计价体系下，增加资产价值的唯一途径是发生一个新的交易”&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[227,228]},&quot;v&quot;:&quot;公允价值/公允市价/公允价格(Fair Value)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[229,230]},&quot;v&quot;:&quot;金融资产(Financial Assets)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[231,232]},&quot;v&quot;:&quot;例如股票&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[233,234]},&quot;v&quot;:&quot;房地产&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[235,236]},&quot;v&quot;:&quot;必须是投资性房地产&quot;}]}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[237,238]},&quot;v&quot;:&quot;利润分类&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[239,240]},&quot;v&quot;:&quot;毛利润&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[241,242]},&quot;v&quot;:&quot;=营业收入-营业成本&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[243,244]},&quot;v&quot;:&quot;净利润&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[245,246]},&quot;v&quot;:&quot;=毛利润-营业税金及附加-三项费用&quot;}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[247,248]},&quot;v&quot;:&quot;税种分类&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[249,250]},&quot;v&quot;:&quot;价内税(Tax Included in Price)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[251,252]},&quot;v&quot;:&quot;如营业税(Business Tax)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[253,254]},&quot;v&quot;:&quot;“国家对工商营利事业按营业额征收的税, 属于流转课税的一类”&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[255,256]},&quot;v&quot;:&quot;例如去饭店吃饭, 支付了100元, 但实际饭店需要按照100元给税务部分支付一定比例税费.&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[257,258]},&quot;v&quot;:&quot;由经营者承担&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[259,260]},&quot;v&quot;:&quot;因此在经营者的利润表中, 只能出现”营业税税收成本”, 而不会出现”增值税税收成本”&quot;}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[261,262]},&quot;v&quot;:&quot;价外税(Tax Excluded in Price)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[263,264]},&quot;v&quot;:&quot;如增值税(Value-added Tax)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[265,266]},&quot;v&quot;:&quot;“一种销售税，是消费者承担的税费”&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[267,268]},&quot;v&quot;:&quot;由消费者承担&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[269,270]},&quot;v&quot;:&quot;消费者在购买东西时, 已经把税金交给了卖方, 卖方也已经替税务局从消费者这里收了税, 是注定要付给税务局的. 因此对于经营者来说, 这笔钱算是”负债”&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[271,272]},&quot;v&quot;:&quot;因此增值税体现在资产负债表中”应交税金”这一项目中&quot;}]}]}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[273,274]},&quot;v&quot;:&quot;财务分析方法&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[275,276]},&quot;v&quot;:&quot;同型分析&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[277,278]},&quot;v&quot;:&quot;趋势分析(Trend Analysis)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[279,280]},&quot;v&quot;:&quot;使用同型分析与自己过去相比, 就叫趋势分析&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[281,282]},&quot;v&quot;:&quot;比较分析(Comparing Analysis)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[283,284]},&quot;v&quot;:&quot;与别的企业相比, 无论是竞争对手还是行业的标杆企业或者行业内的平均水平, 就叫”比较分析”&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[285,286]},&quot;v&quot;:&quot;毛利率(Gross Margin)&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[287,288]},&quot;v&quot;:&quot;净利率(Net Profit Margin)&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[289,290]},&quot;v&quot;:&quot;总资产报酬率(Return on Assets)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[291,292]},&quot;v&quot;:&quot;=收入/总资产*净利润/收入=净利润/总资产&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[293,294]},&quot;v&quot;:&quot;投资回报率(Return on Investment, ROI)&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[295,296]},&quot;v&quot;:&quot;净资产收益率(Return on Equity, ROE)&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[297,298]},&quot;v&quot;:&quot;周转率&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[299,300]},&quot;v&quot;:&quot;在一年之内, 企业的资产一共转了多少圈&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[301,302]},&quot;v&quot;:&quot;周转率越过, 赚的钱也就越多&quot;}]}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[303,304]},&quot;v&quot;:&quot;偿债能力(Solvency)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[305,306]},&quot;v&quot;:&quot;短期偿债能力&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[307,308]},&quot;v&quot;:&quot;流动比率(Current Ratio)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[309,310]},&quot;v&quot;:&quot;健康公司大多在3~4之间&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[311,312]},&quot;v&quot;:&quot;大多数中国企业流动比率在1到2之间&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[317,318]},&quot;v&quot;:&quot;速动比率(Quick Ratio/Acid-test Ratio)&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[319,320]},&quot;v&quot;:&quot;长期偿债能力&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[321,322]},&quot;v&quot;:&quot;偿还利息能力&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[323,324]},&quot;v&quot;:&quot;息税前收益(Earnings before Interest and Tax, EBIT)&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[325,326]},&quot;v&quot;:&quot;利息收入倍数(Times Interest Earned/Interest Production Multiples)&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[329,330]},&quot;v&quot;:&quot;偿还本金能力&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[331,332]},&quot;v&quot;:&quot;资产负债率(Liability/Asset Ratio), 又称财务杠杆(Financial Leverage)&quot;}]}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[335,336]},&quot;v&quot;:&quot;五力图(Five Forces Model)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[337,338]},&quot;v&quot;:&quot;即五力分析模型&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[339,340]},&quot;v&quot;:&quot;现有企业之间的竞争&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[341,342]},&quot;v&quot;:&quot;行业增长&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[343,344]},&quot;v&quot;:&quot;集中&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[345,346]},&quot;v&quot;:&quot;多样化竞争&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[347,348]},&quot;v&quot;:&quot;转换成本&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[349,350]},&quot;v&quot;:&quot;规模经济型&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[351,352]},&quot;v&quot;:&quot;学习成本&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[353,354]},&quot;v&quot;:&quot;固定/可变成本&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[355,356]},&quot;v&quot;:&quot;产能过剩&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[357,358]},&quot;v&quot;:&quot;退出成本&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[359,360]},&quot;v&quot;:&quot;新进入者的威胁&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[361,362]},&quot;v&quot;:&quot;替代产品的威胁&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[363,364]},&quot;v&quot;:&quot;购买者的议价能力&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[365,366]},&quot;v&quot;:&quot;供货方的议价能力&quot;}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[367,368]},&quot;v&quot;:&quot;企业战略定位&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[369,370]},&quot;v&quot;:&quot;成本领先战略(Overall Cost Leadership)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[371,372]},&quot;v&quot;:&quot;主动牺牲效益, 来换取效率的战略, 是”效率制胜”的战略.&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[373,374]},&quot;v&quot;:&quot;毛利率低&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[375,376]},&quot;v&quot;:&quot;高周转&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[377,378]},&quot;v&quot;:&quot;差异化战略(Differentiation Strategy)&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[379,380]},&quot;v&quot;:&quot;样例&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[381,382]},&quot;v&quot;:&quot;竞争性制造业企业&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[383,384]},&quot;v&quot;:&quot;固定资产值最高&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[385,386]},&quot;v&quot;:&quot;资金密集型的制造企业&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[387,388]},&quot;v&quot;:&quot;其次是营收款项&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[389,390]},&quot;v&quot;:&quot;为了销售自己的产品, 允许客户暂缓支付货款, 因此应该面临压力.&quot;}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[391,392]},&quot;v&quot;:&quot;服务型企业&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[393,394]},&quot;v&quot;:&quot;无形资产占比大&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[395,396]},&quot;v&quot;:&quot;人也可以作为无形资产, 例如俱乐部花2000w与球星签了3年买断协议&quot;}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[397,398]},&quot;v&quot;:&quot;营业利润与营业外收入&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[399,400]},&quot;v&quot;:&quot;A公司赚了1000w, 900w来自营业利润, 100w来自营业外收入&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[401,402]},&quot;v&quot;:&quot;B公司赚了1000w, 100w来自营业利润, 900w来自营业外收入&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[403,404]},&quot;v&quot;:&quot;三张表关注点&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[405,406]},&quot;v&quot;:&quot;现金流量表&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[407,408]},&quot;v&quot;:&quot;银行贷款关注&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[409,410]},&quot;v&quot;:&quot;去银行贷款, 银行关注该表. 银行从来都不希望企业还不起钱, 也不希望企业通过变卖自己的资产来还债. 它希望企业手头永远有大量的现金.&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[411,412]},&quot;v&quot;:&quot;利润表&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[413,414]},&quot;v&quot;:&quot;投资者关注&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[415,416]},&quot;v&quot;:&quot;利润表将可持续的利润(经营利润) 和不可持续的利润(营业外收支, 补贴收入, 汇兑损益) 分别列示 不仅展示企业现在赚了多少钱, 还能使读报表的人形成对企业未来盈利的预期.&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[417,418]},&quot;v&quot;:&quot;资产负债表&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[419,420]},&quot;v&quot;:&quot;企业并购关注&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[421,422]},&quot;v&quot;:&quot;因为 “股东权益=资产-负债” 恒等式&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[423,424]},&quot;v&quot;:&quot;资产有高估的风险&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[425,426]},&quot;v&quot;:&quot;负债有低估的风险&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[427,428]},&quot;v&quot;:&quot;或有负债: C公司为B公司做了担保, B公司跑路&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[429,430]},&quot;v&quot;:&quot;表外负债:&quot;}]}]}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[431,432]},&quot;v&quot;:&quot;第三张表: 现金流量表&quot;}]}"></svg>
</div>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>note</tag>
        <tag>book-list</tag>
        <tag>finance</tag>
      </tags>
  </entry>
  <entry>
    <title>Java线程BLOCKED与WAITING状态深入研究</title>
    <url>//2023-02-25-java-thread-sync-deep-dive/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>上次机房断网的jstack分析之后, 发现其实个人并没有深入理解Java中线程的如下两个状态的区别: </p>
<ul>
<li>“BLOCKED”</li>
<li>“WAITING”<br>或者, 都是线程被阻塞无法运行(让出了CPU的时间片)的状态:</li>
<li>问题1: 这两个状态具体有啥区别? </li>
<li>问题2: JVM为什么要进行上边两个状态的区分? 为什么不只用一个状态标识?</li>
</ul>
<p>先不急着回答这个问题, 我们从一个例子出发:  </p>
<h1 id="生产者-amp-消费者例子"><a href="#生产者-amp-消费者例子" class="headerlink" title="生产者&amp;消费者例子"></a>生产者&amp;消费者例子</h1><p>先来一道面试里时常问到的题目:<br><code>两个线程, 分别扮演消费者&amp;生产者的角色, 假设队列为1, 无限循环. 如何写?</code></p>
<h2 id="代码样例"><a href="#代码样例" class="headerlink" title="代码样例"></a>代码样例</h2><ul>
<li>完整代码参见: <a href="https://github.com/DavyJones2010/test-core/blob/master/src/test/java/edu/xmu/test/concurrent/ProducerConsumerTest.java">ProducerConsumerTest.java</a></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// consumer</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>isEmpty<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"consumer is waiting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            lock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"start consuming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10000L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finished consuming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        isEmpty <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        lock<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// producer</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>isEmpty<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"producer is waiting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            lock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"start producing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10000L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        isEmpty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finished producing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        lock<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="变体写法-1"><a href="#变体写法-1" class="headerlink" title="变体写法-1"></a>变体写法-1</h2><p>如果在调用<code>lock.notify()</code>之后再生产或者再消费, 会怎么样?<br>即代码变体如下: </p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// consumer</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>isEmpty<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"consumer is waiting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            lock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        lock<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"start consuming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10000L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finished consuming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        isEmpty <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// producer</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>isEmpty<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"producer is waiting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            lock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        lock<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"start producing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10000L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        isEmpty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finished producing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>可以自己尝试下, 代码结果仍然是正常的, 即与正常写法完全没有区别. </p>
</blockquote>
<p>这是怎么回事儿? </p>
<ul>
<li>producer调用<code>lock.notify()</code>的时候是直接把consumer唤醒开始执行了么? 但producer生产的代码在<code>lock.notify()</code>之后, 那么<code>isEmpty=false</code>是否会执行到?</li>
<li>如果<code>isEmpty=false</code>执行不到, 而是在consumer侧执行, 那么consumer也还是无法开始消费(因为无法走出<code>while(isEmpty)</code>这个判断循环), 结果应该是consumer仍然卡在<code>wait()</code>上. </li>
<li>如果<code>isEmpty=true</code>执行到, 那么是在什么时候唤醒了consumer呢?<br>好复杂, <strong>代码的执行链路到底是怎样的??</strong></li>
</ul>
<h2 id="wait-x2F-notify详解"><a href="#wait-x2F-notify详解" class="headerlink" title="wait&#x2F;notify详解"></a>wait&#x2F;notify详解</h2><p>要搞清楚代码链路是怎样的, 首先我们需要清楚调用wait&#x2F;notify时到底发生了什么?</p>
<blockquote>
<p>由于wait&#x2F;notify都是native的代码, 阅读不易. 因此下文主要内容&#x2F;概念都是参照<a href="https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html">Java SE Specification</a>, 进行个人理解与研究.</p>
</blockquote>
<p>先给出三个重要的概念: </p>
<ul>
<li>object monitor: 每个java对象都有一个object monitor</li>
<li>blocked set: 每个java对象都有一个blocked set</li>
<li>wait set: 每个java对象都有一个wait set</li>
</ul>
<p>再来说明下三个概念实际是怎么使用的:</p>
<ol>
<li>如下简单代码, 实际线程执行时发生了如下事情: <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">synchronized</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// do smt</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<ul>
<li><p>线程执行<code>synchronized(o)</code>会导致: </p>
<ul>
<li>线程尝试去抢占<code>object monitor</code>; </li>
<li>如果抢占到, 则该线程拥有了该<code>object monitor</code>, 进行临界区代码执行. </li>
<li>如果抢占不到, 则该线程被放入该对象的<code>blocked set</code>中. 具体 <ol>
<li>什么时候唤醒: 可以简化认为为JVM会在底层时刻轮询<code>object monitor</code>占用情况, 一旦<code>object monitor</code>被释放, 立刻从<code>blocked set</code>中找个线程开始执行.</li>
<li>如果多个线程都在<code>block set</code>中, 该唤醒哪个, 由JVM来决定(TODO: 这个具体待探究, 不影响本文).</li>
</ol>
</li>
</ul>
</li>
<li><p>线程退出<code>synchronized(o)</code>临界区会导致: </p>
<ul>
<li>当前线程释放掉<code>object monitor</code></li>
<li>JVM轮询到<code>object monitor</code>处于空闲, 立刻从<code>blocked set</code>中取出一个线程, 让该线程开始临界区代码执行.</li>
</ul>
</li>
</ul>
<ol start="2">
<li>再加上简单的wait&#x2F;notify:<br>如下, 一个最简单的producer&#x2F;consumer程序: <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// consumer</span>
<span class="token class-name">Object</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">synchronized</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    o<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// consume</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// produce</span>
<span class="token keyword">synchronized</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// produce</span>
    o<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<blockquote>
<p>先假设consumer先执行</p>
</blockquote>
<ul>
<li><p>consumer执行链路: </p>
<ol>
<li><code>synchronized(o)</code>: 获取到<code>object monitor</code>, 开始临界区代码执行.</li>
<li><code>o.wait()</code>: 虽然可以拆解为如下几步, 但wait本身是原子操作 <ol>
<li>把consumer线程放入到该对象的 <code>wait set</code> 中</li>
<li>释放掉<code>object monitor</code></li>
<li>JVM将producer从<code>block set</code>中取出, (触发JVM&#x2F;OS的轮询, 引发producer获取到<code>object monitor</code>从而进入临界区)</li>
</ol>
</li>
</ol>
</li>
<li><p>producer执行链路:</p>
<ol>
<li><code>synchronized(o)</code>: 获取不到<code>object monitor</code>, 被放入<code>block set</code>中 </li>
<li>consumer退出临界区, producer被自动从<code>block set</code>中取出, 获取到<code>object monitor</code>从而进入临界区 (与consumer执行链路的2.3步骤重叠)</li>
<li><code>o.notify()</code>:</li>
</ol>
<ul>
<li>producer并不会因为<code>notify()</code>而释放掉<code>object monitor</code>: <mark><strong><code>notify</code>并不会导致当前线程释放掉<code>object monitor</code>!</strong></mark>, 而是继续往下执行代码.</li>
<li>JVM将consumer从<code>wait set</code>中取出, 尝试获得<code>object monitor</code></li>
<li>由于producer此时并没有释放掉<code>object monitor</code>, 因此JVM就把consumer放入到了<code>block set</code>中(即从<code>wait set</code>移到了<code>block set</code>中)</li>
</ul>
<ol start="4">
<li>退出临界区:</li>
</ol>
<ul>
<li>producer释放掉<code>object monitor</code></li>
<li>JVM将consumer从<code>block set</code>中取出</li>
<li>触发JVM内部的轮询, 引发consumer获取到<code>object monitor</code>, 从而继续<code>o.wait()</code>之后的代码片段执行</li>
</ul>
</li>
<li><p>consumer继续执行, 注意:</p>
<ol>
<li>此时consumer是<mark>继续从<code>object.wait()</code>之后的代码开始执行. (即之前中断的地方继续).</mark> </li>
<li>而<mark>不是重新通过<code>synchronized(o)</code>抢<code>object monitor</code>, 然后从头开始执行临界区代码.</mark> 因为内部JVM已经把<code>object monitor</code>给了consumer了.</li>
<li>退出临界区:<ul>
<li>consumer释放掉<code>object monitor</code></li>
<li>JVM尝试从<code>block set</code>中取出线程, 由于<code>block set</code>为空, nothing happens</li>
</ul>
</li>
</ol>
</li>
<li><p>终态: <strong>producer执行完成, consumer也执行完成.</strong></p>
</li>
</ul>
<blockquote>
<p>再假设producer先执行</p>
</blockquote>
<ul>
<li><p>producer执行链路:</p>
<ol>
<li><code>synchronized(o)</code>: producer获取到<code>object monitor</code>, 开始临界区代码执行.</li>
</ol>
</li>
<li><p>consumer执行链路:</p>
<ol>
<li><code>synchronized(o)</code>: consumer获取不到<code>object monitor</code>, 被放入<code>block set</code>中</li>
</ol>
</li>
<li><p>producer执行链路:</p>
<ol>
<li><code>o.notify()</code>: <ol>
<li>producer不会因为<code>notify()</code>而释放掉<code>object monitor</code></li>
<li>JVM从<code>wait set</code>中寻找一个线程, 移出<code>wait set</code>, 并放入到<code>blocked set</code>中. 由于此时<code>wait set</code>为空(consumer在<code>block set</code>中). 因此nothing happens</li>
</ol>
</li>
<li>退出临界区:<ol>
<li>producer释放掉<code>object monitor</code></li>
<li>JVM将consumer从<code>block set</code>中取出, 由于<code>object monitor</code>已经被producer释放, 因此consumer直接获取到<code>object monitor</code>, 开始执行临界区代码  (consumer状态 <code>block set</code> -&gt; <code>RUNNABLE</code>)</li>
</ol>
</li>
</ol>
</li>
<li><p>consumer执行链路:</p>
<ol>
<li><code>o.wait()</code>: <ol>
<li>把consumer线程放入到该对象的 <code>wait set</code> 中</li>
<li>释放掉<code>object monitor</code></li>
<li>JVM尝试从<code>block set</code>中取出一个线程, 由于此时<code>block set</code>为空, 因此nothing happens</li>
</ol>
</li>
</ol>
</li>
<li><p>终态: <strong>producer执行完成, consumer一直卡在<code>WAITING</code>状态.</strong></p>
</li>
</ul>
<h2 id="wait-x2F-notify-x2F-synchronized总结"><a href="#wait-x2F-notify-x2F-synchronized总结" class="headerlink" title="wait&#x2F;notify&#x2F;synchronized总结"></a>wait&#x2F;notify&#x2F;synchronized总结</h2><h3 id="调用-synchronized-object-时会发生"><a href="#调用-synchronized-object-时会发生" class="headerlink" title="调用 synchronized(object) 时会发生:"></a>调用 synchronized(object) 时会发生:</h3><ol>
<li>当前线程尝试抢占 <code>object monitor</code></li>
<li>如果抢占到, 则进入临界区.</li>
<li>如果抢占不到, 把当前线程放入到<code>blocked set</code>中. JVM会监控<code>object monitor</code>, 当<code>object monitor</code>归还时, 从<code>blocked set</code>中挑选一个线程继续代码执行(可能是进入临界区, 也可能是继续之前中断的代码)</li>
</ol>
<h3 id="出-synchronized-object-时会发生"><a href="#出-synchronized-object-时会发生" class="headerlink" title="出 synchronized(object) 时会发生:"></a>出 synchronized(object) 时会发生:</h3><ol>
<li>释放掉<code>object monitor</code>;</li>
<li>JVM会监控<code>object monitor</code>, 当它归还时, 从<code>blocked set</code>中挑选一个线程继续代码执行(可能是进入临界区, 也可能是继续之前中断的代码)</li>
</ol>
<h3 id="调用-object-wait-时会发生"><a href="#调用-object-wait-时会发生" class="headerlink" title="调用 object.wait() 时会发生:"></a>调用 object.wait() 时会发生:</h3><ol>
<li>把当前线程放入到 <code>wait set</code> 中</li>
<li>释放掉<code>object monitor</code></li>
<li>JVM会监控<code>object monitor</code>, 当它归还时, 从<code>blocked set</code>中挑选一个线程继续代码执行(可能是进入临界区, 也可能是继续之前中断的代码)</li>
</ol>
<h3 id="调用-object-notify-时会发生"><a href="#调用-object-notify-时会发生" class="headerlink" title="调用 object.notify() 时会发生:"></a>调用 object.notify() 时会发生:</h3><ol>
<li>不会因为<code>notify()</code>而释放掉<code>object monitor</code>, 而是继续往下执行代码.</li>
<li>JVM从<code>wait set</code>中寻找一个线程, 移出<code>wait set</code>, 并放入到<code>blocked set</code>中.(JVM会持续监控<code>object monitor</code>状态)</li>
</ol>
<h3 id="线程在不同位置的不同状态"><a href="#线程在不同位置的不同状态" class="headerlink" title="线程在不同位置的不同状态"></a>线程在不同位置的不同状态</h3><p>因此可以根据线程所处的位置不同, 来区分不同状态: </p>
<ul>
<li>在<code>wait set</code>里: <code>WAITING</code>状态</li>
<li>在<code>blocked set</code>里: <code>BLOCKED</code>状态</li>
</ul>
<p>因此也就从根本上解释了本文开头的第一个问题 <code>问题1: 这两个状态具体有啥区别?</code></p>
<h3 id="总结线程可能的状态变化"><a href="#总结线程可能的状态变化" class="headerlink" title="总结线程可能的状态变化"></a>总结线程可能的状态变化</h3><ul>
<li><code>RUNNABLE</code> -&gt; <code>block set</code>: 卡在synchronized</li>
<li><code>RUNNABLE</code> -&gt; <code>wait set</code>: 卡在synchronized里wait</li>
<li><code>wait set</code>  -&gt; <code>block set</code>: wait之后被其他线程调用的notify唤醒</li>
<li><code>block set</code> -&gt; <code>wait set</code>: 不存在该链路, 可能当前线程在block set, 但被赋予object monitor之后, 肯定进入了RUNNABLE状态. 可能RUNNABLE之后主动调用了wait, 但也不是直接从<code>blocked set</code>到<code>wait set</code></li>
<li><code>block set</code> -&gt; <code>RUNNABLE</code>: 其他线程wait之后, 自动释放掉object monitor, 当前线程可以继续执行</li>
</ul>
<pre class="mermaid">stateDiagram
    [*] --> CREATED: new Thread
    CREATED --> RUNNABLE: Thread.start()
    RUNNABLE --> BLOCKED: synchronized()
    RUNNABLE --> WAITING: wait()
    BLOCKED --> RUNNABLE: 其他线程wait()
    WAITING --> BLOCKED: 其他线程调用notify()
    RUNNABLE --> DESTROYED: run执行结束, 或者抛出异常退出
    DESTROYED --> [*]: 结束</pre>

<h2 id="wait-x2F-notify-x2F-synchronized实战"><a href="#wait-x2F-notify-x2F-synchronized实战" class="headerlink" title="wait&#x2F;notify&#x2F;synchronized实战"></a>wait&#x2F;notify&#x2F;synchronized实战</h2><p>此时就很容易根据三个概念的流转, 来分析下上文的 <code>变体写法-1</code> 的执行流程, 也就明白为啥也可以work了.<br>本文就不再赘述了.</p>
<h2 id="变体写法-2"><a href="#变体写法-2" class="headerlink" title="变体写法-2"></a>变体写法-2</h2><p>如下例子中, 基于<code>变体写法-1</code>把<code>synchronized(lock)</code>放在<code>while(true)</code>外层, 会正常执行么? 可以先试着自己分析下(详细分析如下). </p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// consumer</span>
<span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 1. 获取object monitor</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>isEmpty<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"consumer is waiting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            lock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 3. 把自己放到wait set里, 释放object monitor; 5. JVM把consumer从wait set里移出, 移入到block set里; 8. JVM把consumer从block set里移出, consumer获取object monitor</span>
        <span class="token punctuation">&#125;</span>
        lock<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9. 通知JVM把producer从wait set里移出, 移入到block set里; consumer继续往下执行(仍然保有object monitor)</span>
        
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"start consuming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10000L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finished consuming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        isEmpty <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 10. consumer消费完成, 继续执行到第3步, 依次循环.</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// producer</span>
<span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 2. 把自己放到block set里, 等待获取object monitor; 4. 从block set移出, 获取 object monitor</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>isEmpty<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"producer is waiting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
            lock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7. 把自己放到wait set里, 释放object monitor; 9. JVM把producer从wait set里移出, 移入到block set里; 4.2 producer从block set移出, 获取 object monitor</span>
        <span class="token punctuation">&#125;</span>
        lock<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5. 通知JVM把consumer从wait set里移出, 移入到block set里; producer继续往下执行(仍然保有object monitor)</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"start producing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10000L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        isEmpty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">// 6. producer开始生产</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finished producing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>答案揭晓: 没啥区别, 正常执行.</p>
</blockquote>
<h1 id="实际生产应用"><a href="#实际生产应用" class="headerlink" title="实际生产应用"></a>实际生产应用</h1><p>&#x2F;&#x2F; TODO: </p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="WAITING与TIMED-WAITING区别"><a href="#WAITING与TIMED-WAITING区别" class="headerlink" title="WAITING与TIMED_WAITING区别"></a>WAITING与TIMED_WAITING区别</h2><h2 id="Object-wait-与-Thread-sleep-的区别"><a href="#Object-wait-与-Thread-sleep-的区别" class="headerlink" title="Object.wait() 与 Thread.sleep() 的区别"></a>Object.wait() 与 Thread.sleep() 的区别</h2><p>又是面试常问的一道题.<br>通过上边分析可知</p>
<p>行为上区别: </p>
<ul>
<li>Object.wait()之后:<ol>
<li>把当前线程移到wait set里 </li>
<li>释放掉object monitor</li>
<li>线程暂停执行, 让出CPU时间片</li>
</ol>
</li>
<li>Thread.sleep()之后:<ol>
<li>线程暂停执行, 让出CPU时间片; 不会有1, 2的操作.</li>
</ol>
</li>
</ul>
<p>结果上区别: </p>
<ul>
<li>Object.wait()之后: 线程进入 WAITING (on object monitor) 或者 TIMED_WAITING (on object monitor) 状态 </li>
<li>Thread.sleep()之后: 线程进入 TIMED_WAITING (sleeping) 状态</li>
</ul>
<h2 id="其他几种情况"><a href="#其他几种情况" class="headerlink" title="其他几种情况"></a>其他几种情况</h2><p>除了本文, 其实还会有多种情况会导致线程进入<code>BLOCKED</code>, <code>WAITING</code>状态, 如下:<br><img data-src="https://www.baeldung.com/wp-content/uploads/2018/02/Life_cycle_of_a_Thread_in_Java.jpg"></p>
<p>但本质已经讲清楚了, 大家其实可以看下<code>Thread.join()</code>的源代码, 分析下当主线程调用<code>t.join()</code>与<code>t.join(30000L)</code>时, 主线程的状态应该是什么?</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">MyThread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// run()里边就是</span>
    t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//    t.join();</span>
<span class="token comment">//    t.join(30000L);</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>答案: t.join()时, 主线程是WAITING (on object monitor); t.join(30000L)时, 主线程状态是TIMED_WAITING(on object monitor) </p>
</blockquote>
<p>原因: 源代码分析即可<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202302252202526.png"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>几点感想: </p>
<ol>
<li>借此机会, 解释了自己内心以来的长久的疑惑, 感觉很通透. <ol>
<li>根本原因: JVM&#x2F;OS封装了太多东西, 例如本文内容, 如果不知道有上边三种东西, 根本无法under the hood彻底解释清楚问题.</li>
<li>最好方式: 还是自己去翻源代码; </li>
<li>其次: 就是看官方手册. 这次官方doc其实讲得也非常清晰.</li>
<li>最后: 工科一定要去实践, 自己写一些小demo打打jstack很多问题一下子就清晰了.</li>
</ol>
</li>
<li>针对Java中线程状态切换, 很多资料其实讲得并不好, 认识都很浅显, 甚至有极大的误导性. 大家引以为戒.<br>例如: <a href="https://www.javatpoint.com/thread-states-in-java">Thread States in Java</a> 的状态机图, 存在如下几个问题: <ol>
<li>在实际生产中, 我们的jstack里, 永远不会看到<code>RUNNING</code>状态的线程, 都是处于<code>RUNNABLE</code>的. 参见 <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/troubleshoot/tooldescr034.html">JavaSE Spec</a></li>
<li>没有详细区分<code>BLOCKED</code>与<code>WAITING</code>这两种状态, 而这两个状态也是我们在jstack里常见的, 也是大家都会有疑惑的, 也是希望本文给大家阐述清晰的.</li>
</ol>
</li>
</ol>
<p>例如: <a href="https://dzone.com/articles/difference-between-blocked-waiting-timed-waiting-e">Difference Between BLOCKED, WAITING, And TIMED_WAITING? Explained Through Real-Life Examples</a><br>    1. 虽然是基于生活的情况进行类比, 但还是没有根本性第解释清楚这三种状态的根本区别. 看完仍是一头雾水.<br>    2. <strong>一定要对于这种使用类比来解释技术问题的文章抱有高度警惕</strong>. 例如把docker类比集装箱, 把HTTP协议类比俩人谈话等. 都是know what的, 但know why与know how的知识才是我们真正应该掌握的.</p>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h1><ul>
<li><a href="https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html">Java Language Specification - Chapter 17. Threads and Locks</a></li>
<li><a href="https://stackoverflow.com/questions/39927299/in-java-if-a-thread-calls-notify-before-wait-how-does-this-not-cause-the-se">SoF上一个有意思的wait-notify问题</a></li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>concurrent</tag>
        <tag>java</tag>
        <tag>javase</tag>
        <tag>thread</tag>
        <tag>sync</tag>
        <tag>know-why</tag>
      </tags>
  </entry>
  <entry>
    <title>关于JVM DNS Cache问题的研究</title>
    <url>//2023-03-04-java-jvm-dns-caching/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>某次jstack发现应用卡在DNS解析上, 发现应用为了做负载均衡, 故意将JVM DNS Cache失效时间设置为了0, 即永不缓存.<br>这才知道原来还有这个参数. 因此借此机会就查阅资料, 详细研究下.</p>
<h1 id="Java-DNS流程"><a href="#Java-DNS流程" class="headerlink" title="Java DNS流程"></a>Java DNS流程</h1><h2 id="流程详解"><a href="#流程详解" class="headerlink" title="流程详解"></a>流程详解</h2><p>当我们调用如下方式解析域名时, 经过了如下流程: </p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> hostname <span class="token operator">=</span> <span class="token string">"www.baidu.com"</span><span class="token punctuation">;</span>
<span class="token class-name">InetAddress</span> addr <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span>hostname<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202303041111414.png"></p>
<p>看了上图, 估计会有几个疑问: </p>
<ol>
<li>通常域名会对应多个IP, 为啥Java中<code>InetAddress.getByName</code>解析只返回一个IP? 具体是怎么实现的?</li>
<li>DNS具体实现是怎么做的呢?<br>带着疑问往下看吧.</li>
</ol>
<h2 id="具体解析实现"><a href="#具体解析实现" class="headerlink" title="具体解析实现"></a>具体解析实现</h2><p>具体解析实现, 参见上图的<code>getaddrinfo</code>. 该方法是POSIX协议的标准, 由各个操作系统来实现.<br><a href="https://jvns.ca/blog/2022/02/23/getaddrinfo-is-kind-of-weird/">详细点此</a></p>
<p>getaddrinfo is part of a library called libc which is the standard C library.<br>There are at least 3 versions of libc:</p>
<ul>
<li>glibc (GNU libc)</li>
<li>musl libc</li>
<li>the Mac OS version of libc (I don’t know if this has a name)</li>
</ul>
<p>真正的实现就更多啦. 有些在 <code>getaddrinfo</code> 里有缓存, 有些没有, 这点要依据自己的平台注意研究.<br>之所以我们设置, 是因为线上使用了自研的dnsClient, 相当于重写了<code>getaddrinfo</code>, 是没有缓存的. 因此JVM设置缓存未0也就能生效.  </p>
<h2 id="重要参数"><a href="#重要参数" class="headerlink" title="重要参数"></a>重要参数</h2><p>注意上图中, “in cache?” 代表的是域名对应的IP是否已经在JVM的缓存中了.<br>既然涉及到缓存, 就必然涉及到失效时间的问题. 因此JVM提供了如下2个参数:</p>
<ul>
<li>networkaddress.cache.ttl (default: -1): 代表DNS解析成功时, hostName-&gt;ip 的缓存失效时间. 默认-1代表永不失效. </li>
<li>networkaddress.cache.negative.ttl (default: 10): 代表DNS解析失败时, hostName-&gt;空缓存 的失效时间. 默认为10s. 就是为了做空查询保护.</li>
</ul>
<h2 id="如何设置上述参数"><a href="#如何设置上述参数" class="headerlink" title="如何设置上述参数"></a>如何设置上述参数</h2><h3 id="方案1-JVM启动参数"><a href="#方案1-JVM启动参数" class="headerlink" title="方案1: JVM启动参数"></a>方案1: JVM启动参数</h3><p>在应用启动时, 设置启动参数:<br><code>-Dsun.net.inetaddr.ttl=0 -Dsun.net.inetaddr.negative.ttl=0</code></p>
<h3 id="方案2-应用启动后设置变量"><a href="#方案2-应用启动后设置变量" class="headerlink" title="方案2: 应用启动后设置变量"></a>方案2: 应用启动后设置变量</h3><p>在应用启动后, 设置参数: (注意参数名与启动参数名称不同)</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span>Security</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"networkaddress.cache.ttl"</span> <span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span>Security</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"networkaddress.cache.negative.ttl"</span> <span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="方案3-设置JVM配置"><a href="#方案3-设置JVM配置" class="headerlink" title="方案3: 设置JVM配置"></a>方案3: 设置JVM配置</h3><p>编辑<code>$JRE_HOME/lib/security/java.security</code> 文件, 增加如下配置: </p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">networkaddress<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>ttl <span class="token operator">=</span> <span class="token number">0</span>
networkaddress<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>negative<span class="token punctuation">.</span>ttl <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h1 id="问题重现"><a href="#问题重现" class="headerlink" title="问题重现"></a>问题重现</h1><p>为了模拟重现当时网络不稳定的情况, 设置某个不存在的域名, 这样解析需要花时间. </p>
<ul>
<li><a href="https://github.com/DavyJones2010/test-core/blob/master/src/test/java/edu/xmu/test/dns/DnsCachingTest.java">测试代码</a></li>
</ul>
<h2 id="不禁用negative"><a href="#不禁用negative" class="headerlink" title="不禁用negative"></a>不禁用negative</h2><p>发现大部分线程卡在访问DNS缓存上, 达不到重现的效果:<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202303041108536.png"></p>
<h2 id="禁用negative"><a href="#禁用negative" class="headerlink" title="禁用negative"></a>禁用negative</h2><p>这下就重现的当时的情况, 大部分线程都卡在真正解析域名上(或者叫<code>getaddrinfo</code>系统调用上):<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202303041147157.png"></p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="关于Java-DNS解析实现的吐槽"><a href="#关于Java-DNS解析实现的吐槽" class="headerlink" title="关于Java DNS解析实现的吐槽"></a>关于Java DNS解析实现的吐槽</h2><p>关于Java域名解析问题, 即<code>InetAddress.getByName()</code>实现, 发现了很有趣的一篇小文:<br><a href="https://blog.bmarwell.de/2020/09/23/javas-dns-resolution-is-so-90ies.html">Java’s DNS resolution is so 90ies! Java的DNS解析实现仍然停留在90年代!</a></p>
<h3 id="存在3个问题"><a href="#存在3个问题" class="headerlink" title="存在3个问题"></a>存在3个问题</h3><ol>
<li>首先, 虽然DNS会返回多个IP, 但<code>InetAddress.getByName()</code>只会返回第一个IP. </li>
<li>其次, 返回的IP并且不会保证这个IP能不能连通.</li>
<li>最后, <code>InetAddress</code> 所有实现方法都是<code>non-public</code>的, 导致扩展&#x2F;修复极为困难!<blockquote>
<p>Wow, that is remarkably simple! How do we know that this IP will be reachable? Well, we do not! If there are more IPs in the answer section, they are just being ignored.</p>
</blockquote>
</li>
</ol>
<h3 id="作者的解决方案"><a href="#作者的解决方案" class="headerlink" title="作者的解决方案"></a>作者的解决方案</h3><ol>
<li>通过JavaAgent解决了<code>InetAddress</code>难以扩展的问题</li>
<li>通过类似python中的方案, DNS获取到IpList之后, 会尝试连接ip 3次(timeout 100ms), 直到获取可以连通的ip, 再返回.</li>
<li>详细代码参见: [bmarwell&#x2F;nameserviceagent]<a href="https://github.com/bmarwell/nameserviceagent">https://github.com/bmarwell/nameserviceagent</a><br>我就喜欢这种能喷能干的实干家:)</li>
</ol>
<h2 id="关于配置JVM-DNS缓存生效情况问题"><a href="#关于配置JVM-DNS缓存生效情况问题" class="headerlink" title="关于配置JVM DNS缓存生效情况问题"></a>关于配置JVM DNS缓存生效情况问题</h2><ol>
<li><p>实际在Mac上设置JVM DNS缓存都为0, 发现并不生效. 例如<code>www.baidu.com</code>其实返回了2个IP, 但测试代码一直返回1个.<br>这是由于 Mac OS has DNS caching, 即把上述 <code>getaddrinfo</code> 的系统调用也进行了缓存. </p>
</li>
<li><p>而Linux上 <code>getaddrinfo</code> 不一定会有缓存, 除非使用<code>systemd-resolved</code>等工具</p>
<blockquote>
<p>Linux doesn’t necessarily unless you use systemd-resolved or something</p>
</blockquote>
</li>
</ol>
<p>所以在配置JVM DNS参数前, 也请务必确认好自己的OS环境以及各自实现.</p>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h1><ul>
<li><a href="https://maheshsenniappan.medium.com/host-name-resolution-in-java-80301fea465a">Host name resolution in Java</a></li>
<li><a href="https://stackoverflow.com/questions/1256556/how-to-make-java-honor-the-dns-caching-timeout">How to make Java honor the DNS Caching Timeout?</a></li>
<li><a href="https://jvns.ca/blog/2022/02/23/getaddrinfo-is-kind-of-weird/">Some things about getaddrinfo that surprised me</a></li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>java</tag>
        <tag>dns</tag>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>revealjs制作PPT笔记</title>
    <url>//2023-03-05-head-first-revealjs/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近在B站学习蒋炎岩老师的OS: </p>
<ul>
<li>内容自是不必多说, 干货满满.</li>
<li>对课件PPT更是十分欣赏. </li>
<li><a href="https://jyywiki.cn/OS/2022/slides/3.slides#/">实际样例</a></li>
</ul>
<h2 id="特点1-导航清晰"><a href="#特点1-导航清晰" class="headerlink" title="特点1: 导航清晰"></a>特点1: 导航清晰</h2><p>风格简约专业:</p>
<ul>
<li>横向导航区分大类</li>
<li>纵向导航来区分小类</li>
</ul>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202303052225650.png"></p>
<h2 id="特点2-管理轻量"><a href="#特点2-管理轻量" class="headerlink" title="特点2: 管理轻量"></a>特点2: 管理轻量</h2><ul>
<li>基于代码生成与管理(支持Markdown), 不使用笨重的Microsoft PPT. </li>
<li>可以使用git进行版本管理(例如showcase中本文就会转成ppt).</li>
</ul>
<h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><blockquote>
<p>revealjs + pandoc 组合神器</p>
</blockquote>
<ul>
<li><a href="https://revealjs.com/markdown/">revealjs</a></li>
<li><a href="https://pandoc.org/installing.html">pandoc</a></li>
</ul>
<p>刚好自己平时要做PPT, 但作为程序员, 又十分抵触内容与样式不分离的方式, 制作起来也耗时.<br>借鉴这种方案, 轻松写出专业且简约的PPT.</p>
<h1 id="安装-amp-配置"><a href="#安装-amp-配置" class="headerlink" title="安装&amp;配置"></a>安装&amp;配置</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li>revealjs: <a href="https://revealjs.com/installation/#full-setup">安装手册</a></li>
<li>pandoc: 把markdown转成revealjs的html, <a href="https://pandoc.org/installing.html">安装手册</a></li>
<li><a href="https://tailwindcss.com/">tailwind css</a>: JYY老师的, 个人还在研究中</li>
</ul>
<h2 id="revealjs个人配置"><a href="#revealjs个人配置" class="headerlink" title="revealjs个人配置"></a>revealjs个人配置</h2><ul>
<li>Enable <a href="https://revealjs.com/slide-numbers/">Slide Numbers</a></li>
<li>Disable <a href="https://revealjs.com/config/">Vertical centering of slides</a></li>
<li>Disable <a href="https://revealjs.com/config/">controlsTutorial</a></li>
</ul>
<h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><ul>
<li><p>revealjs</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 默认8000端口</span>
<span class="token function">npm</span> start
<span class="token comment"># 指定8001端口</span>
<span class="token function">npm</span> start -- --port<span class="token operator">=</span><span class="token number">8001</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>pandoc</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># md to html. 注意需要设置 --slide-level=2 参数. 一级标题设置horizontal大类, 二级标题内容为vertical子类. </span>
pandoc id-token-in-wf.md -o id-token-in-wf.html -t revealjs -s -V <span class="token assign-left variable">theme</span><span class="token operator">=</span>white --slide-level<span class="token operator">=</span><span class="token number">2</span>
<span class="token comment"># 所有revealjs的参数, 都可以通过 -V xxx=xxx 来设置</span>
pandoc id-token-in-wf.md -o id-token-in-wf.html -t revealjs -s -V <span class="token assign-left variable">theme</span><span class="token operator">=</span>white -V <span class="token assign-left variable">center</span><span class="token operator">=</span>false -V <span class="token assign-left variable">controlsTutorial</span><span class="token operator">=</span>false -V <span class="token assign-left variable">slideNumber</span><span class="token operator">=</span>true --slide-level<span class="token operator">=</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul>
<li><code>o</code> 进入缩略图模式.</li>
<li><code>b</code> 屏蔽当前PPT</li>
<li><code>f</code> 进入全屏模式</li>
<li><code>ctrl+shift+f</code>: 全局搜索</li>
</ul>
<h1 id="showcase"><a href="#showcase" class="headerlink" title="showcase"></a>showcase</h1><h2 id="self-explained"><a href="#self-explained" class="headerlink" title="self-explained"></a>self-explained</h2><p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202303052309110.png"></p>
<h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><h2 id="样式优化"><a href="#样式优化" class="headerlink" title="样式优化"></a>样式优化</h2><p>与JYY老师相比, 页面还是过于简陋</p>
<ul>
<li>Header: 类似markdown的分隔符</li>
<li>Image: 图片有些显示不全❗</li>
<li>Align: 字默认居中, 需要<font color='red'><strong>居左</strong></font></li>
<li>Syntax Highlighting: 现在<strong>太丑</strong></li>
<li>Citation&#x2F;Quote: 也<strong>太丑</strong></li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>工程提效工具</category>
      </categories>
      <tags>
        <tag>tools</tag>
        <tag>ppt</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>常用软件工程作图工具汇总</title>
    <url>//2023-04-10-software-diagrams-summary/</url>
    <content><![CDATA[<h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>作为程序员, 除了日常敲代码外, 我们通常也要花很多时间在作图上.</p>
<ul>
<li>汇报或者设计文档中, 一图胜千言.</li>
<li>但不想花过多时间在框框的对齐, 颜色的挑选, 样式的调整, 作图工具的选择上.</li>
</ul>
<p>因此本文系统总结下自己用的工具与最佳实践.希望可以<code>make our hard life a little easier</code>. </p>
<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><ul>
<li>对内&#x2F;非正式:<ul>
<li>详细&#x2F;概要设计文档</li>
<li>代码逻辑&#x2F;架构梳理</li>
<li>个人数据分析</li>
</ul>
</li>
<li>对内&#x2F;外, 半正式:<ul>
<li>技术文章&#x2F;Doc&#x2F;博客</li>
</ul>
</li>
<li>对外&#x2F;正式:<ul>
<li>向上总结汇报</li>
<li>项目KO&#x2F;汇报</li>
</ul>
</li>
</ul>
<h2 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h2><ul>
<li>优先: code化(diagrams-as-code), mermaid<ul>
<li>方便git版本管理</li>
</ul>
</li>
<li>其次: draw.io &gt; yuque 导出图片类型<ul>
<li>png &gt; svg &gt; jpeg</li>
</ul>
</li>
<li>最终: 美学上要有追求, 如色调风格统一<ul>
<li>如<a href="https://cn.dubbo.apache.org/zh-cn/">Dubbo</a>使用蓝紫过渡色调</li>
</ul>
</li>
</ul>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202304102223182.png"></p>
<h2 id="工具比较"><a href="#工具比较" class="headerlink" title="工具比较"></a>工具比较</h2><table>
<thead>
<tr>
<th>名称</th>
<th>Diagrams As Code</th>
<th>是否收费(by 20230314)</th>
<th>优势</th>
<th>缺点</th>
<th>推荐优先级</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://mermaid.js.org/intro/">mermaid</a></td>
<td>Y</td>
<td>N</td>
<td>DAS, 项目活跃, 审美在线</td>
<td>支持图类型少(有潜力)</td>
<td><strong>高</strong>: 设计文档优先</td>
</tr>
<tr>
<td><a href="https://app.diagrams.net/">draw.io</a></td>
<td>N</td>
<td>N</td>
<td>图类型全</td>
<td>非DAS, <font color='red'><strong>注意保留源文件</strong></font></td>
<td><strong>高</strong>: 设计文档优先</td>
</tr>
<tr>
<td><a href="https://aliyuque.antfin.com/dashboard">语雀画板</a></td>
<td>N</td>
<td>N</td>
<td>图类型全, 审美在线</td>
<td>非DAS; 模板样例较少</td>
<td><strong>高</strong>: 设计文档优先</td>
</tr>
<tr>
<td>PPT&#x2F;WPS</td>
<td>N</td>
<td>Y</td>
<td></td>
<td></td>
<td><strong>高</strong>: 汇报文档优先</td>
</tr>
<tr>
<td>xmind</td>
<td>N</td>
<td>Y</td>
<td>方便易用, 审美在线</td>
<td>适用范围窄: 只适合画思维导图</td>
<td>中</td>
</tr>
<tr>
<td><a href="https://ggplot2.tidyverse.org/">ggplot2</a></td>
<td>N</td>
<td>N</td>
<td></td>
<td>适用范围窄: 只适合数学统计类</td>
<td>统计类高优推荐</td>
</tr>
<tr>
<td><a href="https://www.rapidtables.com/tools/line-graph.html">Rapid Tables Line Graph Maker</a></td>
<td>N</td>
<td>N</td>
<td>坐标轴图可以用数字精确表示</td>
<td>适用范围窄: 只适用坐标轴图</td>
<td>数字坐标轴类高优</td>
</tr>
<tr>
<td><a href="">Aliyun ROS Visual Editor</a></td>
<td>Y</td>
<td>N</td>
<td>DAS</td>
<td>适用范围窄: 只适用云上部署图</td>
<td>云上部署类高优</td>
</tr>
<tr>
<td><del><a href="https://plantuml.com/zh/">plantml</a></del></td>
<td><del>Y</del></td>
<td><del>N</del></td>
<td><del>DAS, 图类型全</del></td>
<td><del>过于陈旧, 废弃不用.</del></td>
<td><del>废弃</del></td>
</tr>
<tr>
<td><del>gliffy</del></td>
<td>N</td>
<td>Y</td>
<td><del>轻量</del></td>
<td><del>废弃</del></td>
<td><del>废弃</del></td>
</tr>
<tr>
<td><del><a href="https://www.processon.com/">processon</a></del></td>
<td>N</td>
<td>Y</td>
<td><del>模板样例多</del></td>
<td></td>
<td><del>废弃</del></td>
</tr>
<tr>
<td><del>staruml</del></td>
<td>N</td>
<td>Y</td>
<td></td>
<td></td>
<td><del>废弃</del></td>
</tr>
</tbody></table>
<h1 id="架构图-architecture"><a href="#架构图-architecture" class="headerlink" title="架构图(architecture)"></a>架构图(architecture)</h1><ul>
<li>特点: 宏观的, 上层的</li>
<li>使用场景: 汇报PPT</li>
<li>面向对象: 老板, 外部</li>
</ul>
<h2 id="Landscape-Eco"><a href="#Landscape-Eco" class="headerlink" title="Landscape(Eco)"></a>Landscape(Eco)</h2><ul>
<li>场景: 为了说明某个系统的关联生态</li>
<li>工具: draw.io</li>
<li>Tips: 尽量使用Logo + 不规则形状 + 大箭头</li>
<li>样例:<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202304102222693.png" alt="sentinel-opensource-eco-landscape-en"></li>
</ul>
<h2 id="业务架构图-豆腐块"><a href="#业务架构图-豆腐块" class="headerlink" title="业务架构图(豆腐块)"></a>业务架构图(豆腐块)</h2><ul>
<li>场景: 为了说明某个系统业务架构</li>
<li>工具: draw.io &gt; 语雀画板</li>
<li>Tips: 同色, 分层</li>
<li>样例:</li>
</ul>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202304102227065.png" alt="yuque_diagram-biz-arch"></p>
<h2 id="技术架构图"><a href="#技术架构图" class="headerlink" title="技术架构图"></a>技术架构图</h2><h2 id="云上部署图-Cloud-Infra"><a href="#云上部署图-Cloud-Infra" class="headerlink" title="云上部署图(Cloud Infra)"></a>云上部署图(Cloud Infra)</h2><ul>
<li>场景: 为了说明某个系统的部署架构</li>
<li>工具: draw.io&gt; <a href="https://rosnext.console.aliyun.com/designer">rosdesigner</a> </li>
<li>Tips: <a href="https://rosnext.console.aliyun.com/designer">rosdesigner</a> 可以直接可视化编辑, 也可以基于已有实例生成拓扑. 缺点是不太美观.</li>
<li>样例:</li>
</ul>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202304102229011.png"></p>
<h2 id="逻辑示意图-重要"><a href="#逻辑示意图-重要" class="headerlink" title="逻辑示意图(重要)"></a>逻辑示意图(重要)</h2><ul>
<li>场景: 为了说明某个工具&#x2F;流程work的机制, 可用于汇报, 也可用于技术文章. 属于最灵活的一类.</li>
<li>工具: 语雀画板 &gt; draw.io &gt;&gt; mermaid(可用但不灵活, 不美观)</li>
<li>样例:</li>
</ul>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202304102341355.png"></p>
<h2 id="坐标轴图-axis"><a href="#坐标轴图-axis" class="headerlink" title="坐标轴图(axis)"></a>坐标轴图(axis)</h2><ul>
<li>场景: PPT汇报里, 属于”逻辑示意图”的子类.</li>
<li>工具: <a href="https://www.rapidtables.com/tools/line-graph.html">Line graph maker</a> &gt;&gt; draw.io &gt; 语雀画板. 暂时没有数字描述的坐标图工具.</li>
<li>样例:</li>
</ul>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202304110029478.png"><br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202304102239302.png" alt="draw-axis"></p>
<h2 id="时间轴图-timeline"><a href="#时间轴图-timeline" class="headerlink" title="时间轴图(timeline)"></a>时间轴图(timeline)</h2><ul>
<li>场景: PPT汇报里, 展示项目整体milestone</li>
<li>工具: 语雀画板(实际使用脑图实现) &gt; xmind &gt; mermaid(版本需要升级, 且不太美观)</li>
<li>sample:</li>
</ul>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202304102242364.png" alt="yuque-timeline"></p>
<pre class="mermaid">timeline
    title History of Social Media Platform
    2002 : LinkedIn
    2004 : Facebook
         : Google
    2005 : Youtube
    2006 : Twitter</pre>

<h1 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h1><ul>
<li>特点: 微观的, 底层的</li>
<li>使用场景: 软件设计文档</li>
<li>面向对象: 开发人员, 内部人员</li>
</ul>
<h2 id="状态图-State-Diagram"><a href="#状态图-State-Diagram" class="headerlink" title="状态图(State Diagram)"></a>状态图(State Diagram)</h2><ul>
<li>场景: 描述某个状态机. 例如Java线程, NC状态, VM状态等. <strong>不适合汇报</strong></li>
<li>工具: mermaid(不太美观) &gt; 语雀画板 &gt; draw.io</li>
<li>Sample:</li>
</ul>
<pre class="mermaid">stateDiagram-v2
      [*] --> Init
      Init --> Processing: process
      Processing --> Success
      Processing --> Failed
            Failed --> Init: reinit
            Success --> Init: reinit
            Processing --> Init: reinit
      Success --> [*]
      Failed --> [*]</pre>


<h2 id="时序图-Sequence-Diagram"><a href="#时序图-Sequence-Diagram" class="headerlink" title="时序图(Sequence Diagram)"></a>时序图(Sequence Diagram)</h2><ul>
<li>场景: 多个角色&#x2F;系统间接口交互. 与泳道图相比, 更细粒度. <strong>适合代码分析, 不适合汇报</strong></li>
<li>工具: mermaid</li>
<li>Sample:</li>
</ul>
<pre class="mermaid">sequenceDiagram
      participant Alice
      participant John
      participant Tom
      Alice->>+John: Hello John, how are you?
      John->>+Tom: Hello Tom
      Tom-->>-John: Yes
      John-->>-Alice: Great!</pre>


<h2 id="泳道图-BPM"><a href="#泳道图-BPM" class="headerlink" title="泳道图(BPM)"></a>泳道图(BPM)</h2><ul>
<li>场景: 多个角色&#x2F;系统间交互, 更多地面向功能. 与时序图相比, 更粗粒度. <strong>适合汇报</strong></li>
<li>工具: draw.io</li>
<li>Tips: 增加横向容器, 填充颜色, 线段交叉用arch</li>
<li>Sample:</li>
</ul>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202304102245036.png"></p>
<h2 id="甘特图-Gantt-Chart"><a href="#甘特图-Gantt-Chart" class="headerlink" title="甘特图(Gantt Chart)"></a>甘特图(Gantt Chart)</h2><ul>
<li>场景: 方便管理项目规划, 跟踪进展</li>
<li>工具: mermaid &gt;&gt; 语雀画板 &gt; draw.io</li>
<li>Tips: 横向section</li>
<li>Sample:</li>
</ul>
<pre class="mermaid">gantt
    title 灰度计划
    dateFormat  YYYYMMDD
    section 测试环境验证
    Alpha策略验证        :a1, 20230302, 20230310
        Beta联调验证 		:20230303, 20230312
    section 海外地域灰度
    澳洲      :a2, 20230310  , 14d
    德国      :a3, 20230313 ,10d
        section 国内地域灰度
        杭州			:a4, 20230316, 15d
        深圳			:a5, 20230316, 15d
        北京			:a6, 20230320, 15d
        上海			:a7, 20230320, 15d
        青岛			:a7, 20230320, 15d
        香港			:a8, 20230322, 15d
        张北			:a9, 20230322, 15d
        美西			:a10, 20230322, 15d</pre>

<h2 id="ER图"><a href="#ER图" class="headerlink" title="ER图"></a>ER图</h2><ul>
<li>场景: 技术设计文档中使用, 不适合汇报</li>
<li>工具: mermaid</li>
<li>Sample:</li>
</ul>
<pre class="mermaid">erDiagram
    user_profile_define ||--o{ user_profile : defines
        user_profile_define {
            string profile_type
            string profile_attr
        }
        user_profile {
            long user_profile_id
            long uid
            string location_type
        }
    schedule_strategy ||--|{ schedule_strategy_binding : bind
    schedule_strategy_binding }|..|{ user_profile : bind
        schedule_strategy {
            long strategy_id
            string strict_expression
        }
        schedule_strategy_binding {
            string strategy_name
            string user_profile_expression
        }</pre>


<h2 id="部署图-Deployment-Diagram"><a href="#部署图-Deployment-Diagram" class="headerlink" title="部署图(Deployment Diagram)"></a>部署图(Deployment Diagram)</h2><ul>
<li>场景: 方便</li>
<li>工具:</li>
<li>Sample:</li>
</ul>
<h1 id="统计图"><a href="#统计图" class="headerlink" title="统计图"></a>统计图</h1><ul>
<li>特点: 面向数学统计类</li>
<li>使用场景: 个人分析, 汇报PPT</li>
<li>面向对象: 内部, 外部均可</li>
<li>工具: 推荐使用ggplot</li>
</ul>
<h2 id="饼图-Pie-Chart"><a href="#饼图-Pie-Chart" class="headerlink" title="饼图(Pie Chart)"></a>饼图(Pie Chart)</h2><ul>
<li>工具: mermaid, ggplot2</li>
<li>使用场景: 研究报告, 汇报PPT</li>
<li>面向对象: 外部</li>
</ul>
<pre class="mermaid">pie title Pets adopted by volunteers
    "Dogs" : 386
    "Cats" : 85
    "Rats" : 15</pre>


<h2 id="散点图-带拟合"><a href="#散点图-带拟合" class="headerlink" title="散点图(带拟合)"></a>散点图(带拟合)</h2><ul>
<li>工具: ggplot2</li>
<li>使用场景: 研究报告, 汇报PPT</li>
<li>面向对象: 内&#x2F;外部</li>
</ul>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202304102345217.png"></p>
<h2 id="趋势图"><a href="#趋势图" class="headerlink" title="趋势图"></a>趋势图</h2><ul>
<li>工具: ggplot2</li>
<li>使用场景: 研究报告, 汇报PPT</li>
<li>Tips: 拟合</li>
<li>面向对象: 内&#x2F;外部</li>
</ul>
<h2 id="双向柱形图"><a href="#双向柱形图" class="headerlink" title="双向柱形图"></a>双向柱形图</h2><ul>
<li>工具: <a href="https://zhuanlan.zhihu.com/p/445273345">ggplot2</a> &gt;  <a href="https://www.bioladder.cn/web/#/pro/index">bioladder</a> <strong>可以在线生成, 紧急使用非常方便</strong></li>
<li>使用场景: 研究报告, 汇报PPT</li>
<li>面向对象: 内&#x2F;外部</li>
</ul>
<p><img data-src="https://www.jingege.wang/wp-content/uploads/2022/03/image-5.png"></p>
<h2 id="统计类其他图"><a href="#统计类其他图" class="headerlink" title="统计类其他图"></a>统计类其他图</h2><div class="note info"><p>当想不到该用哪种图来DataViz时, 可以从<a href="https://antv-2018.alipay.com/zh-cn/vis/chart/index.html">AntV</a>里按照分类进行选取 </p>
</div>

<ul>
<li>双轴图</li>
<li>热力图</li>
</ul>
<h1 id="其他图"><a href="#其他图" class="headerlink" title="其他图"></a>其他图</h1><h2 id="脑图"><a href="#脑图" class="headerlink" title="脑图"></a>脑图</h2><ul>
<li>场景: 业务规划,</li>
<li>工具: yuque &gt; xmind &gt; mermaid(太丑, 且需要高版本)</li>
<li>Sample:<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202304102310399.png" alt="yuque_diagram-xmind2"></li>
</ul>
<h2 id="ASCII图"><a href="#ASCII图" class="headerlink" title="ASCII图"></a>ASCII图</h2><ul>
<li>场景: CLI&#x2F;DocFile里无法显示图片, 可以用ASCII图</li>
<li>工具: <a href="https://asciiflow.cn/">asciiflow</a> (缺点是: 增加文本, 移动等操作不太灵活)</li>
<li>Sample:</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">     +-------error---------+
     |                     |
+----v----+         +------+---+-+         +----------+
|         |         |          | |         |          |
|  init   +---------&gt; processing +-success-&gt; finished |
|         |         |          | |         |          |
+----^----+         +----------+-+         +-----+----+
     |                                           |
     |                                           |
     |                                           |
     |                                           |
     +-------------------retry-------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h1><h2 id="三级内容优化"><a href="#三级内容优化" class="headerlink" title="三级内容优化"></a>三级内容优化</h2><ul>
<li>分辨率优化: PNG缩放400%, 提升分辨率</li>
<li>工具熟练: 善用对齐</li>
</ul>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202304102316078.png"></p>
<h2 id="豆腐块配色优化"><a href="#豆腐块配色优化" class="headerlink" title="豆腐块配色优化"></a>豆腐块配色优化</h2><ul>
<li>配色从 <a href="https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3"><del>colorbrewer2</del></a> <a href="https://www.colorgg.com/66cc66">ColorGG 颜色搭配</a>中选择</li>
<li>大区域与小区域同色系, 不同深度</li>
</ul>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202304102330899.png"></p>
<h2 id="配色-amp-字体-Ubuntu风格-cont’d"><a href="#配色-amp-字体-Ubuntu风格-cont’d" class="headerlink" title="配色&amp;字体-Ubuntu风格(cont’d)"></a>配色&amp;字体-Ubuntu风格(cont’d)</h2><ul>
<li>配色: 不能用白底, 黑底(0x333333) + 绿字(0x33FF33) + 亮海蓝(0x2023A6) + 靛蓝(0x115354) + (0x481036)</li>
<li>字体: Comic Sans MS</li>
</ul>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202304102331383.png"></p>
<h2 id="配色-amp-字体-SegmentFault风格"><a href="#配色-amp-字体-SegmentFault风格" class="headerlink" title="配色&amp;字体-SegmentFault风格"></a>配色&amp;字体-SegmentFault风格</h2><ul>
<li>配色: 白烟色(0xF0F0F0) + 铬绿(0x188D5D) + 薄荷绿(0x199562)  + 暗岩蓝(0xA680B8)</li>
<li>字体: Verdana字体<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202304102331102.png"></li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>best-practice</tag>
        <tag>software-engineering</tag>
        <tag>soft-skills</tag>
        <tag>diagrams</tag>
      </tags>
  </entry>
  <entry>
    <title>个人书籍管理工作流总结</title>
    <url>//2023-05-09-ebook-manage/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>个人比较喜欢看各种书(杂书居多, 😄), 手头的电子设备也巨多(数了下, 居然有9个之多🤔). 经常发现想要看某本书, 但这本书却在另外一个设备上, 没有同步过来.<br>而那个设备却不在手头, 如同尿急的人找不到尿壶, 着实令人沮丧😭.<br>因此通过本篇总结, 将书本的管理进行系统的梳理, 形成一个惯例(convention), 牢牢遵循, 以解决上边的问题. </p>
<div class="note warning"><p>整体策略就是以坚果云为核心, 以zlib为主要的下载源, 以epub和pdf为主要的格式, 统一进行管理. </p>
</div>

<h1 id="小说类管理方式"><a href="#小说类管理方式" class="headerlink" title="小说类管理方式"></a>小说类管理方式</h1><ul>
<li>特点: 非技术类或者半技术类; 无需记录太多笔记; 基本无需进行实操; 无需在工作电脑中查看.</li>
<li>限制: <strong>必须使用epub格式.</strong> mobi格式只能在kindle中看, 在mac上, ipad上, 手机上, 都无法解析;</li>
<li>管理流程如下:<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202305112245705.png"></li>
</ul>
<h1 id="技术类管理方式"><a href="#技术类管理方式" class="headerlink" title="技术类管理方式"></a>技术类管理方式</h1><ul>
<li>特点: 技术类; 需要记录很多笔记; 常常需要实操; 需要在工作电脑中查看.</li>
<li>限制: 通常都是pdf格式. 但由于工作电脑无法安装坚果云, 因此书籍只能通过钉钉传输, 且只能单向传输. </li>
<li>管理流程如下:<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202305100008704.png"></li>
</ul>
<h1 id="后续事项"><a href="#后续事项" class="headerlink" title="后续事项"></a>后续事项</h1><ol>
<li>笔记同步方案: 当前只梳理了如何把书籍同步到各个设备, 但实际上各个设备上的也记录了诸多笔记, 这些笔记如何同步管理也是令人头疼. 初步想法是通过<a href="https://www.notion.so/">notion</a>来搞, 把书单也一起维护起来, 但也是个不小的工程.</li>
<li><code>send to kindle</code>下线风险: 虽然可以通过邮件<code>send to kindle</code>, 但**<a href="https://bookfere.com/post/985.html">2024 年 6 月 30 日之后，用户将无法使用“发送至 Kindle”功能，也就是无法再通过邮箱等方式将电子书推送到 Kindle。</a>** 还是要想好迁移方案.<br>总之, 先这样吧, 一个问题一个问题来解决.</li>
<li>文件格式问题: 很多半技术类的书籍, 都是pdf格式, 压根没有epub. 但pdf在手机&amp;kindle上查看简直是灾难. 没想好咋解决.</li>
</ol>
<h1 id="其他备注"><a href="#其他备注" class="headerlink" title="其他备注"></a>其他备注</h1><ul>
<li><a href="https://z-lib.is/">zlib</a> 没法用了(by 2023年05月11日), 用 <a href="https://tool.yibook.org/">yibook</a> 来替代吧, 可以通过百度网盘来传输, 速度嗖嗖地.</li>
<li>zlib的另外替代: <a href="https://bookfere.com/ebook#ebook_1">Kindle 图书资源</a></li>
<li>kindle邮箱备忘:<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">KindleOasis1: davyjones2010_0312@kindle.cn
KindleOasis2: davyjones2010_0311@kindle.cn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>books</tag>
        <tag>best-practice</tag>
        <tag>soft-skills</tag>
      </tags>
  </entry>
  <entry>
    <title>关于&quot;专业&quot;与&quot;靠谱&quot;的几个案例与思考</title>
    <url>//2023-05-11-how-to-be-professional/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>常常在工作中会遇到一些不靠谱的合作伙伴, 会怒其不争; 也经常会发现与反思自己很多地方做得不靠谱不专业, 会深刻反省.<br>因此积累了一些案例与心得, 本文尝试进行下分享与总结.<br>希望大家看完本文能有所收获.  </p>
<h1 id="几个案例"><a href="#几个案例" class="headerlink" title="几个案例"></a>几个案例</h1><h2 id="代码版本依赖问题"><a href="#代码版本依赖问题" class="headerlink" title="代码版本依赖问题"></a>代码版本依赖问题</h2><p>用户反馈<a href="">Jenkins插件</a>依赖的fastjson版本太低, 有安全漏洞, 希望我作为maintainer, 能进行升级修复.<br>遂让同学进行跟进修复: </p>
<ol>
<li>开发同学确认当前依赖的fastjson版本是低版本; 升级pom依赖, 发版本, 跟用户反馈升级完成.</li>
<li>用户升级版本后, 发现依赖的版本还是老的. </li>
<li>开发同学再次确认, 发现是由于隐式引来到另外一个插件, 另外插件中. 修复; 跟用户反馈可用</li>
<li>用户升级版本后, 发现依赖的版本还是老的.</li>
<li>开发同学再次确认, 发现是由于真正依赖的是Jenkins框架中的fastjson, 升级Jenkins框架, 修复, 跟用户反馈可用</li>
</ol>
<div class="note warning"><p>真的可用了么?<br>专业么?<br>靠谱么?</p>
</div>


<h2 id="资源预留问题"><a href="#资源预留问题" class="headerlink" title="资源预留问题"></a>资源预留问题</h2><p>用户使用预留资源失败: </p>
<ol>
<li>排查后发现是问题A(付费类型不匹配)导致, 修复问题A后跟用户反馈可用. </li>
<li>用户再次尝试, 发现还是不行, 排查后发现是还有问题B(预留资源尚未启用), 修复问题B后跟用户反馈可用.</li>
<li>用户再次确认, 发现还是不行, 排查后发现是还有问题C(用户Quota不足), 修复问题C后跟用户反馈可用.</li>
</ol>
<p>反复多轮下来, 用户几乎崩溃, 质疑我们的专业度.</p>
<div class="note warning"><p>一言九鼎: 说解决了, 那就是解决了, 就是能够满足需求的.</p>
</div>

<h2 id="数据线-amp-遥控器问题"><a href="#数据线-amp-遥控器问题" class="headerlink" title="数据线&amp;遥控器问题"></a>数据线&amp;遥控器问题</h2><p>想要买一根一拖三的USB数据线, 是否支持快充? 支持华为&#x2F;小米快充协议么? 最大支持多少瓦? USB2.0 or USB3.0? 最大传输速度是多少? 是否<br>发现卖家除了价格, 别的一问三不知.  </p>
<p>家里的机顶盒遥控器失灵了, 型号是 <code>烽火HG689-J</code> 想要买个替换的, 但不想买跟原来一样款式的, 原来的太难用了.</p>
<p>遂上淘宝根据型号搜索<code>可用且好用</code>的遥控器, 标题上都写的支持<code>烽火HG689-J</code>型号, 问了几个卖家进行确认: </p>
<ul>
<li>不知所云型: 理解不了用户的诉求. 反复给我强调: <code>亲, 您就买跟现在一样的遥控器就好了</code>. 问题是现在这个<code>不好用</code>, 我压根不想用. 开启复读机模式. </li>
<li>胡说八道型: 亲, 不通用呢.</li>
<li>一问三不知型: 亲, 您买回去试下吧.</li>
<li>装聋作哑型: 问了这个问题之后, 压根不理我.</li>
<li>靠谱型: 能用的, 可以的, 直接用. 直接泪目, 买买买!</li>
</ul>
<div class="note warning"><p>一言九鼎: 对自己负责的产品足够多的了解, 给用户有效的信息.</p>
</div>

<h2 id="咖啡机-amp-电脑电池问题"><a href="#咖啡机-amp-电脑电池问题" class="headerlink" title="咖啡机&amp;电脑电池问题"></a>咖啡机&amp;电脑电池问题</h2><ul>
<li>德龙的咖啡机, 用过一段时间后, 提示需要自洁&amp;清洗. 使用专业的清洗剂, 详细专业步骤的指导.</li>
<li>MacBookPro电池, 会检测循环次数与损耗度, 超过一定比例, 会提示用户进行更换. 可以很方便点击选择GeniusBar进行预约维修更换.</li>
</ul>
<div class="note warning"><ul>
<li>产品设计开发, 不是一锤子买卖, 需要考虑全生命周期. 售后同样很重要, 要做长久的生意.</li>
<li>牢骚太盛防肠断, 风物长宜放眼量</li>
</ul>
</div>


<h1 id="总结-专业与不专业的行为模式比较"><a href="#总结-专业与不专业的行为模式比较" class="headerlink" title="总结: 专业与不专业的行为模式比较"></a>总结: 专业与不专业的行为模式比较</h1><p>上边几个问题, 都透露出我们的不专业.<br>以<code>问题排查</code>为例进行下抽象: </p>
<h2 id="不专业的行为"><a href="#不专业的行为" class="headerlink" title="不专业的行为"></a>不专业的行为</h2><p>如下, 整体Developer与User有<code>2N+1</code>次交互: </p>
<ol>
<li>修复前: 打扰用户要求提供更多信息. </li>
<li>修复中: 涉及N轮与用户沟通确认重试等, 用户必然会失去耐心, 质疑我们的专业度.</li>
<li>修复后: 还要打扰用户, 咨询是否修复了问题; 比这个更差的是, 有些同学根本不会有这一步. <code>Fire and Forget</code> 啦.</li>
</ol>
<pre class="mermaid">sequenceDiagram
    par 问题第一轮修复
    User->>Developer: 反馈问题
    Developer-->>User: 要求提供更多信息
    User->>Developer: errorInfo
    Developer->>System: 确认问题, 分析原因, 修复问题 
    Developer-->>User: 反馈问题已修复
    User->>System: 用户确认验证
    end
    
    par 问题第二轮修复
    User->>Developer: 问题仍存在
    Developer-->>User: 在我这儿是好好的呀? 要求提供更多信息
    User->>Developer: errorInfo
    Developer->>Developer: 确认问题, 分析原因, 修复问题
    Developer-->>User: 反馈问题已修复
    User->>System: 用户确认验证
    end
    
    par 问题第N轮修复
    User->>Developer: 问题仍存在
    Developer-->>User: 在我这儿是好好的呀? 要求提供更多信息
    User->>Developer: errorInfo
    Developer->>Developer: 确认问题, 分析原因, 修复问题
    Developer-->>User: 反馈问题已修复
    User->>System: 用户确认验证
    end
    
    Developer ->> User: 问题是否已经解决啦?
    User -->> Developer: 终于解决了, 但你们也太不专业, 太不靠谱了.</pre>

<h2 id="专业的行为"><a href="#专业的行为" class="headerlink" title="专业的行为"></a>专业的行为</h2><p>如下, 整体Developer与User只有<code>1</code>次交互: </p>
<ol>
<li>修复前: 根据现有信息去排查问题, 不打扰用户.</li>
<li>修复中: N轮反复修复, 都在研发内部闭环, 不打扰用户.</li>
<li>修复后: 研发自主去检查之后用户的请求, 自主确认问题修复情况, 不打扰用户.</li>
</ol>
<pre class="mermaid">sequenceDiagram
    User->>Developer: 反馈问题
    
    par 问题第一轮修复
    Developer->>System: 根据已有信息获取更多
    System-->>Developer: errorInfo
    Developer->>System: 确认问题, 分析原因, 修复问题
    Developer->>System: 模拟用户(exactly相同的路径与参数), 重现验证
    System-->>Developer: 问题仍存在
    end
    
    par 问题第二轮修复
    Developer->>System: 根据已有信息获取更多
    System-->>Developer: errorInfo
    Developer->>System: 确认问题, 分析原因, 修复问题
    Developer->>System: 模拟用户(exactly相同的路径与参数), 重现验证
    System-->>Developer: 问题仍存在
    end

    par 问题第N轮修复
    Developer->>System: 根据已有信息获取更多
    System-->>Developer: errorInfo
    Developer->>System: 确认问题, 分析原因, 修复问题
    Developer->>System: 模拟用户(exactly相同的路径与参数), 重现验证
    System-->>Developer: 问题已解决
    end
    
    Developer-->>User: 反馈问题已修复
    User->>System: 用户确认验证
    
    Developer->>System: 观察后续请求, 自主确认问题是否完成修复.</pre>

<h1 id="思考-如何变得专业"><a href="#思考-如何变得专业" class="headerlink" title="思考: 如何变得专业?"></a>思考: 如何变得专业?</h1><h2 id="如何做一个合格的Developer"><a href="#如何做一个合格的Developer" class="headerlink" title="如何做一个合格的Developer"></a>如何做一个合格的Developer</h2><p>目标: 做到<strong>一言九鼎</strong>(跟用户反馈解决&#x2F;完成, 那就需要保证用户视角下100%是可用了, 不瞎说, 不误导), 少打扰用户.<br>路径: 熟悉自己的产品.</p>
<h2 id="如何做一个合格的User"><a href="#如何做一个合格的User" class="headerlink" title="如何做一个合格的User"></a>如何做一个合格的User</h2><p>尽量提供足够多的信息, 例如traceId, 发生环境, 发生时间点, 是否必现, 出现路径是怎样的, 使用文本而非截图. </p>
<p>在系统不完善时, 需要合格的User. 但更重要的是<strong>Developer在设计系统时考虑周全</strong>, 把问题排查(售后)链路纳入考虑范围.<br>之前自己在作为User向中间件团队咨询&#x2F;反馈问题时, 发现很多同学戾气很重, 经常埋怨用户没有提供足够多的信息, 让他们不好排查.<br>有时候我们在吐槽用户给的信息不够多时, 是否可以思考下, 如何不苛求用户? </p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>个人容易忽略的事情: </p>
<ul>
<li>给别人发一个报表&#x2F;文档时, 是否把权限给他们打开了?</li>
</ul>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>“专业”, “靠谱” 是非常严肃的定义, 要达成不易, 都需要耗费大量的心力与脑力:  </p>
<ul>
<li>系统&#x2F;产品设计时的推演能力</li>
<li>问题排查时的分析能力</li>
<li>问题修复后反复确认, 长期跟进的能力</li>
</ul>
<p>希望大家都能做一个专业且靠谱的开发者! 共勉!</p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>best-practice</tag>
        <tag>soft-skills</tag>
      </tags>
  </entry>
  <entry>
    <title>draw.io使用技巧总结</title>
    <url>//2023-05-15-drawio-tips/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>自从上次发奋要好好学习做图, 做PPT, 数据可视化之后. 近两个月对draw.io进行了深度的使用.<br>学习到了很多技巧, 使用起来更加得心应手, 也逐渐开始享受画图的过程, 做到了<code>Happy diagramming!~</code><br>这里把使用的一些心得总结下来, 防止以后遗忘.</p>
<div class="note info"><p>draw.io博大精深, 本文只列出当前自己常用的, 后续逐步完善.</p>
</div>

<h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><ul>
<li><a href="https://www.drawio.com/doc/faq/shapes-delete-connections">删除 Shapes+Connections</a>: <code>ctrl/cmd + Delete</code></li>
<li>选择所有Edges: <code>cmd+shift+e</code></li>
<li>选择所有Shapes&#x2F;Vertices: <code>cmd+shift+i</code></li>
<li>Group: <code>cmd+g</code>; Ungroup: <code>cmd+shift+u</code></li>
<li>Bring to Front: <code>ctrl+shift+f</code>; Send to Back: <code>ctrl+shfit+b</code></li>
<li>CopySize: <code>option+shift+x</code>  pasteSize: <code>option+shift+v</code></li>
<li>Duplicate: <code>cmd+enter</code> or <code>cmd+d</code> –&gt; 比 cmd+c ++ cmd+v 好用多啦!</li>
<li>Reset view: <code>enter</code>  –&gt; 之前画布拖动太多, 导致图形丢失了. 还得拖动bar来找, 很麻烦, 用这个简直提效神器!</li>
<li>Lock Shape: <code>cmd+l</code> –&gt; 在多个图形overlap, 需要勾选其中某些的时候, 可以先把不希望选到的图形lock住</li>
<li>AutoReset Size: <code>cmd+shift+y</code> –&gt; 会把shape的size自动设置为刚好包下里边的Text</li>
</ul>
<h1 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h1><h2 id="LineJump"><a href="#LineJump" class="headerlink" title="LineJump"></a>LineJump</h2><div class="note info"><p>线段交叉时, 用<code>linejump</code>, 清晰易读</p>
</div>

<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202305152320352.png"></p>
<h2 id="WayPoint"><a href="#WayPoint" class="headerlink" title="WayPoint"></a>WayPoint</h2><div class="note info"><p>箭头分叉时, 用<code>waypoint</code></p>
</div>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202305152325340.png"></p>
<h2 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h2><div class="note info"><p>多个Shape组合时, 用<code>container</code></p>
</div>


<h2 id="Floating-amp-Fixed-connectors"><a href="#Floating-amp-Fixed-connectors" class="headerlink" title="Floating &amp; Fixed connectors"></a>Floating &amp; Fixed connectors</h2><p>参见: <a href="https://www.drawio.com/blog/connectors">Floating &amp; Fixed connectors</a><br><a href="https://www.youtube.com/watch?v=xM04I-WVXlE&amp;ab_channel=draw.io">https://www.youtube.com/watch?v=xM04I-WVXlE&amp;ab_channel=draw.io</a></p>
<ul>
<li>Floating connectors: 连接线前后用<code>o</code>标记, 默认的都是Floating connectors.</li>
<li>Fixed connectors: 连接线前后用<code>x</code>标记</li>
</ul>
<p><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202305162239974.png"></p>
<h2 id="调整单个对象的大小"><a href="#调整单个对象的大小" class="headerlink" title="调整单个对象的大小"></a>调整单个对象的大小</h2><div class="note warning"><p>调整大小时, 保持中心不动, 是非常重要的, 防止结构被破坏. </p>
</div>

<ul>
<li><p>Hold <code>CMD</code>, 然后拖动对象大小, 可以保持对象<strong>中心不动</strong>.<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202305182305893.gif"></p>
</li>
<li><p>Hode <code>CMD+Shift</code>, 然后拖动对象大小, 可以保持对象中心不动, 且对象比例等比缩放. –&gt; 非常好用!<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202305182306535.gif"></p>
</li>
<li><p>Copy&amp;Paste Size, 快捷键 copySize: <code>option+shift+x</code>; pasteSize: <code>option+shift+v</code><br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202305190001415.png"></p>
</li>
</ul>
<h2 id="同时选择多个对象"><a href="#同时选择多个对象" class="headerlink" title="同时选择多个对象"></a>同时选择多个对象</h2><ul>
<li><p>按住 <code>Option</code> 然后拖选, 只要触碰到的, 都会被选到(不用把整个对象都包含进去) –&gt; 解救人类!<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202305190008608.gif"></p>
</li>
<li><p>但貌似有的时候行为不一致, 按下<code>Option</code>然后拖选的行为是防止点选到外部的容器&#x2F;Shape</p>
</li>
</ul>
<h2 id="同时调整多个对象的大小"><a href="#同时调整多个对象的大小" class="headerlink" title="同时调整多个对象的大小"></a>同时调整多个对象的大小</h2><ol>
<li><p>使用分组<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202305172248220.gif"></p>
</li>
<li><p>多选, Arrange里调整<br><a href="https://webapps.stackexchange.com/questions/52230/scaling-a-group-of-shapes-in-diagramly">Scaling a group of shapes in Diagramly</a></p>
</li>
<li><p>使用容器<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202305172256303.gif"></p>
</li>
</ol>
<div class="note warning"><p>善用 <strong>分组</strong> 与 <strong>容器</strong></p>
</div>

<h2 id="移动对象"><a href="#移动对象" class="headerlink" title="移动对象"></a>移动对象</h2><ul>
<li>按住 <code>Shift+CMD</code> 移动, 把对象限制在水平&amp;垂直方向移动(强约束)</li>
<li>按住 <code>Shift</code> 移动, 可以将对象尽量在水平&#x2F;垂直方向移动(弱约束, 粘性)</li>
<li>防止移动的对象被放入到container里: 拖动对象, 然后按住option<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202308162219643.gif"></li>
</ul>
<h2 id="旋转Shape里的Text"><a href="#旋转Shape里的Text" class="headerlink" title="旋转Shape里的Text"></a>旋转Shape里的Text</h2><ul>
<li>经常会遇到子图形覆盖掉Parent的Text, 导致可读性很差. 此时可以旋转Parent的 Text 位置到左侧&#x2F;右侧, 如下样例:<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202308162232737.png"><br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202308162231340.gif"></li>
</ul>
<h2 id="先决定布局-再决定风格"><a href="#先决定布局-再决定风格" class="headerlink" title="先决定布局, 再决定风格"></a>先决定布局, 再决定风格</h2><p>先把布局决定好, 之后统一调整风格(颜色, 大小, 样式)会容易一些.</p>
<h1 id="风格"><a href="#风格" class="headerlink" title="风格"></a>风格</h1><h2 id="泳道图"><a href="#泳道图" class="headerlink" title="泳道图"></a>泳道图</h2><p>最好每个泳道设定背景色(LaneColor), 然后里边的各个Task背景白色, 能突出重点, 美观. 对比下: </p>
<ul>
<li><p>未设定Lane Color<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202305190018059.png"></p>
</li>
<li><p>设定了Lane Color<br><img data-src="https://davywalker-bucket.oss-cn-shanghai.aliyuncs.com/img/202305190017534.png"></p>
</li>
</ul>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h1><div class="note info"><p>draw.io<a href="https://drawio-app.com/blog/">官网文档</a>清晰易懂, 是个真正的好产品!</p>
</div>

<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>best-practice</tag>
        <tag>software-engineering</tag>
        <tag>soft-skills</tag>
        <tag>diagrams</tag>
      </tags>
  </entry>
  <entry>
    <title>K8s containerd 等研究</title>
    <url>//2023-05-24-k8s-container-components/</url>
    <content><![CDATA[<p>容器运行时: 运行和管理容器进程、镜像的工具</p>
<h2 id="低层运行时"><a href="#低层运行时" class="headerlink" title="低层运行时:"></a>低层运行时:</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul>
<li>负责与宿主机操作系统打交道，根据指定的容器镜像在宿主机上运行容器的进程，并对容器的整个生命周期进行管理。</li>
<li>而这个低层运行时，正是负责执行我们前面讲解过的设置容器 Namespace、Cgroups等基础操作的组件。</li>
</ul>
<h3 id="实现分类"><a href="#实现分类" class="headerlink" title="实现分类"></a>实现分类</h3><ul>
<li>runc: 传统的运行时，基于Linux Namespace和Cgroups技术实现，代表实现Docker. libcontainer(Docker公司) —开源–&gt; 改名为runc</li>
<li>runv: 基于虚拟机管理程序的运行时，通过虚拟化 guest kernel，将容器和主机隔离开来，使得其边界更加清晰，代表实现是Kata Container和Firecracker. 目前已经废弃, 推荐使用kata container. </li>
<li>runsc：runc + safety ，通过拦截应用程序的所有系统调用，提供安全隔离的轻量级容器运行时沙箱，代表实现是谷歌的gVisor</li>
</ul>
<h2 id="高层运行时"><a href="#高层运行时" class="headerlink" title="高层运行时:"></a>高层运行时:</h2><h3 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h3><p>负责镜像的管理、转化等工作, 为容器的运行做前提准备</p>
<h3 id="实现分类-1"><a href="#实现分类-1" class="headerlink" title="实现分类"></a>实现分类</h3><p>主流的高层运行时</p>
<ul>
<li>containerd</li>
<li>CRI-O</li>
</ul>
<p>高层运行时与低层运行时各司其职，容器运行时一般</p>
<ol>
<li>先由高层运行时将容器镜像下载下来，并解压转换为容器运行需要的操作系统文件</li>
<li>再由低层运行时启动和管理容器。<br><img data-src="https://pic3.zhimg.com/v2-388832b9ff6ded6f9e04e30c02078a72_r.jpg"></li>
</ol>
<h2 id="CRI"><a href="#CRI" class="headerlink" title="CRI"></a>CRI</h2><p>Kubernetes早期是利用Docker作为容器运行时管理工具, 后来增加了rkt等. 随着运行时种类的增加,<br>Kubernetes将对容器的操作抽象为一个接口，将接口作为kubelet与运行时工具之间的桥梁，kubelet通过发送接口请求对容器进行启动和管理，各个容器工具通过实现这个接口即可接入Kubernetes。<br>这个统一的容器操作接口，就是容器运行时接口(Container Runtime Interface, CRI)。<br><img data-src="https://pic4.zhimg.com/v2-e8c76976f12a9b6552381a2dd4402887_r.jpg"></p>
<ul>
<li>kublet: 接收拉起&#x2F;销毁容器的请求, 把请求通过grpc方式调用CRI接口, 请求路由到CRI shim上. (而不会直接调用docker的API)</li>
<li>CRI shim: 作为gRPC服务端来响应CRI请求，负责将CRI请求的内容转换为具体的容器运行时API，在kubelet和运行时之间充当翻译的角色</li>
<li>任何容器运行时如果想接入Kubernetes，都需要实现一个自己的CRI shim，来实现CRI接口规范。</li>
</ul>
<p>CRI接口, 包含如下2个服务: </p>
<ul>
<li><p>RuntimeService</p>
<ul>
<li>PodSandbox 的管理接口：<ul>
<li>CRI 设计的一个重要原则，就是确保这个接口本身，只关注容器，不关注 Pod。</li>
<li>PodSandbox 是对 Kubernete Pod 的抽象，用来给容器提供一个隔离的环境（比如挂载到相同的 CGroup 下面），并提供网络等共享的命名空间。PodSandbox 通常对应到一个 Pause 容器或者一台虚拟机；</li>
</ul>
</li>
<li>Container 的管理接口：在指定的 PodSandbox 中创建、启动、停止和删除容器；</li>
<li>Streaming API接口: 包括 Exec、Attach 和 PortForward 等三个和容器进行数据交互的接口，这三个接口返回的是运行时 Streaming Server 的 URL，而不是直接跟容器交互。kubelet 需要跟容器项目维护一个长连接来传输数据。这种 API，我们就称之为 Streaming API。</li>
<li>状态接口：包括查询 API 版本和查询运行时状态。</li>
</ul>
</li>
<li><p>ImageService</p>
<ul>
<li>查询镜像列表</li>
<li>拉去镜像到本地</li>
<li>查询镜像状态</li>
<li>删除本地镜像</li>
<li>查询镜像占用空间</li>
</ul>
</li>
</ul>
<h1 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h1><p>一直以来, 混淆了两个概念, “容器编排” 与 “集群管理”. 重新回顾”深入剖析Kubernetes”这本书, 才有了更深刻的理解. </p>
<ul>
<li>容器编排: 面向的对象是多个容器&#x2F;应用之间的依赖关系. 典型实现是Docker公司推出的Compose.</li>
<li>集群管理: 面向的对象是底层的Host, 典型实现是Docker公司推出的Swarm.</li>
</ul>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h1><ul>
<li><a href="https://zhuanlan.zhihu.com/p/577765547">容器运行时</a></li>
<li><a href="https://www.alibabacloud.com/blog/cri-and-shimv2-a-new-idea-for-kubernetes-integrating-container-runtime_594783">CRI and ShimV2: A New Idea for Kubernetes Integrating Container Runtime</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/438351320">CRI shim：kubelet怎么与runtime交互（一）</a></li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
  </entry>
  <entry>
    <title>Spring SPEL语法常用样例</title>
    <url>//2023-06-28-spring-spel-sample/</url>
    <content><![CDATA[<p>工作中使用了SpringCache, 因此需要经常写cacheKey的表达式, 而这些表达式就是<a href="https://docs.spring.io/spring-framework/docs/3.0.x/reference/expressions.html">Spring Expression Language (SpEL)</a><br>因此在这里分析了几种常见的SPEL使用方式, 废话不多说, 详细代码测试用例参见: <a href="https://github.com/DavyJones2010/test-core/blob/master/src/test/java/edu/xmu/test/framework/spring/spel/SpelTest.java">SpelTest.java · GitHub</a></p>
<p>上述样例, 只是满足了日常功能层面的需求, 记录下来防止遗忘.<br>具体深入的性能以及能力的边界, 暂时不做讨论.</p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>java</tag>
        <tag>spring-cache</tag>
        <tag>spring</tag>
        <tag>spring-spel</tag>
      </tags>
  </entry>
</search>
